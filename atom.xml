<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-10-03T20:15:22+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top 5 talks I attended at JavaOne 2016 (Part 2)]]></title>
    <link href="http://philippe.bourgau.net/top-5-talks-i-attended-at-javaone-2016-part-2/"/>
    <updated>2016-09-28T20:02:00+00:00</updated>
    <id>http://philippe.bourgau.net/top-5-talks-i-attended-at-javaone-2016-part-2</id>
    <category term="java" /><category term="programming" />
    <content type="html"><![CDATA[<p>This is my second post relating the talks I attended at JavaOne 2016. <a href="http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1/">Here</a> is the beginning of the story. Here we go.</p>

<h2>Euphoria Despite the Despair</h2>

<p><a href="https://twitter.com/holly_cummins">Holly Cummins</a></p>

<p>Our jobs aren&rsquo;t always fun &hellip; and that&rsquo;s in fact an issue ! Studies show that people who have fun at work are 31% more productive ! The talk was organized in 3 parts :</p>

<ol>
<li>What is fun ?</li>
<li>How to remove the parts that are not fun ?</li>
<li>How to add even more fun ?</li>
</ol>


<p>She defined what she called the funtinuum, which is that fun is a function of engagement and interaction. Basically, you won&rsquo;t have fun if you are doing nothing, or if no one cares about your work. That aligns well with <a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1475123675&amp;sr=8-1&amp;keywords=daniel+pink+drive">Daniel Pink&rsquo;s drivers of motivation</a> : Autonomy, Mastery and Purpose.</p>

<p>If something is not fun, it&rsquo;s because it does not require engagement or interaction. It&rsquo;s either boring or no one cares, or both. If that&rsquo;s the case, it&rsquo;s probably some kind of waste in some sense &hellip; Removing un-fun activities would mean removing waste. It&rsquo;s interesting to note how this sounds like <a href="https://en.wikipedia.org/wiki/Muda_(Japanese_term">lean Muda</a>) ! She gave examples such as :</p>

<ul>
<li>automate stuff</li>
<li>pair programming transforms criticism into collaboration (bonus: it gives excuse to skip meetings)</li>
<li>go <a href="https://twitter.com/search?q=%23NoEstimates">#NoEstimates</a> because estimating is painful and useless</li>
<li>YAGNI defers useless things until they really add value</li>
<li>Organize to skip meetings and other boring stuff</li>
<li>&hellip;</li>
</ul>


<p>Last step is to add fun to the workplace. She warned that adding fun before removing the un-fun stuff would feel fake and would make things worse &hellip;</p>

<iframe src="http://philippe.bourgau.net//www.slideshare.net/slideshow/embed_code/key/DMpHQcMebTVGsz?startSlide=148" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>To add fun, she suggested using things like :</p>

<ul>
<li>gamification (there was actually another great talk about gamification)</li>
<li>build a hacking contest instead of a security training</li>
<li>Install a <a href="https://sirenofshame.com/">Siren of Shame</a> for whoever breaks the build</li>
<li>&hellip;</li>
</ul>


<p>Here are <a href="http://www.slideshare.net/HollyCummins/software-developers-guide-to-fun-in-the-workplace-euphoria-despite-the-despair">the slides</a></p>

<h2>Java 9: The Quest for Very Large Heaps</h2>

<p>Bernard Traversat, Antoine Chambille</p>

<p><a href="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attended-at-javaone-2016-part-2/java-9-gc.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attended-at-javaone-2016-part-2/java-9-gc-small.jpg" title="Slide of the memory regions in G1" ></a></p>

<p>This talk might not be of interest for all, but it is for us <a href="http://murex.com">at work</a>. It went through the improvement to come to Java 9&rsquo;s G1 garbage collector. To summarize, to scale to very large heaps, it will split the memory into regions. Objects should be allocated on different regions depending on their specificities, which might help to build NUMA aware applications. Having the heap split up in smaller chunks enables the GC to run in parallel, which can speed up the old generation GC by up to 50 times !</p>

<p><a href="http://www.java9countdown.xyz/">Java 9 is scheduled for march 2017</a></p>

<h2>Agility and Robustness: Clojure + spec</h2>

<p><a href="https://twitter.com/stuarthalloway">Stuart Halloway</a></p>

<p>I haven&rsquo;t been touching Clojure for a while but I gave the language a try a few years ago. I had heard about Clojure spec but hadn&rsquo;t taken the time to look at it in details. As I understood it all, Spec is like some sort of <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design by Contract</a> on steroïds ! Clojure is not statically typed, but you can now assign spec metadata to values. A spec is roughly a predicate. By defining specs for the inputs and outputs of functions, it is possible to verify at runtime that the function is behaving correctly.</p>

<p>As did Bertrand Meyer in the classic <a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_1?ie=UTF8&amp;qid=1475211259&amp;sr=8-1&amp;keywords=object+oriented+software+construction+meyer">OOSC2</a>, who advised to use contracts during development only, Stuart explained that we should care about developer vs production time instead of compile vs runtime. From this point of view, it is not of great importance whether the compiler or the continuously running test suite finds an issue.</p>

<p>But specs are a lot more than predicates ! They can be used to :</p>

<ul>
<li>enable assertions at runtime</li>
<li>generate documentation</li>
<li>generate test cases</li>
<li>generate precise call logs</li>
<li>get precise error messages</li>
<li>explore a function and see how it can be called</li>
</ul>


<p>He went on to compare the virtues of Clojure spec with static typing (à la Java) and example based testing :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attended-at-javaone-2016-part-2/clojure-spec.jpg" title="Slide comparing Clojure spec with example based testing and static typing" ></p>

<p>Although I don&rsquo;t believe that generative testing can ever replace example based testing altogether, it certainly can help.</p>

<p>All in all, the presentation was insanely great and engaging. It made me seriously think of going into Clojure programming again !</p>

<p>Here are <a href="https://t.co/0FBl2l473N">the slides</a> and the <a href="https://www.youtube.com/watch?v=VNTQ-M_uSo8">the same talk at Strangeloop</a></p>

<h2>Conclusion</h2>

<p>Overall, JavaOne was great ! If I had the opportunity, I&rsquo;d go back every year ! There was a lot of other great talks I did not write about in these 2 posts, for example :</p>

<ul>
<li>Development Horror Stories was a lot of fun, especially the winning story !</li>
<li>Hacking Hiring was full of good advises</li>
<li>Managing Open Source Contributions in Large Organizations was full of good ideas</li>
<li>Increasing Code Quality with Gamification was very inspiring</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 5 talks I attended at JavaOne 2016 (Part 1)]]></title>
    <link href="http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1/"/>
    <updated>2016-09-28T19:20:00+00:00</updated>
    <id>http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1</id>
    <category term="java" /><category term="programming" />
    <content type="html"><![CDATA[<p>With a few other colleagues, I had the chance to be sent to San Francisco last week to attend the <a href="https://www.oracle.com/javaone/index.html">JavaOne 2016</a> conferences by my <a href="http://www.murex.com">company</a>.</p>

<p><a href="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/exhibition-hall.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/exhibition-hall-small.jpg" title="Photo of the JavaOne exhibition hall" ></a></p>

<p>Here is super short list of the conferences I attended which I found really interesting</p>

<h2>Preventing errors before they happen</h2>

<p><a href="https://ece.uwaterloo.ca/~wdietl/">Werner Dietl</a> &amp; <a href="https://homes.cs.washington.edu/~mernst/">Michael Ernst</a></p>

<p>Since Java 6, it is possible to pass custom annotation processors to javac. Since Java 8, it is possible to add annotations to types. The guys behind the <a href="http://checkerframework.org">Checker Framework</a> used this to create custom pluggable type systems for your Java programs. These type systems enforce properties on your program, and will emit warnings or errors at compile time otherwise.</p>

<p>Here are a few example :</p>

<ul>
<li>declare <code>@Immutable MyObject myObject</code> to make sure that myObject won&rsquo;t be muted</li>
<li>declare <code>@NonNull MyObject myObject</code> to make sure that myObject is never null</li>
</ul>


<p><a href="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/type-systems.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/type-systems-small.jpg" title="Architecture of the type checker" ></a></p>

<p>Under the hood, the compiler behaves as if <code>@Immutable MyObject</code> and <code>MyObject</code> where completely separate types, and it knows and tracks specific ways of converting between the two. The framework provides a simple API to define your own type systems. They did a live demo showing how to quickly define things like <code>@Regex String</code>, <code>@Encrypted String</code> or <code>@Untainted String</code> (which forbids user input strings to avoid SQL injections).</p>

<p>The talk was really interesting, the framework seems lightweight and to integrate well with the typical tool stack. I definitely will give it a try the next time I have a bit of slack time.</p>

<p>Here are <a href="http://types.cs.washington.edu/checker-framework/2016-javaone/2016-09-19%20CF%20@%20JavaOne.pdf">the slides</a> and a <a href="https://www.youtube.com/watch?v=kb6nz85jbuQ">previous session of the presentation</a></p>

<h2>Keeping Your CI/CD Pipeline as Fast as It Needs to Be</h2>

<p><a href="https://twitter.com/abrahammarin?lang=fr">Abraham Marin-Perez</a></p>

<p>Continuous Delivery and Microservices are what you need to do, aren&rsquo;t they ? Well, when actually trying to setup a CI / CD pipeline for all your code, things quickly get complicated pretty fast ! The speaker presented how to deal with this complexity by using metrics from your VCS and build servers to draw an annotated graph of your build pipeline.</p>

<p><a href="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/build-pipeline.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/build-pipeline-small.jpg" title="Graph of the build pipeline" ></a></p>

<ul>
<li>He used the build time to set the size of every node : the longer, the larger</li>
<li>The color for the change rate : the more often it was built the warmer the color</li>
</ul>


<p>It was then possible to determine other metrics such as :</p>

<ul>
<li>the impact time of every node : build time + build time of all the dependencies</li>
<li>the weighted impact time : impact time * change rate</li>
<li>the overall average impact time : sum of all the weighted impact times</li>
<li>the overall max impact time : max of all the impact times</li>
</ul>


<p>Using this and your SLAs it is possible to define policies for your build times such as &ldquo;the max build time should not be more than X&rdquo;. If you want to speed up your build, you can set a target build time and analyzing the graph should help you to understand what architecture changes you need to make to your system in order to meet this build time (this sounds a lot like <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">Toyota&rsquo;s Improvement Kata</a> &hellip;)</p>

<p>I loved this talk ! I found the speaker captivating, he presented novel ideas which is not always the case.</p>

<p>Here are <a href="http://www.slideshare.net/AbrahamMarinPerez/keeping-your-cicd-pipeline-as-fast-as-it-needs-to-be">the slides</a>, and <a href="https://www.youtube.com/watch?v=8JxoKJng_eQ">the same presentation at Devoxx UK</a>.</p>

<h2>To Be Continued</h2>

<p>I promised 5, and that&rsquo;s only 2 talks ! Stay tuned, I&rsquo;ll write about the 3 others in the coming weeks. <a href="http://philippe.bourgau.net/top-5-talks-i-attended-at-javaone-2016-part-2/">Here they are</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flavors of TDD]]></title>
    <link href="http://philippe.bourgau.net/flavours-of-tdd/"/>
    <updated>2016-09-20T20:54:00+00:00</updated>
    <id>http://philippe.bourgau.net/flavours-of-tdd</id>
    <category term="programming" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>During the years doing some coding dojos with the same circle of people, I came up with my own style of practicing <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. Lately, I had the chance to do a pair programming session with someone I did not know. That made me realize that they are in fact even more ways to practice TDD than I thought.</p>

<h2>Mockist vs Classisist</h2>

<p>A lot has already been written (and discussed) about these two approaches. I myself have already <a href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">blogged</a> about the subject, I even gave a <a href="http://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb/">talk</a> about it. From my own point of view, I believe that the inconvenients of making mocking the default far outweights the benefits. I&rsquo;m not saying that mocks aren&rsquo;t useful from time to time, but rather that they should remain the exception.</p>

<h2>Top-Down vs Bottom-Up</h2>

<p>That&rsquo;s the reason why I wrote this post. This is the main difference I found between my style and my pair&rsquo;s. Let me explain.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-20-flavours-of-tdd/topdown-vs-bottomup.jpg" title="Top-Down vs Bottom-Up" ></p>

<h3>Top-Down</h3>

<p>Doing TDD top-down means starting with high level end to end tests, implementing the minimum to make it work, refactor and repeat. A bit like BDD, the point is to focus on the expected behavior, and avoid writing useless things. The bad point is that the refactoring part can get pretty difficult. On real life code, strictly following top-down would mean writing a feature test first, passing it with a quick and dirty implementation, to then spend hours trying to refactor all that mess &hellip; good luck !</p>

<p>Here is another example, from coding dojos this time. Having had success with the top-down approach during previous dojos, we once intentionally tried to code <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#">Conway&rsquo;s Game of Life</a> using a top-down approach. We did so by writing high level tests that were checking special patterns (gliders &hellip;). That was a nightmare ! It felt like trying to reverse engineer the rules of the game from real use cases. It did not bring us anywhere.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-20-flavours-of-tdd/glider.gif" title="Conway's game of life gliders" ></p>

<h3>Bottom-Up</h3>

<p>At the other side of the spectrum, you can do bottom-up TDD. This means unit testing and implementing all the small bricks you think you&rsquo;ll need to provide the expected overall feature. The idea is to avoid tunnels and to get fast feedback on what you are coding. The bad side is that you might be coding something that will end up being unnecessary. Be careful, if you find yourself spending a lot of time building up utility classes, you might be doing too much bottom-up implementation.</p>

<p>The <a href="http://codingdojo.org/cgi-bin/index.pl?KataRomanNumerals">Numerals to Romans Kata</a> is a good exercise to fail at bottom-up. Every time I did this exercise during a coding dojo, people new to it would start to come up with complicated ways to do it (often involving complex array manipulation). Compared to that, applying disciplined bottom-up TDD brings a <a href="https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/Algorithm-Roman-Numeral-Converter">brutally effective solution for Numerals to Romans</a>.</p>

<h2>Mixed approach</h2>

<p>Both approaches have their pros and cons. I really believe developers who are serious about TDD should master both, and learn when to apply each. In fact, as often, the best approach lies somewhere in the middle. Here&rsquo;s my recipe :</p>

<ol>
<li>Start with a high level feature test</li>
<li>try to make it pass &hellip;</li>
<li>&hellip; (usually) fail</li>
<li>rollback or shelve your test and draft implementation</li>
<li>build a brick</li>
<li>unshelve</li>
<li>try to make it pass &hellip;</li>
<li>&hellip; and so one until the high level test finally passes.</li>
</ol>


<p>In fact, it&rsquo;s a lot like the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> for building features instead of refactoring.</p>

<h2>Practice in dojos</h2>

<p>It&rsquo;s possible to intentionally practice this in coding dojos as well. Most kata should be OK, as long as the group agrees to fix it using this particular approach up front.</p>

<p>If during the dojo, you&rsquo;ve just written a test, suddenly realize that it won&rsquo;t be easy to get it passing, and that you&rsquo;ve got the elements spread out in your code, this is the time ! Comment the test, get the green bar, refactor, uncomment the test, try to make it pass, repeat &hellip; Eventually, you&rsquo;ll have all the bricks to make it easy to pass your test.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-20-flavours-of-tdd/cargo-cult.jpg" title="Cargo Cult : People thought that by building something that looks like a plane, they would be able to fly" ></p>

<p>Some might say this is not &lsquo;pure&rsquo; TDD, but that sounds like cargo cult to me ! As long as you make sure you are not building useless stuff, and that you keep the feedback loop as short as possible, you&rsquo;re on the right track.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How NOT to use mocks, my talk at Paris.rb]]></title>
    <link href="http://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb/"/>
    <updated>2016-09-13T04:03:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb</id>
    <category term="mocking" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>As I already <a href="http://philippe.bourgau.net/blog/categories/mocking/">wrote about</a>, mocks can be trecherous &hellip; I gave a talk about how to avoid them last tuesday at <a href="http://www.meetup.com/fr-FR/parisrb/">Paris.rb meetup</a>. Here are the <a href="https://docs.google.com/presentation/d/1OH3eBgjyMcpupUnGWsHXm7kQjkckFpnJStYYYqBL6Yk/edit?usp=sharing">slides</a>.</p>

<p>It talks about testing, mocking, but also <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a> and <a href="https://wincent.com/blog/proxies-with-rr">test proxies à la RR</a> (but for rspec).</p>

<iframe src="https://docs.google.com/presentation/d/1OH3eBgjyMcpupUnGWsHXm7kQjkckFpnJStYYYqBL6Yk/embed?start=false&loop=false&delayms=3000" frameborder="0" width="790" height="470" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>




<p><p/>
Check the speaker&rsquo;s comments for all the details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Hackernews and Reddit for blogging]]></title>
    <link href="http://philippe.bourgau.net/how-to-use-hackernews-and-reddit-for-blogging/"/>
    <updated>2016-09-05T04:52:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-use-hackernews-and-reddit-for-blogging</id>
    <category term="blogging" /><category term="software" />
    <content type="html"><![CDATA[<p>A few weeks ago, I posted my latest article <a href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/">Is There Any Room for the Not-Passionate Developer ?</a> on <a href="https://news.ycombinator.com/">Hackernews</a> and <a href="https://www.reddit.com/r/programming/">Reddit Programming</a>. The post stayed on the fist page for a while, and I got a lot of traffic. If you are yourself blogging, you might be interested to know how it occurred, and what I learned in the process.</p>

<h2>How it started</h2>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-05-how-to-use-hackernews-and-reddit-for-blogging/soft-skills.jpg" title="The cover of 'Soft Skills, the software developer's life manual'" ></p>

<p>In <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?ie=UTF8&amp;qid=1473135683&amp;sr=8-1&amp;keywords=soft+skills">Soft Skills, the software developer&rsquo;s life manual</a> John Somnez explains that posting your blog articles on HN or Reddit might bring you a ton of traffic, but that comments can be hard to swallow at time. Within a few hours of writing my blog post it had generated some positive activity on twitter (favorites and retweets) from my regular followers. That&rsquo;s a good sign that the post is good enough. As I had promised myself in such case, I submitted the post to both HN and Reddit.</p>

<h2>What happened ?</h2>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-09-05-how-to-use-hackernews-and-reddit-for-blogging/google-analytics.jpg" title="A Google Analytics screenshot, with the traffic spike" ></p>

<p>I don&rsquo;t know for sure on Reddit, but I know my post stayed on the first page of HN for a few hours, it even went up to the third place for a while. In the process I got a lot of traffic, a lot more than I am used to. I also got a ton of comments, on HN, Reddit and directly on my post. John Somnez had warned that comments on HN and Reddit can be very harsh, so I went through these quickly, took notes about the points that seemed interesting, but I only responded to comments on my website.</p>

<p>Overall, the comments were pretty interesting though, and brought a lot of valid points. I&rsquo;m planning to write a &lsquo;response&rsquo; article to take all these into perspective.</p>

<p>Most of the traffic was made in the day I submitted my post, but I had more traffic than usual for 2 or 3 days. Since then, the traffic has settled down, but I now get between 2 and 5 times more traffic than I typically had on a daily basis ! An online Taiwanese tech magazine also asked me the permission to translate <a href="http://www.inside.com.tw/2016/08/05/is-there-any-room-for-the-not-passionate-developer">my post in Chinese</a> !</p>

<p>I&rsquo;m not sure about the performance of my website during the traffic spike. I&rsquo;m using <a href="http://octopress.org/">Octopress</a> to statically generated html on <a href="https://pages.github.com/">Github Pages</a>, so that should be fine. I am also using a custom domain, and I need to make sure my <a href="https://news.ycombinator.com/item?id=7738293">DNS is correctly configured</a> for this to perform well.</p>

<h2>Advice for bloggers</h2>

<p>So here is what I am going to do regarding HN and Reddit in the future :</p>

<ol>
<li>It can bring so much traffic and backlinks that I&rsquo;ll definitely continue to submit blog posts from time to time</li>
<li>For the moment, I&rsquo;ll stick to only submitting the articles from which I already received good feedbacks, I don&rsquo;t want to get a bad karma or reputation on these websites</li>
<li>I might submit old articles that gathered good reviews at the time I wrote them</li>
<li>Concerning comments, I&rsquo;ll try to grow an even thicker skin. Maybe at some point I&rsquo;ll try to answer on HN or Reddit</li>
</ol>


<p>Of course, depending how this works, I will adapt !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kudo Boxes for Kids]]></title>
    <link href="http://philippe.bourgau.net/kudo-boxes-for-kids/"/>
    <updated>2016-08-30T04:48:00+00:00</updated>
    <id>http://philippe.bourgau.net/kudo-boxes-for-kids</id>
    <category term="agile" /><category term="management30" />
    <content type="html"><![CDATA[<p>How do you get your kids to participate with housekeeping ? I guess that&rsquo;s the dream of all parents. As so, we&rsquo;ve tried quite a lot of tactics throughout the years. Carrots and stick never really worked, so we tried positive reinforcement, gratitude &hellip; Unfortunately, nothing really made any noticeable improvement.</p>

<h2>Until now !</h2>

<p>At work, we&rsquo;ve been using <a href="https://management30.com/practice/intrinsic-motivation/">Kudo Boxes</a> for a <a href="http://philippe.bourgau.net/how-to-deal-with-the-incentive-system-in-an-agile-team/">while now</a>. A kudo box is a small mailbox where teammates can drop a word of thank or some praise (No blame allowed here !)</p>

<p>Why not try the same thing at home ? During the summer holidays, we&rsquo;ve build kudo boxes for everyone in the family.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-30-kudo-boxes-for-kids/kudo-box.jpg" title="Our family Kudo Box" ></p>

<p>It&rsquo;s a nice and easy way to express gratitude for any good stuff our kids do. The great thing is that it&rsquo;s cheap, it&rsquo;s easy to carry cards around and to hand one out at any moment.</p>

<h2>What happened ?</h2>

<p>First, we now have very joyful kudo reading sessions : our kids rush to the boxes to check for new cards. The second most noticeable change we observed is that they are both participating more in the house chores ! For example, as soon as we start cooking, they might spontaneously dress the table up. Or they might bring tools to help us as best as they can when we are tending to the garden.</p>

<p>To summarize, it seems it brought a lot of joy and love in the house.</p>

<h2>How we started ?</h2>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-30-kudo-boxes-for-kids/typical-kudo-box.jpg" title="The typical employee's kudo box, as can be found on the management 3.0 website" ></p>

<p>They are many ways to build a kudo box. The simplest way might be to get an old shoe box, and to cut a hole in the cover. We bought a wooden box with four drawers, and spent some time all together to decorate it. This in itself was already fun.</p>

<p>We started using simple pieces of paper as kudo cards, but I later downloaded and printed a bunch of <a href="https://management30.com/product/kudo-cards/">official kudo cards</a> from the Management 3.0 website. It turns out there is a version in <a href="https://1qjpt15fhlq3xjfpm2utibj1-wpengine.netdna-ssl.com/wp-content/uploads/2016/03/Management30-KudoCards-2015-self-print-A4-French.pdf">french</a>.</p>

<h2>Bonus</h2>

<p>An unexpected, but great, side effect is that my spouse and I started to get kudos as well ! It&rsquo;s really nice to receive a word from your kids. For example, here is a drawing I got from my daughter.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-30-kudo-boxes-for-kids/kudo-drawing.jpg" title="A nice drawing from my daughter that I found in my kudo box" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecProxies now supports .to receive(xxx)... syntax]]></title>
    <link href="http://philippe.bourgau.net/rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax/"/>
    <updated>2016-08-23T04:47:00+00:00</updated>
    <id>http://philippe.bourgau.net/rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax</id>
    <category term="agile" /><category term="mocking" /><category term="rspec" /><category term="ruby" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-23-rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax/test_probes.jpg" title="Hardware test probes" ></p>

<p>Pure mocks are dangerous. They let defect go through, give a false sense of security and are difficult to maintain.</p>

<p>I&rsquo;ve already talked about it <a href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">before</a> but since then, <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">DHH announced that he was quitting TDD</a>, the <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead ?</a> debate took place, and the conclusion is that <a href="https://www.thoughtworks.com/insights/blog/mockists-are-dead-long-live-classicists">mockist are dead</a>.</p>

<p>They are still times when mocks feel much simpler than any other things. For example, imagine your process leaks and crashes after 10 hours, the fix is to pass an option to a thirdparty, how would you test this in a fast test ? That&rsquo;s exactly the kind of situation where using test proxies saves you from mocks. A test proxy defers everything to the real object but also features unintrusive hooks and probes that you can use in your test. If you want a code example, check <a href="https://github.com/philou/mes-courses/commit/2c9fce17f9b59d0b3828f309015c07b17cceddf4?diff=split">this commit</a>, where I refactored a rails controller test from mocks to a RSpecProxies (v0.1).</p>

<p>I created RSpecProxies <a href="http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies/">a while ago</a>, a while ago, and it&rsquo;s syntax made it alien to the RSpec work, it needed an update. <a href="http://rspec.info">RSpec</a> now supports basic proxying with partial stubs, spies, the <code>and_call_original</code> and the <code>and_wrap_original</code> methods. <a href="https://github.com/philou/rspecproxies">RSpecProxies 1.0</a> is a collection of hooks built on top of these to make proxying easier, with a syntax that will be familiar to RSpec users.</p>

<h2>Before original hook</h2>

<p>This hook is triggered before a call a method. Suppose you want to simulate a bad connection :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;can simulate unreliable connection&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">allow</span><span class="p">(</span><span class="no">Resource</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:get</span><span class="p">)</span><span class="o">.</span><span class="n">and_before_calling_original</span> <span class="p">{</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">RuntimeError</span><span class="o">.</span><span class="n">new</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">resources</span> <span class="o">=</span> <span class="no">Resource</span><span class="o">.</span><span class="n">get_at_least</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">resources</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>After original hooks</h2>

<p>RSpecProxies provides the same kind of hook after the call :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;can check that the correct data is used (using and_after_calling_original&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="n">allow</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span><span class="o">.</span><span class="n">and_after_calling_original</span> <span class="p">{</span> <span class="o">|</span><span class="n">result</span><span class="o">|</span> <span class="n">user</span> <span class="o">=</span> <span class="n">result</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are capturing the return value to use it later in the test. For this special purpose, RSpecProxies also provides 2 other helpers :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Store the latest result in @user of self</span>
</span><span class='line'><span class="n">allow</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span><span class="o">.</span><span class="n">and_capture_result_into</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Collect all results in the users array</span>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">allow</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span><span class="o">.</span><span class="n">and_collect_results_into</span><span class="p">(</span><span class="n">users</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Proxy chains</h2>

<p>RSpec mocks provides the <code>message_chain</code> feature to do build chains of stubs. RSpecProxy provides a very similar proxy chain concept. The main difference is that it creates proxies along the way, and not pure stubs. Pure stubs assume that you are mocking everything, but as our goal is to mock as little as possible, using proxies makes more sense.</p>

<p>When using a mockist approach, the message chain is a bad smell because it makes your tests very brittle by depending on a lot of implementation. In contrast, proxy chains are meant to be used where they are the simplest way to inject what you need, without creating havoc.</p>

<p>For example, suppose you want to display the progress of a very slow background task. You could mock a lot of your objects to have a fast test, of if you wanted to avoid all the bad side effects of mocking, you could run the background task in your test, and have a slow test &hellip; Or, you could use a chain of proxies :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;can override a deep getter&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span><span class="p">(</span><span class="no">RenderingTask</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">proxy_message_chain</span><span class="p">(</span><span class="s2">&quot;load.completion_ratio&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2523</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">controller</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;25%&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the simplest thing to do is just to override a small getter, because from a functionnal point of view, that&rsquo;s exactly what we want to test.</p>

<h2>Last word</h2>

<p>The code is on <a href="https://github.com/philou/rspecproxies">github</a>, v1.0.0 is on <a href="https://rubygems.org/gems/rspecproxies/versions/0.1.0">rubygems</a>, it requires Ruby v2.2.5 and RSpec v3.5, the license is MIT, help in any form are welcome !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to prepare a new Ruby env in 3 minutes using Docker]]></title>
    <link href="http://philippe.bourgau.net/how-to-prepare-a-new-ruby-env-in-3-minutes-using-docker/"/>
    <updated>2016-08-17T05:21:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-prepare-a-new-ruby-env-in-3-minutes-using-docker</id>
    <category term="docker" /><category term="ruby" /><category term="software" />
    <content type="html"><![CDATA[<p>One or two weeks ago, I registered to the <a href="http://www.meetup.com/fr-FR/Paris-Ruby-Workshop/">Paris Ruby Workshop Meetup</a> and needed a Ruby env. I have been using <a href="https://www.vagrantup.com/">Vagrant</a> quite a lot to isolate my different dev envs from each other and from my main machine. As I&rsquo;ve been digging more into <a href="http://www.docker.com">Docker</a> lately, I thought I&rsquo;d simply use Docker and Docker Compose instead.</p>

<p>I turned out to be dead simple. All that is needed is a <code>docker-compose.yml</code> file to define the container, record the shared volume and set a bundle path inside it :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">rubybox</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruby:2.3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bash</span>
</span><span class='line'>  <span class="l-Scalar-Plain">working_dir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/src/app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">BUNDLE_PATH</span><span class="p-Indicator">:</span> <span class="s">&#39;vendor/bundle&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;.:/usr/src/app&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without the custom bundle path, bundled gems would be installed elsewhere in the container, and lost at every restart.</p>

<p>To use the Rubybox, just type <code>docker-compose run rubybox</code> and you&rsquo;ll get a shell from within your ruby machine, where you can do everything you want.</p>

<p>In fact, I found the thing so useful, that I created the <a href="https://github.com/philou/rubybox">Rubybox</a> git repo to simplify cloning and reusing. I&rsquo;ve already cloned it at least 3 times since then !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:philou/rubybox.git
</span><span class='line'><span class="nb">cd </span>rubybox
</span><span class='line'>docker-compose run rubybox
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Grow a Culture Book]]></title>
    <link href="http://philippe.bourgau.net/how-to-grow-a-culture-book/"/>
    <updated>2016-08-08T05:58:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-grow-a-culture-book</id>
    <category term="agile" /><category term="management" /><category term="management30" /><category term="selforganizing" />
    <content type="html"><![CDATA[<p>Have you read valve&rsquo;s <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf">Handbook for new employees</a> ?</p>

<p><a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf"><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-08-how-to-grow-a-culture-book/valve-handbook-for-new-employees.jpg" title="A stack of Valve's Handbook for new employees" ></a></p>

<p>In <a href="https://management30.com">Management 3.0</a> terms, that&rsquo;s a <a href="https://management30.com/practice/value-stories/">culture book</a>. It&rsquo;s a great way to build and crystallize a culture, and it serves as a guide for newcomers, and can later serve as an hiring ad for your team or company.</p>

<p>The good thing about a culture book, is that you don&rsquo;t have to write it in one go. It&rsquo;s a living artifact anyway, so you&rsquo;d better not ! Our current culture book has emerged from a collection of pages in our wiki.</p>

<h2>It started as working agreements</h2>

<p>The first real contributions to our culture book (though we did not know it at the time) was spending some time in retrospectives to define and review our working and coding conventions.</p>

<p>When we started doing retrospectives, we had to discuss, agree and formalize the decisions we made about our way of working. We usually did a &lsquo;review how we work&rsquo; activity at the beginning the retros, spending 10 minutes to make sure we all understood and agreed on our current working conventions. If there was any disagreement or update required, we would discuss them during the retro, and at the end, add, remove or modify items from our agreement page.</p>

<h2>It continued as self-organization workshops</h2>

<p>After a while, we had built up a pretty extensive set of working and coding conventions. The team had already become quite productive, but to keep the momentum in the long run, we needed to increase self-organization. By reading <a href="https://www.amazon.com/Jurgen-Appelo/e/B00460MCJM/ref=sr_tc_2_0?qid=1470715896&amp;sr=8-2-ent">Management 3.0 books</a> and <a href="https://www.amazon.com/Workout-Practices-Improve-Delight-Management-ebook/dp/B00N6REYKQ/ref=asap_bc?ie=UTF8#navbar">Management Workout</a> (which has been re-edited as <a href="https://www.amazon.com/Managing-Happiness-Games-Practices-Motivate/dp/1119268680/ref=asap_bc?ie=UTF8">Managing for Happiness</a>) in particular, I found description about how to use a <a href="https://management30.com/practice/delegation-board/">delegation board</a> and <a href="https://management30.com/product/delegation-poker/">delegation pokers</a> to measure and formalize the current delegation level of a team.</p>

<p>We did this, and started a lot of self-organization workshops :</p>

<ul>
<li><a href="http://philippe.bourgau.net/stop-feeling-like-a-kid-everytime-you-ask-a-day-off/">Stop feeling like a kid every time you ask a day off</a></li>
<li><a href="http://philippe.bourgau.net/scrum-teams-do-not-need-a-scrum-master/">Scrum Teams Do Not Need a Scrum Master</a></li>
<li><a href="http://philippe.bourgau.net/make-hiring-everyones-business/">Make hiring everyone&rsquo;s business</a></li>
<li><a href="http://philippe.bourgau.net/how-to-deal-with-the-incentive-system-in-an-agile-team/">How to deal with the incentive system in an agile team ?</a></li>
<li><a href="http://philippe.bourgau.net/how-we-decentralized-our-companys-training-program/">How We Decentralized Our Company&rsquo;s Training Program</a></li>
</ul>


<p>After each of these workshops, we created a wiki page, explaining how we planned to handle the subject in the team.</p>

<h2>The book</h2>

<p>At that point, we had fairly extensive and formal descriptions of our working practices and conventions. By reading this set of pages, someone would get a pretty accurate grasp of our principles and values.</p>

<p>Wondering how we could write our own culture book, I had an &ldquo;Aha !&rdquo; moment and realized that all I had to do was to create a wiki page pointing to all our different agreement pages. This only took 5 minutes.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-08-how-to-grow-a-culture-book/content.jpg" title="The table of content of our culture book" ></p>

<p>At the moment, our culture book serves 3 purposes :</p>

<ul>
<li>documentation for the team members</li>
<li>guide for newcomers</li>
<li>description about how we work for people in the company who might want to move to our team</li>
</ul>


<p>Next step would be to add a dash of design, a few war stories, export it as a PDF, and use it outside to advertise the team and the company.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When the Boy Scout Rule Fails]]></title>
    <link href="http://philippe.bourgau.net/when-the-boy-scout-rule-fails/"/>
    <updated>2016-08-02T05:38:00+00:00</updated>
    <id>http://philippe.bourgau.net/when-the-boy-scout-rule-fails</id>
    <category term="refactoring" /><category term="software" /><category term="technical debt" />
    <content type="html"><![CDATA[<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-02-when-the-boy-scout-rule-fails/boy-scout-rule.jpg" title="An illustration of the boy scout rule" ></p>

<p>Here goes the <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">boy scout rule</a> :</p>

<blockquote><p>Always check a module in cleaner than when you checked it out.</p></blockquote>

<p>Unfortunately, this alone does not guarantee to keep the technical debt under control. What can we do then ?</p>

<h2>Why the boy scout rule is not enough</h2>

<p>I can easily think of a few issues that are not covered by the boy scout rule.</p>

<h3>It only deals with local problems</h3>

<p>In it&rsquo;s statement, the boy scout rule is local and does not address large scale design or architecture issues. Applying the boy scout rule keeps files well written, using with clear and understandable code. From a larger perspective though, it does very little or slow improvement to the overall design.</p>

<p>These large scale refactorings are very difficult to deal with using the boy scout rule alone. It could be done but would require to share the refactoring goal with all the team, and then track its progress, while at the same time dealing with all the other subjects of the project. That&rsquo;s starting to sound like multitasking to me.</p>

<h3>It&rsquo;s skill dependent</h3>

<p>Another point about the boy scout rule (and to be fair, about any refactoring technique) is that programmers will be able to clean the code only as much as their skills allow them to !</p>

<p>Imagine what would happen when a new master developer arrives in a team of juniors, he&rsquo;d spot a lot of technical debt and would suggest improvements and ways to clean the code. Code that was thought of as very clean would suddenly be downgraded to junk !</p>

<p>The point here is that the boy scout rule cannot guarantee that you have no technical debt, because you don&rsquo;t know how much you have !</p>

<p>That&rsquo;s where the debt metaphor reaches its limits and flips to some productivity investment. By investing time to perform some newly discovered refactoring, you could get a productivity boost !</p>

<p><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1470200818&amp;sr=8-1&amp;keywords=domain+driven+design"><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-02-when-the-boy-scout-rule-fails/ddd.jpg" title="The cover of &#34;Domain Driven Design&#34;" alt="The cover of &#34;Domain Driven Design&#34;"></a></p>

<p><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1470200818&amp;sr=8-1&amp;keywords=domain+driven+design">Domain-Driven Design: Tackling Complexity in the Heart of Software</a>, Eric Evans calls this knowledge distillation. He means that little by little, the team gains better understanding of the domain, sometimes going through what he calls a &lsquo;breakthrough&rsquo;. These breakthroughs often promote existing code to technical debt &hellip;</p>

<h3>It&rsquo;s context dependent</h3>

<p>Developers alone are not the only one responsible for creating technical debt. Changes to the environment also do.</p>

<p>For example, if the market conditions change, and that new expectations for the product are slowly becoming the norm, your old perfectly working system becomes legacy and technical debt. As an example, let&rsquo;s examine what happened to the capital markets software industry in response to the 2008 crisis.</p>

<ul>
<li>The sector became a lot more regulated</li>
<li>Risk control is moving from nightly batches to real time</li>
<li>The demand for complex (and risky) contracts decreased</li>
<li>As a consequence, trading on simpler contracts exploded</li>
</ul>


<p>All these elements combined invalidated existing architectures !</p>

<p>New technologies also create technical debt. Think the switch from mainframe to the web.</p>

<h2>What do we need then ?</h2>

<p>Should we stop using the boy scout rule ? Surely not, it would be a total non-sense. Submitting clean and readable code is a must.</p>

<p>But it is not enough. If you have spotted some large scale refactoring that could bring some improvement, we should do what a fund manager would do :</p>

<ol>
<li>Estimate the return on investment</li>
<li>If it is good enough, do it now</li>
</ol>


<p>Obviously, large refactorings should also be split into smaller <del>value adding</del> cost reducing items. But then what ?</p>

<p><a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?ie=UTF8&amp;qid=1470290668&amp;sr=8-1&amp;keywords=the+nature+of+software+development"><img class="center" src="http://philippe.bourgau.net/imgs/2016-08-02-when-the-boy-scout-rule-fails/nature-of-software.jpg" title="The cover of &#34;The Nature of Software Development&#34;" alt="The cover of &#34;The Nature of Software Development&#34;"></a></p>

<p>In <a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?ie=UTF8&amp;qid=1470290668&amp;sr=8-1&amp;keywords=the+nature+of+software+development">The Nature of Software Development</a> Ron Jefferies says that we need a unique value-based prioritization strategy for everything, including technical improvements. Once you&rsquo;ve got that, there&rsquo;s no sense in splitting and embedding your refactoring in other tasks, this will just increase your work in progress, reducing your throughput and cycle time.</p>

<p>Frankly, I think that&rsquo;s easier said than done. I can <em>think</em> of two ways :</p>

<ul>
<li>As Ron Jefferies tends to say, have a jelled-cross-functional team discuss and prioritize collectively</li>
<li>As <a href="http://reinertsenassociates.com/technical-debt-adding-math-metaphor/">Don Reintersen</a> advocates, use an <a href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/">economical framework</a> to estimate the return on investment</li>
</ul>


<p>At least that&rsquo;s a starting point !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is There Any Room For The Not-Passionate Developer ?]]></title>
    <link href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/"/>
    <updated>2016-07-26T06:53:00+00:00</updated>
    <id>http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer</id>
    <category term="career" /><category term="programming" /><category term="software" />
    <content type="html"><![CDATA[<p><a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/ref=sr_1_1?ie=UTF8&amp;qid=1470025727&amp;sr=8-1&amp;keywords=the+passionate+programmer"><img class="center" src="http://philippe.bourgau.net/imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/passionate-programmer.jpg" title="The cover of The Passionate Programmer book" ></a></p>

<p>In <a href="https://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&amp;qid=1469597091&amp;sr=8-1&amp;keywords=rework">Rework</a>, <a href="https://basecamp.com/">Basecamp</a> guys David Heinemeier Hansson and Jason Fried advise to <a href="https://signalvnoise.com/posts/902-fire-the-workaholics">&ldquo;Fire the workaholics&rdquo;</a>, while in <a href="https://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296/ref=sr_1_1?ie=UTF8&amp;qid=1469801854&amp;sr=8-1&amp;keywords=zero+to+one">Zero to One</a> Peter Thiel argues that great working conditions (as described within Google for example) result from 10x technological advantages, not the other way round.</p>

<p>Back in 1983, Bill Gates said :</p>

<blockquote><p>You have to think it’s a fun industry. You’ve got to go home at night and open your
mail and find computer magazines or else you’re not going to be on the same
wavelength as the people [at Microsoft].</p></blockquote>

<p>Where do we stand now ? Do you need to live and breath programming to remain a good developer ?</p>

<h2>What about the 40h per week rule ?</h2>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/productivity.jpg" title="A graph of the productivity when working overtime" ></p>

<p>Studies have repeatedly demonstrated that 40h per week is the most productive work load, but in <a href="https://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017930">Outliers, the Story of Success</a> Malcolm Gladwell explains that getting fast to the 10000 hours of practice is a required road to success. As my Aïkido professor says, the more you practice, the better you get &hellip;</p>

<p>In <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1469801992&amp;sr=1-1&amp;keywords=soft+skills+the+software+developer%27s+life+manual">Soft Skills: The software developer&rsquo;s life manual</a> John Somnez also makes the point for hard work, that while he long believed that smart work would be enough, it&rsquo;s only when he put more in that he managed to drastically change his career.</p>

<p>During an <a href="http://calacanis.com/2008/03/07/how-to-save-money-running-a-startup-17-really-good-tips/">argument</a>, DHH argued in favor of work life balance whereas Jason Calacanis said that working in a startup had to be an all-in activity. In the end, they agreed that what matters is passion.</p>

<p>From my own experience, whenever I work on something I am passionate about :</p>

<ul>
<li>I am more productive</li>
<li>I feel energized rather than dulled by the work</li>
</ul>


<p>When I look around me, all the great developers I know are passionate and putting in more than 40 hours per week in programming. I also noticed that passion and efforts have always been pretty good indicators of future skills.</p>

<p>But then, how do passionate people manage to remain productive when working more than 40 hours per week ?</p>

<h2>What about the under the shower idea ?</h2>

<p>In <a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050">Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers)</a> (which is a great book BTW), Andy Hunt explains that our R-mode works in the background, and needs time away from the task at hand to come up with &ldquo;out of the box&rdquo; creative solutions.</p>

<p>XP argues for a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>, but at the same time, Uncle Bob says that we should put in 60 hours (40 for employer, and 20 for yourself) of work per week to become and remain &lsquo;professionals&rsquo; (I guess that&rsquo;s from <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_2?ie=UTF8&amp;qid=1470026034&amp;sr=8-2&amp;keywords=the+clean+code">The Clean Coder</a> if I remember correctly).</p>

<p>On my side, 6 to 8 solid hours of pair-programming on the same subject is the most I can do before becoming a <a href="http://c2.com/cgi/wiki?NetNegativeProducingProgrammer">Net Negative Producing Programmer</a>. But I can do more programming per day if I work on a side project at the same time though !</p>

<p>I guess that&rsquo;s how passionate people do it, they have different topics outside of their main work :</p>

<ul>
<li>they read books about programming</li>
<li>they have their own <a href="http://www.sideprojectbook.com/">side projects</a></li>
<li>they read articles about programming</li>
<li>they might maintain a programming blog</li>
<li>they might attend, organize or speak at meetup</li>
</ul>


<p>Most of the time, this does not make for more work, but rather for more learning. If I&rsquo;ve noticed that all the great programmers around me are passionate and strive to improve at their craft, I&rsquo;ve also noticed that overworked workaholics usually aren&rsquo;t very productive.</p>

<h2>Special challenges for mums and dads</h2>

<p>I think that Bill Gates 1983 statement still holds. If you are not passionate about programming, you&rsquo;ll have a hard time remaining and succeeding as a programmer in the long run.</p>

<p>The great thing about all this passion is that we can experience an energized work environment, always bubbling with change and novelty. On the flip side, keeping up with all is not always easy.</p>

<p>As we developers gain more experience, we tend to loose patience with everything that just feels as a pain in the ass, and will want :</p>

<ul>
<li>Powerful languages and technologies</li>
<li>An efficient working environment</li>
<li>Smart colleagues</li>
</ul>


<p>Unfortunately, that might also be the moment in your life when you become a parent, and you&rsquo;ll want  a stable income to sustain your family and some time to spend with your kids.</p>

<p>That is when things get tricky. Neither can you jump ship for the next cool and risky startup where you&rsquo;ll do great things, nor can you find enough time moonlighting to improve your skills &hellip; To add pain to injury, even with 10 years of experience in various languages and technologies, most companies won&rsquo;t look at your resume unless it contains good keywords &hellip; It looks like the developer&rsquo;s version of  <a href="https://www.amazon.com/Innovators-Dilemma-Revolutionary-Change-Business/dp/0062060244/ref=sr_1_sc_1?ie=UTF8&amp;qid=1470024448&amp;sr=8-1-spell&amp;keywords=the+innovator%27s+dilemns">The Innovator&rsquo;s Dilemna</a> !</p>

<p>Lack of passion and parenthood might partially explain why people stop being developers after a while. I can quickly think of 2 bad consequences of this :</p>

<ul>
<li>We tend to reinvent the wheel quite a lot (I&rsquo;m looking at you, .js frameworks &hellip;)</li>
<li>We might be meta ignoring (ignoring that we ignore) people skills that could make us all more efficient</li>
</ul>


<p><em><a href="http://www.inside.com.tw/2016/08/05/is-there-any-room-for-the-not-passionate-developer">Chinese translation</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup Rails, Docker, PostgreSQL (and Heroku) for local development ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-setup-rails-docker-postgresql-and-heroku-for-local-development/"/>
    <updated>2016-07-20T06:12:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-setup-rails-docker-postgresql-and-heroku-for-local-development</id>
    <category term="docker" /><category term="heroku" /><category term="postgre" /><category term="rails" />
    <content type="html"><![CDATA[<p><a href="https://github.com/philou/planning_poker">My current side project</a> is an online tool to do remote planning pokers. I followed my <a href="http://philippe.bourgau.net/how-to-boot-a-new-rails-project-with-docker-and-heroku/">previous tutorial</a> to setup Rails, Docker and Heroku.</p>

<p>Naturally, as a BDD proponent, I tried to install <a href="https://cucumber.io">cucumber</a> to write my first scenario.</p>

<p>Here is the result of my first cucumber run :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose run shell bundle <span class="nb">exec </span>cucumber
</span><span class='line'>rails aborted!
</span><span class='line'>PG::ConnectionBad: could not translate host name <span class="s2">&quot;postgres://postgres:@herokuPostgresql:5432/postgres&quot;</span> to address: Name or service not known
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>It turned out that I had taken instructions from a <a href="https://blog.codeship.com/deploying-docker-rails-app/">blog article on codeship</a> that mistakenly used <code>host:</code> instead of <code>url:</code> in their <code>config/database.yml</code></p>

<p>After fixing that in my database.yml file, things where only slightly working better :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose run shell bundle <span class="nb">exec </span>cucumber
</span><span class='line'>rails aborted!
</span><span class='line'>ActiveRecord::StatementInvalid: PG::ObjectInUse: ERROR:  cannot drop the currently open database
</span><span class='line'>: DROP DATABASE IF EXISTS <span class="s2">&quot;postgres&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing is the config was still using the same database for all environments. That&rsquo;s not exactly what I wanted. I updated my <code>config/database.yml</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span> <span class="nl">&amp;default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unicode</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres</span>
</span><span class='line'>  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5432</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">herokuPostgresql</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">planning_poker_development</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="nl">&amp;test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">planning_poker_test</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DATABASE_URL&#39;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Victory ! Cucumber is running</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose run shell bundle <span class="nb">exec </span>cucumber
</span><span class='line'>Using the default profile...
</span><span class='line'>0 scenarios
</span><span class='line'>0 steps
</span><span class='line'>0m0.000s
</span><span class='line'>Run options: --seed 45959
</span><span class='line'>
</span><span class='line'><span class="c"># Running:</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Finished in 0.002395s, 0.0000 runs/s, 0.0000 assertions/s.
</span><span class='line'>
</span><span class='line'>0 runs, 0 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<h2>Fixing rake db:create</h2>

<p>By searching through the web, I found that people were having similar issues with rake db:create. I tried to run it and here is what I got :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose run shell bundle <span class="nb">exec </span>rake db:create
</span><span class='line'>Database <span class="s1">&#39;postgres&#39;</span> already exists
</span><span class='line'>Database <span class="s1">&#39;planning_poker_test&#39;</span> already exists
</span></code></pre></td></tr></table></div></figure>


<p>Why is it trying to create the postgres database ? It turns out that the DATABASE_URL takes precedence over what is defined in my <code>config/database.yml</code>. I need to unset this variable locally. I already have the <code>docker-compose.override.yml</code> for that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">DATABASE_URL</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">...</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">DATABASE_URL</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rake db:create works just fine now :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose run shell bundle <span class="nb">exec </span>rake db:create
</span><span class='line'>Database <span class="s1">&#39;planning_poker_development&#39;</span> already exists
</span><span class='line'>Database <span class="s1">&#39;planning_poker_test&#39;</span> already exists
</span></code></pre></td></tr></table></div></figure>


<h2>Starting a psql session</h2>

<p>During all my trouble-shootings, I tried to connect to the Postgresql server to make sure that the databases where created and ready. Here is how I managed to do that :</p>

<h3>1. Install psql client</h3>

<p>On my Ubuntu machine, that was a simple <code>sudo apt-get install postgresql-client-9.4</code>.</p>

<h3>2. Finding the server port</h3>

<p>The port can be found through <code>config/database.yml</code> or through <code>docker ps</code>. Let&rsquo;s use the later, as we&rsquo;ll need it to find the server IP as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE            COMMAND                  CREATED             STATUS              PORTS           NAMES
</span><span class='line'>b58ce42d2b2b        postgres         <span class="s2">&quot;/docker-entrypoint.s&quot;</span>   46 hours ago        Up 46 hours         5432/tcp        planningpoker_herokuPostgresql_1
</span></code></pre></td></tr></table></div></figure>


<p>Here the port is clearly 5432.</p>

<h3>3. Finding the server IP</h3>

<p>Using the container id we got on previous <code>docker ps</code> command, we can use <code>docker inspect</code> to get further details :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker inspect b58ce42d2b2b | grep IPAddress
</span><span class='line'>            <span class="s2">&quot;SecondaryIPAddresses&quot;</span>: null,
</span><span class='line'>            <span class="s2">&quot;IPAddress&quot;</span>: <span class="s2">&quot;172.17.0.2&quot;</span>,
</span><span class='line'>                    <span class="s2">&quot;IPAddress&quot;</span>: <span class="s2">&quot;172.17.0.2&quot;</span>,
</span></code></pre></td></tr></table></div></figure>


<h3>4. Connecting to the database</h3>

<p>Connecting is now just a matter of filling the command line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">$</span> <span class="n">psql</span> <span class="o">-</span><span class="n">U</span> <span class="n">postgres</span> <span class="o">-</span><span class="n">p</span> <span class="mi">5432</span> <span class="o">-</span><span class="n">d</span> <span class="n">planning_poker_development</span> <span class="o">-</span><span class="n">h</span> <span class="mi">172</span><span class="p">.</span><span class="mi">17</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'><span class="n">planning_poker_development</span><span class="o">=#</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">schema_migrations</span><span class="p">;</span>
</span><span class='line'> <span class="k">version</span>
</span><span class='line'><span class="c1">---------</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. Installing psql client directly in the shell</h3>

<p>It should be possible to install the psql client in the shell container automatically, but I must admit I did not try this yet. It should just a matter of adding this to the <code>Dockerfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">RUN</span> <span class="n">apt</span><span class="o">-</span><span class="k">get</span> <span class="n">install</span> <span class="n">postgresql</span><span class="o">-</span><span class="n">client</span><span class="o">-&lt;</span><span class="k">version</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to boot a new Rails project with Docker and Heroku]]></title>
    <link href="http://philippe.bourgau.net/how-to-boot-a-new-rails-project-with-docker-and-heroku/"/>
    <updated>2016-07-13T04:55:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-boot-a-new-rails-project-with-docker-and-heroku</id>
    <category term="docker" /><category term="heroku" /><category term="rails" />
    <content type="html"><![CDATA[<p>A few years ago, I used <a href="http://www.heroku.com">Heroku</a> to deploy my <a href="https://github.com/philou/mes-courses">side-project</a>. It provides great service, but I remember that updates to the Heroku Stack was a nightmare &hellip; Versions of the OS (and nearly everything) changed. The migration was a matter of days, and while doing a side-project, this was difficult. At the time, I remember thinking that using branches and VMs would have been the solution.</p>

<p>Now that I started to use Heroku again, I decided to use <a href="http://www.docker.com">Docker</a> from the beginning. More specifically, I am expecting :</p>

<ul>
<li>to have a minimal setup on my host machine</li>
<li>to use the same infrastructure in dev than in production</li>
<li>to simplify switching to a new machine</li>
<li>to simplify the migration to the next Heroku stack</li>
</ul>


<p>As an added benefit, if ever someone else joins me in my side-project, it will be a matter of minutes before we can all work on the same infrastructure !</p>

<p>Heroku provides a <a href="https://devcenter.heroku.com/articles/local-development-with-docker">tutorial</a> about how to deploy an existing <a href="http://rubyonrails.org/">Rails</a> app to heroku using containers. Unfortunately, I did yet have an existing rails app &hellip; So the first challenge I faced, was how to create a Rails app without actually installing Rails on my machine. The trick is to bootstrap rails in docker itself before packaging all this for Heroku.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-07-13-how-to-boot-a-new-rails-project-with-docker-and-heroku/logos.jpg" title="The 3 logos of Rails, Docker and Heroku" ></p>

<h2>1. Install the required software</h2>

<p>I installed only 4 things on my host machine
&ndash; Docker <a href="https://docs.docker.com/engine/installation/">instructions</a>
&ndash; Docker Compose <a href="https://docs.docker.com/compose/install/">instructions</a>
&ndash; Heroku Toolbelt <a href="https://toolbelt.heroku.com/">instructions</a>
&ndash; Heroku container plugin <code>heroku plugins:install heroku-container-tools</code></p>

<p>That&rsquo;s all I changed to my host machine.</p>

<h2>2. Setup docker</h2>

<p>First, let&rsquo;s create a new dir and step into it. Run :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir docker-rails-heroku
</span><span class='line'><span class="nb">cd </span>docker-rails-heroku
</span></code></pre></td></tr></table></div></figure>


<p>To prepare the Heroku setup, create a <code>Procfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: bundle <span class="nb">exec </span>puma -C config/puma.rb
</span></code></pre></td></tr></table></div></figure>


<p>and <code>app.json</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Docker Rails Heroku&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;An example app.json for container-deploy&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;image&quot;</span><span class="p">:</span> <span class="s2">&quot;heroku/ruby&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;addons&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;heroku-postgresql&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate docker files for Heroku, run :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku container:init
</span></code></pre></td></tr></table></div></figure>


<p>You want to run Rails in dev mode locally, so we need to override Heroku&rsquo;s default env (<a href="http://philippe.bourgau.net/docker-compose-trick-how-to-have-an-overridable-environment-variable-in-development-mode/">Check my previous post for details</a>)</p>

<p>Create an <code>.env</code> file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">RAILS_ENV</span><span class="o">=</span>development
</span></code></pre></td></tr></table></div></figure>


<p>and <code>docker-compose.override.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;.:/app/user&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">RAILS_ENV</span><span class="p-Indicator">:</span> <span class="s">&quot;${RAILS_ENV}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">RAILS_ENV</span><span class="p-Indicator">:</span> <span class="s">&quot;${RAILS_ENV}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Create the Rails app</h2>

<p>It&rsquo;s now time to follow <a href="https://docs.docker.com/compose/rails/">the official docker-compose rails tutorial</a> to bootstrap the rails app and directories :</p>

<p>Change <code>Dockerfile</code> to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># FROM heroku/ruby</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">FROM ruby:2.2.0</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN mkdir /myapp</span>
</span><span class='line'><span class="l-Scalar-Plain">WORKDIR /myapp</span>
</span><span class='line'><span class="l-Scalar-Plain">ADD Gemfile /myapp/Gemfile</span>
</span><span class='line'><span class="l-Scalar-Plain">ADD Gemfile.lock /myapp/Gemfile.lock</span>
</span><span class='line'><span class="l-Scalar-Plain">RUN bundle install</span>
</span><span class='line'><span class="l-Scalar-Plain">ADD . /myapp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a bootstrap <code>Gemfile</code> with the content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.2.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bundle install within the container requires a existing <code>Gemfile.lock</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create an empty Gemfile.lock</span>
</span><span class='line'>touch Gemfile.lock
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s now time to build your docker container to be able to run rails and generate your source files. Run the following :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Build your containers</span>
</span><span class='line'>docker-compose build
</span><span class='line'>
</span><span class='line'><span class="c"># Run rails within the shell container and generate rails files</span>
</span><span class='line'>docker-compose run shell bundle <span class="nb">exec </span>rails new . --force --database<span class="o">=</span>postgresql --skip-bundle
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, rails is ran as root inside the container. We can change ownership and rights with this command :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Change ownership</span>
</span><span class='line'>sudo chown -R <span class="nv">$USER</span>:<span class="nv">$USER</span> .
</span><span class='line'>
</span><span class='line'><span class="c"># Change rights</span>
</span><span class='line'>sudo chmod -R ug+rw .
</span></code></pre></td></tr></table></div></figure>


<h2>4. Make it Heroku ready</h2>

<p>Now that the rails files are generated, It&rsquo;s time to replace the bootstrap settings with real Heroku Dockerfile</p>

<p>Revert <code>Dockerfile</code> to simply :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM heroku/ruby
</span></code></pre></td></tr></table></div></figure>


<p>Heroku uses <a href="http://puma.io/">Puma</a> so we need to add it to our <code>Gemfile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Use Puma as the app server</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;puma&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to add a config file for Puma. Create <code>config/puma.rb</code> with this content (you can check <a href="https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server#adding-puma-to-your-application">heroku doc</a> for details)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">workers</span> <span class="nb">Integer</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;WEB_CONCURRENCY&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">threads_count</span> <span class="o">=</span> <span class="nb">Integer</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_MAX_THREADS&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">threads</span> <span class="n">threads_count</span><span class="p">,</span> <span class="n">threads_count</span>
</span><span class='line'>
</span><span class='line'><span class="n">preload_app!</span>
</span><span class='line'>
</span><span class='line'><span class="n">rackup</span>      <span class="no">DefaultRackup</span>
</span><span class='line'><span class="n">port</span>        <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span>     <span class="o">||</span> <span class="mi">3000</span>
</span><span class='line'><span class="n">environment</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RACK_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">on_worker_boot</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Worker specific setup for Rails 4.1+</span>
</span><span class='line'>  <span class="c1"># See: https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server#on-worker-boot</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should now be possible to rebuild the container, and run the app :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Rebuild the containers</span>
</span><span class='line'>docker-compose build
</span><span class='line'>
</span><span class='line'><span class="c"># Start the rails app using the web container</span>
</span><span class='line'>docker-compose up web
</span></code></pre></td></tr></table></div></figure>


<p>The app should be accessible at <a href="http://0.0.0.0:8080">http://0.0.0.0:8080</a></p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-07-13-how-to-boot-a-new-rails-project-with-docker-and-heroku/rails-homepage.jpg" title="The default homepage for a new Rails application" ></p>

<h2>5. Deploying to heroku</h2>

<p>We&rsquo;re almost ready to deploy to heroku.</p>

<p>First, we need to exclude development files from our image. For this, we need to create a <code>.dockerignore</code> file with the content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.git*
</span><span class='line'>db/*.sqlite3
</span><span class='line'>db/*.sqlite3-journal
</span><span class='line'>log/*
</span><span class='line'>tmp/*
</span><span class='line'>Dockerfile
</span><span class='line'>.env
</span><span class='line'>docker-compose.yml
</span><span class='line'>docker-compose.override.yml
</span><span class='line'>README.rdoc
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s then classic Heroku deploy commands :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># create an Heroku app</span>
</span><span class='line'>heroku apps:create &lt;your-app-name&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># And deploy to it</span>
</span><span class='line'>heroku container:release --app &lt;your-app-name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Your app should be accessible on line at <a href="https://">https://</a>&lt;your-app-name>.herokuapp.com/</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-07-13-how-to-boot-a-new-rails-project-with-docker-and-heroku/deployed-to-heroku.jpg" title="The typical error message when you deploy a new Rails app to heroku" ></p>

<p>Rails does not provide a default homepage in production. But you can check the logs with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku logs --app &lt;your-app-name&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>6. Running commands</h2>

<p>When in development mode, you might want to run rails or other commands on your source code again. The shell container exists just for that, run <code>docker-compose run shell ...</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># For example, to update your bundle</span>
</span><span class='line'>docker-compose run shell bundle update
</span></code></pre></td></tr></table></div></figure>


<h3>EDIT 2016-07-20</h3>

<p>For the moment, there&rsquo;s a catch with bundle install or update commands, as the gems are installed outside the shared volume, only Gemfile.lock will be updated, which required to run docker-compose build again &hellip; I&rsquo;ll have a look into this later and see if I can fix that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose run shell bundle update
</span><span class='line'>docker-compose build
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Compose trick : How to have an overridable environment variable in development mode ?]]></title>
    <link href="http://philippe.bourgau.net/docker-compose-trick-how-to-have-an-overridable-environment-variable-in-development-mode/"/>
    <updated>2016-07-04T03:55:00+00:00</updated>
    <id>http://philippe.bourgau.net/docker-compose-trick-how-to-have-an-overridable-environment-variable-in-development-mode</id>
    <category term="docker" /><category term="heroku" />
    <content type="html"><![CDATA[<p>I have recently been playing with <a href="https://www.docker.com/">Docker</a> and <a href="https://docs.docker.com/compose/">Docker Compose</a> while starting <a href="https://github.com/philou/planning-poker">my new side project</a>. I&rsquo;ve fallen into a situation where my production container uses a value for an environment variable, but while developing, I&rsquo;ll need both a different default and the ability to override this value.</p>

<p>I&rsquo;m using <a href="http://rubyonrails.org/">Rails</a> and found various references about how to deploy Rails app using Docker, but in the end, I decided to use <a href="http://www.heroku.com">Heroku</a> which handles a lot of ops for me. Rails uses the RAILS_ENV environment variable to know if it&rsquo;s going to run in development, test or production mode. The <a href="https://hub.docker.com/r/heroku/ruby/">heroku/ruby</a> image sets <code>RAILS_ENV=production</code>, but we usually want to use <code>RAILS_ENV=development</code> locally. I could have overridden RAILS_ENV in a docker-compose.override.yml file, but that would prevent me from running my app in production locally.</p>

<h2>The trick</h2>

<p>I eventually fixed my issue with combination of 2 files.</p>

<h3>docker-compose.override.yml</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">...</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">RAILS_ENV</span><span class="p-Indicator">:</span> <span class="s">&quot;${RAILS_ENV}&quot;</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>.env</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">RAILS_ENV</span><span class="o">=</span>development
</span></code></pre></td></tr></table></div></figure>


<h3>The logs</h3>

<p>My app starts in development mode by default :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>philou@philou-UX31E:~/code/planning-poker<span class="nv">$ </span>docker-compose up web
</span><span class='line'>Starting planningpoker_herokuPostgresql_1
</span><span class='line'>Recreating planningpoker_web_1
</span><span class='line'>Attaching to planningpoker_web_1
</span><span class='line'>web_1               | Puma starting in single mode...
</span><span class='line'>web_1               | * Version 3.4.0 <span class="o">(</span>ruby 2.2.3-p173<span class="o">)</span>, codename: Owl Bowl Brawl
</span><span class='line'>web_1               | * Min threads: 5, max threads: 5
</span><span class='line'>web_1               | * Environment: development
</span><span class='line'>web_1               | * Listening on tcp://0.0.0.0:8080
</span><span class='line'>web_1               | Use Ctrl-C to stop
</span></code></pre></td></tr></table></div></figure>


<p>But I can still override RAILS_ENV to test for example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>philou@philou-UX31E:~/code/planning-poker<span class="nv">$ RAILS_ENV</span><span class="o">=</span><span class="nb">test </span>docker-compose up web
</span><span class='line'>planningpoker_herokuPostgresql_1 is up-to-date
</span><span class='line'>Recreating planningpoker_web_1
</span><span class='line'>Attaching to planningpoker_web_1
</span><span class='line'>web_1               | Puma starting in single mode...
</span><span class='line'>web_1               | * Version 3.4.0 <span class="o">(</span>ruby 2.2.3-p173<span class="o">)</span>, codename: Owl Bowl Brawl
</span><span class='line'>web_1               | * Min threads: 5, max threads: 5
</span><span class='line'>web_1               | * Environment: <span class="nb">test</span>
</span><span class='line'>web_1               | * Listening on tcp://0.0.0.0:8080
</span><span class='line'>web_1               | Use Ctrl-C to stop
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Years of Blogging About Software]]></title>
    <link href="http://philippe.bourgau.net/5-years-of-blogging-about-software/"/>
    <updated>2016-06-27T04:04:00+00:00</updated>
    <id>http://philippe.bourgau.net/5-years-of-blogging-about-software</id>
    <category term="blogging" /><category term="career" /><category term="octopress" /><category term="software" />
    <content type="html"><![CDATA[<p>5 years ago, I started blogging. I started really casually, my posts were personal reminders and notes rather than real well thought of articles. Nevertheless, it did me great good :</p>

<ul>
<li>I&rsquo;ve been invited to talk at meetups</li>
<li>I&rsquo;ve had the joy of seeing some articles being tweeted many times</li>
<li>I received interesting job offers from all over the world</li>
</ul>


<p>6 months ago, after reading <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?ie=UTF8&amp;qid=1467000033&amp;sr=8-1&amp;keywords=soft+skills">Soft Skills: The software developer&rsquo;s life manual</a>, I set up the practice of writing at least one article per week, and here is my (very encouraging) graph of sessions since then:</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-27-5-years-of-blogging-about-software/analytics.jpg" title="The steadily increase curve of the sessions on my blog per month" ></p>

<h1>Excuses Why Not To Blog</h1>

<p>Here is a collection of the (bad) excuses you&rsquo;ll often hear people say for not blogging :</p>

<blockquote><p>I don&rsquo;t know how to write &hellip;</p></blockquote>

<p>Blogging regularly is actually a pretty good way to improve your writing skills. As usual, the key is to fake it until you make it.</p>

<blockquote><p>I&rsquo;m not into this social media stuff &hellip;</p></blockquote>

<p>You don&rsquo;t need to share anything personal on your software blog. In the end, your blog is a professional tool.</p>

<blockquote><p>I don&rsquo;t have anything interesting to say &hellip;</p></blockquote>

<p>They are others in the same situation as you who would like to see more posts about the kind of uninteresting things you just discovered. Wouldn’t you have liked someone to have written the newby article about « how to do XXX » you just spent 3 days to crack ?</p>

<blockquote><p>I don&rsquo;t have the time &hellip;</p></blockquote>

<p>Make it ! Time is never found, it is made. In the end, it’s just a matter of prioritization.</p>

<p>Obviously, there are other totally valid reasons why not to blog, but I&rsquo;ll assume you&rsquo;re able to recognize those.</p>

<h1>Why Would You Blog ?</h1>

<p>On the other side, if you jump into blogging, you can expect a lot of returns :</p>

<ul>
<li>First thing is that you&rsquo;ll obviously gain more visibility. I&rsquo;ve got readers from all over the world, and my articles are sometimes re-tweeted many times.</li>
<li>You&rsquo;ll improve your writing skills. Writing skills turn out to be unexpectedly important for <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">software writers</a> !</li>
<li>In order to lay down your ideas about something, you&rsquo;ll need to dig a bit more into. It is said to be the last step to learning.</li>
<li>It can act as a personal documentation. I used to write mine as a how-to notepad on which I could refer later on.</li>
<li>If you have a day job, you can re-post your articles there. You should gain extra visibility and expose the company to new ideas.</li>
</ul>


<h1>How to start</h1>

<p>Once you&rsquo;ve decided that you want to blog, starting should not be an issue.</p>

<h2>Pick a platform</h2>

<p>There are a lot of blogging platforms out there. For programmers, I would recommend a few though :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-27-5-years-of-blogging-about-software/platforms.jpg" title="Logos of my recommended blogging platforms" ></p>

<table>
<thead>
<tr>
<th>Platform </th>
<th> Pros </th>
<th> Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://octopress.org/">Octopress</a> </td>
<td> Free, Open Source, Github hosting, static HTML generation, markdown &amp; Git based, made for programmers </td>
<td> Theming can be rocky</td>
</tr>
<tr>
<td><a href="https://medium.com/">Medium</a>    </td>
<td> Free, no setup, good looking, simple to use </td>
<td> It&rsquo;s a private company, so it could close some day ! It happened to <a href="http://www.posterous.com">postero.us</a> (I remember, I was there …)</td>
</tr>
<tr>
<td><a href="https://posthaven.com/">Posthaven</a> </td>
<td> Created by the founders of postero.us, sustainable, guarantees to keep it live for ever, can post by email ! </td>
<td> Nothing special for programmers, 5$ / month</td>
</tr>
<tr>
<td><a href="https://logdown.com/">Logdown</a>   </td>
<td> Looks like a hosted version of Octopress, without the hassle ! </td>
<td> 50$/year</td>
</tr>
</tbody>
</table>


<p>Then, it&rsquo;s up to you !</p>

<h2>Start with how-to articles</h2>

<p>When I started my blog, it was mostly has a personal how-to reference. It allowed me to come back to it and find out how I did something last time. I thought that if it was important to me, it must be important to others as-well !</p>

<h2>Blog regularly</h2>

<p>Blogging every week made a huge difference to me. My traffic went from erratic to steadily increasing. I am currently observing a 11% traffic increase per month. This means that it nearly quadruples every year : I&rsquo;m not going to stop now !</p>

<h2>Integrate with the web</h2>

<p>This boils down to social networks and analytics. Obviously, you&rsquo;ll want to use Google Analytics to see how people are reading your content. I&rsquo;m using the venerable <a href="https://feedburner.google.com">Feedburner</a> to automatically post my new articles on <a href="https://twitter.com">twitter</a>. There&rsquo;s an option to use your post categories as hashtags, be sure to make it works, it brings a lot of traffic.</p>

<p>It&rsquo;s all up to you now !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Size Of Code]]></title>
    <link href="http://philippe.bourgau.net/the-size-of-code/"/>
    <updated>2016-06-08T04:45:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-size-of-code</id>
    <category term="joke" /><category term="programming" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>The CFO&rsquo;s debt is visible in his balance sheet. The CTO&rsquo;s technical debt is invisible. What about making it visible ?</p>

<p>Developers have an intuitive sense of the technical debt in some parts of the system. But few have an accurate estimation of its full extent. Even the size of a code base is difficult to grasp. In the same way, the size of the code is just a number. But the fact are there : between 10 000 and 10 000 000 lines of code, the rules aren&rsquo;t the same, but it&rsquo;s only invisible data on hard drives &hellip;</p>

<h2>Showing It</h2>

<p>If we had a device or a trick to show to non-developers the size of the source code, people might start to feel the embarrassment of working in a bloated code base. Unfortunately, for the moment, the only ideas I had are somehow unrealistic, albeit funny !</p>

<h3>First Idea : Printouts</h3>

<p>Suppose we printed all the source code every Monday, and then keep it around for everyone to feel its size. We could leave it in the middle of the place, or in the CTO&rsquo;s office, so that he&rsquo;d actually be hindered by the space loss. The larger the code, the bigger the troubles.</p>

<p>It&rsquo;s possible to print 50 lines on a sheet of paper, that&rsquo;s 100 on both sides.
That&rsquo;s 50 000 in a pack of 500 pages. And eventually, 200 000 in this kind of standard case :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-08-the-size-of-code/paper-case.jpg" title="A 2000 sheets paper case" ></p>

<p>Keeping these printouts in sync with the real cost would make the thing even more <del>painful</del> realistic. Imagine all the printings costs, and moving around cases of paper every day &hellip; ;)</p>

<h3>Second Idea : Inflatable Device</h3>

<p>What about an inflatable device linked to <a href="http://www.sonarqube.org/">SonarQube</a> (or any other code metrics tracking system) ? It could grow as new code is written. We could make it as large as we want : 1m<sup>3</sup> for every 10K lines of Code, making the whole office a difficult place to walk around. Try to figure out how to work with this thing in the office :</p>

<p><a href="http://www.jimmykuehnle.com/artblog/inflatable-bigger-than-the-studio/"><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-08-the-size-of-code/Large_Inflatable_Art.jpg" title="Large Inflatable Art (Jimmy Kuehnle)" ></a></p>

<h3>Third Idea : Sand</h3>

<p>For maximum pain, let&rsquo;s use real sand instead of an inflatable device ! Imagine the mess with some sand lying around in the office. If the only way to clean up the mess was to clean up the code, surely everyone would take the issue seriously !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-08-the-size-of-code/sand-pile.jpg" title="A sand pile on the pavement" ></p>

<h2>Final Word</h2>

<p>Obviously, these are jokes, but I guess there&rsquo;s a real need there. If we managed to make non developers feel the size and cost of the code base, it would be easier to agree on priorities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Legacy Code Coverall Day]]></title>
    <link href="http://philippe.bourgau.net/legacy-code-coverall-day/"/>
    <updated>2016-06-06T04:16:00+00:00</updated>
    <id>http://philippe.bourgau.net/legacy-code-coverall-day</id>
    <category term="joke" /><category term="programming" /><category term="technical debt" />
    <content type="html"><![CDATA[<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-06-legacy-code-coverall-day/miners.jpg" title="Miners going to work in Coveralls" ></p>

<p>Some days, coding feels like speleology or mining &hellip; Dealing with weird and undocumented old logic can even some time be <a href="https://www.quora.com/How-do-you-keep-your-sanity-while-working-on-a-Super-Dirty-Rotten-Spaghetti-codebase">damaging to the mind</a> ! I think we should go to work wearing the adequate protection !</p>

<p>OK, maybe we cannot start to go to work wearing a coverall everyday, but let&rsquo;s say very 21st of June is now legacy code day, the day when every developer maintaining legacy code comes to work dressed like that !</p>

<p>Obviously, that&rsquo;s a joke, but it could attract the attention of other non-coding people on the state of <em>their</em> codebase and amount of <em>their</em> technical debt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anti Ugly-Code Glasses]]></title>
    <link href="http://philippe.bourgau.net/anti-ugly-code-glasses/"/>
    <updated>2016-06-02T04:33:00+00:00</updated>
    <id>http://philippe.bourgau.net/anti-ugly-code-glasses</id>
    <category term="joke" /><category term="programming" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>I think I found a way to fix the dirty code problem once and for all &hellip;</p>

<p>In <a href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy">The Hitchhiker&rsquo;s Guide to the Galaxy</a> Zaphod Beeblebrox has some anti panic glasses. They feature some special danger detection mechanism that turns them opaque black to save their bearer from panicking.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-06-02-anti-ugly-code-glasses/zaphod.jpg" title="Zaphod Beeblebrox" ></p>

<p><em>(It turns out that Zaphod has two heads &hellip;)</em></p>

<p>In 2016, it&rsquo;s shocking that some many hours are lost by poor developers reading ugly code.</p>

<p>Let&rsquo;s build anti ugly-code glasses ! We&rsquo;d just need an IDE or editor plugin, connect it to <a href="http://www.sonarqube.org/">Sonar</a> in order to get the quality of the current file, and if too bad, shut the glasses black !</p>

<p>Finally the killer feature for augmented reality glasses !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Keep Up With Software Technologies]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-up-with-software-technologies/"/>
    <updated>2016-05-30T04:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-up-with-software-technologies</id>
    <category term="book" /><category term="career" /><category term="programming" />
    <content type="html"><![CDATA[<p>Since I started to program professionally 15 years ago, a lot of things have changes. A lot of technologies appeared and became mainstream while others fell out of fashion.</p>

<p>As software developers, it is really challenging to stay fit and productive in new technologies. I cannot obviously say that I am an expert in all new technologies, but I can say that I can get up to speed in a pretty short time in nearly all.</p>

<p>If there is a single reason for that I strongly believe it is because &ldquo;I studied my classics&rdquo; !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/outdated.jpg" title="An outdated computed covered in spider webs" ></p>

<h2>How does it work</h2>

<p>At the same time I started to program all day long for my living, I also started to read a lot of programming books on my spare time. This allowed me to learn at night and practice at day, setting everything in my brain.</p>

<p>This might come as a surprise, but I never read a lot of books about the technologies I was using. I&rsquo;d rather study fundamental programming books. These contain a lot of transportable knowledge, unlike in most books about a particular technology.</p>

<p>I believe this is a pretty good use of time since it made me a better programmer and also greatly reduced the time I need to master most new technologies. I can now easily relate them to some more general concept I learned before.</p>

<p>For example, I never read a book about UI. By the time I had to do some UI programming, I had absolutely no issue getting up to speed on the topic. I had already seen quite some UI code examples in other books, I knew that most UI frameworks are built from a set of Object Oriented patterns. Coming from a different perspective, I was even able to suggest improvements to the code that UI experts had not thought of.</p>

<p>That&rsquo;s not to say that I never read books about a particular technology, sometimes, that&rsquo;s just what you need to start something new. But when I do, I usually find them quite easy to read and digest. And I tend to skip things I intuitively understand and use them as cookbooks containing recipes for particular problems rather than end to end walk-through.</p>

<h2>My books</h2>

<h3><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer">The Pragmatic Programmer: From Journeyman to Master</a></h3>

<p><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer"><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/the-pragmatic-programmer.jpg" title="Cover of the pragmatic programmer book" ></a></p>

<p>As a young programmer this book made me understand that my job was not only about writing code, but about building maintainable systems. It provided me with tools to do so, 10 years later, I can still remember &ldquo;The power of plain text&rdquo;. This is also the book that made me have a first look into Ruby :).</p>

<h3><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code">Refactoring: Improving the Design of Existing Code</a></h3>

<p><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code"><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/refactoring.jpg" title="Cover of the refactoring book" ></a></p>

<p>Here is the theory behind all automated IDE refactorings. Reading this book had a profound influence on my coding style. The examples made me understand the difference between readable and unreadable code &hellip; It&rsquo;s also the foundation for any kind of incremental design and architecture. That&rsquo;s the book that got me started with TDD.</p>

<h3><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></h3>

<p><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans"><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/ddd.jpg" title="Cover of the DDD book" ></a></p>

<p>This book teaches good object oriented programming. Some say it is tough to read, but it&rsquo;s definitely worth doing so. Among other things, it explains how to use functional programming concept in your object oriented project, by separating Value Objects and Entities for example.</p>

<h3><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6">The C Programming Language</a></h3>

<p><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6"><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/c.jpg" title="Cover of the C book" ></a></p>

<p>With around 250 pages, it&rsquo;s pretty difficult to find a programming book with a greater value/page ratio. This one will teach you all there is to learn about C, and help you understand everything that was built on top of C (and that&rsquo;s quite a lot &hellip;)</p>

<h3><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp">Structure and Interpretation of Computer Programs</a></h3>

<p><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp"><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/sicp.jpg" title="Cover of the SICP book" ></a></p>

<p>Compared to C, Lisp is at the other side of the language spectrum. Learning C and Lisp gives the ability to put nearly anything in contrast to these 2 languages. Lisp is dynamic, functional and meta. It can be morphed into nearly anything and SICP teaches how to do so. There&rsquo;s a Lisp practice that is invaluable to any programmer : use your language to express your problem as simply as possible. SICP teaches that.</p>

<h3><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming">Programming Erlang: Software for a Concurrent World</a></h3>

<p><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming"><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-30-how-to-keep-up-with-software-technologies/erlang.jpg" title="Cover of the Erlang book" ></a></p>

<p>Neither the C book nor SICP deals with distribution and concurrency. That&rsquo;s what this book does. I had never programmed distributed systems before reading this book. After I read it, I learned how to code for distribution in a maintainable way. The lessons taught by Erlang are applicable in many languages.</p>

<h2>Not the best books</h2>

<p>I did not and will never read all programming books available. There might be newer books that treat the same subjects better, but these books are the ones that taught me the most about our craft. My point is that learning fundamentals and things far away from our daily technologies will teach us more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software is like writing and revising a giant book]]></title>
    <link href="http://philippe.bourgau.net/software-is-like-writing-and-revising-a-giant-book/"/>
    <updated>2016-05-23T03:52:00+00:00</updated>
    <id>http://philippe.bourgau.net/software-is-like-writing-and-revising-a-giant-book</id>
    <category term="complexity" /><category term="software" />
    <content type="html"><![CDATA[<p>With time, I discovered a way of explaining the subtleties of my developer job to my uninformed relatives and friends.</p>

<p>Sharing what your developer job is about with others can be very frustrating. Some people think you are &ldquo;Just playing around with computers&rdquo; as if it was not serious work. Others think that it is an extremely Cartesian and solitary activity with no place for communication or creativity. Trying to explain the diversity and richness of a developer&rsquo;s work is often a disappointing experience.</p>

<h2>The book metaphor</h2>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-05-23-software-is-like-writing-and-revising-a-giant-book/book.jpg" title="An old book" ></p>

<p>I explain to people that writing software is not unlike writing a huge book. A book long many millions of lines. I explain that the challenge is to maintain the whole story of the book coherent. I stress how difficult this is given that no one can take the time to read the full book, that the authors come and go, and that the book is under constant heavy revision.</p>

<h2>Details of our work</h2>

<p>The metaphor is quite valid and even holds about more subtle aspects of our work. Here is a summary of the last discussion I had about the book metaphor :</p>

<blockquote><ul>
<li>(Him) Do you have some &lsquo;gatekeepers&rsquo; for different sections of the story to make sure that these parts remain coherent ?</li>
<li>(Me) That&rsquo;s what we would call strong code ownership, this was the norm 20 years ago, but that the industry is moving to more collective code ownership, in order to decrease the bus factor.</li>
<li>(Him) What is the bus factor ?</li>
<li>(Me) The number of person who need to be hit by a bus to block your development progress</li>
<li>(Him) I see, that&rsquo;s kind of funny. But then, does that mean that any developer can change any part of the code ? Isn&rsquo;t that dangerous ?</li>
<li>(Me) Sure that would be difficult, that&rsquo;s not really how we do it. We make a lot of efforts to split the big story in many smaller independent ones as much as possible. This way, teams specialize on different &lsquo;chapters&rsquo; and work collectively within it.</li>
<li>(Him) I see</li>
<li>(Me) And if you need to change something in another &lsquo;chapter&rsquo; you should ask the guys who know it better to help you.</li>
<li>(Him) That makes sense. And what happens if two developers want to modify the same part of the story at the same time</li>
<li>(Me) That can happen. People might even want to modify the story in conflicting ways ! We&rsquo;ve got tools, processes and best practices to minimize this. If nothing is done, we&rsquo;ll get what we call a &lsquo;merge conflict&rsquo;.</li>
<li>(Him) Ho &hellip; I wouldn&rsquo;t have guessed, but it seems collaboration is really important in your work, isn&rsquo;t it ?</li>
<li>(Me) Sure it is !</li>
</ul>
</blockquote>

<h2>We are software writers</h2>

<p>All this reminds me of DHH&rsquo;s talk about writing software :</p>

<iframe class="center" width="560" height="315" src="https://www.youtube.com/embed/9LfmrkyP81M" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
</feed>
