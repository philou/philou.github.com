<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml?utm_source=blog&amp;utm_medium=rss" rel="self"/>
  <link href="http://philippe.bourgau.net/?utm_source=blog&amp;utm_medium=rss"/>
  <updated>2018-10-05T06:34:18+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Become a Business Partner and Stop Begging for Refactoring]]></title>
    <link href="http://philippe.bourgau.net/become-a-business-partner-and-stop-begging-for-refactoring/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-10-04T09:17:00+02:00</updated>
    <id>http://philippe.bourgau.net/become-a-business-partner-and-stop-begging-for-refactoring</id>
    <category term="large-scale-refactoring-sponsorship-series" /><category term="planning" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><em>When we, developers, earn enough trust from business people, we become their business partners. As such we enjoy a lot more freedom to refactor.</em></p>

<p>A team I was in a few years ago had worked hard to earn the trust of business people. In a retrospective, we discussed about our failure to work on the improvements we had agreed to. We decided that we would dedicate 20% of our <a href="https://www.mountaingoatsoftware.com/blog/what-are-story-points">story points</a> to improvements and refactoring. Better yet, we would start the sprint with these, before working on features! Here&rsquo;s what our sponsor said:</p>

<blockquote><p>As long you are sure it&rsquo;s the best thing for the product, I trust you.</p></blockquote>

<p>This is the kind of autonomy business partners can enjoy.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-10-03-become-a-business-partner-and-stop-begging-for-refactoring/business-hand-shake.jpg" alt="Drawing of a handshake between a business person wearing a suit and a developer wearing a hoody. Becoming business partners serves each party's interests" /></p>

<p>This the 14th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t already, I recommend you start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Becoming a business partner</h2>

<p>All the tricks and advices from the <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">previous posts</a> should lead to the following outcomes:</p>

<ol>
<li>Time for refactoring</li>
<li>Trust from business people</li>
</ol>


<p>With time, it establishes a solid business partnership. This means that business people will acknowledge that we know what we are talking about. When we say we need to refactor something, they&rsquo;ll let us do without much protest.</p>

<p>Once we reach this level of trust with business people, a new world of practices opens. Here are few I&rsquo;ve used or heard people talk about.</p>

<h2>Negotiate Technical Debt Interests</h2>

<p>My friend <a href="https://twitter.com/XCorail">Xavier</a> told me once that he had discussed how to deal with technical debt with a Scrum coach. The coach looked puzzled, and asked why we did not simply negotiate interests up front! When someone asks for a shortcut, we should explicit the recurring cost to fix it.</p>

<p>Here&rsquo;s an example: suppose we are asked to deliver a 8 points story in half the time for a sales show. We could say OK provided we&rsquo;d also pre-plan 2 story points refactoring tasks for the next 4 sprints.</p>

<h2>Agree on a decentralized decision rules</h2>

<p>Boing had weight issues when designing the 777. Instead of a weight reduction project, management issued a decentralized decision rule.</p>

<blockquote><p>Any engineer could swap a pound weight reduction with an $300 increase in production cost. (<a href="https://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/">The Principles of Product Development Flow</a> by <a href="http://reinertsenassociates.com/">Donald G. Reinertsen</a>)</p></blockquote>

<p><img src="http://philippe.bourgau.net/imgs/2018-10-03-become-a-business-partner-and-stop-begging-for-refactoring/boeing-777.jpg" alt="Rendered model of the Boeing 777 while being designed. Decentralized Decision Rules are among the benefits of becoming a business partner" /></p>

<p>Pretty soon, the plane had lost enough weight to be viable. Here&rsquo;s another example:</p>

<blockquote><p>If we speed up the build of 1 minute in less than 16 hours of work, we should do it.</p></blockquote>

<p>If you are wondering how to create such rules, have a look at <a href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">this post</a>. For yet another example, check this bug definition that came out of an <a href="http://philippe.bourgau.net/blog/categories/first-improvement-kata-series/">improvement kata</a>.</p>

<p>These rules are powerful because they are agreed to once, but used many times. They also don&rsquo;t involve any management escalation or delay. Only high level of trust with business people can lead to such rules.</p>

<blockquote><p>💡 Decentralized decision rules are agreed once, but used many times, without involving management.</p></blockquote>

<h2>Negotiate a refactoring bandwidth</h2>

<p>Negotiating refactoring on a task by task basis takes a lot of time. Once we&rsquo;ve become business partners, we can negotiate a permanent refactoring bandwidth.</p>

<blockquote><p>💡 Becoming a business partner lets developers have a permanent refactoring bandwidth.</p></blockquote>

<p>For example, in her talk <a href="https://vimeo.com/221024846">What ever happened to being eXtreme?</a> <a href="https://twitter.com/rachelcdavies">Rachel Davies</a> explains how her long lived XP team was doing that. At any moment, among 7 developers, 3 were working on technical (or refactoring) tasks.</p>

<iframe src="https://player.vimeo.com/video/221024846" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/221024846">Rachel Davies - What Ever Happened to Being eXtreme?</a> from <a href="https://vimeo.com/newcrafts">NEWCRAFTS Conferences</a> on <a href="https://vimeo.com">Vimeo</a>.</p>


<p>As with decentralized rules of thumb, the main advantage is that negotiation is done once and for all.</p>

<h2>Almost there !</h2>

<p>This was the 14th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. In the <a href="http://eepurl.com/dxKE95">next post</a>, I&rsquo;ll dig into what we must be careful about to remain business partners.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 2]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-09-27T19:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2</id>
    <category term="business value" /><category term="large-scale-refactoring-sponsorship-series" /><category term="planning" /><category term="refactoring" /><category term="technical debt" />
    <content type="html"><![CDATA[<p><em>How to improve a factual business case for a refactoring to make it even more compelling to business people.</em> </p>

<p>In last post, I explained how to make a business case for a large scale refactoring using real numbers. Numbers are great, but they won&rsquo;t get us sponsorship by themselves. We need to understand them. We need to make sure they make sense. We need to make sure they are backing our refactoring up. In the end, we might need to improve them.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/refactoring-trim-teaser.jpeg" alt="Drawing of a hammer removing the G from refactoring written with stones. Trimming a refactoring is an effective way to increase its value, and make the business case better." /></p>

<p>This is the thirteenth post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>What If Payback Period is too long?</h2>

<p>If payback period is close enough, then great, we can go out and pitch the refactoring. Most of the time though, large scale refactorings take quite some time to payback.</p>

<h3>Product Life Expectancy</h3>

<p>The first thing to do is to put this in the perspective of the company&rsquo;s or product&rsquo;s life expectancy. Imagine a product which is 10 years old and expected to cash-in for another 10 years. In this context, a refactoring that pays for itself in 1 year <em>is</em> a great opportunity!</p>

<blockquote><p>💡 The longer the life expectancy of your product, the more refactoring you should invest in!</p></blockquote>

<p>Picking the age of the product as its life expectancy is realistic most of the time. New products have low life expectancy, but legacy systems seem to last forever!</p>

<h3>Split the refactoring!</h3>

<p>A strategy to reduce the payback period is to split this large scale refactoring. Can we make it smaller, more focused, or find sub steps that pay for themselves faster? Here again, <a href="http://philippe.bourgau.net/blog/categories/incremental-software-development/">incremental refactoring techniques</a> will be critical.</p>

<h3>Did we do an error?</h3>

<p>It&rsquo;s also possible that we did an error in the business case computation. Sampling and logging are error-prone techniques.</p>

<p>Is the iteration we took for sample is representative enough of the future work ? In doubt, we can re-do the sampling or the computation. Using better data leads to a better conclusion.</p>

<p>There are also other costs we did not take into account to be able to stick to man.hours. Let&rsquo;s have a look at these.</p>

<h2>Ideas for Improvements</h2>

<h3>Convert to Money</h3>

<p>If we have access to money numbers, we should be able to improve the figures with new costs.</p>

<p>First, we&rsquo;ll need the average wage of team members to convert our figures in real money.</p>

<p>If we have the figure, we can add the image cost of a bug to the non-refactoring cost.</p>

<p>Finally, if we have the revenue per feature, we can add the opportunity cost to the refactoring cost. Opportunity cost is the cost of not working on features !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/money.jpg" alt="Stacks of coins. If we have access to the good figures, it is possible to make the business case for large scale refactoring with real money instead of man.hours." /></p>

<h3>Use a similar refactoring</h3>

<p>Did someone do a similar refactoring in the past? If so, we can use it to improve your estimates about:</p>

<ul>
<li>Refactoring time</li>
<li>Productivity improvement</li>
<li>Time saved on bugs and support.</li>
</ul>


<h3>Is it a good idea in the end?</h3>

<p>Are the numbers still arguing against the refactoring? Maybe it&rsquo;s not such a great idea afterwards &hellip; We ought not to argue for something of dubious value, our credibility is at stake.</p>

<p>At this point, it might be a good idea to look for another improvement to do. Maybe there is other code to refactor or a new productivity tool to build.</p>

<blockquote><p>💡 Avoiding bad moves is a key benefit of making a business case for large scale refactoring!</p></blockquote>

<h2>Other References</h2>

<p>I&rsquo;m fond of this way of prioritizing software. It&rsquo;s the way out of bickering about best practices, and towards sustainable pace. If you want to learn more about this, here are 2 helpful references :</p>

<ul>
<li>A blog post <a href="https://www.scrum.org/resources/blog/making-tech-debt-visible">Making Technical Debt Visible</a> . It explains how to use the scrum sprint backlog to display the cost of technical debt.</li>
<li>A PluralSight course <a href="https://www.pluralsight.com/courses/making-business-case-for-best-practices">Making the Business Case for Best Practices</a>. It&rsquo;s just great. It contains a ton of practices to help us to get realistic numbers and estimates.</li>
</ul>


<p><a href="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/making-the-business-case.jpg"><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/making-the-business-case-small.jpg" alt="Visual notes from the Plural Sight course &quot;Making the Business Case for Best Practices&quot;. It contains many techniques that can be used for large scale refactoring" /></a><div class="image-credits">Visual notes from <a href="https://www.pluralsight.com/courses/making-business-case-for-best-practices">Making the Business Case for Best Practices</a></div><br></p>

<h2>Next post</h2>

<p>This is the thirteenth post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. We&rsquo;re reaching the end ! In <a href="http://philippe.bourgau.net/become-a-business-partner-and-stop-begging-for-refactoring/">next week&rsquo;s post</a>, I&rsquo;ll go over Business Partnership. There are some practices we can put in place once we have earned the trust from business people. Stay tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 1]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-09-20T08:58:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1</id>
    <category term="business value" /><category term="large-scale-refactoring-sponsorship-series" /><category term="planning" /><category term="refactoring" /><category term="technical debt" />
    <content type="html"><![CDATA[<p><em>With a bit of discipline, we can make a factual business case for a large scale refactoring that business people won&rsquo;t resist.</em></p>

<p>The <a href="http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity/">previous 2 articles</a> were about how to present large scale refactorings to business people. This might already get us a lot closer to having our large scale refactoring prioritized. Unfortunately, many times this won&rsquo;t be enough. Hopefully, we can add something to make the point to business people : numbers !</p>

<p>Business people love numbers. Presented well, they make decisions a lot easier to take. Making a business case is about estimating the costs of doing versus not doing a refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/legacy-vs-refactoring.jpg" alt="Drawing of legacy and a refactoring plan in a balance. Making a business case for a large scale refactoring is all about estimating the costs of both options" /></p>

<p>This is the twelfth post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Before anything</h2>

<p>Before we start any computation, we need to know what we are talking about. This means that as a team, we must agree and specify enough the refactoring we want to do. A small group design session might be useful at this point.</p>

<blockquote><p>💡 We must detail precisely what refactoring we want before making a business case for it.</p></blockquote>

<h2>Refactoring Cost</h2>

<p>We pay for a refactoring only once, when we do it. The cost of the refactoring is the time it will take to do it. We can do a team estimate on the refactoring and see the numbers.</p>

<p>From my experience large scale refactoring estimates are pretty inaccurate. If the team is having a hard time agreeing on estimates, it&rsquo;s a warning! Recipes against this are :</p>

<ul>
<li>Do a bit more design to better define the refactoring</li>
<li>Take a safety margin for your estimation. Times 2 is not a bad ratio to start with (cf. the risk management section of <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art of Agile</a>)</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/art-of-agile.jpg" alt="Cover of the book The Art of Agile Development. It contains a chapter about risk management which can be useful to make realistic long term estimates of a large scale refactoring" /></a></p>

<p>Eventually, be sure to convert your estimates in man.hours. If you don&rsquo;t, it will be difficult to compare this with the non-refactoring cost.</p>

<h2>Non-Refactoring Cost</h2>

<p>Contrary to the previous one, this cost is recurring. We&rsquo;ll only compute it for a single period of time, let&rsquo;s say an iteration. It also works fine with a month, a week or whatever.</p>

<blockquote><p>💡 The cost of not doing a refactoring is the sum of all the waste work generated by the current code.</p></blockquote>

<p>The non-refactoring can be computed like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>non-refactoring cost = Bug fix time + Support time + Lower productivity</span></code></pre></td></tr></table></div></figure>


<h3>Bug fixes &amp; Support time</h3>

<p>Bad code generates bugs and support time. By doing the refactoring well, we&rsquo;ll almost kill these wasteful activities.</p>

<p>We want to get the real amount of time the team is spending on bug fixes and support time related to our refactoring. Hopefully, our ticketing software might already contain enough time tracking data. That&rsquo;s what I used when we did <a href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">our improvement kata</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/types-of-tasks-small.jpg" alt="Distribution of the different kind of tasks over sprints that we extracted from Jira when we did the improvement kata. Finding where the time went is useful when making a business case for a large scale refactoring" /></p>

<p>If not, we&rsquo;ll unfortunately need to do a bit of manual time tracking for a while. It should be fine to cover a few days, and extrapolate for a longer period. Unbelievably, some people made time tracking fun by <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">using Lego Blocks</a>!</p>

<p><a href="https://code.joejag.com/2018/lego-workstream-visualisation.html"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/lego_1.jpg" alt="Joe Wright's team has had success logging time with lego blocks. Logging is time is crucial to estimate the non-refactoring cost when making a business plan" /></a><div class="image-credits">By <a href="https://twitter.com/vanschoo">Nancy Van Schooenderwoert</a></div><br></p>

<h3>Lower productivity</h3>

<p>Bad code also makes us slow! By doing this large scale refactoring, we should get a productivity boost.</p>

<p>Here again, we are only going to measure for an iteration, and extrapolate for the future. If we are working with iterations, we should have an &lsquo;estimation&rsquo; meeting of some sort. At the end of it, we should have selected a list of &lsquo;task&rsquo; for next iteration.</p>

<p>Next time you go through this meeting, we&rsquo;ll need to estimate these tasks twice.</p>

<ol>
<li>Do a normal estimation</li>
<li>Now, imagine we did the refactoring. Re-estimate.</li>
</ol>


<p>The difference between the estimates is the non-refactoring productivity loss.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>productivity loss = normal estimation - estimation after refactoring</span></code></pre></td></tr></table></div></figure>


<h2>Payback Period</h2>

<p>We need to convert everything in man.hours. We should now have figures for both total refactoring and recurring non-refactoring cost.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>payback period = refactoring cost / non-refactoring cost</span></code></pre></td></tr></table></div></figure>


<p>The payback period is the refactoring cost divided by the non-refactoring cost. It&rsquo;s the time after which the refactoring will pay for itself.</p>

<h2>To be continued</h2>

<p>We&rsquo;re done with computations. <a href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2/">Next week</a>, I&rsquo;ll go over what to do with these numbers. We want to make business case for this large scale refactoring an unmissable offer!</p>

<p>This is the twelfth post in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactorings</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Effective warning signals that will get you sponsorship for a large scale refactoring]]></title>
    <link href="http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-09-13T13:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring</id>
    <category term="joke" /><category term="large-scale-refactoring-sponsorship-series" /><category term="psychology" /><category term="refactoring" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>In 2005, professors Bizer and Petty showed something interesting about human behavior. People make more efforts to avoid what they don&rsquo;t want, than to get what they would like. The study itself is interesting, you can have a look at it <a href="https://www.jstor.org/stable/41057679?seq=1#page_scan_tab_contents">here</a>. For example, it explains why political campaigns are getting more and more nasty. There&rsquo;s also a lesson for us, mere developers. We&rsquo;ll get more sponsorship for our refactorings if we highlight the dangers of not doing them !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/legacy-monster.jpg" alt="Drawing of a warning panel with legacy code written below an awful monster. Sending effective warning signals is a good way to get sponsorship for large scale refactorings" /></p>

<p>This is the 11th post of a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t already, start by <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>From the inside, many systems are in such a messy state that seem like a catastrophe waiting to happen. Unfortunately, this mess is completely invisible to non-developers ! Here are a few techniques to show how close we are from a total breakdown !</p>

<h2>Effective Warning Signal #1 Pranks</h2>

<p>If you have the guts and your company is fun enough, you can try one of <a href="http://philippe.bourgau.net/the-size-of-code/">these pranks</a> 😉.</p>

<p><a href="https://www.flickr.com/photos/kk/18768224"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/paper-on-desk.jpg" alt="A photo of a desk littered under paper. As if we had printed the whole source code and dumped in on a non-developer desk. Pranks are a good way to get sponsorship for large scale refactorings" /></a></p>

<div class="image-credits">What if we printed the whole source code and dumped in on non-developers desks ? By <a href="https://www.flickr.com/photos/kk/">Kris Krüg</a>, <a href="https://creativecommons.org/licenses/by-sa/2.0/" title="Attribution-ShareAlike 2.0 Generic">CC BY-SA 2.0</a>, <a href="https://www.flickr.com/photos/kk/18768224">Link</a></div>


<br>


<p>They&rsquo;re bound to have a big impact &hellip; but they might also get you fired ! We should be creative and find both effective and acceptable pranks. Pranks are a lot more effective than we first think. <a href="https://en.wikipedia.org/wiki/Nonviolent_revolution">Non-Violent Revolution</a> activists have actually used <a href="http://laughtivismgroup5.blogspot.com/2016/04/laughtivism.html">Laughitism</a> to take dictators down ! For a good (and unexpectedly fun) read on the topic, have a look a <a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309">Blueprint for a Revolution</a>. It was written by Serb non violent activist <a href="https://en.wikipedia.org/wiki/Sr%C4%91a_Popovi%C4%87_(activist">Srdja Popovic</a>) member of <a href="https://en.wikipedia.org/wiki/Otpor!">OTPOR!,</a> who brought <a href="https://en.wikipedia.org/wiki/Slobodan_Milo%C5%A1evi%C4%87">Millosevic</a> down .</p>

<p><a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/blueprint-revolution.jpg" alt="Cover of the book Blueprint for Revolution. Laughitism is a non violent technique that we can use against Legacy Code to get sponsorship for large scale refactorings" /></a></p>

<p>Promised, as soon as I manage to use such a prank without getting fired at work, I&rsquo;ll blog about it !</p>

<h2>Effective Warning Signal #2 Dice of Debt Game</h2>

<p>While doing my researches for this article, I found the <a href="https://www.agilealliance.org/dice-of-debt-game/">Dice of Debt</a> game. It&rsquo;s aimed at making business people experience the long term legacy code drag. It has good reviews, have a try at it with your business people and post back your feedback ! I&rsquo;ll do so as soon as I have a chance to test it myself.</p>

<h2>Effective Warning Signal #3 Higher authority</h2>

<p>Appealing to a higher authority works as long as people recognize this authority as so. Knowing the people in front of us, it&rsquo;s our job to bring up the reference in an effective way. Here are</p>

<p>In <a href="https://www.youtube.com/watch?v=xEqRtIeD51k">this talk</a>, <a href="http://docondev.com/">Doc Norton</a>, a recognized technical debt expert, shows the link between technical debt and productivity.</p>

<p><a href="https://www.youtube.com/watch?v=xEqRtIeD51k"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/technical-debt-trap.jpg" alt="Slide from Doc Norton's Technical Debt Trap talk. It shows how technical debt impacts the cost of change and can be an effective warning signal for a large scale refactoring" /></a></p>

<p>Showing similarities between our own code metrics and this graph might ring the alarm bell in business people.</p>

<p>Another interesting model out there is <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM</a>. It was built through the <a href="https://www.agilealliance.org/">Agile Alliance</a>. It can be used to estimate the value of a codebase when buying a company. Maybe business people will listen if we tell them that their software would be worth 0 on the market ?</p>

<h2>Effective Warning Signal #4 Metaphor</h2>

<p>I was recently working with a team that is preparing a pitch to get sponsorship for a refactoring. They want to rework multithreaded code that uses locks and other low level synchronization. The hand written synchronization is becoming difficult to maintain. They would like to refactor it with the <a href="https://en.wikipedia.org/wiki/Actor_model">actor model</a>. Business people will likely argue that this module is now stable enough and should stay as is. We all know that this is not the case with bogus multithreaded code : the more you use it, the more bugs you find ! They had the idea to use the email vs phone metaphor. No one in the room could have handled all his daily emails with a phone only ! Everyone understood why it was necessary to switch to actors.</p>

<p>In <a href="https://engineering.riotgames.com/news/taxonomy-tech-debt">A Taxonomy of Technical Debt</a>, <a href="https://www.linkedin.com/in/bill-clark-37444a133/">Bill Clark</a> adds another dimension to technical debt. On top of the classic principal and interests he adds contagion. In fact, it&rsquo;s a bit as if he&rsquo;s ditching the <a href="https://martinfowler.com/bliki/TechnicalDebt.html">technical debt metaphor</a> for the disease metaphor ! Disease have a cost to live with, a cost to heal from and a contagion rate. People at the agile alliance also noted this <a href="https://www.agilealliance.org/technical-debt-systemic-problem/">self reinforcing behavior</a>. This metaphor might be better for &ldquo;<a href="https://en.wikipedia.org/wiki/Cruft">cruft</a>&rdquo;. <a href="https://twitter.com/wardcunningham?lang=fr">Ward Cunningham</a>&rsquo;s original metaphor of technical debt only applied to tested code.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pqeJFYwnkjE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>💡 A disease might be a better metaphor than debt for code cruft.</p></blockquote>

<h2>Effective Warning Signal #5 A horror story</h2>

<p>We said that a successful refactoring story will be useful to frame ours as an opportunity. We can have more impact with the opposite ! We should relate a large software failure, that had impact on the business to bad code. The bigger the impact on the business, the better it is. If you (unluckily) have something like that at your company, it should be a very powerful argument. If you don&rsquo;t, try to find a public story on the internet, or a public conference. For example here is one from <a href="https://www.makeuseof.com/tag/worst-programming-mistakes-in-history/">The 10 Worst Programming Mistakes in History.</a> </p>

<blockquote><p>💡 The <a href="https://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (a radiation therapy machine) killed 6 people because it was difficult to perform automated tests !</p></blockquote>

<p>We can draw parallels and forecasts, to highlight the high risk of failure.</p>

<h2>Almost there</h2>

<p>This was the 11th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. Unfortunately, presenting refactoring in a good way only brings us so far. If we want to be really convincing, we need to use quantitative data. That&rsquo;s going to be the topic of my <a href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1/">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presenting a large scale refactoring as a business opportunity]]></title>
    <link href="http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-09-06T06:27:00+02:00</updated>
    <id>http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity</id>
    <category term="large-scale-refactoring-sponsorship-series" /><category term="psychology" /><category term="refactoring" />
    <content type="html"><![CDATA[<p>Have you ever tried to talk about refactoring with business people ? Most of the time, the matter is pushed aside or received with rolling eyes &hellip; A few weeks ago, someone on <a href="https://news.ycombinator.com/">Hacker News</a> asked the question &ldquo;<a href="https://news.ycombinator.com/item?id=17600503&amp;utm_source=hackernewsletter&amp;utm_medium=email&amp;utm_term=ask_hn">As a CTO, what is your most frustrating problem with technical debt?</a>&rdquo;. Here is the most voted answer</p>

<blockquote><p>I think a lot of the time when a developer shouts “technical debt” what they are really shouting is “code someone else wrote that I’d rather rewrite than understand”. (The rest of the time is the same but they’ve understood it enough to think it’s a disaster area.)</p>

<p>I have found it’s best to not take tech debt complaints very seriously and instead look at actual success metrics. For example if every change to a bit of code introduces new bugs then that might be a reason to tidy it up.</p>

<p><a href="https://github.com/ghiculescu">ghiculescu</a></p></blockquote>

<p>We need a constructive dialogue with business people to get sponsorship for important large scale refactorings. Let&rsquo;s see what we can do to have one. This is the 10th post of a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t start by <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-22-presenting-a-large-scale-refactoring-as-a-business-opportunity/refactoring-opportunity.jpg" alt="Drawing of a tree growing on top of the word refactoring. The key to getting sponsorship for a large scale refactoring is to present it as a business opportunity" /></p>

<h2>Presenting a business opportunity</h2>

<p>We must be very careful about how we present refactorings. We don&rsquo;t want them to be seen as unnecessary chores, or the latest tech fashion to follow. These don&rsquo;t bring value, and business people will run away from such refactorings. Instead, we should present business opportunities for higher productivity to invest in.</p>

<h3>Presenting a similar success story and its impact on the business</h3>

<p>Most of our companies have been through similar refactorings in the past. We can try to find a successful one and draw parallels to forecast benefits for the business. If the company is too young to have any or they were all failures, we can have a look in the whole industry. When I was at <a href="https://www.devoxx.fr/">Devoxx in Paris</a>, <a href="https://twitter.com/hervelourdin?lang=fr">Hervé Lourdin</a> the CTO of <a href="https://www.videdressing.com/">VideDressing</a> presented how they managed to do a large scale refactoring. Among other things, he went over how he managed to get sponsorship from his board. If you understand French, have a look at <a href="https://www.youtube.com/watch?v=UZt07-dsTdU">the full talk</a>. In this case as in most, a likely promise of reduction in the costs of bugs and new features is what made the point.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/UZt07-dsTdU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>💡 In most cases, a likely promise of reduction in the costs of bugs and new features is what gets a refactoring prioritized.</p></blockquote>

<h3>Be a Badass Developer</h3>

<p>I wrote a lot about being a <a href="http://philippe.bourgau.net/blog/categories/badass-developer/">badass developer</a> earlier in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">this series</a>. This is when it becomes crucial. Being badass is a way to gain the trust of business people. Without this trust business people will react like the guy on Hacker News. Badass developers are way better at presenting large scale refactoring as business opportunities.</p>

<h3>Find a path to do incremental delivery</h3>

<p>Without incremental delivery, a refactoring risks delaying features for an unknown time. That scares the hell out of business people. <a href="http://philippe.bourgau.net/blog/categories/incremental-software-development/">Day to day incremental refactoring best practices</a> will save the day here. They&rsquo;ll actually help 3 times !</p>

<ol>
<li>To already perform a lot of refactoring in day to day work</li>
<li>To learn how to find an incremental refactoring path to present to business people</li>
<li>To prove that we know what we are talking about : we&rsquo;ve already been doing it for a while</li>
</ol>


<p>If you haven&rsquo;t, have a look at <a href="http://philippe.bourgau.net/blog/categories/incremental-software-development/">the articles about incremental refactoring techniques</a> that I wrote earlier in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">this series</a>.</p>

<h2>Pitch It !</h2>

<p>In &ldquo;corporate&rdquo; environments, building credibility is a lot about being convincing. The more we learn to be convincing, the more likely we are to have our refactoring prioritized. If you are ready to spend some time learning how to pitch, I recommend reading <a href="https://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854">Pitch Anything</a>. At least have a look at <a href="https://www.marketingfirst.co.nz/2013/10/pitch-anything-an-innovative-method-for-presenting-persuading-and-winning-the-deal-by-oren-klaff/">its summary</a>. It contains many actionnable nuggets to deliver powerful pitches. Here are a few.</p>

<p><a href="https://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854"><img src="http://philippe.bourgau.net/imgs/2018-08-22-presenting-a-large-scale-refactoring-as-a-business-opportunity/pitch-anything.jpg" alt="Cover of the book Pitch Anything. Pitching a large scale refactoring as a business opportunity is a great way to get it prioritized" /></a></p>

<p>When we present an idea, we should put &ldquo;frames&rdquo; (time, authority &hellip;) in place to gain control of the discussion. For example, a time frame is a kind of deadline that will urge people to take action now. (Before overthinking it &hellip;) </p>

<p>We should create tension by alternating phases where we are giving and phases where we take a step back. Following the same idea, it also mentions the <a href="https://en.wikipedia.org/wiki/The_Tao_of_Steve">Tao of Steve</a> to rule at negotiations :</p>

<ul>
<li>Don&rsquo;t want anything</li>
<li>Show that you are really good</li>
<li>Leave at the crucible moment</li>
</ul>


<p>Giving a great pitch is a great way to present large scale refactorings as business opportunities.</p>

<blockquote><p>💡 Pitching is a great skill for developers to get sponsorship for a refactoring.</p></blockquote>

<h2>More to come</h2>

<p>This was the 10th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. In <a href="http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/">next week&rsquo;s post</a>, I&rsquo;ll go over how to use a recent discovery about how our brain works to become even more convincing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #4 : a Pattern Language]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-08-30T08:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language</id>
    <category term="ddd" /><category term="incremental-software-development" /><category term="large-scale-refactoring-sponsorship-series" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><em>It can sometimes be a real challenge to integrate, let alone deploy, a refactoring step by step ! Here are some patterns that make this easier.</em></p>

<p>This is the ninth post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>. It&rsquo;s also the fourth about incremental software development strategies for large scale refactoring. My point is that it&rsquo;s not possible to sell a refactoring to business people until we master those :</p>

<ol>
<li>How to find the time to refactor in our daily work</li>
<li>How to learn to work in baby steps</li>
<li>How to organize and manage this ongoing effort as a team</li>
</ol>


<p>What about when it is not easy to split the work into incremental steps ?</p>

<p>Do you remember the DSL parser refactoring story in mentioned in <a href="http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/">another post</a> ? Switching to a different parser technology incrementally sounds like an impossible mission. Even so, that&rsquo;s what we did ! </p>

<p>Here&rsquo;s another story. A long time ago, I was working in a bank. We were to migrate imperative <a href="http://www.cplusplus.com/">C++</a> financial contract models into declarative definitions in <a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language">C#</a>). We had to maintain an ugly adaptation layer. It made it possible migrate and deliver step by step. In the end, we suffered almost no bugs resulting from this transition.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/pattern.jpg" alt="Drawing of the pattern for a T-shirt. Patterns can be useful for Incremental Software Development of Large Scale Refactoring" /></p>

<h2>Why the effort ?</h2>

<p>Incremental refactoring implies going through Frankensteinesk intermediate situations. Situations where both the legacy and the new models exist in the software at the same time. This kind of adaptation layer costs time and energy, but doesn&rsquo;t add value to the product either ! What&rsquo;s the point of going through this ? Isn&rsquo;t a Big-Bang change cheaper ? Here is why it is still worth doing :</p>

<ol>
<li>It&rsquo;s safer. With incremental delivery, we confirm that what we are doing is working in production. On top of that, if something goes wrong, as we only delivered a small increment, the problem is easier to diagnose.</li>
<li>It&rsquo;s also safer in term of priorities. The system keeps working during all the refactoring. There&rsquo;s no pressure to finish it before we can move on to the next &lsquo;valuable&rsquo; feature. As <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">I explained before</a> it makes it possible to pause, and why not stop there for the moment. This can be helpful if we hit a new urgent priority.</li>
<li>Finally, it creates value earlier. Instead of having to wait 2 months to get all the value, you start getting a bit of this value every week. Even refactoring create value ! They reduce the time wasted to fix bugs. They increase our productivity. Sometimes, they even improve Non Functional Requirements of the system.</li>
</ol>


<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/value.jpg" alt="Plot of value over time in incremental vs big-bang. We can see that incremental software development creates more value." /></p>

<p>As we can see, the goal of incremental refactoring is not only to work in small steps. We also want to find a way to deliver <em>value</em> incrementally !</p>

<blockquote><p>💡 Incremental refactoring is not only about baby steps, it&rsquo;s also about early value delivery !</p></blockquote>

<h2>A Mini pattern language</h2>

<p>As I said earlier, this is easier said than done. Some piece of code won&rsquo;t let you refactor them step by step easily. Some will be too obscure to know where to start. Some will be just huge. Others will depend on an all encompassing third party. etc.</p>

<p>Here is a short pattern language to deliver large scale refactorings incrementally.</p>

<h3><a href="https://www.infoq.com/news/2016/05/domain-experts-ddd">Discuss with a domain experts</a></h3>

<h4>Goal</h4>

<p>We need to refactor code containing a lot of domain knowledge</p>

<h4>Conditions</h4>

<p>We have a domain expert available</p>

<h4>Therefore</h4>

<p>Have regular discussions with the domain expert to find the best modeling possible.</p>

<h4>Consequences</h4>

<ul>
<li>💚 We get simpler code than by trying to replicate the twisted legacy logic</li>
<li>💚 Can save a lot of work by skipping deprecated aspects.</li>
<li>💚 Chance to get bug fixes or new features for free</li>
<li>⚠️ The system does not exactly behave as it used to, which can cause integration problems</li>
</ul>


<h4>Difficulties</h4>

<p>It can sometimes be difficult to find a domain expert &hellip;</p>

<p>A lot of the presentations at the July Paris DDD Meetup were about how to find domain experts. Who actually seem to be pretty rare beasts ! Here are my notes.</p>

<p><a href="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/ddd-from-the-trenches.jpg"><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/ddd-from-the-trenches-small.jpg" alt="Mind map of my notes at July Paris DDD Meetup. The point was how to find a domain expert" /></a></p>

<h3><a href="http://dddcommunity.org/library/evans_2011_2/2">Bubble context</a></h3>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/bubble-context.jpg" alt="Drawing of developer and business expert inflating a bubble together. The bubble context is a way to incrementally grow a large scale refactoring from within the software" /></p>

<h4>Goal</h4>

<p>We want to refactor a large piece of code with no Big-Bang</p>

<h4>Conditions</h4>

<p>We have access to the internals of the code to refactor</p>

<h4>Therefore</h4>

<ul>
<li>Create a new bubble of clean code (a namespace, a package &hellip;)</li>
<li>Rewrite a piece of legacy code in the bubble</li>
<li>From the legacy code, delegate to the bubble</li>
<li>Repeat until the legacy code is not used anymore</li>
</ul>


<h4>Consequences</h4>

<ul>
<li>💚 Enables a step by step continuous delivery of the new version</li>
<li>💚 It is possible to eventually transform the API of the system</li>
<li>💚 It&rsquo;s easy to add new features in the bubble long before the refactoring is over</li>
</ul>


<h4>Difficulties</h4>

<ul>
<li>Need to understand the legacy enough to find good delegation points</li>
<li>Need to understand what the old small piece of code was doing to re-write it. A domain expert might be mandatory.</li>
</ul>


<h3><a href="https://www.martinfowler.com/bliki/StranglerApplication.html">Strangler</a></h3>

<p>The bubble context grows from the inside, but the strangler starts from the outside.</p>

<h4>Goal</h4>

<p>We want to refactor a large piece of code with no Big-Bang</p>

<h4>Conditions</h4>

<p>We can keep the same interface (API) for the legacy and the refactored versions</p>

<h4>Therefore</h4>

<ul>
<li>Wrap the existing code</li>
<li>Re-implement calls in the wrapper</li>
<li>Delegate the rest to the legacy</li>
<li>Repeat until you support all the interface</li>
<li>Remove the legacy code</li>
</ul>


<h4>Consequences</h4>

<ul>
<li>💚 Enables a step by step continuous delivery of the new version</li>
<li>⚠️ Maintenance of the wrapper and both versions of the code during all the refactoring</li>
</ul>


<h4>Difficulties</h4>

<ul>
<li>Interaction between the legacy and the refactored version is not always as simple. For example when the wrapped code is stateful</li>
<li>The granularity of the steps is the (method) calls to the interface. They need to be small enough for the whole process to be incremental</li>
</ul>


<p>Remember my story about how we switched our DSL parser to <a href="http://www.antlr.org/">ANTLR</a> ? We used a Strangler to do this.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/strangler.jpg" alt="Drawings of a strangler plant growing around legacy code. The strangler is very effective to do incremental software development of doing large scale refactorings" /></p>

<h3><a href="https://martinfowler.com/articles/feature-toggles.html">Feature toggles</a></h3>

<p>Sometimes, we just don&rsquo;t find a way to deliver a refactoring to users step by step. I&rsquo;ve seen situations where all incremental paths implied a temporary impact on NFRs. Ex : Keeping both versions of the code implied an increase in resource consumption.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/switch.jpg" alt="Drawings of an electric switch. Feature toggles are sometimes the last resort to do incremental software development of large scale refactoring" /></p>

<h4>Goal</h4>

<p>Incrementally build a refactoring that we cannot deliver piece by piece to all our users.</p>

<h4>Conditions</h4>

<p>When we cannot find a way to incrementally deliver our refactoring to bulk of our users</p>

<h4>Therefore</h4>

<p>From the code, dynamically switch to the different versions depending on runtime configuration. This way, we let most users stick to the legacy version. Yet, we can build, test, integrate and deploy the new version to beta testers.</p>

<h4>Consequences</h4>

<ul>
<li>💚 We can build, integrate and test our refactored code in baby steps</li>
<li>💚 We can beta and A/B test our refactored code</li>
<li>⚠️ We need to maintain and evolve both versions of the code for a long time</li>
<li>⚠️ We need to maintain the switches in the code</li>
<li>⚠️ We only deploy to beta testers, and don&rsquo;t get as much early value</li>
<li>⚠️ Duplicate the Continuous Delivery pipeline to test different feature toggle sets</li>
</ul>


<h4>Difficulties</h4>

<p>Maintaining <a href="https://dzone.com/articles/feature-toggles-are-one-worst">feature toggles is a mess</a>. Thus, we need to</p>

<ul>
<li>As much as possible, prepare the code to reduce the number of switches. Ref : <a href="https://martinfowler.com/bliki/BranchByAbstraction.html">Branch by abstraction</a></li>
<li>Hunt down the number of active feature toggles at any given time</li>
<li>Reduce the scope of toggles. Where possible, we should push things out of the toggle into stranglers or bubbles.</li>
</ul>


<p>Feature toggles are an alternate to branches. Even if toggles are painful to use, branches are worse ! I&rsquo;m not going to go over branches. If you want to see why we should not use branches, check <a href="http://videos.ncrafts.io/video/275529985">this talk</a>.</p>

<iframe src="https://player.vimeo.com/video/275529985" width="640" height="360" frameborder="0" allowfullscreen></iframe>


<blockquote><p>💡 Feature toggles are painful, but branches are worse !</p></blockquote>

<h2>Final word</h2>

<p>I&rsquo;m done writing about Incremental Software Development Strategies for Large Scale Refactoring. This is only what I currently know about this very important topic. There&rsquo;s one last thing we need to do to be successful at it. We all need to keep an eye on new ideas from the community, and to share this with our teams as much as possible.</p>

<p>This was the ninth post in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t start by <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a> ! In <a href="http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity/">next post</a>, I&rsquo;ll start to go over how to present a refactoring in financial terms to business people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #3 : Manage it !]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-08-23T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it</id>
    <category term="code-analysis" /><category term="incremental-software-development" /><category term="large-scale-refactoring-sponsorship-series" /><category term="mikado-method" /><category term="refactoring" /><category term="selforganizing" />
    <content type="html"><![CDATA[<p><a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">My previous posts</a> where about how to find and use small time slots for large scale refactorings. <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">Refactoring step by step</a> is a series of slack slots, sub tasks of features and boy scout rule increments. Unfortunately, keeping track of all these is a challenge of its own. Here are some organization best practices for that.</p>

<p>Here is a little story of what can go bad. I used to work in a team which <a href="http://philippe.bourgau.net/refactoring-trick-to-insert-a-wrapper/">had a high &lsquo;refactoring culture&rsquo;.</a> Everyone in the team wanted to apply the kind of practices I mentioned in my previous posts. To make things more tricky, we were <a href="http://philippe.bourgau.net/from-zero-to-pair-programming-hero/">working from 2 cities</a>. We had introduced slack time and developers would tackle refactoring at the end of every iteration. As we did not particularly organize or collaborate on slack time, we soon ran into conflicts. People wanted to refactor the same code, maybe in different ways ! After a while we also had too many large scale refactorings going on at the same time. This slowed down progress, increased the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> and the failure rate. Worst of all, it made it difficult to refocus on a newly discovered but urgent refactoring.</p>

<p>With a bit of organization though, we got things to work. Let&rsquo;s see how we managed it.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/manage-it.jpg" alt="Drawing of a calendar entitled &quot;Manage It !&quot;. Collaboration and organization are key to succeed to use incremental software development for large scale refactorings." /></p>

<p>This is the eighth post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Manage it with a Design Vision</h2>

<p>To succeed at anything, we need to know where we are going. It&rsquo;s the same for large scale refactorings. We don&rsquo;t need to have all the details of what we want to build. We do need a good enough draft to avoid going in the wrong direction. That&rsquo;s even more true when we work as a team. Without a shared design vision, people will refactor in conflicting directions.</p>

<p>It&rsquo;s very important to share the vision with all the team. We can stick high level UML sketches on the walls for example. As <a href="https://twitter.com/kentbeck">Kent Beck</a> suggests, we can also use <a href="http://www.extremeprogramming.org/rules/metaphor.html">metaphores</a> to communicate the design. In <a href="https://vimeo.com/275530146">this talk</a>, <a href="http://www.natpryce.com/">Nat Pryce</a> explains that it&rsquo;s a great way start, but that we will have to drop the metaphore later.</p>

<iframe src="https://player.vimeo.com/video/275530146?title=0&byline=0&portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<div class="image-credits">By <a href="https://vimeo.com/275530146">Nat Pryce - What we talk about when we talk about software</a> from <a href="https://vimeo.com/newcrafts">NEWCRAFTS Conferences</a> on <a href="https://vimeo.com">Vimeo</a></div>


<br>


<p>The idea is not to waste time in a <a href="https://en.wikipedia.org/wiki/Big_Design_Up_Front">Big Design Up Front</a>. We just want to draft a vision :</p>

<ul>
<li>We can run a Design level Event Storming (I guess I&rsquo;ll have to blog about this some day)</li>
<li>We can grab a copy of <a href="https://www.amazon.com/Gamestorming-Playbook-Innovators-Rulebreakers-Changemakers/dp/0596804172/ref=sr_1_1?ie=UTF8&amp;qid=1534409953&amp;sr=8-1&amp;keywords=gamestorming">Gamestorming</a> and run another kind of collaborative design game</li>
<li>Or a few team members could work on something the way they prefer</li>
</ul>


<p>Whatever the technique we start with, we&rsquo;ll be able to refine and evolve the vision down the road.</p>

<h2>Manage it with Mikado Graphs</h2>

<p>Remember the &lsquo;<a href="http://mikadomethod.info/">Mikado Method</a>&rsquo; from <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">my previous post</a> ? It&rsquo;s a technique to code and deploy large scale refactorings in baby steps. If you had a look at the reference links, you&rsquo;ll might seen mentions of a &lsquo;Mikado Graph&rsquo;. Here is what it looks like :</p>

<p><a href="http://mikadomethod.info/"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/mikado-graph.png" alt="Sample Mikado Graph. The Mikado graph is a great tool to manage and collaborate on incremental software development of large scale refactoring." /></a></p>

<div class="image-credits">Sample mikado graph from <a href="http://mikadomethod.info/">http://mikadomethod.info/</a></div>


<br>


<p>As the number of refactoring steps grows, it becomes tricky to keep track of them all. A simple way is to draw them as nodes in a graph, and tackle the work from the leaves. If you are interested, check <a href="http://philippe.bourgau.net/blog/categories/mikado-method/">these posts about the Mikado Method</a>. In my previous team, we became fans of the Mikado Method. We even built a tool to generate mikado graph from <a href="https://www.atlassian.com/software/jira">JIRA</a> (our ticket management system) dependencies ! Using colors, we could track where we stood in the refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/generated-mikado-graph.jpg" alt="Sample Mikado Graph generated by our tool. Automating around Mikado graphs is of great help for large scale refactoring." /></p>

<p>The key advantage of mikado graphs is that we can stick them on the wall. This enables all the team to know where we stand in a refactoring. This way, team members can collaborate during their slack. It can also make the boy scout rule more effective. When a developer happens to touch a file that appears in the graph, he or she can move it further in the good direction.</p>

<blockquote><p>💡 A key benefit of mikado graphs is that we can stick them on the wall for everyone to know where we stand in a refactoring.</p></blockquote>

<h2>Manage it with Metrics</h2>

<p>I mentioned coding conventions and a clear <a href="https://www.agilealliance.org/glossary/definition-of-done/">Definition of Done</a> in <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">a previous post</a>.  Having code quality constraints is the compass of constant merciless refactoring. To make this actionable and real, we should take the time to setup an automatic metrics system. For example :</p>

<p><a href="https://youtu.be/Env47tQewIA?t=2685"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/tech-debt-trap.jpg" alt="Doc Norton's talk about &quot;The Technical Debt trap&quot;. His metrics are very useful to manage large scale refactoring." /></a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=Env47tQewIA">Doc Norton suggests</a> to track maintainability, coverage, complexity and coupling over time.</li>
<li>The <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM model</a> suggests using specific rules to create Definition of Done constraints</li>
</ul>


<p>Putting this in place will help everyone in the team to know if she or he should do more or less refactoring. The first benefit is that it prevents under and over engineering on new code. The second benefit is progress validation through metrics changes as we refactor.</p>

<p><a href="https://codeclimate.com/github/philou/planning-poker"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/code-climate-dashboard.jpg" alt="Sample metrics dashboard. Out of the box, Code Climate supports 3 out of the 4 metrics suggested by Doc Norton. This can be really helpful to manage incremental software development." /></a></p>

<h2>Manage it with a bit of Planning</h2>

<p>Granted, planning is not the most fun part of our job. It can save us a ton of work though. <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">Joe Wright explains</a> how they doubled their productivity by spending more time planning. If we want to make a good job of incremental refactoring, we&rsquo;ll need to spend enough time preparing it. Important questions are :</p>

<ul>
<li>What are the most important refactorings to work on ?</li>
<li>How many refactorings should we tackle at the same time ?</li>
<li>Are we making good progress on our refactorings ?</li>
<li>Why is this refactoring not yielding any visible results through our metrics system ?</li>
<li>Are there any news that should change our plans ?</li>
<li>Are we doing enough refactoring to keep things under control ?</li>
<li>What are the next steps in these refactorings ?</li>
<li>etc</li>
</ul>


<p>I&rsquo;m not talking about a big 6 month planning but rather regular short planning sessions. In <a href="https://www.scrum.org/">Scrum</a> this kind of planning happens every sprint. To make plannings more visual, engaging and fun, we might us something like <a href="https://jpattonassociates.com/user-story-mapping/">Story Mapping</a>. (I guess I should blog about this someday.)</p>

<blockquote><p>💡 Keeping a Work In Progress limit on refactorings is essential.</p></blockquote>

<h2>Manage it through Time-Boxing</h2>

<p>One last advice before I&rsquo;m done. We must be very careful to time-box our work on refactoring increments. It&rsquo;s all too easy, to get caught up in a refactoring during the slack at the end of the iteration. If we let the refactoring spill on features we risk loosing the business people&rsquo;s trust.</p>

<p>Here again, using extra small baby steps helps to pause the refactoring. Another way is to do <a href="https://en.wikipedia.org/wiki/Kanban_(development">Kanban</a>) style slack. Replace end of sprint slack by a fixed number of people slacking all the time. But I&rsquo;ll come back to this in more details in a future post.</p>

<h2>Next post</h2>

<p>Using this set of practices my team was able to deliver large scale refactorings in small steps. That said, some refactorings are very difficult to technically deliver incrementally. Fortunately, people have come up with patterns like the Strangler and the Bubble Context to cope with this. That&rsquo;s what I&rsquo;ll go over in the <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/">next post</a>.</p>

<p>This was the eighth post in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. I&rsquo;ve already been through why it&rsquo;s so difficult to get sponsorship for a refactoring. Why a badass developer attitude is important ? How to deliver refactorings steps by steps ? If you haven&rsquo;t start by <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #2 : Baby Steps]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-08-09T08:50:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps</id>
    <category term="coding-dojo" /><category term="incremental-software-development" /><category term="large-scale-refactoring-sponsorship-series" /><category term="mikado-method" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><em>How can we exploit short time slots here and there to perform large scale refactoring?</em></p>

<p><a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">My previous post</a> was about how to get slots of time in your daily (or weekly) work to do some refactoring. I left my readers with the promise of techniques to fit the refactoring work into these small slots.</p>

<p>Obviously, it won&rsquo;t be possible to perform any refactoring of any size in this way. With a bit of discipline and know-how though, it is possible to deal with quite a lot by splitting them up.</p>

<p>Baby steps are small increments of working software. The idea is that we test, commit, integrate and even deploy every small code change ! Using baby steps, we can perform large scale refactorings little by little. Refactoring in this way might seem involved, but it&rsquo;s so much safer that it&rsquo;s <a href="http://philippe.bourgau.net/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">a no brainer once you&rsquo;ve tried it</a> ! Refactoring in baby steps can be challenging to master though.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-07-incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/baby-steps.jpg" alt="Baby footprints. Taking really small baby steps when going through a large scale refactoring is safer" /></p>

<p>10 years ago, I used to work in a large bank in Paris. I had been dabbling on my own with <a href="https://en.wikipedia.org/wiki/Extreme_programming">eXtreme Programming</a> for a few years, when we started a small project. I was to become the informal XP coach. The project was about connecting to an online brokering service. It involved adapting an existing domain library. It went out pretty well. More precisely, we created very few bugs in production, which was very different from the norm at the time. I remember this feedback from the manager :</p>

<blockquote><p>We managed to move the code from X to Y through a succession of working baby steps ! That&rsquo;s pretty uncommon ! A manager in 2006</p></blockquote>

<p>Keep in mind that this was 10 years ago. We had not done anything special except trying to apply eXtreme Programming. Nowadays, as Continuous Integration has become mainstream these skills are becoming more common. That said, we still need to learn how to apply incremental software development to large scale refactoring. This is what I&rsquo;m going to write about today.</p>

<p>This is the seventh post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Team TDD Coding Dojos</h2>

<p>Learning to work in baby steps is not as complicated as it might first seem. The safest and easiest way is to setup a <a href="http://philippe.bourgau.net/blog/categories/team-randori-series/">team TDD coding dojo</a>. With its Red-Green-Refactor loop TDD sets up a baby steps rhythm. As I&rsquo;ll explain in <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/">my next post</a>, baby steps work best when all the team uses them. That&rsquo;s another thing the team Coding Dojo helps with.</p>

<blockquote><p>💡 TDD has a baby steps rhythm baked in.</p></blockquote>

<p>We can push the learning further. For example, we can use the <a href="http://kata-log.rocks/baby-steps">baby steps constraint</a> during a few coding dojo sessions. With this constraint, we revert the code if tests fail for more than 2 minutes ! Here is a way to go at it :</p>

<ol>
<li>Setup <a href="https://www.amazon.com/Continuous-Testing-Ruby-Rails-JavaScript/dp/1934356700/ref=sr_1_4?ie=UTF8&amp;qid=1533638529&amp;sr=8-4&amp;keywords=continuous+testing">continuous testing</a> : <a href="https://www.ncrunch.net/">NCrunch</a> in <a href="https://www.microsoft.com/net">.Net</a>, <a href="https://github.com/guard/guard">Guard</a> in <a href="https://www.ruby-lang.org/fr/">Ruby</a> or <a href="http://infinitest.github.io/">Infinitest</a> in <a href="https://en.wikipedia.org/wiki/Java_(programming_language">Java</a>)</li>
<li>Only use automated refactorings or extremely simple code changes in order to &hellip;.</li>
<li>&hellip; keep the code compiling all the time &hellip;</li>
<li>&hellip; and cut the time the tests fail as much as possible</li>
</ol>


<h2>Mikado Method</h2>

<p>One way to keep the tests green all the time is to use a slightly different TDD loop, as <a href="http://natpryce.com/articles/000780.html">Nat Pryce suggests</a> :</p>

<p><a href="http://natpryce.com/articles/000780.html"><img src="http://philippe.bourgau.net/imgs/2018-08-07-incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/listening-to-the-tests.png" alt="The red-green-refactor loop of TDD with an extra green arrow from failing test to refactor. This alternate TDD loop illustrates how to take baby steps with the Mikado Method" /></a></p>

<div class="image-credits">From <a href="http://natpryce.com">Nat Pryce&#8217;s</a> <a href="http://natpryce.com/articles/000780.html">blog</a></div>


<br>


<p>Here is how it goes. </p>

<ol>
<li>Add a new failing test </li>
<li>If it&rsquo;s trivial to fix, fix it. We are done</li>
<li>If not, see what&rsquo;s missing in the code</li>
<li>Comment the test to get back to a green state</li>
<li>Refactor the code to add what&rsquo;s missing (and use other tests if needed)</li>
<li>Uncomment the test</li>
<li>Repeat from step 2</li>
</ol>


<p>When doing this at the scale of a real life story or feature, we&rsquo;d use <code>git stash</code> instead of comments. This way of working has a name, it&rsquo;s called the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a>. It is at the heart of making baby steps work in real life.</p>

<blockquote><p>💡 The Mikado Method is at the heart of making baby steps work in real life</p></blockquote>

<h2>Take a break</h2>

<p>With TDD and the Mikado Method we can put the refactoring on pause. We can perform a small increment of the refactoring, commit and deploy it &hellip; and pause ! We&rsquo;ll work on business features for a while, and resume the refactoring later on.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-07-incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/coffee-break.jpg" alt="A cup of coffee next to a computer. Developers can pause their large scale refactoring if they work in small enough baby steps" /></p>

<p>When done well, it feels slow. We have to remember that the alternative is to convince business people of prioritizing a refactoring &hellip; As we&rsquo;ll regularly ship baby steps of a large scale refactoring, we&rsquo;ll know we&rsquo;re on the good track !</p>

<h2>More to come</h2>

<p>Unfortunately, even with bandwidth and skills, we are not there yet &hellip; It&rsquo;s one thing for developers to do incremental software development of large scale refactoring on their own. It&rsquo;s another to do it as a team !</p>

<p>This was the seventh post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/">Next post</a> will be about how to manage constant merciless refactoring and baby steps as a team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #1 : Constant Merciless Refactoring]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-08-02T08:31:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring</id>
    <category term="incremental-software-development" /><category term="large-scale-refactoring-sponsorship-series" /><category term="planning" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><em>Here&rsquo;s everything you need to find the time for constant merciless refactoring &hellip; without asking for the permission!</em></p>

<p><a href="http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/">My previous post</a> advocated incremental software development for large scale refactorings. It&rsquo;s less risky and it prevents tunnel effects. Most of all, it&rsquo;s a lot easier to convince business people of engaging in a refactoring this way.</p>

<p>It&rsquo;s one thing to understand why it&rsquo;s the way to go, but it&rsquo;s another to be able to do it ! In this post, I&rsquo;ll start by explaining how to find the time to do constant <a href="http://www.extremeprogramming.org/rules/refactor.html">merciless refactoring</a>.</p>

<p>This is the sixth post in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/recurring-cleanup.jpg" alt="Constant Merciless Refactoring illustrated as a recurring cleanup activity" /></p>

<h2><del>Steal</del> Take the time for constant merciless refactoring</h2>

<blockquote><p>If it hurts, do it more often ! <a href="https://martinfowler.com/bliki/FrequencyReducesDifficulty.html">Wisdom of the internet</a></p></blockquote>

<p>As a child, I used to be a very untidy kid. Every few week, my room would get in a real mess, and my mum would order me to clean all this mess. I would then lose 1 or 2 hours tidying my room up. She used to tell me that if I kept things tidy as I used them, I would not have to lose this time. From the top of my 10 years old, I would judge this advice as nonsense. </p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/messy-bedroom.jpg" alt="This is the kind of mess my bedroom used to be in, when I was a kid, before I learned the virtues of constant merciless refactoring" /></p>

<p>Fast forward a few years, I am myself a parent and I&rsquo;ve been working with legacy code for many years. These years have taught me how much I was wrong &hellip;</p>

<blockquote><p>💡 The easiest refactorings to negotiate are the ones we don&rsquo;t have to talk about !</p></blockquote>

<p>The more refactoring we embed in &lsquo;Business As Usual&rsquo;, the more we&rsquo;ll do, and the less we&rsquo;ll argue with the business. We can wonder if this is still &lsquo;professional&rsquo; ? In <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1533190334&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art Of Agile Development</a>, <a href="http://www.jamesshore.com/">James Shore</a> explains that managing technical debt is the key to long term productivity. (Details in the <a href="http://www.jamesshore.com/Agile-Book/risk_management.html">Risk Management section of his book</a>). As developers, <em>we</em> are the only experts in the code, the responsibility to keep it clean falls on us.</p>

<blockquote><p>Never ask the permission to do a good job ! <a href="http://docondev.com/">Doc Norton</a></p></blockquote>

<p>There&rsquo;s more to constant merciless refactoring ! It also keeps us in a good position to accept new features or refactorings later down the road.</p>

<p>Following are the 3 practices that make up constant merciless refactoring.</p>

<h2>Yesterday&rsquo;s weather and slack time</h2>

<p>20 years ago, a promises of agile software development was to stick to a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>. When we are working with a flavor of <a href="https://www.scrum.org/">Scrum</a>, we can rely on it&rsquo;s literature to inject some <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a>.  Slack time is buffer time at the end of every iteration. We should not plan any work during the slack, to accommodate with the unexpected. It&rsquo;s a way to deliver on forecasts, whatever happens.</p>

<p>In short, if your velocity chart looks something like that :</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/velocity.jpg" alt="Drawing of a fluctuating team velocity. This is often the result of not enough constant merciless refactoring" /></p>

<p>Scrum tells us to plan what you delivered in your worst iteration for the next one ! When things will work bad, we&rsquo;re still pretty likely to deliver what we wanted. When things work well, we&rsquo;ll have time to tackle refactoring.</p>

<p>There&rsquo;s a lot more to say about slack time. How to take some when you are using <a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> ? How to make sure you keep some when your velocity becomes pretty stable ? How to do you increase your velocity in the long term ? (I guess I&rsquo;ll have to write a full blog post about this some day.)</p>

<h2>The Boy Scout Rule</h2>

<p>I already blogged about the <a href="http://www.informit.com/articles/article.aspx?p=1235624&amp;seqNum=6">Boy Scout Rule</a>. Here is how <a href="https://blog.cleancoder.com/">Uncle Bob</a> wrote it :</p>

<blockquote><p>Always leave the file you are editing a little better than you found it. Bob Martin</p></blockquote>

<p>Following this simple rule goes a long way to keep the code clean and ready for larger refactorings. It works arm in arm with Yesterday&rsquo;s weather principle. The extra time we take for clean up impacts our capacity to plan stories and features. This creates time to keep on doing the boy scout rule in future iterations.</p>

<p>How &lsquo;clean&rsquo; the code should be is a team decision. Coding conventions and a static code analyzer are very important to track the boy scout rule. I learned that code reviews, pairing, mobbing and <a href="http://philippe.bourgau.net/blog/categories/team-randori-series/">coding dojos</a> are great to agree on coding conventions.</p>

<h2>Embedding refactoring in features</h2>

<p>The Test Driven Development loop goes as Red-Green-Refactor.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/red-green-refactor.jpg" alt="TDD's Red-Green-Refactor loop. Itself highlighting Constant Merciless Refactoring as a recurring activity" /></p>

<p>The same loop goes on at larger scale for Acceptance or Feature Test. When repeated many times, the loop could as well be Refactor &ndash; Red &ndash; Green. In fact, it&rsquo;s a lot easier to refactor when you know what feature you want to build than at the end of the previous one. (Nat Pryce <a href="http://natpryce.com/articles/000780.html">wrote about that</a> in more details)</p>

<blockquote><p>💡 &ldquo;Disguise&rdquo; refactoring as first technical sub tasks of features to get them prioritized.</p></blockquote>

<p>All this to say, we should start our features with the pre-requisite refactoring ! We should not build features on shaky foundations. We should also impact our estimates. In fact, it&rsquo;s a lot easier to justify to business people at that moment. We don&rsquo;t need to mention &lsquo;refactoring&rsquo; or &lsquo;clean up&rsquo;. We can use technical sub-tasks to track these technical refactorings. Technical sub-tasks are the team&rsquo;s and don&rsquo;t need to be understandable by business people.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/tech-tasks-sea-level.jpg" alt="Technical tasks drawn &quot;Under the sea&quot; and visible to devs only. This leaves them room to do constant merciless refactoring" /></p>

<h2>To be continued</h2>

<p>Finding the time for constant merciless refactoring is one thing, but how do we fit the work in these short slots ? In the <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">next post</a>, I&rsquo;ll continue about how to actually work in baby steps.</p>

<p>This was the sixth post about <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">how to get sponsorship for large scale refactoring</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development for Large Scale Refactorings]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-07-26T09:32:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings</id>
    <category term="incremental-software-development" /><category term="large-scale-refactoring-sponsorship-series" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><em>In the end, incremental software development techniques are almost always the safest way to refactor. Here is why.</em></p>

<p>My <a href="http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/">previous post</a> was about the badass developer attitude. More specifically, how it can buy sponsorship for large scale refactorings. Unfortunately, attitude is not enough. We also need to be able to deliver in a way that builds trust with the business. Most of all, business <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">is scared of the tunnel effect</a>. <a href="https://en.wikipedia.org/wiki/Iterative_and_incremental_development">Incremental software development</a> techniques allows to deliver large scale refactoring step by step. Not only that, but it also allows to do so alongside business features. That&rsquo;s how badass developers walk their talk and gain the business people&rsquo;s trust.</p>

<p>This is the fifth post in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-07-20-incremental-software-development-techniques-for-large-scale-refactorings/incremental-plant.jpg" alt="Drawing of a plant at different stages of growth, illustrating Incremental Software Development" /></p>

<h2>Why does incremental software development matter ?</h2>

<h3>A short story</h3>

<p>A few years ago, I joined a team whose work involved a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">Domain Specific Language</a> and a parser. The parser had grown in an ad-hoc way for a few years, and was now both very brittle and difficult to extend. We knew the way to go was to adopt a more solid parsing approach. We wanted to migrate to <a href="http://www.antlr.org/">ANTLR</a> and a <a href="https://en.wikipedia.org/wiki/Multi-pass_compiler">multi pass parser</a>.</p>

<p>As always, the business was very pushy for new features. There was no way we could have stoped everything for a full parser re-write. We explained to them that some of their features would be impossible to write without the new parser. We suggested that we work on migrating the parser as a background technical Epic. We did so using incremental software development techniques.</p>

<p>It took us a few months to migrate the parser. Meanwhile, we kept the software in a releasable state. This allowed us to validate our progress on the refactoring. We could continue to release features. We were able to share our progress on the refactoring with  the business people. They were very happy with the way we did this refactoring. In fact, it set a standard about how to prepare the software for big features later on.</p>

<h3>The real problems</h3>

<p>To understand why incremental software development works, let&rsquo;s understand the alternatives&#8217; problems. The main alternative it to do the refactoring in one massive task. This kind of initiative screams &ldquo;Tunnel effect waiting to happen&rdquo; ! The <a href="http://www.wethetalent.co/data-robots-ai/the-tunnel-effect-and-the-abstruse-trap/">tunnel effect</a> scares business people for 3 reasons :</p>

<ol>
<li>Because they don&rsquo;t know how much money they&rsquo;ll need to put in the tunnel to get out of it</li>
<li>Because they don&rsquo;t know when they&rsquo;ll get the other features which they are also waiting for</li>
<li>To be blocked in the tunnel if something unexpected and important comes along</li>
</ol>


<p><img src="http://philippe.bourgau.net/imgs/2018-07-20-incremental-software-development-techniques-for-large-scale-refactorings/tunnel-effect.jpg" alt="Picture of someone holding a light, alone in a tunnel. Incremental Software Development helps to avoid the tunnel effect when performing a large scale refactoring" /></p>

<p>Delivering a large scale refactoring with incremental software development fixes these 3 points.</p>

<ul>
<li>Every commit is a step forward while keeping the system in a releasable state. If ever something unexpected comes along, we can pause the refactoring for a while. (point 3)</li>
<li>Not all the team has to work on refactoring at the same time. Working on the refactoring does not block the delivery of other features. (point 2)</li>
<li>Finally, after working on a refactoring for a while, it becomes easier to have an idea of how long it will take. (point 1)</li>
</ul>


<blockquote><p>💡 Incremental software development fixes the business people&rsquo;s fear of refactoring tunnel.</p></blockquote>

<p>It is true that performing the refactoring in one team-wide batch would be more efficient. It would reduce the overall Work In Progress and get it done quicker. Unfortunately, it&rsquo;s also a lot more scary for business people !</p>

<h2>Incremental Software Development techniques</h2>

<p>Like any skills, we can learn these techniques. Some are easy, and we can learn them from books. Others are more difficult and are usually learned through hard won experience. They can also be learned from a veteran developer in your team who&rsquo;s been through all this already. If you aren&rsquo;t or don&rsquo;t have a veteran around, we can still manage. <a href="https://medium.com/the-crossover-cast/deliberate-practice-learn-like-an-expert-cc3114b8a10e">Deliberate practice</a> is a great way to <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">learn almost anything</a>. <a href="http://philippe.bourgau.net/blog/categories/coding-dojo/">Coding dojos</a> are the thing here (I&rsquo;ll write more about this later).</p>

<p>Once we master these skills, a lot of things change. First, we can do refactoring without harming our relationship with business people. Second, it builds enough self confidence among developers to negotiate with business people. This in itself, makes us more credible in their eyes. As a result, they are more likely to compromise on prioritizing refactoring.</p>

<blockquote><p>💡 Mastering incremental software development builds self-confidence for developers.</p></blockquote>

<h2>To be continued</h2>

<p>This was the fifth post about <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">how to get sponsorship for large scale refactoring</a>. In the next posts, I&rsquo;ll deal headlong with the actual techniques. <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">How to get bandwidth</a> ? <a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">How to work in baby steps</a> ? How to track the progress ? How to deal with the large scale ? Finally how to go further ? As you can see, there is still a lot to come, so <a href="http://eepurl.com/dxKE95">stay tuned</a> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles that will make you become a badass developer]]></title>
    <link href="http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-07-19T12:57:00+02:00</updated>
    <id>http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer</id>
    <category term="badass-developer" /><category term="large-scale-refactoring-sponsorship-series" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><em>There are some simple attitude principles that badass developers follow to gain the business people trust.</em></p>

<p>In my <a href="http://philippe.bourgau.net/5-mistakes-badass-developers-never-do/">last post</a>, I went over things we should avoid if we want to become badass developers. As I said though, this is far from enough. Once we&rsquo;ve stoped losing trust from the business, it&rsquo;s time to build some more ! This is the forth post in <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for a large scale refactoring</a>. If you haven&rsquo;t, start reading from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>The badass developers gain the business&rsquo;s trust by sneaking in as business partners. A good way to become one is to start acting like one ! Here are examples of principles for that.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-07-09-principles-that-will-make-you-become-a-badass-developer/badass-principles-tatoo.jpg" alt="Arm of a badass developer with the tatoo '&gt; Badass Principles;' " /></p>

<h2>Keeping the business best interests in mind</h2>

<p>This is all about decision making. We should try to steer decisions according to the business. Whenever we talk with business people, we should stay aways from technical topics. I still remember my younger self explaining threading details to a trader &hellip; Most of all I remember the look on his face ! We should avoid technical bla bla, but we should be clear about the business consequences.</p>

<h2>Honesty and Candor</h2>

<p>When we don&rsquo;t agree with something, we should say so. When we don&rsquo;t understand something, we should ask the question. We need to stick to facts and assume everyone has the business&rsquo;s best interests in mind. Candor is a way to get our opinions and questions through, without sounding rude or pushy. There&rsquo;s a whole chapter about candor in <a href="https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration/dp/0812993012/ref=sr_1_1?ie=UTF8&amp;qid=1531133278&amp;sr=8-1">Creativity.inc</a>, the book about Pixar.</p>

<p><a href="https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration/dp/0812993012/ref=sr_1_1?ie=UTF8&amp;qid=1531133278&amp;sr=8-1"><img src="http://philippe.bourgau.net/imgs/2018-07-09-principles-that-will-make-you-become-a-badass-developer/creativity-inc.jpg" alt="Cover of the Creativity.inc book. It contains lessons on Candor we should all read to become badass developers" /></a></p>

<p>With time, business people will think of us as a positive and <a href="http://philippe.bourgau.net/real-developers-ship/">pragmatic problem solvers</a>. That is exactly the kind of people they want to work with !</p>

<blockquote><p>💡 Candor is a way to get our opinions and questions through, without sounding rude or pushy.</p></blockquote>

<h2>Strong opinions, but weekly held</h2>

<p><a href="https://twitter.com/codinghorror">Jeff Atwood</a>, already <a href="https://blog.codinghorror.com/strong-opinions-weakly-held/">wrote</a> about this. The idea is to fight for our opinions, but let them go without a fuss when we proved wrong. We know that we are all very often wrong. Only fools or self-centered people don&rsquo;t admit this reality. Business people won&rsquo;t trust us in either case. We need to show that we can go over our previous opinions. This grows our reputation of rational problem solver.</p>

<h2>Acknowledging when we don&rsquo;t know</h2>

<p>The same logic goes with knowledge. None of us knows everything. We have to admit when we don&rsquo;t know something and ask for help. This proves that we place the business&rsquo;s speed over our personal &lsquo;know-it-all&rsquo; reputation.</p>

<p>Here is a story that happened to me at my first job. I&rsquo;m sure most developers go through it one day or another. I was assigned a new task involving technologies I did not know. I did not have the guts to state upfront that I would have to learn them. The result was that I sent 2 full weeks fiddling with this task to get something working. The more it went on, the more the product people were wondering why it was taking so long, and the more I got stressed !</p>

<h2>Be bold and say No !</h2>

<p>If we are sure something we should not do something, we need to say so. Badass developers are not afraid to say they won&rsquo;t do it. <a href="http://philippe.bourgau.net/are-software-developers-overworked-or-undecided/">Good software engineering requires merciless prioritization</a>. If there are doubt about the value of doing something, it&rsquo;s often a better idea to make sure before wasting time on it.</p>

<p>There are many ways to say &lsquo;No&rsquo;. Before giving a harsh &lsquo;No&rsquo;, we can try to challenge decisions. We can ask for clarifications and rationals through open questions. Very often, highlighting the risks makes people review their plans. As technical experts, we should also share as much of the consequences as possible.</p>

<p>In the end, badass developers are ready to leave a <a href="https://www.urbandictionary.com/define.php?term=Fubared">FUBARed</a> situation. Great engineers don&rsquo;t have troubles finding jobs these days &hellip; There&rsquo;s no reason they should accept to be waisting their time.</p>

<blockquote><p>💡 In the end, badass developers are ready to leave a FUBARed situation</p></blockquote>

<h2>What do to next ?</h2>

<p>As we become badass developers, our reputation will grow. We&rsquo;ll be in a better position to negotiate a large scale refactoring with the business. There&rsquo;s a catch though : we&rsquo;ll need to live up to our reputation ! Admitting that we are wrong 100% with candor will not make it ! </p>

<p>When we manage to negotiate a large scale refactoring, the team will need to do a good job of it. This boils down to delivering it piece by piece, alongside features. This is exactly what my <a href="http://eepurl.com/dxKE95">next post</a> will be about.</p>

<p>This post was the forth post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 mistakes badass developers never do]]></title>
    <link href="http://philippe.bourgau.net/5-mistakes-badass-developers-never-do/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-07-12T12:51:00+02:00</updated>
    <id>http://philippe.bourgau.net/5-mistakes-badass-developers-never-do</id>
    <category term="badass-developer" /><category term="large-scale-refactoring-sponsorship-series" /><category term="refactoring" />
    <content type="html"><![CDATA[<p>Here is a one sentence summary of my <a href="http://philippe.bourgau.net/why-we-need-badass-developers-to-perform-large-scale-refactorings/">previous post</a>.</p>

<blockquote><p>Badass developers negotiate large scale refactorings with the business better.</p></blockquote>

<p> Unfortunately, not all of us are sitting next to a true badass developer &hellip; Hopefully, we can all become one ! Depending on our track record, it&rsquo;s going to be more or less difficult, but with time and the good attitude, we can all do it. Becoming a badass developer is all about trustworthiness.</p>

<p>This post is the third in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring</a>. If you haven&rsquo;t, I recommend you to start from <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>The first thing to become trustworthy is to avoid things that kill trust. Sounds obvious, but it&rsquo;s very easy to forget. Here are 5 examples of trust killers you should never do if you want to become a badass developer.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-07-03-5-mistakes-badass-developers-never-do/mistake.jpg" alt="Drawing of a hurt finger after someone made a mistake with a hammer. Badass developer don't do this kind of mistakes !" /></p>

<h2>Resume Driven Development</h2>

<p>We should pick the best tools for the job. The best tools are often a bit old, precisely because they&rsquo;ve been battle tested in production for a while ! That&rsquo;s exactly the kind of technologies you want your business to rely on.</p>

<p>To keep his skills up to date, a badass developer will not add a funky new tech in the production code. He would rather negotiate <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a> with the business. He might also openly <em>take</em> his Friday afternoons to experiment the latest techs ! He would simply explain that it&rsquo;s to avoid polluting the production system.</p>

<blockquote><p>💡 A badass developer will not add a funky new tech in the production code.</p></blockquote>

<h2>Over-engineering</h2>

<p>Gold plating or over-engineering are similar anti-patterns. A badass developer always keeps the business&rsquo;s interest in mind. This means he knows how to balance long term design and short term features. A good rule of thumb is to keep a vision in sight, but to get there in baby steps.</p>

<h2>Build features with no agreed upon value</h2>

<p>Product managers are here to select what should and what should not be in the product. As product experts, they are the ones who know how much a feature is worth. Except (maybe) when we are building tools for others developers, they know better than us. Adding something of dubious value in the product is bad in two ways. </p>

<ul>
<li>First, it takes some time to build, time that we could use to build valuable features instead. Remember : <a href="http://philippe.bourgau.net/real-developers-ship/">Real developers ship</a> !</li>
<li>Second, it creates unnecessary code to maintain. In the worst case, it can <a href="http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/">constraint the architecture</a>. Which might eventually prevent us from adding other more valuable features afterwards.</li>
</ul>


<h2>Hide in a tunnel</h2>

<p>We should always be careful of the tunnel effect. Seeing their money vanishing with no visible output makes business people, understandably, creepy. As soon as things become too complicated, a badass developer will raise the alarm. The fact is that he has been in this kind of situation before, and knows how to recognize it. At that point, it&rsquo;s still possible to discuss the problem with everyone, and adjust the plan.</p>

<p>As an interesting side note, I was at the <a href="https://www.meetup.com/fr-FR/DDD-Paris/">Paris DDD Meetup</a> last Thursday. We had the chance to welcome <a href="https://twitter.com/ericevans0">Eric Evans</a> as a surprise guest ! When asked what were his worst mistakes, he said something along this line :</p>

<blockquote><p>💡 Some of my biggest mistakes were not backtracking soon enough a few times as I was drifting in quagmire. Eric Evans</p></blockquote>

<p><a href="https://www.meetup.com/fr-FR/DDD-Paris/events/248022866/"><img src="http://philippe.bourgau.net/imgs/2018-07-03-5-mistakes-badass-developers-never-do/eric-evans-ddd-paris.jpg" alt="Eric Evans, the father of DDD, a true badass developer, answering questions at the Paris DDD meetup" /></a><div class="image-credits">By <a href="https://www.grodziski.com/">Jérémie Grodziski</a>, on <a href="https://www.meetup.com/fr-FR/DDD-Paris/events/248022866/">Paris DDD Meetup</a></div><br></p>

<h2>Let the team down</h2>

<p>It&rsquo;s not only about getting the business&rsquo;s trust. We must also build trust from our fellow developers. Whenever we break the build and leave, or worse, deploy and leave, that trust is gone for a long while&hellip; We should not do that !</p>

<h2>There&rsquo;s more to a badass developer</h2>

<p>I&rsquo;m done with this list of things badass developers don&rsquo;t do. Avoiding these is only the first step to become a badass developer. In <a href="http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/">next post</a>, I&rsquo;ll write about what we need to do if we want to build strong trust with the business.</p>

<p>This post is the third post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we need Badass developers to perform large scale refactorings]]></title>
    <link href="http://philippe.bourgau.net/why-we-need-badass-developers-to-perform-large-scale-refactorings/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-07-05T13:28:00+02:00</updated>
    <id>http://philippe.bourgau.net/why-we-need-badass-developers-to-perform-large-scale-refactorings</id>
    <category term="badass-developer" /><category term="large-scale-refactoring-sponsorship-series" /><category term="refactoring" />
    <content type="html"><![CDATA[<p><a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">My last post</a> was about the challenge for dev teams to get sponsorship for large scale refactorings. I listed two main reasons :</p>

<ol>
<li>The business doubts developers to have their interests in mind</li>
<li>They are also not aware of the cost of the current technical debt</li>
</ol>


<p>This post (and the next) will be about how to gain the business&rsquo;s trust. This is exactly where badass developers can help. Let me start with a story.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-27-why-we-need-badass-developers-to-perform-large-scale-refactorings/badass-dev.jpg" alt="Drawing of 2 hands of a badass developer over his keyboard, with &quot;&gt;badass&lt;&quot; tatooed on his fingers" /></p>

<p>Back in 2002, at my first job, I started to read <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8">Refactoring, Improving the Design of Existing code</a>. That&rsquo;s where I read about unit testing. I found it so great that I made a demo to other programmers. Being the junior dev in the team, my co-workers reaction was something between &ldquo;Meh&rdquo; and &ldquo;Maybe&rdquo;. Fortunately, a more experienced and respected developer gave it a try. A few weeks after my demo, he announced to the team that unit testing worked great on new code. This time, people showed no questioning about his opinion : he if said so, it must have been true. Even business people blessed the practice !</p>

<p><a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8"><img src="http://philippe.bourgau.net/imgs/2018-06-27-why-we-need-badass-developers-to-perform-large-scale-refactorings/refactoring.jpg" alt="The &quot;Refactoring, improving the design of existing code&quot; cover. Badass developers know how to perform large scale refactoring" /></a></p>

<p>I had given a good live coding demo, but it was this respected developer&rsquo;s opinion that won the point. To convince business people of sponsoring a large scale refactoring, we need their trust. That&rsquo;s why we need badass developers around.</p>

<blockquote><p>💡 I had given a good live coding demo, but it was this respected developer&rsquo;s opinion that won the point.</p></blockquote>

<h2>What is a badass developer</h2>

<p><a href="https://commons.wikimedia.org/wiki/File:I_am_Badass_%28Unsplash%29.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-27-why-we-need-badass-developers-to-perform-large-scale-refactorings/i-am-badass.jpg" alt="Badass Developer's fist with a ring &quot;I am badass&quot;" /></a></p>

<div class="image-credits">By Brooke Lark<a href="https://unsplash.com/photos/jtvGydbUn30">CC0</a>, via Wikimedia Commons</div>


<br>


<p>Badass developers are first of all people who are credible to the business. This usually implies a track record of <a href="http://philippe.bourgau.net/real-developers-ship/">delivering features</a> and refactorings. Badass developers understand the business constraints. That&rsquo;s why they learned how to deliver <a href="http://philippe.bourgau.net/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">refactorings alongside features</a>. They also need to be responsible and bold enough to <a href="http://philippe.bourgau.net/are-software-developers-overworked-or-undecided/">stand ground in front of the business</a>. Finally, badass developers are able to train others.</p>

<blockquote><p>💡 Badass developers are first of all people who are credible to the business</p></blockquote>

<p>Unfortunately, there are not so many badass developers in the industry &hellip; <a href="http://philippe.bourgau.net/developer-are-you-losing-your-rat-race/">It has a youngster bias</a>, and tends to push experienced developers to other activities. As if 10 years of systems design was less valuable than knowing the latest language !</p>

<h2>Learn more about Badasss developers</h2>

<p>I tried to find other words before resorting to &lsquo;Badass&rsquo;. Unfortunately, I could find none that got the point so clearly. <a href="https://blog.cleancoder.com/">Uncle bob</a> calls them &lsquo;software professionals&rsquo; in <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?s=books&amp;ie=UTF8">The Clean Coder</a>. Professionalism is not specific enough to me. Adam Nowak also calls them &lsquo;responsible developers&rsquo; in a <a href="https://thenextweb.com/dd/2016/03/28/how-to-be-a-responsible-developer/">blog post</a>.  That does not convey the idea that, sometimes devs need to stand guard in front of the business.</p>

<p><a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?s=books&amp;ie=UTF8"><img src="http://philippe.bourgau.net/imgs/2018-06-27-why-we-need-badass-developers-to-perform-large-scale-refactorings/clean-coder.jpg" alt="The clean coder book cover. Clean coder looks like a form of badass developer" /></a></p>

<p>These concepts, though, are very close to my definition of a badass developer. Check by yourself :</p>

<ul>
<li><a href="https://thenextweb.com/dd/2016/03/28/how-to-be-a-responsible-developer/">How to be a responsible and badass developer</a> by Adam Nowak</li>
<li><a href="https://www.youtube.com/watch?v=BgPj5b6d6nk">Developer under influence</a> by Guillaume Duquesnay</li>
<li><a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?ie=UTF8&amp;qid=1530082880&amp;sr=8-1&amp;keywords=the+clean+coder">The clean coder</a> by <a href="https://blog.cleancoder.com/">Robert Martin</a></li>
</ul>


<h2>To be continued</h2>

<p>This was why badass developers matter to the success of large scale refactorings. This was the second post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring</a>.  In the <a href="http://philippe.bourgau.net/5-mistakes-badass-developers-never-do/">next post</a>, we&rsquo;ll look at what we can do to all become Badass developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to convince your business of sponsoring a large scale refactoring]]></title>
    <link href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-06-28T06:14:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring</id>
    <category term="large-scale-refactoring-sponsorship-series" /><category term="planning" /><category term="refactoring" />
    <content type="html"><![CDATA[<p>Whenever I present or suggest a good practice to dev teams, I often get the same remark. Here is how it goes :</p>

<blockquote><ul>
<li><p>That&rsquo;s a great idea and we would love to do this, but our code is in such a mess that we cannot !</p></li>
<li><p>Maybe you should start doing more refactoring then !</p></li>
<li><p>We would like to, but we don&rsquo;t have the time. We are fire fighting all the time.</p></li>
</ul>
</blockquote>

<p>It&rsquo;s a bit like the old adage of the lumberjack that is too busy to cut wood to sharpen his axe&hellip; The sad part here, is that most of the time, developers know they would be a lot faster if they could clean up their code. Unfortunately, they are usually not given the time.</p>

<h2>How do we end up in this silly situation ?</h2>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-15-how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/why-are-large-scale-refactorings-not-prioritized.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-15-how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/why-are-large-scale-refactorings-not-prioritized-small.jpg" alt="Drawing of a '5 whys' mind map explaining why it is difficult to get sponsorship for a large scale refactoring" /></a></p>

<h3>Only developers see the bad code</h3>

<p>As I&rsquo;ve <a href="http://philippe.bourgau.net/the-size-of-code/">already been joking about</a>, code is invisible. Mess in the code even more so, especially to people who don&rsquo;t code. The code could look like that and no one would notice.</p>

<p><a href="https://en.wikipedia.org/wiki/Diogenes_syndrome"><img src="http://philippe.bourgau.net/imgs/2018-06-15-how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/Syllogomanie-Puteaux.jpg" alt="Inside of a kitchen from someone suffering from Diogenes syndrome" /></a></p>

<div class="image-credits">By [A Tourist](http://commons.wikimedia.org/w/index.php?title=User:Un_Touriste&amp;action=edit&amp;redlink=1) - Private photography [CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0), [Link](https://commons.wikimedia.org/w/index.php?curid=15988115)</div>


<br>


<p>If someone put his own office in that state, he would get fired, but not for the source code. The good side is that we, developers, are safe, we can continue to wreak chaos without fear ! That&rsquo;s pretty weird when we think that this is what we ship to customers &hellip;</p>

<blockquote><p>💡 Is <a href="https://en.wikipedia.org/wiki/Diogenes_syndrome">Diogenes syndrome</a> for source code a recognized pathology ?</p></blockquote>

<p>Business might also not see bad code because that&rsquo;s the only thing they&rsquo;re used to ! Maybe they&rsquo;ve always been working in dysfunctional organizations that systematically create crappy code. Slow teams, late deliveries and fire fighting might be business as usual for them. From this point of view, trying to improve code is a pure waste of time and energy. The same goes for large scale refactorings.</p>

<p>The worse part of all this is that if devs don&rsquo;t have the time to keep their code clean, it will only get worse. This will reinforce the view that software delivery is slow and that there is nothing to do about it !</p>

<h3>Business has been burnt in the past !</h3>

<p>Bad experiences are another reason why business is unwilling to sponsor refactoring. Did someone sell them an unrealistic productivity boost that turned in a never-ending tunnel project ? Badly managed large scale refactorings deliver late, create no value, and a lot of bugs. At one company I worked for, business gave devs 1 full year (!) to clean up the code &hellip; We took 2 !! Meanwhile, the CEO had to dilute the stocks a bit to keep the boat afloat ! I&rsquo;d think twice before giving this kind of mandate myself.</p>

<p>Performing a large scale refactoring is not easy, and involves specific skills. These skills are about refactoring in baby steps, alongside feature delivery.</p>

<p>Usually, people acquire these skills through hard won experience &hellip; Unfortunately for us, our industry is not very nice to experienced engineers &hellip; It&rsquo;s a lot easier to hire a fresh grad who knows the latest javascript framework than a 2 decades engineer. (Who, BTW, could learn this framework in 2 weeks &hellip;) It&rsquo;s also a lot harder for the junior developer to succeed in negotiating a refactoring.</p>

<p>Again the twist of fate is that junior engineers are a lot more likely to start a submarine latest-framework.js rewrite supposed to solve all maintenance issues &hellip; which will only make things worse.</p>

<h2>Overestimate, only as last resort</h2>

<p>A quick fix is to systematically overestimate to get enough time to refactor. As any other &lsquo;submarine&rsquo; initiative, I would recommend it only in last resort, after you&rsquo;ve tried every other possible technique &hellip; and just before you quit.</p>

<p>Hiding things to the business people kills trust and hides problems. Trust and collaboration is what you need to get the business to sponsor large scale refactorings ! Plus, if ever you mess up (as submarine initiative often do) you&rsquo;ll be the only one to blame &hellip;</p>

<p>That said, &lsquo;overestimating&rsquo; so that you can write clean code is ok. It&rsquo;s not overestimating, it&rsquo;s estimating to do a good job.</p>

<blockquote><p>💡 We should never ask the permission to do a good job. (<a href="https://www.youtube.com/watch?v=SfWCRl75Kas">Doc Norton</a>)</p></blockquote>

<h2>To be continued</h2>

<p>You might wonder what these other techniques are ! That&rsquo;s exactly what I&rsquo;ll go through with the next posts. This was the first one in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring</a>. The series will cover topics like :</p>

<ol>
<li> <a href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">How to convince your business of sponsoring a large scale refactoring</a></li>
<li><a href="http://philippe.bourgau.net/why-we-need-badass-developers-to-perform-large-scale-refactorings/">Why we need Badass developers to perform large scale refactorings</a></li>
<li><a href="http://philippe.bourgau.net/5-mistakes-badass-developers-never-do/">5 mistakes badass developers never do</a></li>
<li><a href="http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/">Principles That Will Make You Become a Badass Developer</a></li>
<li><a href="http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/">Incremental Software Development for Large Scale Refactoring</a></li>
<li><a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">Incremental Software Development Strategies for Large Scale Refactoring #1 : Constant Merciless Refactoring</a></li>
<li><a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">Incremental Software Development Strategies for Large Scale Refactoring #2 : Baby Steps</a></li>
<li><a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/">Incremental Software Development Strategies for Large Scale Refactoring #3 : Manage it !</a></li>
<li><a href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/">Incremental Software Development Strategies for Large Scale Refactoring #4 : a Pattern Language</a></li>
<li><a href="http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity/">Presenting a large scale refactoring as a business opportunity</a></li>
<li><a href="http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/">5 Effective warning signals that will get you sponsorship for a large scale refactoring</a></li>
<li><a href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1/">Making the business case for a large scale refactoring &ndash; Part 1</a></li>
<li><a href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2/">Making the business case for a large scale refactoring &ndash; Part 2</a></li>
<li><a href="http://philippe.bourgau.net/become-a-business-partner-and-stop-begging-for-refactoring/">Become a Business Partner and Stop Begging for Refactoring</a></li>
<li>Remain a Business Partner</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to avoid unnecessary meetings (a takeaway from Devoxx France 2018)]]></title>
    <link href="http://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-06-21T12:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018</id>
    <category term="continuous improvement" /><category term="personal-productivity" /><category term="remote" />
    <content type="html"><![CDATA[<p>I had the chance to attend <a href="https://www.devoxx.fr/">Devoxx France</a> this year in Paris. Here is the most important lesson I learned :</p>

<blockquote><p>How to avoid unnecessary meetings with asynchronous decision making</p></blockquote>

<p><a href="https://twitter.com/bdelacretaz">Bertrand Delacretaz</a>, a member of the Apache foundation. He gave a great talk about how the open source community handles decision taking. Open source developers are often all over the world, often in different timezones. Meetings are not an option for them. Still, they manage to make great decisions !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-05-how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/decision.jpg" alt="Drawing of a decision hammer" /></p>

<p>Even if you don&rsquo;t work remotely, avoiding unnecessary meetings is always a great thing !</p>

<ol>
<li>You&rsquo;ll have more time to do productive and interesting stuff</li>
<li>You&rsquo;ll avoid interruptions and be even more productive</li>
<li>If you are an introvert, it&rsquo;s going to be easier to contribute to the decision</li>
<li>As people have more time to think through the decision, the result is usually better</li>
</ol>


<iframe width="560" height="315" src="https://www.youtube.com/embed/xkC4zjtAyRc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<p>For a full walkthrough, I encourage you to watch <a href="https://www.youtube.com/watch?v=xkC4zjtAyRc">the talk in full length</a>. If you don&rsquo;t speak french, an english version is available <a href="https://www.youtube.com/watch?v=lF-bjxB2Nrk&amp;t=217s">here</a>. Finally, slides are also available in <a href="https://fr.slideshare.net/bdelacretaz/prise-de-dcisions-asynchrone-devoxx-france-2018">french</a> and <a href="https://fr.slideshare.net/bdelacretaz/asynchronous-decision-making-foss-backstage-2017">english</a>.</p>

<blockquote><p>💡 Even if you don&rsquo;t work remotely, avoiding unnecessary meetings is always a great thing !</p></blockquote>

<h2>Crash course</h2>

<p>For the hasty folks among you, here is a summary. The decision making follows 4 stages :</p>

<ol>
<li>Open discussion and brainstorming. People discuss openly and suggest ideas in a free form manner.</li>
<li>Emergence of options. After enough discussion, a few options will start to make more sense than others.</li>
<li>Coming to a consensus. Someone will draft a formal proposal. People will discuss and amend this proposal until they reach consensus. <a href="http://www.dictionary.com/browse/consensus">Consensus</a> is not <a href="http://www.dictionary.com/browse/unanimous">unanimity</a> !</li>
<li>Decision. After consensus, the benevolent decision owner validates the decision once and for all.</li>
</ol>


<p>Until the decision is taken, the process can move forward but also backward.</p>

<h2>Tooling</h2>

<p>We need only two tools to make this possible :</p>

<ol>
<li>For discussion, brainstorming and emergence of options, use a very open and chatty tool. The speaker called this a &ldquo;shared asynchronous communication channel&rdquo;. This can be an online chat, a mailing list or Github issues (<a href="https://github.com/apache/cordova-discuss/issues">ex</a>). It could even be a real life whiteboard if you all had access to it.</li>
<li>From drafting the proposal to the end, prefer a structured and chronological tool. The speaker suggests using a &ldquo;shared case management tool&rdquo;. Draft the proposal in this tool, and use comments to log the latest steps of the decision taking. He had examples using Jira issues (<a href="https://issues.apache.org/jira/browse/SLING-7231">ex</a>) or Github pull requests (<a href="https://github.com/apache/cordova-discuss/pulls">ex</a>). To confirm the decision, close the case. The tool will record which version of the decision was exactly taken.</li>
</ol>


<h2>Architecture Decision Record</h2>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-05-how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/adr.jpg" alt="Drawing of an Architecture Decision Record which work great with asynchronous decision making" /></p>

<p><a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">ADR</a> is the practice of documenting architecture decisions. It makes sure we remember why we took a decision. This can be very useful to know how to deal with the existing software. A widespread practice for ADRs is to use simple text files in git. There are even <a href="https://github.com/npryce/adr-tools">tools for that</a>. This looks like a perfect fit for decision making using git pull requests ! I&rsquo;ll write a post about that when I get the chance to try.</p>

<blockquote><p>💡 Git pull requests based asynchronous decision making is a perfect fit for Architecture Decision Records.</p></blockquote>

<h2>Currently experimenting</h2>

<p>I am currently trying this whole decision making technique at work. We are still in the brainstorming phase. We are using our internal chat app for that. Options are starting to emerge, but we did not move to the consensus part yet. I&rsquo;ll write a return on experience post when we reach the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A coding dojo exercises plan towards refactoring legacy code]]></title>
    <link href="http://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-06-14T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code</id>
    <category term="coding dojo" /><category term="tdd" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>My current job <a href="http://www.murex.com">at work</a> is technical coach. I&rsquo;m available for teams that need help to adopt incremental coding practices.</p>

<h2>Problems with refactoring legacy code</h2>

<p>A few months ago, a team which was struggling with a lot of legacy code asked for help. As you might know if you read my blog, I&rsquo;m a big fan of <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development (TDD)</a> because it has made my <a href="http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">life as a developer so much more easy</a>. I&rsquo;m so used to TDD now, that even if I don&rsquo;t have tests yet (as is the case when refactoring legacy code), TDD helps me :</p>

<ul>
<li>To stick to baby steps which are a lot less likely to fail than larges changes.</li>
<li>Write testable code. I know what testable code looks like, and when refactoring, I&rsquo;ll try to change it towards that.</li>
</ul>


<p>That&rsquo;s why we started to run regular, all team, <a href="http://philippe.bourgau.net/blog/categories/team-randori-series/">coding dojo randoris</a>. It was nice for the <a href="http://philippe.bourgau.net/why-you-should-start-a-team-coding-dojo-randori-right-now/">team dynamics</a>, and the people where learning a lot of technical skills. I also got the feedback that they where not able to apply this directly on their day to day job though. After a bit more discussion, I understood that they did not know where this was going, what to expect, and when !</p>

<blockquote><p>💡 Test Driven Development also teaches you what testable code looks like.</p></blockquote>

<h2>The coding dojo exercices</h2>

<p>It turned out that a coding dojo exercises plan was enough to answer their questions. This is what it looks like.</p>

<h3>Drawing</h3>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/Coding-Dojo-Hulk.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/Coding-Dojo-Hulk-small.jpg" alt="An illustrated Coding Dojo Exercises plan leading to the mastery of Legacy Code Refactoring" /></a></p>

<h3>Mind Map</h3>

<p>Here is another, more concrete, version, with sample names of katas we can find online.</p>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/TDD_Kata_Plan.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/TDD_Kata_Plan-small.jpg" alt="An mind map of Coding Dojo Exercises plan leading to the mastery of Legacy Code Refactoring" /></a></p>

<h3>Text</h3>

<p>It starts with simple greenfield katas :</p>

<ul>
<li><a href="http://codingdojo.org/kata/FizzBuzz/">Fizz Buzz</a></li>
<li><a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numerals</a></li>
<li><a href="http://codingdojo.org/kata/Bowling/">Bowling</a></li>
</ul>


<p>It goes on to intermediate katas, where we can use TDD to do design :</p>

<ul>
<li><a href="http://kata-log.rocks/mars-rover-kata">Mars Rover</a></li>
<li><a href="http://codingdojo.org/kata/PokerHands/">Poker Hands</a></li>
<li><a href="http://codingdojo.org/kata/TradingCardGame/">trading card game</a></li>
</ul>


<p>From then on, it&rsquo;s possible to tackle advanced katas and styles :</p>

<ul>
<li>Refactoring fresh code

<ul>
<li>Continue design katas on 2 or more sessions</li>
<li>Always compile Constraint</li>
</ul>
</li>
<li>Bottom-up TDD

<ul>
<li><a href="http://codingdojo.org/kata/GameOfLife/">Game of Life</a></li>
<li>Median of a list of lists (with no concatenation)</li>
<li><a href="http://codingdojo.org/kata/LangtonAnt/">Langton ant</a></li>
</ul>
</li>
<li>Top-Down TDD

<ul>
<li><a href="http://codingdojo.org/kata/Potter/">Kata Potter</a></li>
<li><a href="http://codingdojo.org/kata/NumberToLCD/">LCD</a></li>
</ul>
</li>
<li>TDD on algorithms

<ul>
<li><a href="http://codingdojo.org/kata/Diamond/">Diamond</a></li>
<li><a href="http://codingdojo.org/kata/Lags/">Kata Lags</a></li>
<li><a href="http://codingdojo.org/kata/Anagram/">anagrams</a></li>
</ul>
</li>
</ul>


<p>All this opens the gate to legacy code refactoring katas :</p>

<ul>
<li><a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">Gilded Rose</a></li>
<li><a href="https://github.com/emilybache/Racing-Car-Katas">Race Car Katas</a></li>
<li><a href="https://github.com/jbrains/trivia">Ugly trivia game</a></li>
<li>Others from <a href="http://kata-log.rocks">http://kata-log.rocks</a></li>
</ul>


<p>At that point, the team can <a href="https://en.wikipedia.org/wiki/Mob_programming">mob</a> to refactor production code :</p>

<ul>
<li>Real life, static analysis issue, mob programming session</li>
<li>Real life, code smell, mob programming session</li>
<li>Real life, larger mob Refactoring</li>
</ul>


<h2>What changed in practice ?</h2>

<p>We wanted to split the teamwork and the coding dojos exercises. The team is now doing mob programming sessions on their usual stories twice a week (I&rsquo;ll blog about that someday). But also doing regular coding dojos exercises in pairs.</p>

<p>Even if they did not go through all the TDD katas yet, mobbing on real stories helps the team to take on legacy code.</p>

<blockquote><p>Given enough eyeballs, all bugs are shallow. Linus&rsquo;s Law</p></blockquote>

<p>Working in pairs on the code katas allows them to be more engaged in the exercises. In the end, it brings faster learning.</p>

<blockquote><p>💡 A mix of Coding Dojos in pairs and Mob Programming sessions is a good way to teach TDD in a Legacy Code context.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When is testing using mocks still a good idea ?]]></title>
    <link href="http://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-06-07T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea</id>
    <category term="architecture" /><category term="how-to-avoid-mocks-series" /><category term="mocking" /><category term="programming" /><category term="ruby" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>In the previous 7 articles of <a href="http://philippe.bourgau.net/blog/categories/how-to-avoid-mocks-series/">this series</a>, I&rsquo;ve tried my best get rid of mocks. I&rsquo;m pretty sure that using these techniques will get you a long way out of <a href="http://philippe.bourgau.net/careless-mocking-considered-harmful/">mock hell</a>. Excessive mocking leads to unmaintainable tests. Unmaintainable tests lead to low coverage. Low coverage ultimately leads to legacy code. If you haven&rsquo;t already, I encourage you to start reading from <a href="http://philippe.bourgau.net/careless-mocking-considered-harmful/">the beginning</a>.</p>

<p>One question remains though : Is it realistic to get rid of <em>all</em> mocks ? An even better question would be : Are mocks always bad ? Are there situations when mocking is the best choice ?</p>

<h2>When mocking still makes sense</h2>

<p>Let&rsquo;s to through a few examples.</p>

<h3>Testing a generic wrapper</h3>

<p>A few years ago, I had to write a service for an enterprise system. As any service, I had to ensure that it was returning nice errors. We decided to capture and wrap all errors from a few &lsquo;gate&rsquo; points in the code. We built a generic wrapper that did only delegation plus exception wrapping. In this case, it made a lot more sense to test this with a mocking framework.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="no">ServiceErrorWrapper</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">specify</span> <span class="s1">&#39;converts all kinds of exceptions&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">failing_object</span> <span class="o">=</span> <span class="n">object_double</span><span class="p">(</span><span class="s2">&quot;Failing object&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="n">allow</span><span class="p">(</span><span class="n">failing_object</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:long_computation</span><span class="p">)</span><span class="o">.</span><span class="n">and_raise</span><span class="p">(</span><span class="no">Exception</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Something terrible happened&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">{</span> <span class="no">ServiceErrorWrapper</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">failing_object</span><span class="p">)</span><span class="o">.</span><span class="n">long_computation</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ServiceError</span><span class="p">)</span><span class="o">.</span><span class="n">with_message</span><span class="p">(</span><span class="s2">&quot;Something terrible happened&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not only did we reuse the wrapper many times in my service. We also ended up using it in other services as well !</p>

<h3>Injecting a hand written in-memory fake</h3>

<p>As you might have noticed, in <a href="http://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/">the previous article</a>, I recommended to use an in-memory fake instead of mocks. By nature, an in-memory fake is a kind of mock. Even if it is not defined by a mocking framework. (I actually think that by making mocking so easy, mocking frameworks often do more harm than good.)</p>

<blockquote><p>💡 By making mocking so easy, mocking frameworks often do more harm than good.</p></blockquote>

<p>Still, I used <code>const_stub(...)</code> to inject the in-memory fake.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span> <span class="err"> </span>
</span><span class='line'>
</span><span class='line'><span class="err">  </span><span class="n">stub_const</span><span class="p">(</span><span class="s2">&quot;TwitterClient::Client&quot;</span><span class="p">,</span> <span class="no">FakeTwitterClient</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="err"> </span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span> <span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>I did this for 2 reasons :</p>

<ul>
<li>Production code can continue to use a straightforward constant</li>
<li>I don&rsquo;t risk forgetting to remove the mock at the end of its lifecycle, the framework does this for me</li>
<li>As I&rsquo;m injecting the same fake for all tests, there is not much risk of test conflict (for the moment)</li>
</ul>


<h3>Testing a cache</h3>

<p>The &ldquo;raison d&#8217;être&rdquo; of a cache is to avoid doing something twice. It should also return the same results as if it was not there. This is by nature almost impossible to test with state based assertions. Mock frameworks are great for this situation though. Here is an example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s2">&quot;UsersController&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">it</span> <span class="s1">&#39;caches users&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span><span class="o">.</span><span class="n">once</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Joe&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;Joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;Joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The assertion could not be more explicit, we are checking that the expensive load was only done once.</p>

<h3>Legacy code</h3>

<p><a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"><img src="http://philippe.bourgau.net/imgs/2018-06-01-when-is-testing-using-mocks-still-a-good-idea/legacy-code.jpg" alt="Michael C.Feathers explains that testing using mocks is a key practice in &quot;Working Effectively with Legacy Code&quot;" /></a></p>

<p>In <a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052">Working Effectively with Legacy Code</a> <a href="https://michaelfeathers.silvrback.com/">Michael Feathers</a> explains how to exploit <a href="http://www.informit.com/articles/article.aspx?p=359417&amp;seqNum=2">&ldquo;seams&rdquo;</a> in the code to put it under test. Mocking is straightforward way to inject behavior through a seam.</p>

<p>Mocking is a pretty good starting point but we need to be careful and keep a few things in mind. Legacy or not, we must not forget that too many mocks will make tests unmaintainable !</p>

<ul>
<li>It&rsquo;s a good idea to refer to a target design or architecture blueprint to know where to inject mocks. (I&rsquo;ll write a post about this one day). This increases the chances to replace them with an in-memory fake later down the road.</li>
<li>Plan to replace the mocks with a better design as soon as possible.</li>
</ul>


<h3>It depends &hellip;</h3>

<p>As with anything in software, there is no absolute rule about mocking. Even if I prefer not to 99% of the time, there are situation when testing using mocks is the thing to do. Knowing the risks, it&rsquo;s up to you to decide !</p>

<h2>If using a mock, prefer spy / proxies</h2>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-01-when-is-testing-using-mocks-still-a-good-idea/proxy-plug.jpg" alt="Spies and proxies make testing using mocks less intrusive" /></p>

<p>As I explained in previous posts, mocks duplicate behavior. If we could use mocks without duplicating behavior, they would do less harm.</p>

<p>It turns out there is a flavor of mocks for that : <a href="https://martinfowler.com/articles/mocksArentStubs.html">spies</a> and <a href="https://relishapp.com/rspec/rspec-mocks/docs/configuring-responses/calling-the-original-implementation">overlooked proxies</a>. Proxies do the real thing but also record the calls and return values. It&rsquo;s as non-intrusive as mocks can be.</p>

<blockquote><p>💡 Proxy mocks are as unintrusive as mocks can be.</p></blockquote>

<p>For example, here is how our cache test would look like using a proxy :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s2">&quot;UsersController&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">it</span> <span class="s1">&#39;caches users&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">allow</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span><span class="o">.</span><span class="n">and_call_original</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;Joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;Joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">(</span><span class="no">User</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_received</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s more verbose, but simpler. Most mock frameworks provide some form of spy or proxies. A few years ago, I also wrote <a href="http://philou.github.io/rspecproxies">rspecproxies</a>, a wrapper on top of <a href="http://rspec.info/">rspec</a> to make this easier.</p>

<h2>This is the end</h2>

<p>This was the 8th and last post in a series about how to avoid mocks. Before closing here is a list of other references about the topic.</p>

<ul>
<li>In the <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">RailsConf 2014 keynote</a>, <a href="https://twitter.com/dhh">DHH </a> explains how mocking made their test harness unreliable.</li>
<li><a href="https://martinfowler.com/articles/is-tdd-dead/">Is TDD dead</a> is a well known online discussion about the Classic vs Mockist TDD approach</li>
<li>Have a look at what <a href="https://blog.cleancoder.com/">Uncle Bob</a> says about <a href="http://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html">When To Mock</a></li>
<li>For JS expert <a href="https://medium.com/@_ericelliott">Eric Elliott</a>, <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a">Mocking is a Code Smell</a></li>
<li>In this talk  <a href="https://skillsmatter.com/skillscasts/9971-testable-software-architecture-with-aslak-hellesoy">Testable Architecture talk</a>, <a href="https://twitter.com/aslak_hellesoy">Aslak Hellesøy</a> explains how to build a full architecture for fast tests</li>
<li><a href="http://www.jamesshore.com/">James Shore</a> recently published a full pattern language entitled <a href="http://www.jamesshore.com/Blog/Testing-Without-Mocks.html">Testing Without Mock</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get rid of mock maintenance with full fledged in-memory fakes]]></title>
    <link href="http://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-05-31T19:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes</id>
    <category term="architecture" /><category term="how-to-avoid-mocks-series" /><category term="mocking" /><category term="programming" /><category term="ruby" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p><a href="http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/">Last week&rsquo;s post</a> was about how <a href="http://alistair.cockburn.us/Hexagonal+architecture">hexagonal architecture</a> results in fast, mock-free tests around your core domain. Unfortunately, that does not remove all mocks, yet it groups them in the same, less critical, zone. In last week&rsquo;s code sample, this was the controller. I concluded that at least, this was easier to manage. Let&rsquo;s see how.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-28-get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/in-memory-fake.jpg" alt="Hand written 'In-memory fake' with memory replaced by a RAM board" /></p>

<p>This is the 7th post in <a href="http://philippe.bourgau.net/blog/categories/how-to-avoid-mocks-series/">a series about avoiding mocks</a>. If you haven&rsquo;t, you might start from <a href="http://philippe.bourgau.net/careless-mocking-considered-harmful/">the beginning</a>.</p>

<h2>Mock concentration</h2>

<p>Let&rsquo;s get back to the <a href="http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/">last post</a>&rsquo;s code sample. As a reminder, it&rsquo;s a very basic TODO app built on <a href="https://rubyonrails.org/">Rails</a>. I extracted the domain part, the tasks, in a core domain area. This allowed to push all mocks out of this section. A consequence though, is that all mocks gathered in the controller test. Here is the controller code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;core/task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;infrastructure/task_repo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TasksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'><span class="err"> </span><span class="n">before_action</span> <span class="ss">:set_task</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># GET /tasks</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'><span class="err">   </span><span class="vi">@tasks</span> <span class="o">=</span> <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># GET /tasks/1</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># GET /tasks/new</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'><span class="err">   </span><span class="vi">@task</span> <span class="o">=</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># GET /tasks/1/edit</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># POST /tasks</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'><span class="err">   </span><span class="k">begin</span>
</span><span class='line'><span class="err">     </span><span class="vi">@task</span> <span class="o">=</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'><span class="err">     </span><span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="vi">@task</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">     </span><span class="n">redirect_to</span> <span class="n">task_url</span><span class="p">(</span><span class="vi">@task</span><span class="o">.</span><span class="n">db_id</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Task was successfully created.&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class='line'><span class="err">     </span><span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># PATCH/PUT /tasks/1</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'><span class="err">   </span><span class="k">begin</span>
</span><span class='line'><span class="err">     </span><span class="vi">@task</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'><span class="err">     </span><span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="vi">@task</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">     </span><span class="n">redirect_to</span> <span class="n">task_url</span><span class="p">(</span><span class="vi">@task</span><span class="o">.</span><span class="n">db_id</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Task was successfully updated.&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class='line'><span class="err">     </span><span class="n">render</span> <span class="ss">:edit</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="c1"># DELETE /tasks/1</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'><span class="err">   </span><span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="vi">@task</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="n">redirect_to</span> <span class="n">tasks_url</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Task was successfully destroyed.&#39;</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="kp">private</span>
</span><span class='line'><span class="err">   </span><span class="k">def</span> <span class="nf">set_task</span>
</span><span class='line'><span class="err">     </span><span class="vi">@task</span> <span class="o">=</span> <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="err">     </span><span class="vi">@task</span><span class="o">.</span><span class="n">notify_when_done</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="o">|</span>
</span><span class='line'><span class="err">       </span><span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'><span class="err">     </span><span class="k">end</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'><span class="err">   </span><span class="k">def</span> <span class="nf">task_params</span>
</span><span class='line'><span class="err">     </span><span class="n">params</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:description</span><span class="p">,</span> <span class="ss">:done</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller is now dealing both with the Twitter connection and the database. This is visible in the controller test :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">TasksController</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:controller</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">before</span> <span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">allow</span><span class="p">(</span><span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:update</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">  </span><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">describe</span> <span class="s2">&quot;PUT #update&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">context</span> <span class="s2">&quot;with valid params&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">     </span><span class="n">let</span><span class="p">(</span><span class="ss">:new_attributes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">       </span><span class="p">{</span><span class="ss">done</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'><span class="err">     </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">     </span><span class="n">it</span> <span class="s2">&quot;updates the requested task&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">       </span><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">create!</span> <span class="n">valid_attributes</span>
</span><span class='line'><span class="err">       </span><span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="n">new_attributes</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">to_param</span><span class="p">)</span>
</span><span class='line'><span class="err">       </span><span class="n">task</span><span class="o">.</span><span class="n">reload</span>
</span><span class='line'><span class="err">       </span><span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_done</span>
</span><span class='line'><span class="err">     </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">     </span><span class="n">it</span> <span class="s2">&quot;tweets about completed tasks&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">       </span><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">create!</span> <span class="n">valid_attributes</span>
</span><span class='line'>
</span><span class='line'><span class="err">       </span><span class="n">expect</span><span class="p">(</span><span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:update</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">       </span><span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">to_param</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'><span class="err">     </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">     </span><span class="n">it</span> <span class="s2">&quot;redirects to the task&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">       </span><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">create!</span> <span class="n">valid_attributes</span>
</span><span class='line'><span class="err">       </span><span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="n">valid_attributes</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">to_param</span><span class="p">)</span>
</span><span class='line'><span class="err">       </span><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">task_url</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'><span class="err">     </span><span class="k">end</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="c1"># ... </span>
</span><span class='line'>
</span><span class='line'><span class="err">  </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to <a href="https://blog.pragmatists.com/test-doubles-fakes-mocks-and-stubs-1a7491dfa3da">stub out</a> the twitter API for most tests. We are also still using a mock to verify that the tweet is sent. Finally, as we can see from the test execution times, we are still using the database in some tests.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-28-get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/test-timings.jpg" alt="Screen capture of the tests execution time" /></p>

<p>If the project grew large this would become an issue. Sadly, mocking is often the fix people jump on &hellip;</p>

<blockquote><p>💡 Mocking is the unfortunate quick fix to slow tests.</p></blockquote>

<p>From a mocking point of view, our current controller test can seem worse than before ! There&rsquo;s something pretty effective we can do though !</p>

<h2>In memory fakes</h2>

<p>Instead of stubbing and mocking in every test, let&rsquo;s write a full fledged in-memory <a href="https://blog.pragmatists.com/test-doubles-fakes-mocks-and-stubs-1a7491dfa3da">fake</a> that does the job we need. We could then install it once and for all, and forget about it !</p>

<p>Actually, this is nothing new. This is exactly what Rails provides out of the box with <code>ActionMailer::Base.delivery_method = :test</code>.</p>

<p>Here&rsquo;s how we could do the same thing for our Twitter Client.</p>

<h6>spec/rails_helper.rb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FakeTwitterClient</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'><span class="err">   </span><span class="vi">@tweets</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="kp">attr_accessor</span> <span class="ss">:tweets</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@tweets</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="err">  </span><span class="c1"># ...</span>
</span><span class='line'><span class="err"> </span><span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">stub_const</span><span class="p">(</span><span class="s2">&quot;TwitterClient::Client&quot;</span><span class="p">,</span> <span class="no">FakeTwitterClient</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h6>spec/controllers/tasks_controller_spec.rb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;tweets about completed tasks&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">create!</span> <span class="n">valid_attributes</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">to_param</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">expect</span><span class="p">(</span><span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">tweets</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple isn&rsquo;t it ?</p>

<h2>Wait a sec &hellip;</h2>

<p>There&rsquo;s a catch though &hellip; How do we make sure that this fake is behaving the same way as the real thing ?</p>

<p>Let&rsquo;s run the same tests on both ! We could mimic the twitter API in our fake, but that might not be a great idea. Do you remember the moto &ldquo;Always wrap your 3rd parties&rdquo; ? It takes all its meaning here, for 2 reasons.</p>

<p>The first is to make faking easier. We can build a minimal wrapper API that is just enough for our use. By keeping this interface small, we&rsquo;ll make it a lot easier to fake.</p>

<p>The second reason is that we can write real integration tests on the 3rd party through this wrapper. They&rsquo;d look like ordinary unit tests, except that they&rsquo;d end up calling the real 3rd party in a sandbox. They are usually pretty slow, but as 3rd parties don&rsquo;t change everyday, that&rsquo;s ok. We can ensure up-front that integration will go well. As a bonus, we can be very fast to detect and contain changes to online services. (I&rsquo;m looking at you <a href="https://en.wikipedia.org/wiki/Web_scraping">Scrappers</a>!)</p>

<p>Here is what it would look like for our Twitter client :</p>

<h6>lib/infrastructure/twitter_client.rb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FakeTwitterClient</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'><span class="err">   </span><span class="vi">@tweets</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="kp">attr_accessor</span> <span class="ss">:tweets</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">tweet</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@tweets</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">search_tweets</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@tweets</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tweet</span><span class="o">|</span> <span class="n">tweet</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RealTwitterClient</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@client</span> <span class="o">=</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">tweet</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">search_tweets</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@client</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;from:test_user </span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we renamed <code>update</code> to <code>tweet</code> in the wrapper. We&rsquo;d have to update the calls accordingly. Let&rsquo;s look at the tests.</p>

<h6>spec/lib/Infrastructure/twitter_client_spec.rb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;infrastructure/twitter_client&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">shared_examples</span> <span class="s2">&quot;a twitter client&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">new_client_instance</span><span class="o">|</span>
</span><span class='line'><span class="err"> </span><span class="n">let</span><span class="p">(</span><span class="ss">:client</span><span class="p">)</span> <span class="p">{</span> <span class="n">new_client_instance</span> <span class="p">}</span>
</span><span class='line'><span class="err"> </span><span class="n">it</span> <span class="s2">&quot;sends tweets&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">uuid</span>
</span><span class='line'><span class="err">   </span><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Philippe was here </span><span class="si">#{</span><span class="n">token</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="err">   </span><span class="n">client</span><span class="o">.</span><span class="n">tweet</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">search_tweets</span><span class="p">(</span><span class="n">token</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">context</span> <span class="no">FakeTwitterClient</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">it_behaves_like</span> <span class="s2">&quot;a twitter client&quot;</span><span class="p">,</span> <span class="no">FakeTwitterClient</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">context</span> <span class="no">RealTwitterClient</span><span class="p">,</span> <span class="ss">integration</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">speed</span><span class="p">:</span> <span class="ss">:slow</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">it_behaves_like</span> <span class="s2">&quot;a twitter client&quot;</span><span class="p">,</span> <span class="p">(</span><span class="no">RealTwitterClient</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'><span class="err">   </span><span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span> <span class="err">       </span><span class="o">=</span> <span class="s2">&quot;TEST_CONSUMER_KEY&quot;</span>
</span><span class='line'><span class="err">   </span><span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="err">    </span><span class="o">=</span> <span class="s2">&quot;TEST_CONSUMER_SECRET&quot;</span>
</span><span class='line'><span class="err">   </span><span class="n">config</span><span class="o">.</span><span class="n">access_token</span> <span class="err">       </span><span class="o">=</span> <span class="s2">&quot;TEST_ACCESS_TOKEN&quot;</span>
</span><span class='line'><span class="err">   </span><span class="n">config</span><span class="o">.</span><span class="n">access_token_secret</span> <span class="o">=</span> <span class="s2">&quot;TEST_ACCESS_SECRET&quot;</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We had to add a search method to our interface for the sake of testing. This should remain &ldquo;For testing only&rdquo;. We&rsquo;d also adapt the controller test to use this <code>search_tweets</code> method.</p>

<p>Let&rsquo;s look at where we stand now. We&rsquo;re injecting each mock only once. Tests are fast yet straightforward, almost as if they were testing the real thing. Doing so, we&rsquo;ve split our system in cohesive parts and we&rsquo;ve wrapped our 3rd parties. We&rsquo;ve actually done a lot more than removing mocks ! <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a">Mocking really is a design smell</a>.</p>

<blockquote><p>💡 Merciless mock hunting will improve the design of your system !</p></blockquote>

<h2>Last word about implementation</h2>

<p>Sometimes, this 3rd party wrapper can become pretty complicated. Try to reuse as much of it as possible between the real and the fake. For example, an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>, like ActiveRecord for example, is a wrapper around the database. Reimplementing a fake ORM would be real challenge. We&rsquo;re far better <a href="http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite/">plugin it on top of SQLite</a> instead !</p>

<h2>References</h2>

<p>Smart people have already spoken and written about this subject. If you want to learn more, I recommend that you have a look at <a href="https://twitter.com/aslak_hellesoy">Aslak Hellesøy</a>&rsquo;s <a href="https://skillsmatter.com/skillscasts/9971-testable-software-architecture-with-aslak-hellesoy">Testable Architecture talk</a>. <a href="http://www.jamesshore.com/">James Shore</a>, the author of <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1527568833&amp;sr=8-1&amp;keywords=the+art+of+agile+development">The Art of Agile Development</a>, also wrote a pattern language called <a href="http://www.jamesshore.com/Blog/Testing-Without-Mocks.html">Testing Without Mock</a>.</p>

<h2>Next week</h2>

<p>This was the 7th blog post in <a href="http://philippe.bourgau.net/blog/categories/how-to-avoid-mocks-series/">a series about how to avoid mocks</a>. Hopefully, I&rsquo;m reaching the end ! <a href="http://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea/">Next week&rsquo;s post</a> should be the last in series, and deal with a few remaining points. What to do when you really need a mock ? What about mocking and legacy code ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid mocks and test your core domain faster with Hexagonal Architecture]]></title>
    <link href="http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-05-24T06:43:00+02:00</updated>
    <id>http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture</id>
    <category term="architecture" /><category term="ddd" /><category term="how-to-avoid-mocks-series" /><category term="mocking" /><category term="programming" /><category term="ruby" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>As I&rsquo;ve written in my last few posts, we can get a long way to avoid mocks with small scale coding best practices. Unfortunately, when systems reach a certain size, we need something at architecture scale.</p>

<p>This is the 6th post of a <a href="http://philippe.bourgau.net/blog/categories/how-to-avoid-mocks-series/">series about avoiding mocks</a>. If you haven&rsquo;t, you can start by <a href="http://philippe.bourgau.net/careless-mocking-considered-harmful/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-24-avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/hexagonal-building.jpg" alt="A drawing of a hexagon-shaped building" /></p>

<h2>Why do we end up with mocks in large systems ?</h2>

<p>A few years ago, I joined a team working in a legacy system. We wanted to apply <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> and refactoring. As expected, adding tests legacy code proved a real challenge. With a lot of effort we could manage to add a few. Unfortunately, this did not seem to have any positive effect on our maintainability ! The tests we were writing all involved a lot of mocking. The system was such a large mass of spaghetti code that there was no clear place to mock. We were actually mocking where it seemed the easiest on a test by test basis. We were making progress at small scale, but the big picture was not improving at all !</p>

<p>Large systems are beasts with many faces. They  involve a lot of IOs. They write and read data from the disk and databases. They call 3rd parties and remote services.</p>

<p>As we test these large systems, we&rsquo;ll need to stub out these IOs. Even if the tests are fast enough, we usually don&rsquo;t want to call external services for real. Most of the time though, tests are slow. That&rsquo;s 2 reasons why end up adding some mocks.</p>

<p>Here comes the nasty part. These large systems are so complex that we, developers, don&rsquo;t have the full picture. When we test, we tend to mock at different places, depending on our knowledge. This is bad for maintenance. Mocks duplicate production code behavior. When many different mocks are in place to isolate an external dependency, we end up with &lsquo;n&rsquo; versions of the code. That&rsquo;s a nightmare to refactor !</p>

<blockquote><p>💡 When many different mocks are in place to isolate an external dependency, we end up with &lsquo;n&rsquo; versions of the code !</p></blockquote>

<h2>Hexagonal architecture to the rescue</h2>

<p><a href="http://alistair.cockburn.us/Hexagonal+architecture">Alistair Cockburn</a> coined the term. The idea is pretty simple :  isolate a piece of code from all dependencies. This is particularly useful for the core functional areas. With this in place, it becomes straightforward (and fast) to test the core domain logic.</p>

<p>To main techniques to isolate a piece of code from any dependency are :</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency injection</a></li>
<li><a href="https://en.wikipedia.org/wiki/Observer_pattern">Observers</a></li>
<li><a href="https://en.wikipedia.org/wiki/Adapter_pattern">Adapters</a></li>
</ul>


<p>It&rsquo;s also possible to split a system in many &lsquo;hexagons&rsquo; and glue them together with adapters at startup. If you want to learn more on this style of architecture, have a look into the <a href="https://www.infoq.com/articles/ddd-contextmapping">Domain Driven Design lore</a>. This community has been building systems this way for years now.</p>

<h2>Enough talk, show me the code !</h2>

<p>This post was the occasion to try to inject a Hexagonal Architecture and a dash of DDD in a Rails application. There&rsquo;s one caveat though : DDD shines on complex systems. Unfortunately, large and complex systems make very poor didactic examples. The following code highlights the gains about mocking. We would not use DDD for such a small app in real life.</p>

<h3>The starting point</h3>

<p>I chose a simple TODO app. I started by generating a scaffold for a Task with a description and a done/not-done status. As third party interaction, completing a task sends an automatic tweet. Here is the only specific code I wrote on top of the Rails scaffold :</p>

<h6>app/models/task.rb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Dirty</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:tweet_if_done</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tweet_if_done</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">done_changed?</span>
</span><span class='line'>      <span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks Jason Charnes for the <a href="https://jasoncharnes.com/changed-attributes-rails/">change attribute technique</a>.</p>

<h6>spec/models/task_spec.rb</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">Task</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:model</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;is valid with all attributes set&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">Task</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Finish presentation&quot;</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">false</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;requires a description&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">Task</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">false</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_invalid</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">Task</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">false</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_invalid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;tweets when a task is finished&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Wash the car&quot;</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:update</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s2">&quot;Wash the car&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty simple and to the point !</p>

<h3>5 years later</h3>

<p>Now let&rsquo;s imagine that the app grew to tens of thousands of lines. We added a lot of features to the app, which transformed the TODO domain into a very complex thing. Now suppose that, for the sake of maintenance, we want to isolate the domain logic into its own hexagon. Unlike traditional Rails ActiveRecords, we want to make it independent from the database. We also want it to be independent from the Twitter API.</p>

<p>Here is what the code might look like.</p>

<h6>lib/core/task.rb</h6>

<p>First, we have a core task class, independent from anything else. The Core module is our hexagon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Core</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Task</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:description</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:db_id</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="vi">@description</span><span class="o">=</span> <span class="s2">&quot;What do you need to do ?&quot;</span>
</span><span class='line'>      <span class="vi">@done</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="vi">@done_subscribers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">done?</span>
</span><span class='line'>      <span class="vi">@done</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mark_as_done</span>
</span><span class='line'>      <span class="vi">@done</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="vi">@done_subscribers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="nb">proc</span><span class="o">|</span> <span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">attributes</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">description</span><span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span> <span class="k">unless</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:description</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">mark_as_done</span> <span class="k">if</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:done</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">notify_when_done</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@done_subscribers</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">proc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">description</span><span class="o">=</span><span class="p">(</span><span class="n">desc</span><span class="p">)</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Task description cannot be blank&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">desc</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@description</span> <span class="o">=</span> <span class="n">desc</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, it contains only domain logic and nothing else.</p>

<h6># spec/lib/core/task_spec.rb</h6>

<p>Here is the corresponding test, fast, mock-free and independent from the database and any external system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails_helper&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;core/task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">context</span> <span class="s1">&#39;Task&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:task</span><span class="p">)</span> <span class="p">{</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;is not done by default&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_done</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;comes with a default description&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_blank</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;it can be initialized from a hash&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Old description&quot;</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;Old description&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_done</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;can have a custom description&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="o">=</span> <span class="s2">&quot;Clean up the house&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;Clean up the house&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;forbids empty descriptions&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">task</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="kp">nil</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">task</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;can be done&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">mark_as_done</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_done</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;publishes when done&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">done_task</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">notify_when_done</span> <span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">done_task</span> <span class="o">=</span> <span class="n">t</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">mark_as_done</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">done_task</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;can be updated with a hash&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;New description&quot;</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;New description&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_done</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">specify</span> <span class="s1">&#39;has no DB id by default&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">db_id</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h6># lib/infrastructure/task_repo.rb</h6>

<p>To read and save with the database, we now go through an adapter. This is not considered to be part of our core domain.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Infrastructure</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">TaskRepo</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">all</span>
</span><span class='line'>      <span class="no">Task</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">db_task</span><span class="o">|</span>
</span><span class='line'>        <span class="n">from_db</span><span class="p">(</span><span class="n">db_task</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load</span><span class="p">(</span><span class="n">db_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">from_db</span><span class="p">(</span><span class="no">Task</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">db_id</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">save</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">task</span><span class="o">.</span><span class="n">db_id</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="n">db_task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">to_db_attributes</span><span class="p">(</span><span class="n">task</span><span class="p">))</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="n">db_id</span> <span class="o">=</span> <span class="n">db_task</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">db_task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">db_id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">db_task</span><span class="o">.</span><span class="n">update!</span><span class="p">(</span><span class="n">to_db_attributes</span><span class="p">(</span><span class="n">task</span><span class="p">))</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">task</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">task</span><span class="o">.</span><span class="n">db_id</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="n">db_task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">db_id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">db_task</span><span class="o">.</span><span class="n">destroy!</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="n">db_id</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">to_db_attributes</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">description</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">,</span> <span class="ss">done</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">done?</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_db</span><span class="p">(</span><span class="n">db_task</span><span class="p">)</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">db_id</span> <span class="o">=</span> <span class="n">db_task</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="n">db_task</span><span class="o">.</span><span class="n">description</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">mark_as_done</span> <span class="k">if</span> <span class="n">db_task</span><span class="o">.</span><span class="n">done?</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h6># app/controllers/tasks_controller.rb</h6>

<p>Finally, all the pieces interact together in the controller. This controller basically does what the previous version was, it&rsquo;s just using different classes. Obviously, we&rsquo;ll need to adapt the views and the tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;core/task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;infrastructure/task_repo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TasksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_task</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /tasks</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@tasks</span> <span class="o">=</span> <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /tasks/1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /tasks/new</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@task</span> <span class="o">=</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /tasks/1/edit</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># POST /tasks</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="vi">@task</span> <span class="o">=</span> <span class="ss">Core</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="vi">@task</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">task_url</span><span class="p">(</span><span class="vi">@task</span><span class="o">.</span><span class="n">db_id</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Task was successfully created.&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># PATCH/PUT /tasks/1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="vi">@task</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">task_params</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="vi">@task</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">task_url</span><span class="p">(</span><span class="vi">@task</span><span class="o">.</span><span class="n">db_id</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Task was successfully updated.&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:edit</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># DELETE /tasks/1</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="vi">@task</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">tasks_url</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Task was successfully destroyed.&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_task</span>
</span><span class='line'>      <span class="vi">@task</span> <span class="o">=</span> <span class="ss">Infrastructure</span><span class="p">:</span><span class="ss">:TaskRepo</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@task</span><span class="o">.</span><span class="n">notify_when_done</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="o">|</span>
</span><span class='line'>        <span class="ss">TwitterClient</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">task_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:description</span><span class="p">,</span> <span class="ss">:done</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main gain here is that our core domain, our most valuable asset is now easy to test without mocks. This means that we are able to write and execute fast tests for this area of the code. This puts us in a great position to increase our competitive advantage in our core business !</p>

<blockquote><p>💡 By keeping your tests around your core domain fast, Hexagonal Architecture increases your competitive advantage.</p></blockquote>

<p>As you can see, we are now wiring everything together at the controller level. We could later build a facade to isolate the controller from the inside of our domain. A <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">presenter</a> might do, but it seemed over-engineered, even in this made up example. (I&rsquo;ll post something about that some day)</p>

<h2>Next post</h2>

<p>As we can deduce from the controller code above, we still have to use fakes or mocks when testing the controller. The good thing though is that this is now more local which already makes mocking less of an issue. If a mock is used in less tests, it&rsquo;s easier to use the same mock everywhere ! This is a great opportunity for simplifying test setup, as we&rsquo;ll see in the <a href="http://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/">next post about in-memory fakes</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Custom Assertion Matchers will keep mocks away]]></title>
    <link href="http://philippe.bourgau.net/how-custom-assertion-matchers-will-keep-mocks-away/?utm_source=blog&amp;utm_medium=rss"/>
    <updated>2018-05-17T06:47:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-custom-assertion-matchers-will-keep-mocks-away</id>
    <category term="how-to-avoid-mocks-series" /><category term="mocking" /><category term="programming" /><category term="ruby" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>I cannot write a <a href="http://philippe.bourgau.net/blog/categories/how-to-avoid-mocks-series/">series about avoiding mocks</a> without mentioning Custom Assertion Matchers. If you don&rsquo;t know what custom assertions are, here is pseudo code that uses a custom assertion :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>assert.that(actual, VerifiesMyCustomAssertion(withCustomProperties))</span></code></pre></td></tr></table></div></figure>


<p>For more details, have a look at these examples for your preferred language : <a href="http://joel-costigliola.github.io/assertj/assertj-core-custom-assertions.html">Java</a>, <a href="https://relishapp.com/rspec/rspec-expectations/docs/custom-matchers">Ruby</a> or <a href="http://tonylukasavage.com/blog/2014/05/29/custom-assertions-in-should-dot-js/">Javascript</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-15-how-custom-assertion-matchers-will-keep-mocks-away/matchers.jpg" alt="A drawing of a box of matches, branded 'Matchers' on top" /></p>

<p>That custom assertion matchers have an effect on mock usage might seem puzzling at first. Let me explain. Us, mere human developers, get lured into mocking when tests become too complicated. By keeping the tests simpler, Custom Assertion Matchers help use to avoid mocks. It&rsquo;s a bit like why test data builders keep mocks at bay.</p>

<blockquote><p>💡 We get lured into mocking when tests become too complicated</p></blockquote>

<p>I already blogged about <a href="http://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/">the benefits of Custom Assertion Matchers</a>. Here I&rsquo;m going to dive in their advantages against mocking.</p>

<p>This is the fifth post in a <a href="http://philippe.bourgau.net/blog/categories/how-to-avoid-mocks-series/">series about how to avoid mocks</a>. If you haven&rsquo;t yet, I recommend you to start from <a href="http://philippe.bourgau.net/careless-mocking-considered-harmful/">the beginning</a>.</p>

<h2>Why would we end up with mocks when we don&rsquo;t have matchers ?</h2>

<p>Let&rsquo;s walkthrough a small story. Suppose we are building an e-commerce website. When someone passes an order, we want to notify the analytics service. Here is some very simple code for that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AnalyticsService</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'><span class="err">   </span><span class="vi">@items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="kp">attr_reader</span> <span class="ss">:items</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">order_passed</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span> <span class="n">cart</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'><span class="err">     </span><span class="vi">@items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="ss">customer</span><span class="p">:</span> <span class="n">customer</span><span class="p">,</span> <span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Order</span>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span> <span class="n">cart</span><span class="p">,</span> <span class="n">analytics</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="vi">@customer</span> <span class="o">=</span> <span class="n">customer</span>
</span><span class='line'><span class="err">   </span><span class="vi">@cart</span> <span class="o">=</span> <span class="n">cart</span>
</span><span class='line'><span class="err">   </span><span class="vi">@analytics</span> <span class="o">=</span> <span class="n">analytics</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="k">def</span> <span class="nf">pass</span>
</span><span class='line'><span class="err">   </span><span class="c1"># launch order processing and expedition  </span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="vi">@analytics</span><span class="o">.</span><span class="n">order_passed</span><span class="p">(</span><span class="vi">@customer</span><span class="p">,</span> <span class="vi">@cart</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;Order&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">it</span> <span class="s2">&quot;notifies analytics service about passed orders&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">cart</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Pasta&quot;</span><span class="p">,</span><span class="s2">&quot;Tomatoes&quot;</span><span class="o">]</span>
</span><span class='line'><span class="err">   </span><span class="n">analytics</span> <span class="o">=</span> <span class="no">AnalyticsService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="err">   </span><span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="n">cart</span><span class="p">,</span> <span class="n">analytics</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">order</span><span class="o">.</span><span class="n">pass</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">(</span><span class="n">analytics</span><span class="o">.</span><span class="n">items</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="ss">customer</span><span class="p">:</span> <span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="ss">item</span><span class="p">:</span> <span class="s2">&quot;Pasta&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">(</span><span class="n">analytics</span><span class="o">.</span><span class="n">items</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="ss">customer</span><span class="p">:</span> <span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="ss">item</span><span class="p">:</span> <span class="s2">&quot;Tomatoes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s focus on the tests a bit. We first notice that the verification section is large and difficult to understand.  Looking in more details, it knows too much about the internals of AnalyticsService. We had to make the items accessor public just for the sake of testing. The test even knows how the items are stored in a list of hashes. If we were to refactor this representation, we would have to change the tests as well.</p>

<p>We could argue that responsibility-wise, our test should only focus on Order. It makes sense for the test to use a mock to verify that the Order calls AnalyticsService as expected. Let&rsquo;s see what this would look like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;notifies analytics service about passed orders&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">cart</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Pasta&quot;</span><span class="p">,</span><span class="s2">&quot;Tomatoes&quot;</span><span class="o">]</span>
</span><span class='line'><span class="err"> </span><span class="n">analytics</span> <span class="o">=</span> <span class="no">AnalyticsService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="err"> </span><span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="n">cart</span><span class="p">,</span> <span class="n">analytics</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">expect</span><span class="p">(</span><span class="n">analytics</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:order_passed</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="n">cart</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span><span class="n">order</span><span class="o">.</span><span class="n">pass</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, the test code is simpler. It&rsquo;s also better according to good design principles. The only glitch is that we now have a mock in place with all the problems I described <a href="http://philippe.bourgau.net/careless-mocking-considered-harmful/">before</a>.</p>

<p>This might not (yet) be a problem in our example but, for example, the mock &lsquo;cuts&rsquo; the execution of the program. Suppose that someday, the Order starts expecting something from the AnalyticsService. We&rsquo;d then need to &lsquo;simulate&rsquo; the real behavior in our mock. This would make the test very hard to maintain.</p>

<h2>Matchers to the rescue</h2>

<p>Let&rsquo;s see how a matcher could help us here. The idea is to improve on the first &lsquo;state checking&rsquo; solution to make it better than the mock one. We&rsquo;ll extract and isolate all the state checking code in a custom matcher. By factorizing the code in a single matcher, we&rsquo;ll reduce duplication. The matcher remains too intimate with the object, but as it is now unique and well named, it&rsquo;s less of a problem. Plus, as always with matchers, we improved readability.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:have_been_notified_of_order</span> <span class="k">do</span> <span class="o">|</span><span class="n">customer</span><span class="p">,</span> <span class="n">cart</span><span class="o">|</span>
</span><span class='line'><span class="err"> </span><span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">analytics</span><span class="o">|</span>
</span><span class='line'><span class="err">   </span><span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'><span class="err">     </span><span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">analytics</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">customer</span><span class="p">:</span> <span class="n">customer</span><span class="p">,</span> <span class="ss">item</span><span class="p">:</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="err">   </span><span class="k">end</span>
</span><span class='line'><span class="err">   </span><span class="kp">true</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;Order&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="err"> </span><span class="n">it</span> <span class="s2">&quot;notifies analytics service about passed orders&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="err">   </span><span class="n">cart</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Pasta&quot;</span><span class="p">,</span><span class="s2">&quot;Tomatoes&quot;</span><span class="o">]</span>
</span><span class='line'><span class="err">   </span><span class="n">analytics</span> <span class="o">=</span> <span class="no">AnalyticsService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="err">   </span><span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="n">cart</span><span class="p">,</span> <span class="n">analytics</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">order</span><span class="o">.</span><span class="n">pass</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span><span class="n">expect</span><span class="p">(</span><span class="n">analytics</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_been_notified_of_order</span><span class="p">(</span><span class="s2">&quot;Philippe&quot;</span><span class="p">,</span> <span class="n">cart</span><span class="p">)</span>
</span><span class='line'><span class="err"> </span><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is how we could summarize the pros and cons of each approach :</p>

<table>
<thead>
<tr>
<th></th>
<th> Assert state          </th>
<th> Mocks                              </th>
<th> Matchers </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 👎 duplicated code    </td>
<td>👎 duplicates the program behavior</td>
<td>❤️ customizable error messages|</td>
</tr>
<tr>
<td></td>
<td>👎 breaks encapsulation</td>
<td>                                   </td>
<td>❤️ more readable|</td>
</tr>
<tr>
<td></td>
<td>                       </td>
<td>                                    </td>
<td>👎 intimacy with the asserted object|</td>
</tr>
<tr>
<td></td>
<td>                       </td>
<td>                                    </td>
<td>❤️ factorizes the assertion code|</td>
</tr>
</tbody>
</table>


<h2>Design improvements</h2>

<p>Depending on your situation, you might find further design improvements. In our example, a publish-subscribe pattern might do. A better design is likely to fix the encapsulation problem of the matcher. Here again, the custom assertion matchers will help. In most cases, it will be enough to change the implementation of the matchers only.</p>

<blockquote><p>💡 Custom assertion matchers make refactoring easier by factorizing test assertions.</p></blockquote>

<h2>Summary of small-scale techniques</h2>

<p>I&rsquo;m done with small scale mock avoiding techniques. To summarize, the first thing to do is to push for more and more <a href="http://philippe.bourgau.net/how-immutable-value-objects-fight-mocks/">immutable value objects</a>. Not only does it help us to avoid mocks, but it will also provides many benefits for production code. Practices like <a href="http://philippe.bourgau.net/how-to-use-test-data-builders-to-avoid-mocks-and-keep-your-tests-clear/">Test Data Builders</a> and Custom Assertion Matchers simplify dealing with Immutable Value Objects in tests. They also help to keep tests small and clean, which is also a great thing against mocks.</p>

<h2>Next post</h2>

<p>In the following posts, I&rsquo;ll look into architecture scale techniques to avoid mocks. I&rsquo;ll start with <a href="http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/">Hexagonal architecture</a>.</p>
]]></content>
  </entry>
  
</feed>
