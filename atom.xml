<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2014-08-20T21:55:54+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Holy Code Antipattern]]></title>
    <link href="http://philippe.bourgau.net/the-holy-code-antipattern/"/>
    <updated>2014-08-10T08:42:00+02:00</updated>
    <id>http://philippe.bourgau.net/the-holy-code-antipattern</id>
    <category term="antipattern" /><category term="code" /><category term="management" />
    <content type="html"><![CDATA[<p>As I&rsquo;ve encountered this situation in different disguise in different companies, I now assume it&rsquo;s a widely applied antipattern.</p>

<h3>Context</h3>

<p>A team of programmers inherits a piece of code from one of their bosses. They find it really difficult to maintain : it is difficult to understand, fix, and change.</p>

<h3>The Antipattern</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-08-10-the-holy-code-antipattern/grenade.jpg" title="A picture from the Monty Python's Holy Grail movie featuring the holy hand grenade of antioch" ></p>

<p>As this piece of code seems too complex to be maintained by a team of simple programmers, as the boss, just forbid them :</p>

<ul>
<li>to refactor any part of it</li>
<li>to rewrite it from scratch</li>
<li>to use something else instead</li>
</ul>


<h3>Consequences</h3>

<ul>
<li>This often limits the number of bugs that appear in this library, but &hellip;</li>
<li>It slows down development, because of the micro management required to enforce this pattern</li>
<li>It frustrates programmers, and it is likely that the best ones will leave</li>
<li>It prevents better design</li>
<li>Even worse, in the long run, it prevents great domain driven design to emerge from merciless refactoring</li>
<li>In the end, it makes the whole organization less performant</li>
</ul>


<h3>Examples</h3>

<ul>
<li><p>Your boss wrote something a few years ago, if the domain is more or less complex, the resulting code <em>is</em> complicated. The subject eventually got the reputation of being &lsquo;touchy&rsquo;. Your boss is the only person who effectively manages to change anything in there. He&rsquo;s a bit afraid that by trying to improve it, the whole thing might just break down and become a bug nest. So, now that he has some authority, he forbids anyone to touch it. If a change is finally required, he&rsquo;ll micro manage it !</p></li>
<li><p>Your big boss spent some over time on writing an uber-meta-generic-engine to solve <del>the universe and</del> everything. After seeing many developpers fixing the same kind of bugs over and over, he decides that it&rsquo;s time to remove the dust from his compiler and that he starts building something that should solve the root cause of all these. In the spirit of the <a href="http://en.wikipedia.org/wiki/Second-system_effect">second system effect</a>, he adds all bells and whistle to his beloved project, trying to incorporate a solution to every different issue he has seen during the last decade. This code grows and grows in total isolation of any real working software. When he eventually thinks it is ready, he justs drops the whole thing to your team, that is now responsible to integrate and use this thing in the running system. He&rsquo;s micro managing the whole thing, and you don&rsquo;t have any choice but to comply and succeed. This usually generates gazillions of bugs, makes projects really late and ruins the developpers&#8217; lives.</p></li>
</ul>


<h3>Alternatives</h3>

<ul>
<li>Use collective code ownership so that knowledge about the code is shared by design</li>
<li>Trust programmers to design and architecture the system</li>
<li>Use constant refactoring to let tailor made domain driven designs emerge from the system</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RIP mes-courses.fr]]></title>
    <link href="http://philippe.bourgau.net/rip-mes-courses-dot-fr/"/>
    <updated>2014-06-27T06:33:00+02:00</updated>
    <id>http://philippe.bourgau.net/rip-mes-courses-dot-fr</id>
    <category term="lessons-learned" /><category term="mes-courses" /><category term="side project" />
    <content type="html"><![CDATA[<p>Rest In Peace <a href="https://dl.dropboxusercontent.com/u/206938/mes-courses.fr/archives/index.html">mes-courses.fr</a>. Here is what it looked like :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-06-27-rip-mes-courses-dot-fr/screenshot.png" title="Screen shot of the home page of mes-courses.fr" ></p>

<p>I wanted to create a really fast on-line grocery front-end, where people could shop for the week in only 5 minutes. It supported shopping recipes instead of individual items but I also envisioned to allow automatic menus recommendations, and automatic item preference selection. I started 4 years ago, and this is my last doing on the subject :). If you&rsquo;re thinking about starting your own side project, this post is for you.</p>

<h3>Here are the lessons I learned</h3>

<ul>
<li>As a professional programmer, I largely underestimated the non programming time required for a serious side project. It represents more than half the time you&rsquo;ll spend on your project (marketing, discussing with people, mock ups and prototypes)</li>
<li>When I started, I kind of estimated the time it would take me to build a first prototype. Again I ridiculously underestimated this :

<ul>
<li>because of the previous point</li>
<li>because on a side project, you&rsquo;ll be on your own to handle any infra issue</li>
<li>because you don&rsquo;t have 8 hours per day to spend to your project (As a professional developer, dad of 2, I only managed to get 10 to 15 hours per week)</li>
</ul>
</li>
<li><a href="http://philippe.bourgau.net/programming-as-an-exponential-problem/">A small project does not require as much infrastructure as a big one</a>. I lost some time doing things as I do when working on projects with more than 100K lines of code. So next time :

<ul>
<li>I&rsquo;ll stick to end to end cucumber tests for as long as possible</li>
<li>I&rsquo;ll use an economical framework like described in <a href="http://www.amazon.fr/The-Principles-Product-Development-Flow/dp/1935401009">Donald G. Reinertsen&rsquo;s Flow book</a> to prioritize improvements vs features</li>
</ul>
</li>
<li>Eventually, what killed me was that I could not go around the &ldquo;experiment &ndash;> adapt&rdquo; loop fast enough. The project was just too big for my time

<ul>
<li>I&rsquo;ll try to select a subject a project that suits my constraints of time and money</li>
<li>This will be one of the first hypotheses that I&rsquo;m willing to verify</li>
<li>Web marketing and HTML design are more important than coding skills to run experiments : I&rsquo;m learning both</li>
</ul>
</li>
<li>Scrapping is a time hog. I won&rsquo;t start any side project involving scrapping anymore.</li>
<li>Using on-line services always saved me a lot of time. They are a lot more reliable than anything I could setup. Mainly, this was :

<ul>
<li>Mailing services</li>
<li>Cloud deployment</li>
</ul>
</li>
<li>Go the standard way. Again, anytime I did something a bit weird, it turned out to cost me some time

<ul>
<li>Use standard open source software, stick to the latest version</li>
<li>Use standard and wide spread technology</li>
</ul>
</li>
<li>Automated testing and deployment saved me some time from the start. Especially with the small amount of time that I could spend on my project, it was really easy to forget details and to make mistakes.

<ul>
<li><a href="https://github.com/philou/mes-courses/blob/master/lib/mes_courses/deployment.rb">Here</a> is the <a href="https://www.heroku.com/">Heroku</a> deployment script I used to test and deploy in a single shell call</li>
<li>And <a href="https://github.com/philou/mes-courses/blob/master/lib/mes_courses/utils/scheduled_tasks.rb">here</a> is a Heroku workaround to run some cron tasks weekly, this allowed me to run some scrapping tests every week on Heroku</li>
</ul>
</li>
<li>It took all my time ! Next time I start a side project, I&rsquo;ll be prepared to

<ul>
<li>Spend all my free time on it (my time was divided between day-job, family, side project)</li>
<li>Spend all my learning time (books, on-line trainings &hellip;) for it</li>
<li>Choose something that I am passionate about !</li>
<li>Choose a different kind of project to fit my constraints

<ul>
<li>Joining an existing open source project would let me focus on technical work at my own pace</li>
<li>Volunteer for a not for profit project might be less time intensive while allowing some fulfilment</li>
</ul>
</li>
</ul>
</li>
<li>I did my project alone, and it was hard to keep my motivation high on the long run. Next time :

<ul>
<li>I&rsquo;ll join someone else</li>
<li>I&rsquo;ll <a href="http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book/">time box my project</a> before a pivot or starting something completely different</li>
</ul>
</li>
<li>I did not manage to get anything done before I settled a regular daily rhythm. I used to work from 5:30am to 7:30am, I first tried in the evening, but after a day&rsquo;s work, I was too tired to be really productive.</li>
<li>When I could afford it, paying for things or services really saved me some time. I&rsquo;m thinking of

<ul>
<li>A fast computer</li>
<li>Some paying on-line services</li>
</ul>
</li>
</ul>


<p>It is sure that doing a side project seriously is a heavy time investment, but there&rsquo;s also a lot of benefits !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-06-27-rip-mes-courses-dot-fr/side-projects-are-important.gif" title="Side projects are important blackboard" ></p>

<h3>Here is what I gained</h3>

<ul>
<li>Real experience with new technologies. For me, this included

<ul>
<li>Ruby on Rails</li>
<li>Coffeescript</li>
<li>HTML scrapping</li>
<li>Dev-ops practices with Heroku</li>
<li>Web design with HTML and CSS</li>
</ul>
</li>
<li>I also learned a lot of non technical skills in which I was completely inexperienced

<ul>
<li>Web marketing</li>
<li>Blogging</li>
<li>Mailing</li>
</ul>
</li>
<li>Trying to bootstrap a for profit side project is like running a micro company, it&rsquo;s a good opportunity to understand how a company is ran. This can help you to become a better professional during your day-job.</li>
<li>Having control on everything is a good situation to use Lean techniques.

<ul>
<li><a href="http://www.amazon.com/The-Lean-Startup-Entrepreneurs-Continuous/dp/0307887898/ref=sr_1_1?ie=UTF8&amp;qid=1404024050&amp;sr=8-1&amp;keywords=lean+startup">Lean Start-up</a></li>
<li><a href="http://www.amazon.com/The-Principles-Product-Development-Flow/dp/1935401009/ref=sr_1_1?ie=UTF8&amp;qid=1404024094&amp;sr=8-1&amp;keywords=reinersten">Lean product development (Donald G. Reinertsen)</a></li>
</ul>
</li>
<li>Failing allowed me to actually understand Lean Start up ! The ideas are easy to understand in theory, the practice is a very different thing. It should help me for my next project.</li>
<li>Resolving real problems on my own was a very good source for valuable blog articles.</li>
<li>I collaborated with very clever people on open source libraries

<ul>
<li>By fixing some bugs in some libraries I was using</li>
<li>By releasing some parts of my code as open source libraries</li>
</ul>
</li>
</ul>


<p>Next time, I hope I&rsquo;ll get more euros as well !</p>

<p>You&rsquo;ve got nothing to loose from trying ! Just do it. Give yourself 1 year to get some small success, and then continue or repeat with something else !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling agile practices and elephant taming]]></title>
    <link href="http://philippe.bourgau.net/enabling-agile-practices-and-elephant-taming/"/>
    <updated>2014-06-15T21:37:00+02:00</updated>
    <id>http://philippe.bourgau.net/enabling-agile-practices-and-elephant-taming</id>
    <category term="agile" /><category term="testing" />
    <content type="html"><![CDATA[<p>Everybody knows about the agile software development promise &ldquo;Regularly and continuously deliver value&rdquo;. This is how it is supposed to work :</p>

<ul>
<li>Iterative</li>
<li>Focusing on what is needed now</li>
<li>Release as soon as possible</li>
<li>Planning small stories according to the team&rsquo;s velocity</li>
</ul>


<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-06-15-enabling-agile-practices-and-elephant-taming/squirrel.jpg" title="A business A squirrel jumping from one tree to another (source mayamumu.centerblog.net)" ></p>

<p>It all seems common sense and simple. Especialy for people who don&rsquo;t code. That&rsquo;s not the whole story though, let&rsquo;s have a look at a few variations :</p>

<p>Suppose a team uses <a href="http://www.scrum.org">Scrum</a> but does not do any automated testing. As soon as the software will be used, bugs will create havoc in the planning. The velocity will quickly fall, within a few monthes, the team won&rsquo;t be able to add any value. Surely, things could be improved with some rewrite and upfront design &hellip; this does not sound like Scrum anymore.</p>

<p>Now let&rsquo;s suppose that another team is also using Scrum, uses automated tests, but <a href="http://philippe.bourgau.net/sprints-are-not-sprints/">missunderstood Sprint</a> and KISS for quick-and-dirty-coding. Hopefully, this team won&rsquo;t get too many bugs in production ! Unfortunately, any change to the source code will trigger hundreds of test failures : again, the velocity will decrease. I&rsquo;ve been in such projects, in about 2 years, the team got really slow, and might eventually drop their test suit &hellip;</p>

<p>These two examples show that automated testing improves the situation, but also that it is not enough ! There are quite a few agile practices that are in fact <em>enabling</em> practices. These are the practices that are required for the process to accomplish the agile promise described at the begining of this article. Most come from <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> and have been reincarnated through <a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship</a>. That&rsquo;s what Kent Beck meant when he said that XP practices reinforce each other. Here are a few examples :</p>

<p>For example let&rsquo;s take <strong>coding standards</strong> and <strong>pair programming</strong> which really seem to be a programmer choice.
It turns out that they help to achieve <strong>collective code ownership</strong>.
Which in turn helps to get &lsquo;switchable&rsquo; team members.
Which helps to make good team estimates.
Which is required to have have a reliable <strong>velocity</strong>.
Which is a must have to regularly <strong>deliver value</strong> on commitment !</p>

<p>It turns out that all of the other original <a href="http://www.extremeprogramming.org/rules.html">XP practices</a> help to achieve the agile promise.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-06-15-enabling-agile-practices-and-elephant-taming/elephant-in-the-room.jpg" title="A business meeting with a real elephant in the room" ></p>

<p>After a lot of time spent writing software, I now tend to think of the code as the elephant in the room. It directly or indirectly constrains every decision that is make. Recognize and tame your elephant or you&rsquo;ll get carted away &hellip;</p>

<p>&hellip; or dragged away &hellip;</p>

<p>&hellip; or trampled &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber_tricks gem : my favorite Gherkin and Cucumber tricks]]></title>
    <link href="http://philippe.bourgau.net/cucumber-tricks-gem-my-favorite-gherkin-and-cucumber-tricks/"/>
    <updated>2014-06-12T06:28:00+02:00</updated>
    <id>http://philippe.bourgau.net/cucumber-tricks-gem-my-favorite-gherkin-and-cucumber-tricks</id>
    <category term="cucumber" /><category term="gem" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>I just compiled my Gherkin and Cucumber goodies into a gem. It&rsquo;s called <a href="https://rubygems.org/gems/cucumber_tricks">cucumber_tricks</a> and the source code can be found on <a href="https://github.com/philou/cucumber_tricks">github</a>. It&rsquo;s also tested on <a href="https://travis-ci.org/philou/cucumber_tricks">travis</a> and documented in details on <a href="https://www.relishapp.com/philou/cucumber-tricks/docs">relish</a>.</p>

<p>The goal of all these tricks is to be able to write more natural english scenarios. Here is an extract from the readme of the gem, which explains what it can do :</p>

<h3>Use pronouns to reference previously introduced items</h3>

<p>foo.feature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Given </span><span class="nf">the tool &#39;screwdriver&#39;</span>
</span><span class='line'><span class="k">When </span><span class="nf">this tool is used</span>
</span></code></pre></td></tr></table></div></figure>


<p>steps.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">A_TOOL</span> <span class="o">=</span> <span class="no">NameOrPronounTransform</span><span class="p">(</span><span class="s1">&#39;tool&#39;</span><span class="p">,</span> <span class="s1">&#39;hammer&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Given</span> <span class="sr">/^(</span><span class="si">#{</span><span class="no">A_TOOL</span><span class="si">}</span><span class="sr">)$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">tool</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Use the same step implementation to handle an inline arg as a 1-cell table</h3>

<p>steps.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GivenEither</span> <span class="sr">/^the dog named &quot;(.*)&quot;$)$/</span><span class="p">,</span>
</span><span class='line'>            <span class="sr">/^the following dogs$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">dogs_table</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>foo.feature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Given </span><span class="nf">the dog &quot;</span><span class="s">Rolphy</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">...</span>
</span><span class='line'><span class="k">Given </span><span class="nf">the following dogs</span>
</span><span class='line'><span class="k">  |</span><span class="s"> Rex</span><span class="k">  |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> King</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> Volt</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add default values to the hashes of a table</h3>

<p>foo.feature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Given </span><span class="nf">the following dogs</span>
</span><span class='line'><span class="k">  |</span><span class="s"> names</span><span class="k"> |</span><span class="s"> color</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> Rex</span><span class="k">   |</span><span class="s"> white</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> King</span><span class="k">  |</span><span class="s"> Sand</span><span class="k">  |</span>
</span></code></pre></td></tr></table></div></figure>


<p>steps.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^the following dogs$$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">dogs</span><span class="o">|</span>
</span><span class='line'>  <span class="n">hashes</span> <span class="o">=</span> <span class="n">dogs</span><span class="o">.</span><span class="n">hashes_with_defaults</span><span class="p">(</span><span class="s1">&#39;names&#39;</span><span class="p">,</span> <span class="s1">&#39;tail&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wagging&#39;</span><span class="p">,</span> <span class="s1">&#39;smell&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;not nice&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#  hashes.each do |hash|</span>
</span><span class='line'><span class="c1">#    expect(hash[&#39;smell&#39;]).to eq(&#39;not nice&#39;)</span>
</span><span class='line'><span class="c1">#  end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Define named lists from a table</h3>

<p>foo.feature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Given </span><span class="nf">the following dishes</span>
</span><span class='line'><span class="k">  |</span><span class="s"> Spaghetti Bolognaise</span><span class="k"> |</span><span class="s"> =&gt;</span><span class="k"> |</span><span class="s"> Spaghetti</span><span class="k"> |</span><span class="s"> Bolognaise sauce</span><span class="k"> |       |         |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> Burger</span><span class="k">               |</span><span class="s"> =&gt;</span><span class="k"> |</span><span class="s"> Bread</span><span class="k">     |</span><span class="s"> Meat</span><span class="k">             |</span><span class="s"> Salad</span><span class="k"> |</span><span class="s"> Ketchup</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<p>steps.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^the following dishes$$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">dishes</span><span class="o">|</span>
</span><span class='line'>  <span class="n">name_2_dishes</span> <span class="o">=</span> <span class="n">dishes</span><span class="o">.</span><span class="n">hash_2_lists</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#  expect(name_2_dishes[&#39;Burger&#39;]).to eq([&#39;Bread&#39;,&#39;Meat&#39;,&#39;Salad&#39;,&#39;Ketchup&#39;])</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Visit <a href="https://www.relishapp.com/philou/cucumber-tricks/docs">relish</a> for more detailed documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My new gem for creating rspec proxies]]></title>
    <link href="http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies/"/>
    <updated>2014-05-23T06:20:00+02:00</updated>
    <id>http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies</id>
    <category term="agile" /><category term="mocking" /><category term="rspec" /><category term="ruby" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>I already wrote a lot about test proxies (<a href="http://philippe.bourgau.net/how-to-stub-around-a-call-to-the-original-method-with-rspec/">here</a>, <a href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">here</a> and <a href="http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests/">here</a>).</p>

<p>I just took the time to transform my previous gist in a full fledged ruby gem. It&rsquo;s called &ldquo;rspecproxies&rdquo; and it can be found <a href="https://github.com/philou/rspecproxies">on github</a>. It&rsquo;s fully tested, documented and there&rsquo;s a usage section in the readme to help anyone get started.</p>

<p>Here are the pain points proxies try to fix :</p>

<ul>
<li>Without mocks, it is sometimes just awfully painfull to write the test (do you really want to start a background task just to get a completion ratio ?)</li>
<li>With classic stubs, you sometimes have to stub things you are not interested in in your test, you end up with unmaintainable extra long stub setup</li>
</ul>


<p>Let&rsquo;s have a look at a few examples of tests with proxies :</p>

<ul>
<li>Verify actual load count without interfering in any behaviour</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;caches users&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">capture_results_from</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">controller</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;joe&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_exactly</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use proxies to stub an object that does not yet exist</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;rounds the completion ratio&#39;</span> <span class="k">do</span>
</span><span class='line'>   <span class="no">RenderingTask</span><span class="o">.</span><span class="n">proxy_chain</span><span class="p">(</span><span class="ss">:load</span><span class="p">,</span> <span class="ss">:completion_ratio</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2523</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">renderingController</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;25%&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d really love to see more code tested with proxies, it makes the whole testing so much more natural. As with any testing techniques, we get more thorough testing from the ease of writing the test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better error messages when testing html views]]></title>
    <link href="http://philippe.bourgau.net/better-error-messages-when-testing-html-views/"/>
    <updated>2014-05-18T21:14:00+02:00</updated>
    <id>http://philippe.bourgau.net/better-error-messages-when-testing-html-views</id>
    <category term="html" /><category term="matcher" /><category term="rspec" /><category term="ruby" />
    <content type="html"><![CDATA[<p>When testing html views, either from <a href="http://rspec.info/">RSpec</a> or from <a href="http://rspec.info/">Cucumber</a>, <a href="http://fr.wikipedia.org/wiki/XPath">XPath</a> can be really helpful to quickly find expected elements.</p>

<p>Unfortunately, a bit like regular expressions, when you start to use xpath to solve a problem, you often end up with 2 problems &hellip; Part of the reason is that xpaths tend to be cryptic. In the case of testing, error messages coming from unmatched xpath are even more crytic !</p>

<p>That&rsquo;s why I had the idea for <a href="https://github.com/philou/xpath-specs">xpath-specs</a> : a small gem that allows to associate a description with an xpath, to nest xpaths together, all this to simplify tests and assertion failure reporting.</p>

<p>For example, with an assertion like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">html</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">contain_a</span><span class="p">(</span><span class="n">dish_with_name</span><span class="p">(</span><span class="s2">&quot;Grilled Lobster&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the kind of failure message one can get :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expected</span> <span class="n">the</span> <span class="n">page</span> <span class="n">to</span> <span class="n">contain</span> <span class="n">a</span> <span class="n">dish</span> <span class="n">that</span> <span class="n">is</span> <span class="n">named</span> <span class="no">Grilled</span> <span class="no">Lobster</span> <span class="p">(</span><span class="sr">//</span><span class="n">table</span><span class="o">[</span><span class="vi">@id</span><span class="o">=</span><span class="s1">&#39;dish-panel&#39;</span><span class="o">]//</span><span class="n">tr</span><span class="o">[</span><span class="n">td</span><span class="o">[</span><span class="n">contains</span><span class="p">(</span><span class="o">.</span><span class="n">,</span><span class="s1">&#39;#{name}&#39;</span><span class="p">)</span><span class="o">]]</span><span class="p">)</span>
</span><span class='line'>       <span class="n">it</span> <span class="n">found</span> <span class="n">a</span> <span class="n">dish</span> <span class="p">(</span><span class="sr">//</span><span class="n">table</span><span class="o">[</span><span class="vi">@id</span><span class="o">=</span><span class="s1">&#39;dish-panel&#39;</span><span class="o">]//</span><span class="n">tr</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="no">Pizza</span><span class="o">&lt;</span><span class="sr">/td&gt;...&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="n">but</span> <span class="ow">not</span> <span class="n">a</span> <span class="n">dish</span> <span class="n">that</span> <span class="n">is</span> <span class="n">named</span> <span class="no">Grilled</span> <span class="no">Lobster</span> <span class="p">(</span><span class="sr">//</span><span class="n">table</span><span class="o">[</span><span class="vi">@id</span><span class="o">=</span><span class="s1">&#39;dish-panel&#39;</span><span class="o">]//</span><span class="n">tr</span><span class="o">[</span><span class="n">td</span><span class="o">[</span><span class="n">contains</span><span class="p">(</span><span class="o">.</span><span class="n">,</span><span class="s1">&#39;#{name}&#39;</span><span class="p">)</span><span class="o">]]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the required setup :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/support/knows_page_parts.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">KnowsPageParts</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dish</span>
</span><span class='line'>    <span class="ss">Xpath</span><span class="p">:</span><span class="ss">:Specs</span><span class="o">::</span><span class="no">PagePart</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;a dish&quot;</span><span class="p">,</span> <span class="s2">&quot;//table[@id=&#39;dish-panel&#39;]//tr&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dish_with_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dish</span><span class="o">.</span><span class="n">that</span><span class="p">(</span><span class="s2">&quot;is named </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;[td[contains(.,&#39;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&#39;)]]&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have a look at the <a href="https://github.com/philou/xpath-specs">readme</a> for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding as a living can be dangerous to your health]]></title>
    <link href="http://philippe.bourgau.net/coding-as-a-living-can-be-dangerous-to-your-health/"/>
    <updated>2014-05-05T06:49:00+02:00</updated>
    <id>http://philippe.bourgau.net/coding-as-a-living-can-be-dangerous-to-your-health</id>
    <category term="clean code" /><category term="comic" /><category term="joke" /><category term="programming" />
    <content type="html"><![CDATA[<p><a href="https://groups.google.com/forum/#!topic/comp.lang.c++/rYCO5yn4lXw">In 1991, John F. Woods wrote</a> :</p>

<blockquote><p>Always code as if the guy who ends up maintaining your code will be a
violent psychopath who knows where you live.  Code for readability.</p></blockquote>

<p>Here is how it might go :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-05-05-coding-as-a-living-can-be-dangerous-to-your-health/psychopath-coworker.JPG" title="Simple drawing of the psychopath coworker begging his teammate for a speak ... with an axe !" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring trick to insert a wrapper]]></title>
    <link href="http://philippe.bourgau.net/refactoring-trick-to-insert-a-wrapper/"/>
    <updated>2014-04-30T08:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/refactoring-trick-to-insert-a-wrapper</id>
    <category term="anticorruption layer" /><category term="refactoring" />
    <content type="html"><![CDATA[<p>Last week at work, we decided that we needed an <a href="http://stackoverflow.com/questions/909264/ddd-anti-corruption-layer-how-to">Anticorruption Layer</a> between our code and another team&rsquo;s. They have been using our internal data structures as they needed to, in an ad hoc way. This turned out to be an issue when we want to refactor our code. The goals of this layer are :</p>

<ul>
<li>to provide an explicit API layer, controlling what is accessible from the outside</li>
<li>to allow us to improve our implementation independently of this API</li>
</ul>


<p>The first step all the team aggreed on is to provide direct wrappers around our classes. Unfortunately, some of these classes had more than a thousand references to it and our IDE does not provide any automated refactoring for this (introduce a wrapper class, and only use it in some part of the code). We found a trick ! Here it is :</p>

<ol>
<li>Make sure you have a clean SCC state</li>
<li>Rename the class to be wrapped (let&rsquo;s call it Foo) into FooWrapper</li>
<li>From SCC, revert the part of the code where you want to continue using Foo directly</li>
<li>In SCC, revert Foo and FooWrapper</li>
<li>Manually (re)create the FooWrapper class</li>
<li>Create FooWrapper.wrap(x) and FooWrapper.unwrap(x) methods</li>
<li>Fix all the compilation issues (mostly by calling wrap() and unwrap())</li>
<li>Run your tests and fix any remaining points</li>
</ol>


<p>That saved us a whole lot of time. If your layer contains several classes with references between them, they is an optimal order through which to introduce the wrappers. Any order will work, but some will require more temporary calls to wrap and unwrap (step 7.). At the end, wrap() and unwrap() methods should only be called from within the layer.</p>

<p>Often you&rsquo;ll find out that to complete the wrapping of a class, you&rsquo;ll first need to wrap another class, you can :</p>

<ul>
<li>Follow the mikado method strictly : upgrade your mikado graph, revert all your changes, and try to wrap this other class. It can seem slow, but it is completly incremental</li>
<li>Wrap the 2 classes at the same time : this is the best way when wrapping this other class is rather straightforward</li>
<li>Insert temporary calls to wrap() and unwrap() : they&rsquo;ll be removed when you&rsquo;ll later wrap the other class. This might be the only way if the classes have cyclic dependencies.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we introduced efficient agile retrospectives]]></title>
    <link href="http://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives/"/>
    <updated>2014-04-22T06:13:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives</id>
    <category term="agile" /><category term="retrospectives" /><category term="scrum" />
    <content type="html"><![CDATA[<p>6 months ago, our team started to run systematic iteration retrospectives. Within these 6 months, our team became more agile than ever. Running efficient retrospectives is what makes good teams great, it is what truly makes a team agile. Here is our story.</p>

<p>At the begining, we started with a standard retrospective format inspired from <a href="http://www.amazon.com/The-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1398141097&amp;sr=8-1&amp;keywords=the+art+of+agile+development">The Art Of Agile Development</a> (A truly great book by the way). As I was used to running retrospectives, I did the first one. This is how it goes :</p>

<ul>
<li>Repeat Norm&rsquo;s Kerth&rsquo;s prime directive to everyone (5 minutes) :</li>
</ul>


<blockquote><p>Regardless of what we discover today, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.</p></blockquote>

<p>If the message is awkward, the animator can explain that the point is to avoid counter productive blaming (even if it is unlikely to happen in your setting &hellip;)</p>

<ul>
<li>Do some kind of brainstorming (10 minutes) :</li>
</ul>


<p>One his own, everyone writes what went well on green post-its, and what did not went so well on blue post-its. Everybody sticks them up on the flipchart.</p>

<ul>
<li>Group insights togethers (15 minutes) :</li>
</ul>


<p>The animator reads every post-it aloud, asking team members for details, and tries to group notes together. When everyone is ok with the groups, dot vote : every team member gets 3 points, that he can assign as he wishes on any group. Here is what the board should look like at this point.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-04-22-how-we-introduced-efficient-agile-retrospectives/insights.jpg" title="Photo of the flipchart with gathered insights" ></p>

<ul>
<li>Find actions to improve the process (30 minutes) :</li>
</ul>


<p>Pick up the 3 most voted issues, give everyone 5 minutes to think of useful actions to fix these. Then take another 5 minutes so that people can discuss their solutions in pairs, and another 5 minutes to do the same in groups of 4. Eventually, as the animator reports on the flipchart, do the same altogether. Make sure that the solutions are <strong>doable</strong> within the next sprint, if not discuss and split them until they are. Again, dot vote for the prefered actions.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-04-22-how-we-introduced-efficient-agile-retrospectives/actions.jpg" title="Photo of the flipchart with agreed actions" ></p>

<ul>
<li>Do it :</li>
</ul>


<p>As soon as the retrospective is finished, the animator must enter the actions in the coming sprint backlog. These actions are not user stories, but they <strong>must</strong> be done. If there are not, the team cannot be agile as they will be no continuous improvement. Don&rsquo;t assign any story points to these items, but let the velocity auto adjust for a given amount of improvements during every sprint.</p>

<p>After the first one, every team member animated such a retrospective, one after the other. When everyone was at ease with this, we changed the format. We bought <a href="http://www.amazon.com/Agile-Retrospectives-Making-Teams-Great/dp/0977616649/ref=pd_sim_b_1?ie=UTF8&amp;refRID=0QA643CPNSQE9E0GSG5E">Agile Retrospectives: Making Good Teams Great</a> and everyone was responsible for designing his own retrospective session when his turn came. This allows different and various insights.</p>

<p>To conclude, here are a few retrospectives hints and guidelines</p>

<ul>
<li>Everyone&rsquo;s voice should be equal, everyone should feel free to talk</li>
<li>Don&rsquo;t worry if good ideas are not selected the first time, they&rsquo;ll come back</li>
<li>At the begining of every retrospective, review what happened about what was decided during the previous one</li>
<li>Use sticky flipcharts and stick them on the wall as you go through the different activities</li>
<li>Prepare flipcharts in advances to make the retrospective run more smoothly</li>
<li>Use colored post its to highlight different aspects (good things, bad things or whatever)</li>
<li>Use markers to write on post its (how can one read it from the back of the room otherwise ?)</li>
</ul>


<p>If you haven&rsquo;t yet, you have no excuses not to start now !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Travis daily build with Heroku scheduler]]></title>
    <link href="http://philippe.bourgau.net/automatic-travis-daily-build-with-heroku-scheduler/"/>
    <updated>2014-03-24T06:31:00+01:00</updated>
    <id>http://philippe.bourgau.net/automatic-travis-daily-build-with-heroku-scheduler</id>
    <category term="continuous-integration" /><category term="heroku" /><category term="open-source" /><category term="rake" /><category term="travis" />
    <content type="html"><![CDATA[<p>As <a href="http://philippe.bourgau.net/auchandirect-scrapi-an-unofficial-api-ruby-gem/">I just released</a> <a href="https://github.com/philou/auchandirect-scrAPI">auchandirect-scrAPI</a>, and that it relies on scrapping, I needed a daily build.</p>

<p>The <a href="https://travis-ci.org">Travis</a> team <a href="https://github.com/travis-ci/travis-ci/issues/582">is already working</a> on this, and I found a small utility app called <a href="http://traviscron.pythonanywhere.com/">TravisCron</a> where anyone can register his repo for an automatic build.</p>

<p>Unfortunately, the feature is not yet ready in Travis, and the TravisCron guys did not yet activate my repo. After having a look at the <a href="https://github.com/FiloSottile/travis-cron">TravisCron source code</a> and the <a href="https://github.com/travis-ci/travis.rb">Travis API</a>, I found out that it is really simple to do the same thing on my own.</p>

<p>That&rsquo;s how I created <a href="https://github.com/philou/daily-travis">daily-travis</a>. It&rsquo;s a tiny Rake task, ready to be pushed and automaticaly scheduled on heroku that will restart the latest build when run.</p>

<p>Details are in the <a href="https://github.com/philou/daily-travis/blob/master/README.md">README</a></p>

<p>@Travis : Thanks again for your service.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-03-24-automatic-travis-daily-build-with-heroku-scheduler/travis-ci.jpeg" title="I love Travis logo" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auchandirect-ScrAPI : an unofficial API Ruby Gem]]></title>
    <link href="http://philippe.bourgau.net/auchandirect-scrapi-an-unofficial-api-ruby-gem/"/>
    <updated>2014-03-21T06:31:00+01:00</updated>
    <id>http://philippe.bourgau.net/auchandirect-scrapi-an-unofficial-api-ruby-gem</id>
    <category term="API" /><category term="gem" /><category term="ruby" /><category term="scrapping" />
    <content type="html"><![CDATA[<p><a href="http://mashable.com/2011/01/04/brand-open-api-developers/">Every brands should provide an API for developpers</a> &hellip; unfortunately, it far from the truth right now. A few years ago, when I started my mes-courses.fr side project, I would have loved to find a french online grocery providing an open API. I had to resort to scrapping <em>(that&rsquo;s how I learnt that heavily relying on scrapping for a 15hr/week side project is not a good fit &hellip; but that&rsquo;s another story)</em>.</p>

<p>As I am taking mes-courses.fr down, I have extracted the whole unofficial API I had built around <a href="http://www.auchandirect.fr">http://www.auchandirect.fr</a> (I&rsquo;m talking to you french hackers !) into an open source Ruby Gem. Briefly :</p>

<ul>
<li>It walks the whole store, from categories to items</li>
<li>Given valid credentials, it can fill and save a cart</li>
<li>It&rsquo;s <a href="http://choosealicense.com/licenses/lgpl-v3/">LGPL</a> : anyone can use it as long as they give back any improvement to the community</li>
<li>It&rsquo;s using <a href="https://github.com/philou/storexplore">Storexplore</a>, another of my mes-courses.fr rip-off open source Ruby Gem</li>
<li>It&rsquo;s tested on <a href="https://travis-ci.org/philou/auchandirect-scrAPI">Travis</a> and I&rsquo;m currently trying to make it daily tested with <a href="http://traviscron.pythonanywhere.com/">Traviscron</a></li>
</ul>


<p>There&rsquo;s mainly one thing it <em>cannot</em> do :</p>

<ul>
<li>It cannot procede to any payment or ordering</li>
</ul>


<p>It&rsquo;s available on <a href="https://github.com/philou/auchandirect-scrAPI">Github</a></p>

<p>Happy scrapping !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harley Davidson programming]]></title>
    <link href="http://philippe.bourgau.net/harley-davidson-programming/"/>
    <updated>2014-03-05T06:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/harley-davidson-programming</id>
    <category term="comic" /><category term="joke" /><category term="programming" />
    <content type="html"><![CDATA[<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-03-05-harley-davidson-programming/programmer.jpg" title="Drawing of a software programmer sitting at the bottom of his chair lower than his computer" ></p>

<p>Maybe we should add motors to these desk chairs ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming as an exponential problem]]></title>
    <link href="http://philippe.bourgau.net/programming-as-an-exponential-problem/"/>
    <updated>2014-02-21T06:30:00+01:00</updated>
    <id>http://philippe.bourgau.net/programming-as-an-exponential-problem</id>
    <category term="complexity" /><category term="programming" /><category term="reflexion" />
    <content type="html"><![CDATA[<p>As said Tom Cargill</p>

<blockquote><p>The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.</p></blockquote>

<p>By extrapolation, this would mean that every time we increase the requirements by 10%, we need to double the total development time ! That would mean that solution complexity is an exponential function of the complexity of the problem.</p>

<p>That could explain why techniques that work well for small problems don&rsquo;t work well at all for large problems, and vice et versa. For example</p>

<table>
<thead>
<tr>
<th align="center"> In the small (think one page script) </th>
<th align="center"> In the large (think multi millions lines system)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> Dynamic typing                       </td>
<td align="center"> Static typing</td>
</tr>
<tr>
<td align="center"> Mutable globals                      </td>
<td align="center"> Immutability</td>
</tr>
<tr>
<td align="center"> Imperative style                     </td>
<td align="center"> Declarative style</td>
</tr>
<tr>
<td align="center"> Manual memory management             </td>
<td align="center"> Garbage collection</td>
</tr>
<tr>
<td align="center"> Shared memory                        </td>
<td align="center"> Message passing</td>
</tr>
</tbody>
</table>


<br/>


<p>Just for fun, let&rsquo;s suppose that we could deduce a unique constant C for every language such that</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-02-21-programming-as-an-exponential-problem/formula.png" title="Secret formula linking problem and solution complexities" ></p>

<p>Here is a plot of this formula with different values of C (0.5, 1 and 2)</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-02-21-programming-as-an-exponential-problem/close-plot.png" title="Plot of the formula for different C constant values" ></p>

<p>We can see that small values of C are best for small problems, whereas greater values are evolve better with larger problems. For a given problem, there is quite a difference in the solution complexity, if the formula was true, and that we knew in which zone of complexity our problem will always be, we could choose the appropriate technology ! Experienced engineers already have the gut knowledge about how to chose the right tool for the job !</p>

<p>That&rsquo;s not all, let&rsquo;s have a bird&rsquo;s eye view of the same formulas</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-02-21-programming-as-an-exponential-problem/wide-plot.png" title="Same plot at a larger scale" ></p>

<p>I increased the maximum problem complexity by a factor of 3, I had to multiply the solution complexity by 100 ! In the end, these exponential curves all seem frighteningly vertical. This could explain why the divide and conquer approach works so well in software : 2e<sup>x</sup> &lt; e<sup>2x</sup>. Abstract and powerful APIs might be our best weapon against complexity.</p>

<p>People behaviour does not match this exponential hypothesis though :</p>

<ul>
<li>At work, I&rsquo;ve seen quite a few projects started from scratch, and everybody expecting it to maintain it&rsquo;s initial speed during its whole lifetime</li>
<li>Some recent hiring or investing trend seem to rely on hackathons, startup week ends, or coding games, all &lsquo;in the small&rsquo; exercises</li>
<li>I&rsquo;ve observed in quick and dirty overtime work to meet a deadline &hellip; If productivity is proportional to the solution complexity, that crunch mode would be completely unproductive</li>
</ul>


<p>This leads to more interesting questions :</p>

<ul>
<li>Is my exponential model complete garbage ?</li>
<li>Or are humans particularly bad at forecasting an exponential behaviour ?</li>
<li>If so, what practices could we adopt to stop relying on this misleading gut feeling ?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retroactively add keywords for your existing Octopress posts]]></title>
    <link href="http://philippe.bourgau.net/retroactively-add-keywords-for-your-existing-octopress-posts/"/>
    <updated>2014-02-11T06:54:00+01:00</updated>
    <id>http://philippe.bourgau.net/retroactively-add-keywords-for-your-existing-octopress-posts</id>
    <category term="blogging" /><category term="octopress" /><category term="seo" />
    <content type="html"><![CDATA[<p>At the moment, I am exploring the world of SEO, and so I thought I could start with my blog. I found <a href="http://xit0.org/2013/05/seo-for-octopress-websites/">SEO for Octopress websites</a> that I followed to add keywords and descriptions to this blog.</p>

<p>To fill actual keywords for all my existing posts, I had 2 options :</p>

<ul>
<li>edit around 60 posts by hand</li>
<li>write a script to parse Yaml post descriptions and extract and inject keywords</li>
</ul>


<p>Sorry, I chose the geeky solution &hellip;</p>

<p>
<script src="https://gist.github.com/philou/8929876.js"></script>
</p>


<p>Just add this code to your toplevel Rakefile, and run <code>bundle exec rake add_keywords</code> and keywords will be added to your existing posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My humble advices about how to write maintainable tests]]></title>
    <link href="http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests/"/>
    <updated>2014-02-04T06:10:00+01:00</updated>
    <id>http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests</id>
    <category term="agile" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>I love writing automated tests &hellip; or rather, I hate having to work in untested code. I find it makes my life unnecessarily stressful. On the other hand, the cost of maintaining badly written tests can sometimes outweigh their benefits. This is usually the moment where the team resorts to manual testing, and gets back to the ways of &lsquo;the good old days&rsquo;. Personally, I don&rsquo;t like the good old days when we had to stay up all night <del>to add even more mess</del> to fix something for an important deadline.</p>

<p>Here is how I try to make my tests as maintainable as possible :</p>

<ul>
<li>Write the tests before the code, it gets a (short) time to get used to, but after that, it&rsquo;s just a lot more fun. Just try it for a while</li>
<li>Write tests with no side effects, otherwise, it will not be possible to run your tests alone, or in a different order ! So don&rsquo;t use globals</li>
<li>Write readable tests : did you ever had to fix a test that you cannot figure out the intent ? A lot of the other points just help writing more readable tests</li>
<li>Write small tests : they are usually faster to run, allow you to test more edge cases, and make a better job at pinpointing the actual faulty code. The receipe for writing short tests is to follow the given-when-then pattern :

<ul>
<li>start your test by setting the context (given)</li>
<li>do the thing you actually want to test (when)</li>
<li>verify that it did what you wanted (then)</li>
</ul>
</li>
<li>Remove code duplication from your tests, in the same way as you would in production code. This will help you when you&rsquo;ll want to modify that constructor that is used in 764 test files &hellip;</li>
<li>Use test data builders. This will avoid duplicated and long context setup at the beginning of every test. Don&rsquo;t use factory methods or the object mother pattern, it just does not scale. In java, this usually means <a href="http://www.natpryce.com/articles/000714.html">rollying your own</a>, in ruby, just use <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a></li>
<li>Use custom assertion objects. This will avoid duplicated and complicated verification code at the end of every test. It will also help to improve assertion messages. In ruby, this comes built in <a href="http://rspec.info/">rspec</a> and its <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/define-matcher">matcher dsl</a>. Lately, in Java I have been using <a href="https://github.com/alexruiz/fest-assert-2.x">Fest Assert</a></li>
<li>Use the extended red &ndash;> red with explicit error message &ndash;> green &ndash;> refactor in place of the shorter red &ndash;> green &ndash;> refactor. By spending some time to improve your assertion messages, you&rsquo;ll eventually save time to understand what broke when the test fails</li>
<li>As <a href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">I already wrote about</a>, only use mocks to

<ul>
<li>speed up a test that is too slow</li>
<li>cut off a dependency to an unavailable subsystem</li>
<li>simplify an overly complex test setup</li>
</ul>
</li>
<li>Use constructor based dependency injection. It&rsquo;s straightforward, low tech, and simplifies test setup</li>
<li>As there is no need to mock immutable data structures, I found that using immutable classes for values simplifies tests</li>
<li>Usually use hand coded mocks. Hand coded mocks become difficult to maintain when the code becomes too tangled, they can help me to know that I am doing something wrong (not mocking at the correct place, testing implementation, not doing enough refactoring &hellip;). On the contrary, mock framework make this so easy that I usually miss the issue completely until it is too late</li>
<li>Except when your mocking framework provides object proxing and automatic unmocking. Ruby&rsquo;s <a href="http://rr.github.io/rr/">RR</a> provides this. Both features can be really useful when needed.</li>
<li>Use existing mocks when possible. For example, <a href="http://www.sqlite.org/">Sqlite</a> in memory database : it speeds up the tests, removes the need for any environment setup, and is usually very simple to setup</li>
<li>Last of all, listen to your tests : if they get difficult to write, they might be a design improvement opportunity lying somewhere</li>
</ul>


<p>All in all there is nothing new here. A lot of things come from <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1391579113&amp;sr=8-1&amp;keywords=growing+object-oriented+software+guided+by+tests">GOOS</a> others from <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=pd_bxgy_b_text_y">Clean Code</a>, the mocking &lsquo;requirements&rsquo; come from <a href="http://blog.rubybestpractices.com/posts/gregory/052-issue-20-thoughts-on-mocking.html">an article from Gregory Brown</a>, I found others from my own experience and from a lot of other sources I cannot remember now &hellip;</p>

<p>Happy testing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online store scrapping DSL gem]]></title>
    <link href="http://philippe.bourgau.net/online-store-scrapping-dsl-gem/"/>
    <updated>2014-01-21T06:50:00+01:00</updated>
    <id>http://philippe.bourgau.net/online-store-scrapping-dsl-gem</id>
    <category term="dsl" /><category term="gem" /><category term="open source" /><category term="ruby" /><category term="scrapping" />
    <content type="html"><![CDATA[<p>Since I decided to stop <a href="http://www.mes-courses.com">Mes Courses</a> to focus on <a href="http://www.agileavatars.com">AgileAvatars</a>, I have been extracting open source gems from the code base. The last one is <a href="https://github.com/philou/storexplore">Storexplore</a> : a declarative scrapping DSL that lets one define directory like apis to an online store.</p>

<p>As explained in the Readme, it allows one to declare a store this way :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Storexplore</span><span class="p">:</span><span class="ss">:define_api</span> <span class="s1">&#39;dummy-store.com&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">categories</span> <span class="s1">&#39;a.category&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attributes</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">categories</span> <span class="s1">&#39;a.category&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">items</span> <span class="s1">&#39;a.item&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">attributes</span> <span class="k">do</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:brand</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#brand&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#price&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">to_f</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#image&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:remote_id</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#remote_id&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to use it like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Api</span><span class="o">.</span><span class="n">browse</span><span class="p">(</span><span class="s1">&#39;http://www.dummy-store.com&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;category: </span><span class="si">#{</span><span class="n">category</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;attributes: </span><span class="si">#{</span><span class="n">category</span><span class="o">.</span><span class="n">attributes</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">category</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sub_category</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  category: </span><span class="si">#{</span><span class="n">sub_category</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  attributes: </span><span class="si">#{</span><span class="n">sub_category</span><span class="o">.</span><span class="n">attributes</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sub_category</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    item: </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    attributes: </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">attributes</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried my best to make this library high quality :</p>

<ul>
<li>The code evolved from a simple procedural script to a dsl through constant refactorings</li>
<li>Real world features like constant memory usage have been added to fix production bugs</li>
<li>Documented with samples and rdoc</li>
<li>Extensive automated testing</li>
</ul>


<p>Let&rsquo;s hope it will be usefull for some.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprints are not sprints]]></title>
    <link href="http://philippe.bourgau.net/sprints-are-not-sprints/"/>
    <updated>2014-01-07T06:22:00+01:00</updated>
    <id>http://philippe.bourgau.net/sprints-are-not-sprints</id>
    <category term="agile" /><category term="scrum" />
    <content type="html"><![CDATA[<p>I really don&rsquo;t know why <a href="http://www.scrum.org">Scrum</a> Sprints are called sprints ! From my experience, the number one mistake made by team starting with Scrum is to work as quickly and dirty as possible to complete the sprint, forgetting the <a href="http://www.sustainablepace.net/">sustainable pace</a>.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-01-07-sprints-are-not-sprints/marathoner-vs-retail-sprinter.jpg" title="Side by side photos of a marathoner and a sprinter" ></p>

<p>Finding another word is difficult though, I thought of &lsquo;stage&rsquo; or &lsquo;milestone&rsquo; that both convey the long run idea, but both feel more content than time bounded. A more exotic word could be a &lsquo;Scrum push&rsquo;, it conveys slow and intense action action rather than quick results.</p>

<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/ST_vs_Gloucester_-_Match_-_23.JPG/640px-ST_vs_Gloucester_-_Match_-_23.JPG" title="A rugby scrum (Wikimedia)" ></p>

<p>Overall, the traditional agile &lsquo;iteration&rsquo; is not bad at all, at least a lot better than Sprint.</p>

<p><strong>EDIT 01/08/2014:</strong></p>

<p>The &lsquo;Quick and Dirty&rsquo; Sprint strategy, is like trying to win a marathon with a greedy algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="ow">not</span> <span class="n">finished</span>
</span><span class='line'>  <span class="n">sprint</span><span class="p">(</span><span class="mi">100</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not likely to work &hellip; Marathoners know that they&rsquo;ve got to stick to a constant speed during the whole race in order to finish it. The way to get faster is to :</p>

<ul>
<li>increase this cruise speed just a bit</li>
<li>get at ease with it during a few races</li>
<li>repeat</li>
</ul>


<p>Is there something to learn from this to improve software development speed ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying to explain monads in java]]></title>
    <link href="http://philippe.bourgau.net/trying-to-explain-monads-in-java/"/>
    <updated>2013-12-07T07:37:00+01:00</updated>
    <id>http://philippe.bourgau.net/trying-to-explain-monads-in-java</id>
    <category term="functional programming" /><category term="kata" /><category term="monads" />
    <content type="html"><![CDATA[<p>A few days ago, a colleague currently taking <a href="https://www.coursera.org/course/reactive">the coursera course about reactive programming in scala</a>, asked me to explain him what monads are. It&rsquo;s always a tough question, and I rarely manage to give un understandable answer simply. This time though, I kind of managed to pass him some understanding of monads :</p>

<ol>
<li>When modelising a statefull data structure with immutable constructs, one has to pass in and return the data structure state of every function</li>
<li>This results in a lot repeated code to pass this state around</li>
<li>With a monad, you can factorize this glue code and only write the &lsquo;real&rsquo; code</li>
</ol>


<p>I thought it might be a good subject for a java kata ! This is what I tried to do in <a href="https://github.com/philou/java-monads-kata">java-monads-kata</a>. Here is some sample monadic code from the kata itself :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span>
</span><span class='line'><span class="n">pops_objects_in_reverse_push_order</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">monad</span> <span class="o">=</span> <span class="n">monad</span><span class="o">.</span>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">push</span><span class="o">(</span><span class="n">A</span><span class="o">)).</span>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">push</span><span class="o">(</span><span class="n">B</span><span class="o">)).</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">monad</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">monad</span> <span class="o">=</span> <span class="n">monad</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">monad</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">empty</span><span class="o">(),</span> <span class="n">monad</span><span class="o">.</span><span class="na">stack</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can have a look at all <a href="https://github.com/philou/java-monads-kata">the final code</a>, or <a href="https://github.com/philou/java-monads-kata/commits/master">go through the whole history</a> to get the &lsquo;kata&rsquo; feeling. It&rsquo;s a shame Github does not offer a nice chronological repo history slideshow, for better experience, I recommend that you use Chrome with <a href="https://chrome.google.com/webstore/detail/github-improved/nkbnmpfpclijlllipmfbkkednidgngaa">Github improved</a> : this allows to view diffs right from the Github history.</p>

<p>The resulting code is still quite far from a <a href="http://www.haskell.org/haskellwiki/Monad">Haskell monad</a> :</p>

<ul>
<li>Functions are not first class objects in Java. It is written in Java 7, without lambda, which does not help neither.</li>
<li>Java does not have Haskell type class polymorphism, but only supports OO polymorphism and very little covariance</li>
<li>The whole monad thing, designed at simulating/isolating side effects has a WTF feel in Java where side effects are just everywhere</li>
</ul>


<p>I&rsquo;d love to hear some feedback about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviews for everyone]]></title>
    <link href="http://philippe.bourgau.net/reviews-for-everyone/"/>
    <updated>2013-12-02T06:33:00+01:00</updated>
    <id>http://philippe.bourgau.net/reviews-for-everyone</id>
    <category term="agile" /><category term="code reviews" /><category term="version control" />
    <content type="html"><![CDATA[<p>We are using <a href="http://www.scrum.org">Scrum</a> at work. As an <a href="http://www.extremeprogramming.org/">eXtreme Programmer</a> to the bones, I wanted more <a href="http://www.extremeprogramming.org/rules/collective.html">collective code ownsership</a>. We were already doing some <a href="http://en.wikipedia.org/wiki/Pair_programming">pair programming</a> from time to time, but I thought it might be a good time to try public <a href="http://en.wikipedia.org/wiki/Code_review">code reviews</a>.</p>

<p>I have already been doing code reviews in other jobs, but the experience has been disappointing up till now for the following reasons :</p>

<ul>
<li>Even with review tools, they involved too much manual efforts</li>
<li>I&rsquo;ve been in jobs with reinforcing loops :
<img class="center" src="http://philippe.bourgau.net/imgs/2013-12-02-reviews-for-everyone/graph.png" title="Schema of a vicious circle : poor quality, bugs, not enough time, poor quality ..." >
In this kind of environment, even mandatory code reviews tend to become a useless &ldquo;tick in the box&rdquo; operation</li>
<li>Often they are used as a control mechanism rather than a share tool</li>
</ul>


<p>Public reviews, <a href="http://producingoss.com/en/setting-tone.html#code-review">as discribed by Karl Fogel in Producing Free Open Source Software</a> on the other hand seem something great to encourage share and peer review. The principles are simple :</p>

<ul>
<li>All commits must be reviewed by at least one person</li>
<li>Anyone can review anyone&rsquo;s code</li>
</ul>


<p>At work, we are using <a href="http://www.perforce.com">Perforce</a> and <a href="http://smartbear.com/products/software-development/code-review/">Code Collaborator</a> as a review tool. We did not have the possibility to send an email at every perforce submit, and manually creating code collaborator reviews for every change is a chore. I spent an afternoon writing a small ruby script that polls perforce for new changes, and automaticaly creates reviews in Code Collaborator from these. I also added something to spot existing Jira ids in commit messages, to enlarge the existing review instead of creating a new one for every commit.</p>

<p>We are very pleased with the result, all the team is participating to the reviews. As with all good code reviews, it&rsquo;s helps :</p>

<ul>
<li>Spoting some bugs</li>
<li>Spoting some possible design improvements</li>
<li>Discussing the global design and architechure of our system</li>
<li>Gathering coding standards</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I organized my javascript assets in Rails]]></title>
    <link href="http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails/"/>
    <updated>2013-11-27T05:56:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails</id>
    <category term="assets" /><category term="javascript" /><category term="rails" /><category term="testing" />
    <content type="html"><![CDATA[<p><a href="http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails/">Lately</a>, I have been introducing javascript and coffeescript in <a href="http://www.mes-courses.com">www.mes-courses.fr</a> (with structural architecture issues as a side effect, but that&rsquo;s another story &hellip;).</p>

<p>Here are the general goals I had when using the rails asset pipeline :</p>

<ul>
<li>most of js compiled in a single file</li>
<li>no js code in your html files : I want to use unintrusive javascript techniques, and have some outside js hook code that will wire js and html together</li>
<li>sometimes, I want some js code to be only explicitly included by some particular pages (example: hooking a timer on the document ready event of a particular html page). This means that I cannot simply compile all js code in a single minified file</li>
<li>In unit tests, I want to be able to manually set up and tear down the js hooks</li>
</ul>


<p>So, here is how I eventually organized my js code :</p>

<ul>
<li>I create a specific dependencies.js file that will require all outside dependencies</li>
<li>I split my js code under 3 subdirectories :

<ul>
<li>explicit : hooks that will be explicitly included</li>
<li>hooks : all the other hooks</li>
<li>application : all the real code</li>
</ul>
</li>
<li>In my application.js, I include dependencies and all files under application and hooks. Here is my app/assets/javascript/application.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require dependencies.js</span>
</span><span class='line'><span class="c1">//= require_tree ./application</span>
</span><span class='line'><span class="c1">//= require_tree ./hooks</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>In my tests, I only load dependencies and files from the application directory. Here is my spec/javascript/spec.js.coffee</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#= require ../../app/assets/javascripts/dependencies.js</span>
</span><span class='line'><span class="c1">#= require_tree ../../app/assets/javascripts/application</span>
</span><span class='line'><span class="c1">#= require_tree ./</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Hook code only consists of calling a setup function from the &lsquo;real&rsquo; code. For example, here is my app/assets/javascript/hooks/cart_lines/index.coffee file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">mesCourses</span><span class="p">.</span><span class="nx">cartLines</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">setUp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>this setUp function is defined in the app/assets/javascript/application/cart_lines/index.coffee file</p>

<ul>
<li>This way, from the unit tests, I can explicitly call this setUp function, here is the beginning of my spec/javascript/application/cart_lines/index_spec.coffee file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;mesCourses.cartLines.index&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">mesCourses</span><span class="p">.</span><span class="nx">cartLines</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">setUp</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you, how are you organizing your javacript assets ?</p>
]]></content>
  </entry>
  
</feed>
