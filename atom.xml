<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-02-23T08:21:43+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recipes For An Agile Workspace]]></title>
    <link href="http://philippe.bourgau.net/recipes-for-an-agile-workspace/"/>
    <updated>2016-02-17T06:40:00+00:00</updated>
    <id>http://philippe.bourgau.net/recipes-for-an-agile-workspace</id>
    <category term="agile" /><category term="lean" /><category term="self-organization" /><category term="team-building" /><category term="workplace" />
    <content type="html"><![CDATA[<p>Nowadays, start-ups and tech companies seem to be competing for the most beautiful offices in order to attract top talents.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/open-space.jpg" title="A nice modern and beautiful co-working space" ></p>

<p>Unfortunately, sometimes, it&rsquo;s just the good old office in disguise. At the opposite, some teams or companies actually think and decide how to organize their offices. For example, here is what <a href="https://twitter.com/kentbeck">Kent Beck</a> says about office setup in <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_2?ie=UTF8&amp;qid=1456177035&amp;sr=8-2&amp;keywords=extreme+programming+embrace+change">XP embrace change</a></p>

<blockquote><p>If you don&rsquo;t have a reasonable place to work, your project won&rsquo;t be successful. The difference
between a good space for the team and a bad space for the team is immediate and dramatic.</p></blockquote>

<p>Joel Spolsky has been blogging a lot about the office setups at <a href="http://www.joelonsoftware.com/articles/BionicOffice.html">FogBugz</a></p>

<p><a href="http://www.joelonsoftware.com/articles/BionicOffice.html"><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/fog-bugz.jpg" title="The beautiful FogBugz office" ></a></p>

<p>While defining its agile culture, <a href="http://fr.slideshare.net/JoakimSunden/agile-at-spotify">Spotify too designed custom offices</a></p>

<p><a href="http://fr.slideshare.net/JoakimSunden/agile-at-spotify"><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/spotify.jpg" title="Spotify offices" ></a></p>

<h2>How does it work ?</h2>

<p>Let&rsquo;s review a few office design practices to understand how they work :</p>

<h3>The team room or space</h3>

<p>Having a delimited room helps to build a real team. First, by isolating from noises, it helps the team to focus on its work and current topics. Second, by providing a visual barrier to cross before anyone can disturb the team. Finally, it allows the team to organize its own visual management.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/spotify-team-room.jpg" title="Team private work place at spotify" ></p>

<h3>Private team gathering area</h3>

<p>An area where the team (and only the team) can meet at any time is great to do on the spot meetings (without the hassle of finding a room). This area should be comfortable and provide a relaxed and creative atmosphere (which is very important to conduct efficient retrospectives). It can also be used to take breaks and lunches, fostering team spirit again.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/spotify-gathering-area.jpg" title="Team gathering area with writable walls and a wall screen at spotify" ></p>

<h3>Writable walls</h3>

<p>It&rsquo;s pretty easy to cover the walls with whiteboard stickers so that there is plenty of room for discussing design and otherwise keeping important things visible for everyone.</p>

<h3>Laptops, Wifi and movable desks</h3>

<p>Lean manufacturing favors simple, versatile and configurable machines over powerful specialised ones, which are often pretty long to setup. In software, we don&rsquo;t rely on machines as much as factories do, but there might be something to take here. Using laptops, a good Wifi and movable desks, it is pretty easy to reconfigure your office as it best fits the team at a particular moment. This way a team can easily adapt to personal preferences and turnover.</p>

<h3>Wall screens</h3>

<p>Agile and Lean thinkings both heavily use visual management. Having a lot of wall screens dedicated to displaying team relevant information in the team space brings a lot of value. To get the maximum benefit, these wall screens should be fully configurable and movable by the team.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/wall-screens.jpg" title="Our own wall screens at work" ></p>

<h3>Team budget</h3>

<p>Eventually, in order to make sure the team can always work as efficiently as possible, it should have some money to spend for its workspace. It could be used to buy any of the upper, but also anything else that might help the team at a particular point in time. Without such a budget, teams have to make a request to the office department to get anything, often to no avail, or with extra long delays.</p>

<h2>Distributed teams</h2>

<p>Distributed teams bring their own challenges &hellip; and workplaces needs.</p>

<h3>Remote team space</h3>

<p>If your team is split between 2 places (as our team is at <a href="http://www.murex.com">Murex</a>) then obviously, each site should have its own delimited space, with its own gathering area.</p>

<h3>Constant visio connection</h3>

<p>Connecting gathering areas through visio is a great way to build the distributed team. It prevents loosing time when a meeting is required. It also builds the team by showing what&rsquo;s happening on the other side and by making it possible to take distributed lunches and breaks !</p>

<p><a href="http://www.infoq.com/presentations/distributed-team-agile"><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/distributed-lunch.jpg" title="A team sharing food remotely between offices" ></a></p>

<h3>Distributed whiteboards</h3>

<p>I never had the chance to work with one of these, but I often missed a whiteboard when working remotely &hellip; Any input on this subject would be welcome !</p>

<h2>Lego offices</h2>

<p>Here is another extract from Kent Beck&rsquo;s &ldquo;XP Embrace Change&rdquo;</p>

<blockquote><p>The courage value finds its expression in the XP attitude toward facilities. If the corporate attitude
toward facilities is at odds with the team&rsquo;s attitude, the team wins. If the computers are in the
wrong place, they are moved. If the partitions are in the way, they are taken down. If the lights are
too bright, they are taken out. If the phones are too loud, one day, mysteriously, they are all found
to have cotton stuffed in the bells.</p></blockquote>

<p>Improving the office is a cheap way to make a software organization more efficient. For another reference, here is what Tom DeMarco &amp; Tim Lister wrote in <a href="http://www.amazon.com/gp/product/0321934113/ref=s9_simh_gw_g14_i3_r?pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=desktop-1&amp;pf_rd_r=1K2KEWBRQK6F1R26D5D2&amp;pf_rd_t=36701&amp;pf_rd_p=2079475242&amp;pf_rd_i=desktop">Peopleware</a></p>

<blockquote><p>Police-mentality planners design workplaces the way they would design prisons: optimized for containment at minimal cost. We have unthinkingly yielded to them on the subject of workplace
design, yet for most organizations with productivity problems, there is no more fruitful area for improvement than the workplace. As long as workers are crowded into noisy, sterile, disruptive space, it&rsquo;s not worth improving anything but the <strong>workplace</strong>.</p></blockquote>

<p>Instead of designing offices, furniture departments in companies could provide a constant stock of building blocks for office building. Teams could use a workplace budget to build the workspace that suits them most. A good Wifi, laptops, enough floor power plugs, extra screens, movable tables, movable walls and easy to fix wall monitors are all things that would make this possible.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-17-recipes-for-an-agile-workspace/lego-office.jpg" title="A miniature office in Legos" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I fixed 'invalid byte sequence in US-ASCII' exception with octopress (and vagrant)]]></title>
    <link href="http://philippe.bourgau.net/how-i-fixed-invalid-byte-sequence-in-us-ascii-exception-with-octopress-and-vagrant/"/>
    <updated>2016-02-10T05:59:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-i-fixed-invalid-byte-sequence-in-us-ascii-exception-with-octopress-and-vagrant</id>
    <category term="octopress" /><category term="vagrant" />
    <content type="html"><![CDATA[<p>I don&rsquo;t know if you noticed, but <a href="http://octopress.org/">Octopress 2</a> preview is slow as hell on <a href="https://www.virtualbox.org/">Virtual Box</a>. I wanted to try using <a href="https://www.docker.com/">Docker</a> instead. So a few weeks ago, I started to upgrade my <a href="https://www.vagrantup.com/">Vagrant</a>, Virtual Box and Docker stack &hellip;</p>

<p>Hell loose !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-10-how-i-fixed-invalid-byte-sequence-in-us-ascii-exception-with-octopress-and-vagrant/upgrade_hell.jpg" title="A naughty dog with a banner &#34;I'm in upgrade hell&#34;" alt="A naughty dog with a banner &#34;I'm in upgrade hell&#34;"></p>

<p>I know all open source software needs to be kept up to date at all time, but it&rsquo;s not that easy. Especialy when the versions in the <a href="http://www.ubuntu.com/">Ubuntu</a> repostiories are really old and you had to install them manually. Anyway, after a bit of tedious work, I finally got to the point where my Octopress blog was running on a brand new stack. And I got this error :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@239c4077ae16:/vagrant$bundle exec rake generate
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>/vagrant/vendor/bundle/gems/liquid-2.3.0/lib/liquid/htmltags.rb:44: warning: duplicated key at line 47 ignored: "index0"
</span><span class='line'>Configuration from /vagrant/_config.yml
</span><span class='line'>Building site: source -&gt; public
</span><span class='line'>YAML Exception reading index.markdown: invalid byte sequence in US-ASCII
</span><span class='line'>/vagrant/plugins/backtick_code_block.rb:13:in `gsub': invalid byte sequence in US-ASCII (ArgumentError)
</span><span class='line'>  from /vagrant/plugins/backtick_code_block.rb:13:in `render_code_block'
</span><span class='line'>  from /vagrant/plugins/octopress_filters.rb:12:in `pre_filter'
</span><span class='line'>  from /vagrant/plugins/octopress_filters.rb:28:in `pre_render'
</span><span class='line'>  from /vagrant/plugins/post_filters.rb:112:in `block in pre_render'
</span><span class='line'>  from /vagrant/plugins/post_filters.rb:111:in `each'
</span><span class='line'>  from /vagrant/plugins/post_filters.rb:111:in `pre_render'
</span><span class='line'>  from /vagrant/plugins/post_filters.rb:166:in `do_layout'
</span><span class='line'>  from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/page.rb:100:in `render'
</span><span class='line'>  from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:204:in `block in render'
</span><span class='line'>  from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:203:in `each'
</span><span class='line'>  from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:203:in `render'
</span><span class='line'>  from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:41:in `process'
</span><span class='line'>  from /vagrant/vendor/bundle/gems/jekyll-0.12.1/bin/jekyll:264:in `&lt;top (required)&gt;'
</span><span class='line'>  from /vagrant/vendor/bundle/bin/jekyll:23:in `load'
</span><span class='line'>  from /vagrant/vendor/bundle/bin/jekyll:23:in `&lt;main&gt;'</span></code></pre></td></tr></table></div></figure>


<p>After some searching on the internet, I found <a href="http://alexzeitler.com/blog/2012/01/15/rake-generate-for-octopress-fails-with-invalid-byte-sequence-in-us-ascii-argumenterror/">this post</a> by Alex Zeitler that made me figure out that locales were not set correctly by default on my vm. I just needed to set this once and for all in my Vagrantfile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.provision "shell", privileged: false, inline: &lt;&lt;-SHELL
</span><span class='line'>  if [ -z "$LANG" ]; then
</span><span class='line'>    echo "Setting LANG to us UTF8"
</span><span class='line'>    echo 'export LANG=en_US.UTF-8' &gt;&gt; ~/.bashrc
</span><span class='line'>  fi
</span><span class='line'>  if [ -z "$LC_ALL" ]; then
</span><span class='line'>    echo "Setting LC_ALL to us UTF8"
</span><span class='line'>    echo 'export LC_ALL=en_US.UTF-8' &gt;&gt; ~/.bashrc
</span><span class='line'>  fi
</span><span class='line'>SHELL</span></code></pre></td></tr></table></div></figure>


<p>After reprovisioning my box, generate and preview were working as expected !</p>

<p>:&ndash;( Now I&rsquo;ve got a pygement-ruby issue to deal with, I guess I&rsquo;ll be back on the subject soon &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Keep Programming When Assigned A Management Job]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job/"/>
    <updated>2016-02-03T08:45:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job</id>
    <category term="agile" /><category term="management" /><category term="management30" /><category term="self-organization" />
    <content type="html"><![CDATA[<p>Remaining a competent developer is a career long effort, if you stop programming, you&rsquo;ll loose it ! As time goes, we are regularly <del>offered</del> pushed into management positions, sometimes by cluelessness, other times by cheer necessity ! Be it temporary or long term, here are some techniques to remain a relevant developer.</p>

<h2>How Joe became a manager</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def work
</span><span class='line'>  if manager?
</span><span class='line'>    go_to_meetings
</span><span class='line'>  else
</span><span class='line'>    program
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Imagine you&rsquo;re Joe, an expert developer in a small software company. Everything is going fine, he&rsquo;s working on interesting subjects with 4 other, rather junior, team mates. Management is OK, at least good enough not to cause too many troubles.</p>

<p>Suddenly, the team manager leaves for a better position in another company. Unprepared for this, the small organization has difficulties to find a suitable replacement, and, you&rsquo;ll guess it, Joe is asked to take on management responsibilities until someone gets hired. How is Joe going to continue to do a good job at both programming and management ?</p>

<h2>His first reaction</h2>

<p>Two weeks into the job, Joe takes a step back and summarizes :</p>

<ul>
<li>he feels depressed when he does not program for a long time</li>
<li>he has the feeling he&rsquo;s been jumping from A to B to C to Z to A, and so on for two weeks without actually getting a lot done</li>
<li>he feels everyone is waiting for him to do things before they move</li>
<li>his mailbox is starting to make him nervous</li>
<li>it&rsquo;s difficult to program anything if you are interrupted by meetings throughout the day</li>
</ul>


<p>Joe figures out that he needs to reduce his management work if he wants to get back to programming.  After setting up an efficient <a href="bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">TODO list</a>. He has already read some personnal effectiveness books, so he knows how one can reduce his amount of work :</p>

<ul>
<li>say no : he&rsquo;ll have to keep this in mind all the time, especially when accepting meetings or when asked for some new work</li>
<li>automate : some tasks can be automated, others can be partly automated by a good process. He&rsquo;ll have to regularly stop and think to improve how he works</li>
<li>delegate : he&rsquo;d like to push more work to the team, but it will take some time. He decides to read things on self-organized team to know how to do</li>
</ul>


<h2>Joe&rsquo;s measure of programming time</h2>

<p>In order to get some continuous time for programming, Joe books &lsquo;programming days&rsquo; in his calendar. This is also a way to say no to other meetings during this period. He starts with all Mondays, he hopes he&rsquo;ll be able to book others days as he manages to do more programming. His ideal would be to book all week for programming (while still having the management job get done !)</p>

<p>This works well, and gives Joe a motivation boost since he has the opportunity to program again :&ndash;). There are still a few glitches though :</p>

<ul>
<li>Joe often doesn&rsquo;t program &lsquo;on his own&rsquo; on Mondays because he is spending is time with junior programmers who are really appreciating his help</li>
<li>Joe once made the mistake of committing to a critical programming task that he did not manage to finish in 1 day and had to hand it over to another developer, losing more time</li>
</ul>


<p>Joe is realizing that he is more of a programming coach than a direct developer now, and that he should not commit on critical tasks but rather help others to do so. Pair programming is becoming the norm for him.</p>

<h2>Communication time</h2>

<p>While doing his full programming days, Joe realized that emails can wait. If people want an immediate answer, let them use the phone ! He now reads and answers his emails in the morning when he arrives at work, at noon just after lunch and on evenings, just before leaving. That&rsquo;s good enough for a day !</p>

<p>Joe also had to interrupt his programming day once for an urgent meeting &hellip; he now reserves 1 hour at the end of his programming days to handle such urgent meetings without interrupting his programming time.</p>

<h2>Self organized teams</h2>

<p>Meanwhile, Joe read some books about self organized teams, such as <a href="http://www.amazon.com/Workout-Practices-Improve-Delight-Clients/dp/9492032023/ref=sr_1_1?ie=UTF8&amp;qid=1454480226&amp;sr=8-1&amp;keywords=management+3.0+workout">Management 3.0 Workout</a> by Jurgen Appelo.</p>

<p><a href="https://management30.com/product/workouts/"><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-03-how-to-keep-programming-when-assigned-a-management-job/management-workout.jpg" title="Management 3.0 Workout Book Cover" ></a></p>

<p>Self organization is some kind of aggressive delegation. Joe sees management as described in these books as a way to increase purpose and motivation throughout the team, while getting him more time for programming.</p>

<p>This kind of management perfectly suits agile teams. His team is already using some agile practices, such as automated testing, some kind of continuous integration, and quite a few others, to varying degrees. Joe decides to embark his team on a road to self organization, and to start by applying all the standard Scrum and eXtreme Programming practices. In parallel, he introduces the rolling Scrum Master role, where sprint after sprint, a different team member is responsible for :</p>

<ul>
<li>organizing the recurring team meetings</li>
<li>representing the team in outside meetings</li>
<li>grooming the backlog before the demo and planning</li>
</ul>


<p>This alone frees Joe 1 or 2 days of programming every week. He now helps his team mates to master all the technical agile practices they are not used to.</p>

<h2>More self organization</h2>

<p>A few months later, the team is doing well, Joe has some time for programming, but he still has some pure management job to do. From what he read from self organized teams, even these subjects can be delegated ! He decides to start workshops with the team :</p>

<ul>
<li>How can we handle vacations in a self organized way ?</li>
<li>How can we handle the hiring in a self organized way ?</li>
<li>How can we handle performance feedback and pay raises in a self organized way ?</li>
</ul>


<p>The journey is long and rough : one team member left as they were going seriously into agile. Nevertheless the team is already more motivated than it ever was, and delivers more value than it ever did.</p>

<h2>The end result for Joe</h2>

<p>Joe is now programming nearly as much as his team mates ! Most of his programming time is coaching time though. He does not sit and hack his way into a feature as he used to do. He&rsquo;s missing that a bit, he&rsquo;s also missing learning new technologies.</p>

<p>That&rsquo;s why he started working on <a href="http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book">side projects</a> at home, using the latest hype JavaScript framework. He&rsquo;s reading generalist programming books also, such as the <a href="http://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&amp;field-keywords=%22in+seven+weeks%22&amp;rh=i%3Aaps%2Ck%3A%22in+seven+weeks%22">7 XXX in 7 weeks</a> series which allow him to learn without loosing time on technical quirks he&rsquo;s not interested in at the moment &hellip;</p>

<p><a href="http://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X/ref=sr_1_1?ie=UTF8&amp;qid=1454739459&amp;sr=8-1&amp;keywords=7+languages+in+7+weeks"><img class="center" src="http://philippe.bourgau.net/imgs/2016-02-03-how-to-keep-programming-when-assigned-a-management-job/7-languages.jpg" title="Seven Languages In Seven Weeks Book Cover" ></a></p>

<p>Good luck Joe !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I fixed 'Warning: Authentication failure. Retrying' with Vagrant]]></title>
    <link href="http://philippe.bourgau.net/how-i-fixed-warning-authentication-failure-retrying-with-vagrant/"/>
    <updated>2016-01-31T06:39:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-i-fixed-warning-authentication-failure-retrying-with-vagrant</id>
    <category term="vagrant" />
    <content type="html"><![CDATA[<p>Lately, I went into an upgrade cycle : <a href="http://www.ubuntu.com/">Ubuntu</a>, which forced me to upgrade <a href="https://www.docker.com/">Docker</a>, and then <a href="https://www.vagrantup.com/">Vagrant</a> &hellip; you know the story. Unfortunately, my vagrant config did not want to start anymore with the following error :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>Warning: Authentication failure. Retrying
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-31-how-i-fixed-warning-authentication-failure-retrying-with-vagrant/ssh.jpg" title="A screen with the ssh prompt" ></p>

<p>I tried to destroy and re-create my box with the same result : it eventually timedout, but the provisions were not executed.</p>

<p>After searching the internet and a lot of experimentation, I managed to make it work by commenting out the following line in my Vagrantfile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config.ssh.private_key_path = "~/.ssh/id_rsa"</span></code></pre></td></tr></table></div></figure>


<p>I think I added this a long time ago to be able to push to github from my Vagrantbox, but after trying it, it work with the difference of my having to validate the remote ssh key, that&rsquo;s not of a big deal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Most Common Ways To Speed up an algorithm]]></title>
    <link href="http://philippe.bourgau.net/most-common-ways-to-speed-up-an-algorithm/"/>
    <updated>2016-01-20T05:14:00+00:00</updated>
    <id>http://philippe.bourgau.net/most-common-ways-to-speed-up-an-algorithm</id>
    <category term="algorithms" /><category term="performance" /><category term="ruby" />
    <content type="html"><![CDATA[<p>Algorithms are <em>hard</em>, and making them fast is even harder &hellip; But there are shortcuts that work quite often !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-20-most-common-ways-to-speed-up-an-algorithm/shortcut-road.jpg" title="A street panel called Short Cut Road" ></p>

<h2>The Challenge</h2>

<p>Imagine you just arrived to your new job, and you are asked to make a part of the system faster. After a bit of investigation, you discover that most of the time is spent in some weird in-house algorithm that seems to take forever. How can you optimize this without deep knowledge neither in algorithm science nor in the code itself ?</p>

<p>Here are 4 tricks to reduce the complexity of algorithms (I&rsquo;m using fairly basic examples for the sake of understandably. Most of these exact examples could be done better using standard libraries, but I hope it will be easy to adapt to other situations) :</p>

<h3>Replace a nested loop by first building a hash and then looping</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># before</span>
</span><span class='line'><span class="n">orders</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">order</span><span class="o">|</span>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="n">list_of_clients</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">client</span><span class="o">|</span> <span class="n">client</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">client_id</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">handle_order</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># after</span>
</span><span class='line'><span class="n">clients_by_id</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">list_of_clients</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">client</span><span class="o">|</span>
</span><span class='line'>  <span class="n">clients_by_id</span><span class="o">[</span><span class="n">client</span><span class="o">.</span><span class="n">id</span><span class="o">]</span> <span class="o">=</span> <span class="n">client</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">orders</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">order</span><span class="o">|</span>
</span><span class='line'>  <span class="n">handle_order</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">clients_by_id</span><span class="o">[</span><span class="n">order</span><span class="o">.</span><span class="n">client_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This reduces the complexity from O(2) to O(1). This is tremendous. On large lists O(2) algorithms are terrible.</p>

<h3>Remove unnecessary accumulations</h3>

<p>The most classic example is the use of a string buffer :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="no">Before</span>
</span><span class='line'><span class="n">report</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">line_items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line_item</span><span class="o">|</span>
</span><span class='line'>  <span class="n">report</span> <span class="o">+=</span> <span class="n">line_item</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="no">After</span>
</span><span class='line'><span class="n">report</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">line_items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line_item</span><span class="o">|</span>
</span><span class='line'>  <span class="n">report</span> <span class="o">&lt;&lt;</span> <span class="n">line_item</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="n">report</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this reduces the complexity from O(2) to O(1). Every language has variants of Java&rsquo;s StringBuilders. This does not only apply for strings, it works any time you are repeatedly accumulating results inside a loop but where you could do it only once at the end.</p>

<h3>Cache intermediate or previous results</h3>

<p>This is called <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>. Some algorithms (especially recursive algorithms) repeatedly compute the same thing again and again. Spotting this pattern is an opportunity to move an algorithm out of exponential complexity. For example, <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijsktra&rsquo;s algorithm</a> for finding the shortest path in a graph uses this technique to go from O(e<sup>n</sup>) to O(n<sup>2</sup>) complexity. If you suspect this could be helpful, your best friend is logging to trace actual parameters and results.</p>

<p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#/media/File:Dijkstras_progress_animation.gif"><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-20-most-common-ways-to-speed-up-an-algorithm/Dijkstras_progress_animation.gif" title="Dijsktra's path finding algorithm animated (from Wikipedia)" ></a></p>

<p>A word of caution : using memoization with mutable inputs or outputs will harm your mental health.</p>

<h3><a href="https://en.wikipedia.org/wiki/Merge_algorithm#Merging_two_lists">Zip merge</a></h3>

<p>There are 2 ways to merge sorted lists into a unique sorted list : the fast, and the slow &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The slow</span>
</span><span class='line'><span class="p">(</span><span class="n">list_1</span> <span class="o">+</span> <span class="n">list_2</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The fast</span>
</span><span class='line'><span class="n">i_1</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">i_2</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">i_1</span> <span class="o">&lt;</span> <span class="n">list_1</span><span class="o">.</span><span class="n">size</span> <span class="ow">and</span> <span class="n">i_2</span> <span class="o">&lt;</span> <span class="n">list_2</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">list_1</span><span class="o">[</span><span class="n">i_1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">list_2</span><span class="o">[</span><span class="n">i_2</span><span class="o">]</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">list_1</span><span class="o">[</span><span class="n">i_1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">i_1</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">list_2</span><span class="o">[</span><span class="n">i_2</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">list_1</span><span class="o">[</span><span class="n">i_1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">list_2</span><span class="o">[</span><span class="n">i_2</span><span class="o">]</span>
</span><span class='line'>    <span class="n">i_2</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">i_1</span> <span class="o">&lt;</span> <span class="n">list_1</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">list_1</span><span class="o">[</span><span class="n">i_1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">i_1</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">i_2</span> <span class="o">&lt;</span> <span class="n">list_2</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">list_2</span><span class="o">[</span><span class="n">i_2</span><span class="o">]</span>
</span><span class='line'>  <span class="n">i_2</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, the slow version is a lot easier to read than the fast one. And the fast one could benefit from a bit of refactoring also &hellip; Nevertheless, the slow version is at best in O(n.ln(n)) whereas the fast on is in O(n). On large data, that can make a big difference.</p>

<h2>Is that all ?</h2>

<p>Obviously not, there can be a lot of other things going on slowly in algorithms, but from my experience, a software engineer can have a good career without knowing more about algorithms theory than that.</p>

<p>In the end, you manage to optimize this in-house algorithm, you become the company&rsquo;s hero, you need your job and get a pay raise !</p>

<h2>End word</h2>

<p>The fact is, in 15 years of writing software, I did not write a lot of algorithmic code. I can categories my working with algorithms in 3 :</p>

<ol>
<li>Write a simple algorithm for a non performance critical feature</li>
<li>Optimize an existing somewhat algorithmic part of code</li>
<li>Write a complex algorithm for a performance critical part of the system</li>
</ol>


<p>Case 1. is not really an issue since however the code will be written, it will run fast enough. If you&rsquo;re in case 3, there&rsquo;s no shortcut, you&rsquo;ll have to dig deep into algorithms and optimization, this happens rather rarely though. This leaves us with case 2, which I just wrote about.</p>

<p>Interestingly, <a href="http://www.murex.com">my current job</a> is deep into case 3 ! We&rsquo;re building a risk engine for corporate markets and are borrowing a lot of techniques from database science &hellip; which is, you can guess, rather algorithmic !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How We Started Exploratory Testing]]></title>
    <link href="http://philippe.bourgau.net/how-we-started-exploratory-testing/"/>
    <updated>2016-01-08T18:18:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-we-started-exploratory-testing</id>
    <category term="agile" /><category term="testing" /><category term="workplace" />
    <content type="html"><![CDATA[<p>Manual testing is important. Here is how we got to love exploratory testing.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-08-how-we-started-exploratory-testing/explore.jpg" title="A map and a telescope for exploration" ></p>

<h2>Initial situation</h2>

<p><a href="http://www.murex.com">At work</a> we are building a risk computation engine for the financial markets. It uses a DSL to describe the exact computations to estimate the risk on the data it knows. This in itself is already complex enough to justify the heavy investment in automated testing we did.</p>

<p>With 90% of automated test coverage, Cucumber scenarios to verify quality, everything should just work &hellip; shouldn&rsquo;t it ?</p>

<h2>First try at exploratory testing</h2>

<p><a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1452279644&amp;sr=8-1&amp;keywords=the+art+of+agile+development"><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-08-how-we-started-exploratory-testing/art-of-agile-development.jpg" title="The cover of the Art Of Agile Development" ></a></p>

<p>In <a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1452279644&amp;sr=8-1&amp;keywords=the+art+of+agile+development">The art of agile development</a>, James Shore details the practice of exploratory testing as a great way of both :</p>

<ul>
<li>improving the quality of the product by finding bugs</li>
<li>improving the process</li>
</ul>


<p>That&rsquo;s why we gave it a try. Here is the recipe for an exploratory session :</p>

<ol>
<li>Book 1 hour for the full team to do exploratory testing</li>
<li>Prepare a downloadable zip with all the material required to run and test your software</li>
<li>Ask everyone to pick a particular aspect of the system to test during this session</li>
<li>Record bugs when you find one</li>
<li>Spend 30 minutes just after the session to filter duplicate bugs and make sure they are well described</li>
</ol>


<p>Obviously, we also added our special sauce</p>

<ol>
<li>We were to do exploratory testing in pairs, as we do programming, to find more bugs</li>
<li>We gamified it by granting a price to the pair that finds the most bugs. Do you remember how I brought <a href="http://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time/">fruits for sale in the office</a> ? It turns out we are slowly earning money with the fruits &hellip; enough for the price to be 5 fruits each for the wining pair !</li>
</ol>


<p>This transformed developers into ferocious testers ! I guarantee that with such incentives you&rsquo;ll find bugs &hellip; as we did.</p>

<p><a href="http://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time/"><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-08-how-we-started-exploratory-testing/fruits-basket.jpg" title="Our weekly fruit basket at work" ></a></p>

<h2>Doing it systematically</h2>

<p>We took some time to fix all these bugs during a few sprints. And did another exploratory testing session a few months after &hellip;</p>

<p>As we were still finding bugs in the second session, we decided to make them part of the every sprint. As we got better at testing, a lot of bugs started to get uncovered ! So much that we had to change something.</p>

<h2>Improving our process</h2>

<p>We meet in retrospective and here is what we decided :</p>

<ol>
<li>Fix all bugs before working on any other story (obviously, automated tests are added in the process)</li>
<li>Classify what exactly is a bug. For example, for us, a bug is something that used to work or silently returns bad results or corrupts the data</li>
<li>Add exploratory testing by another pair to our definition of done</li>
</ol>


<p>The number of bugs we find during exploratory testing sessions is starting to decrease. We hope that we&rsquo;ll soon be able to do exploratory testing on the fly, as part of our daily work and to completely remove the specific sessions.</p>

<h2>Benefits</h2>

<p>Exploratory testing brought us a lot.</p>

<ul>
<li>Obviously, the product is a lot more solid</li>
<li>We are surely saving time that would have been lost if the bugs had been uncovered by the users</li>
<li>Fixing the bugs forced us to fix some technical debt : bugs often came from areas of the code that we were not so proud or confident of</li>
</ul>


<p>Exploratory testing is a nobrainer. All teams should do it.</p>

<p>So, in the end, as in the old days, we are back to regular manual testing &hellip; but only for exploration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Write Good Performance Stories]]></title>
    <link href="http://philippe.bourgau.net/how-to-write-good-performance-stories/"/>
    <updated>2016-01-08T07:58:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-write-good-performance-stories</id>
    <category term="agile" /><category term="performance" />
    <content type="html"><![CDATA[<p>If you&rsquo;re having difficulties writing good performance related stories for your project, that&rsquo;s no surprise ! We&rsquo;ve been through the same troubles and we found a way that works a lot better.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-08-how-to-write-good-performance-stories/speed.jpg" title="A Mb speed counter" ></p>

<h2>Solution 1 : <a href="http://philippe.bourgau.net/performance-is-a-feature/">Performance is a feature</a></h2>

<p>Right ? In typical agile way, a story about performance would be written like</p>

<blockquote><p>As marketing, I want the page load to perform under 1 second, In order for the customers to stay on the site</p></blockquote>

<p>If the performance bottleneck and the fix are obvious, that might work very well. If that&rsquo;s your case, then go on, that&rsquo;s the simplest way!</p>

<p>Unfortunately for us, we are not in that case. <a href="http://www.murex.com">At work</a> we are building a risk engine and we need to perform extremely well on a wide set of different scenarios. Imagine a story such as</p>

<blockquote><p>As a risk manager, I want the VAR scenario to compute in less than 1 second, in order to have real time data</p></blockquote>

<ul>
<li>we&rsquo;re pretty sure that there won&rsquo;t be 1 but many bottlenecks to fix before reaching the expected performance</li>
<li>speeding up the VAR scenario might slow down other scenarios</li>
</ul>


<p>That makes this kind of story too fuzzy. We tried them, and we had difficulties to estimate and close them.</p>

<h2>Solution 2 : Back to the traditional way</h2>

<p>Without an agile backlog, developers would have worked on tasks such as</p>

<blockquote><p>Add caching to the computation engine</p></blockquote>

<p>That&rsquo;s estimable, but we&rsquo;ve got no clue of the <em>why</em> ! When it&rsquo;s done, we won&rsquo;t be able to know whether it&rsquo;s worth to keep it or not. In fact, it&rsquo;s just not a <a href="https://en.wikipedia.org/wiki/INVEST_(mnemonic">story</a>) !</p>

<h2>Solution 3 : Mixing both</h2>

<p>Here is how we we are now writing performance stories at work :</p>

<blockquote><p>As a risk manager, I want to have caching in the computation engine, in order to the VAR scenario compute under 1 second (in order to have real time data)</p></blockquote>

<p>It&rsquo;s now estimable, we know what it&rsquo;s there for. It&rsquo;s obviously not enough though : we know that we will very likely need to do other performance stories after this one.</p>

<h2>Embrace uncertainty</h2>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-01-08-how-to-write-good-performance-stories/engine.jpg" title="A Maserati engine" ></p>

<p>The fact is that in our context, getting better performances is <em>hard</em> :</p>

<ul>
<li>it requires a lot of work</li>
<li>we don&rsquo;t know how much at the beginning</li>
<li>we often try things that don&rsquo;t work</li>
</ul>


<p>This makes the whole project more uncertain, so we&rsquo;re better off embracing this uncertainty in the way we write and prioritize our performance stories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Developers Are Free]]></title>
    <link href="http://philippe.bourgau.net/great-developers-are-free/"/>
    <updated>2015-12-31T12:24:00+00:00</updated>
    <id>http://philippe.bourgau.net/great-developers-are-free</id>
    <category term="enterprise" /><category term="hiring" /><category term="self-organization" /><category term="software" /><category term="team-building" /><category term="workplace" />
    <content type="html"><![CDATA[<p>For many reasons. But mostly because they are key to efficiently growing a software organization.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/cat-codes-for-food.jpg" title="A funny picture sleeping on a keyboard, with the mention 'Will code for food'" ></p>

<h2>A tale of 2 teams</h2>

<p>Let&rsquo;s have a look at 2 software teams in the world of corporate finance.</p>

<h3>The junior in-house team</h3>

<p><a href="http://www.lefigaro.fr/emploi/2013/12/07/09005-20131207ARTFIG00309-bruit-temperature-air8230-les-salaries-reserves-sur-l-open-space.php"><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/open-space.jpg" title="A big corporate open space" ></a></p>

<p>One is an in-house software development team in a large bank. The project already has a bad reputation among developers.The bank has difficulties to hire so the team is constituted of 10 rather junior developers. Unfortunately, without guidance and long term vision, the quality of the code suffers. It looks like an ad-hoc composition of various technolgies, glue code, and reinvented frameworks. The overall result is a barely good enough product that costs a small fortune in maintainance and support. The user experience is awful, which make it difficult to the the team leaders and the users to collaborate effectively. As a result of all this, the project is suffering from high turnover. Managing this project is really challenging &hellip; and kind of depressing.</p>

<h3>The experienced software team</h3>

<p><a href="http://www.personalized-software.ie/aboutus"><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/experienced-team.jpg" title="An experienced software team" ></a></p>

<p>Now let&rsquo;s imagine the same product developed at a software house. It&rsquo;s been on the market for a while now, but new features are regularly added to it at a good pace. The product is solid and the users are happy using it. The structure of the team is completely different : 5 developers, mainly experienced, coming from various backgrounds. As a result, the team builds on all their different expertises to build real competitive advantages. They tend to get into healthy debates about a lot of things, such as :</p>

<ul>
<li>Should we re-use or re-write ?</li>
<li>Is this gold plating or plain technical debt ?</li>
<li>Which technology should we use to build this ?</li>
</ul>


<p>In the end, that makes the product even better. The humane side of the team is also completely different. These experienced developers have all been exposed to the big picture during their careers, and they know things like :</p>

<ul>
<li>&lsquo;Business talk&rsquo; and so they can discuss product topics with the product managers</li>
<li>The best way to go through chores at work is to do them right now</li>
<li>Enough management, testing, ops to make the team self organized</li>
</ul>


<p>The single junior developer in the team tends to mimic this model, and has ease finding mentors, to teach him their trade and to give him career counsels.</p>

<p>As a result, the product and the team remain healthy, and keep providing benefits to all stakeholders.</p>

<h2>Benefits of experienced teams</h2>

<p>First, from a purely short term financial point of view, it&rsquo;s a no brainer ! Even if you pay experienced developers twice as much as juniors, the costs will still be on par. But the difference in created value is huge !</p>

<p>Let&rsquo;s then have a look at the longer term, organizational aspect of things. Obviously, managing such teams requires a lot less work ! Both because of their size and because experienced developers tends to manage themselves very well &hellip; Promoting self-organized &amp; cross-functionnal teams is a great opportunity to reduce the management cost and friction, making the organization more reactive and cost efficient in the long run.</p>

<h2>What is an experienced developer ?</h2>

<p>Obviously, I&rsquo;ve worked with people that were experienced on paper, but not in practice. I <a href="http://www.jrothman.com/htp/interview/2004/12/whats-a-year-of-experience/">read</a> that repeating 10 times the same year of work only amounts to 1 year of experience.</p>

<p>If I was asked to give a definition, I&rsquo;d say that experienced developers have worked on different kind of systems (embeded, web, client, server &hellip;) using different technologies (Java, Ruby, C, Spring, Rails, Javascript &hellip;). Their experiences need not be professional, I&rsquo;ve seen a physics teacher that hacked himself into a great hacker through side projects and open source. Speaking of the subject, good developers always spent a lot of time learning, reading, doing side projects and contributing to open source. Some can be found in local user groups and online programming communities.</p>

<h2>So How do you get them ?</h2>

<p>I can only think of 3 obvious ways :</p>

<ul>
<li>train them</li>
<li>keep them</li>
<li>hire them</li>
</ul>


<p>I&rsquo;m pretty sure training them will not be an issue if you already have enough of them. So that brings us to the 2 other points.</p>

<p><a href="https://www.prestashop.com/blog/en/guided-visit-prestashops-new-paris-headquarters/"><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/prestashop.jpg" title="The prestashop offices in Paris" ></a></p>

<p>Lot&rsquo;s of articles have been written about attracting and keeping the best developers. Some companies even made it <a href="http://www.joelonsoftware.com/articles/HighNotes.html">their differentiating point</a>. Here are a few links :</p>

<ul>
<li>In his post <a href="http://avc.com/2012/02/the-management-team-guest-post-from-joel-spolsky/">&ldquo;The Management Team&rdquo;</a> Joel Splosky details the inverted pyramid model</li>
<li>Joel Spolsky&rsquo;s (again) <a href="http://www.joelonsoftware.com/articles/DevelopmentAbstraction.html">Development Abstraction Layer</a> explains all the physical environment that makes programmers happy at work</li>
<li><a href="http://qz.com/169147/applications-have-doubled-to-the-company-that-discloses-its-salaries/">After disclosing employee salaries, Buffer was inundated with resumes</a> when <a href="http::/www.buffer.com">buffer.com</a> publicly disclosed <a href="https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/">their salary formula</a>, the number of applications the company received doubled</li>
<li>Spotify organizes <a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/">Hack Weeks</a> where  the company stops for a while to invent new things</li>
<li>Google summarizes it &ldquo;Do Cool Things That Matters&rdquo; in their long advertises <a href="http://www.google.com/about/careers/lifeatgoogle/">Life At Google</a></li>
</ul>


<p>These are just a few examples and are by no way the only things that motivate developers. To summarize, provide the best working conditions (careful, that not money), and communicate a lot about it.</p>

<h2>Hiring is too important to be left to HR</h2>

<p><a href="https://management30.com/product/workouts/">Jurgen Appelo</a> said</p>

<blockquote><p>Management is too important to be left to managers.</p></blockquote>

<p>I guess the same thing can be said about hiring.</p>

<p>Engineers are absolutely required to take the main role when hiring other engineers. Companies that seriously want to have the best developers on board are spending substantial engineering time on hiring. Here are some well known examples :</p>

<ul>
<li><a href="http://www.google.com/about/careers/lifeatgoogle/hiringprocess/">Google</a> is known to conduct around 9 interviews before hiring someone</li>
<li>In its <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf">Handbook for New Employee</a> Valve explicitly states that hiring is your most important role</li>
</ul>


<h2>Endword</h2>

<p>As <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> said about quality, in <a href="http://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=sr_1_1?ie=UTF8&amp;qid=1451733851&amp;sr=8-1&amp;keywords=peopleware">Peopleware</a> :</p>

<blockquote><p>Great developers are free, but only for those who are willing to pay for them</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to do screencasts on Ubuntu]]></title>
    <link href="http://philippe.bourgau.net/how-to-do-screencasts-on-ubuntu/"/>
    <updated>2015-12-23T06:01:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-do-screencasts-on-ubuntu</id>
    <category term="linux" /><category term="screencast" /><category term="ubuntu" />
    <content type="html"><![CDATA[<p>It is easy to record and share great screencasts on <a href="http://www.ubuntu.com">Ubuntu</a> (and I guess on Linux in general).</p>

<p>Recently, I had to create a screencast to demonstrate how to use <a href="http://philippe.bourgau.net/storexplore/">Storexplore</a>, a gem I wrote that transforms online stores into APIs. Here is the result</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/O30xReGgdVU" frameborder="0" allowfullscreen></iframe>


<p>Don&rsquo;t lose your time searching for anything else than <a href="http://www.maartenbaert.be/simplescreenrecorder">SimpleScreenRecorder</a> (I did, and actually did lose quite some time). Follow the <a href="http://www.maartenbaert.be/simplescreenrecorder/#download">installation instructions</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:maarten-baert/simplescreenrecorder
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install simplescreenrecorder
</span><span class='line'><span class="c"># if you want to record 32-bit OpenGL applications on a 64-bit system:</span>
</span><span class='line'>sudo apt-get install simplescreenrecorder-lib:i386
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s dead simple to use, just try to record your first video, and you should know it all !</p>

<p>At the difference of other tools I tried (I&rsquo;m looking at you <a href="http://recordmydesktop.sourceforge.net/about.php">RecordMyDesktop</a>) I could easily encode my video to efficient formats (mp4, h.264 &amp; mp3) that are well known on the internet, and in particular, by <a href="http://www.youtube.com">YouTube</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Dream Lean Software Development Tool (Lean Software Development part 9)]]></title>
    <link href="http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9/"/>
    <updated>2015-12-14T20:49:00+00:00</updated>
    <id>http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9</id>
    <category term="business value" /><category term="lean" /><category term="planning" /><category term="software" />
    <content type="html"><![CDATA[<p>Current software project tracking tools suck !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-14-my-dream-lean-software-development-tool-lean-software-development-part-9/it-sucks.jpg" title="A stamp that writes &#34;SUCKS&#34;" alt="A stamp that writes &#34;SUCKS&#34;"></p>

<p>By writing <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">this series of posts</a>, I realized that they should help us to prioritize rather than just serving as a nice GUIs on top of a ticket database.</p>

<p>Let&rsquo;s take the story of developer Joe as an example. Joe is working for Megacorp, where he makes a good living, but feels like a small cog in the machine. He has lost the thrill of programming &hellip; He&rsquo;s still staying informed about latest trends in software world, but his job involves aging technologies. He knows that if he wants to remain in the course, he has to change gears. One day, he decides to do something <em>now</em>, and starts a side project in the hope of someday making a living out of it.</p>

<p>He does not have a large amount of money to invest in his project, so he decides to bootstrap his product using <a href="http://theleanstartup.com/">Lean Startup</a>. He reads and understands that there is a lot of different kind of activities to do if he wants to realize his dream : experiments, marketing, sales, design, coding &hellip;</p>

<p>Unfortunately, he&rsquo;s so tired of programming boring stuff that he contracted the developer bias : he starves to code cool things again ! He knows the rest is important, he tries to do some of it, but he just doesn&rsquo;t realize how <em>much</em> needs to be done. So, without realising it, he wastes a lot of time coding something that people eventually don&rsquo;t buy. After 1 or 2 years of hard work, a working product but no users, he eventually quits, quite depressed &hellip;</p>

<p>I guess you don&rsquo;t want to be Joe ! I know you&rsquo;ll think it won&rsquo;t happen to you &hellip; believe me, it can, <a href="rip-mes-courses-dot-fr/">I learned it the hard way</a> !</p>

<p>Now suppose you had a tool that estimates the expected values of all different tasks :</p>

<ul>
<li>By applying <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulations</a> to probabilistic value and size ranges, it could compute which features we should work on first. As a side effect, this could give us some release date estimates for a feature, depending on its position in the backlog.</li>
<li>By having explicit experiment tasks with target value or size ranges, it could compute the value of information and prioritize experiments versus other tasks.</li>
<li>Crossing informations from IDEs, VCS, Quality Trackers and CIs, it could detect technical debt items (aka. productivity opportunities), compute their values in the long run, and prioritize them with other tasks.</li>
<li>If we found a way to integrate marketing, sales and design tasks, any kind of activity could be stored in the backlog, valued and prioritized.</li>
</ul>


<p>Here is what the backlog could look like :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-14-my-dream-lean-software-development-tool-lean-software-development-part-9/mockup.jpg" title="A mockup of the backlog view of such a product" ></p>

<p>All different kind of activities (developments, marketing, experiments, refactorings) would fit in the backlog. The system would estimate the value of every task for Joe, advising him what to work on first. It would make it obvious just how much market experiments are important when starting ! With such a tool, he is a lot more likely to build his new life.</p>

<p>The good thing with such a tool is that it could be built by feeding itself. <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">Eating its own dog&rsquo;s food</a> has always been the nice thing about writing software tools.</p>

<p>I&rsquo;d like to know, what do you think of the idea ? Would you use such a tool ? Is it worth me spending my nights building it ?</p>

<p>This was 9th and last part of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 8 was <a href="http://philippe.bourgau.net/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/">How I&rsquo;ll Measure the Lean Startup Value of Information in My Next Side Project</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I'll measure the lean startup value of information in my next side project (Lean Software Development Part 8)]]></title>
    <link href="http://philippe.bourgau.net/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/"/>
    <updated>2015-12-07T21:19:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8</id>
    <category term="business value" /><category term="lean" /><category term="planning" /><category term="software" />
    <content type="html"><![CDATA[<p>There must be a way to know the real money value of <a href="http://theleanstartup.com/">Lean Startup</a> &lsquo;knowledge&rsquo;.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-07-how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/knowledge-money.jpg" title="A brain or some money ?" ></p>

<p>Lean Startup is about gathering &lsquo;knowledge&rsquo; through experiments instead of building things. <a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_3?ie=UTF8&amp;qid=1450068976&amp;sr=8-3&amp;keywords=lean+product+development">Flow book</a> suggests that the value of an information is its expected impact on the bottom line. So by combining both, there should be a way to compute a quantitative value for the knowledge.</p>

<p>The overall plan would be :</p>

<ol>
<li>Start with a rough business plan, but assume that all that&rsquo;s in it has got 1 chance out of 10 of being right</li>
<li>Design experiments to precise the likelyhood of what&rsquo;s in the business plan</li>
<li>Compute the value of each experiment as the difference of the expected bottom line after and before running it (This should be possible if relying on the business plan for other parameters)</li>
<li>Work on the task with the highest expected value, be it an experiment, a development, a sales task, or whatever</li>
<li>Adapt you business plan with any new information</li>
<li>Repeat</li>
<li>If it becomes obvious that the expected final earnings are too low, pivot</li>
</ol>


<p>Flow explains that all the principles are pretty robust to bad inputs and errors. In short, the final estimations of earnings are still a lot better than without using any specific method. In the case of Lean Startup, it means that a false business plan is a good enough starting point.</p>

<h2>How to assess the likelyhood of a figure ?</h2>

<p>By default let&rsquo;s assume the value of a feature is somewhere between 0 and your highest estimate. As we&rsquo;ll go through experiments we&rsquo;ll be able to narrow this value range and have a more accurate estimate for the real value.</p>

<p>To keep things simple we could assume that the probability of value is uniformaly distributed within this range. From what I read in <a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_1?ie=UTF8&amp;qid=1449901015&amp;sr=8-1&amp;keywords=waltzing+with+bears">Waltzing With Bears</a>, here would be a more realistic probability distribution.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-07-how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/Demarco-probability.png" title="The curve of the probability of value according to DeMarco" ></p>

<h2>How to estimate the value of an experiment ?</h2>

<p>I&rsquo;m not going to go into the details here, because the logic is exactly the same as with technical experiments (which <a href="http://philippe.bourgau.net/measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/">I already wrote about</a>)</p>

<p>Since then though, I read <a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_1?ie=UTF8&amp;qid=1449901015&amp;sr=8-1&amp;keywords=waltzing+with+bears">Waltzing With Bears</a> which presents a way of doing Monte Carlo simulations in order to estimate risks on your project. I guess the same thing could be used for value, which would save us from a lot of complex math.</p>

<p><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_1?ie=UTF8&amp;qid=1449901015&amp;sr=8-1&amp;keywords=waltzing+with+bears"><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-07-how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/waltzing-with-bears.jpg" title="Cover of 'Waltzing With Bears'" ></a></p>

<h2>When to stop doing experiments ?</h2>

<p>Isn&rsquo;t all this overkill ? One could argue that the point of Lean Startup should be to build just enough knowledge ! In fact, this value of information concept naturaly helps to find out when running the experiment is not worth it compared to actually doing the real thing.</p>

<p>BTW, a tool doing all this for your automaticaly would be great, wouldn&rsquo;t it ?</p>

<h2>What I&rsquo;ll do for my next bootstrap side project</h2>

<ol>
<li>Start with a target hourly earning rate.</li>
<li>Collect a list of projects I&rsquo;d be interested in.</li>
<li>Pick a project and write a business goal for it.</li>
<li>Assign likelyhoods and ranges on every figure in the business plan.</li>
<li>Design experiments to improve the figures.</li>
<li>Create tasks to actually build and sell the product.</li>
<li>Compute values for each of these tasks.</li>
<li>Work the most valueable first.</li>
<li>If the figures prove that I will not make my target wage with this project, I&rsquo;ll pivot, and restart from 2.</li>
<li>Otherwise, I&rsquo;ll repeat from 4.</li>
</ol>


<p>This was part 8 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 7 was <a href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/">A Plan for Technical Debt</a>, Part 9 will be <a href="http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9/">My Dream Lean Software Development Tool</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the 'TLS-enabled daemon' docker error on Ubuntu]]></title>
    <link href="http://philippe.bourgau.net/fixing-the-tls-enabled-daemon-docker-error-on-ubuntu/"/>
    <updated>2015-12-04T04:29:00+00:00</updated>
    <id>http://philippe.bourgau.net/fixing-the-tls-enabled-daemon-docker-error-on-ubuntu</id>
    <category term="docker" /><category term="ubuntu" /><category term="unix" /><category term="vagrant" /><category term="workaround" />
    <content type="html"><![CDATA[<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-12-04-fixing-the-tls-enabled-daemon-docker-error-on-ubuntu/docker-vagrant-ubuntu.jpg" title="&#34;The 3 logos of Docker, Vagrant and Docker&#34;" alt="&#34;The 3 logos of Docker, Vagrant and Docker&#34;"></p>

<p>I am using <a href="http://www.ubuntu.com/">Ubuntu</a>, <a href="https://www.vagrantup.com/">Vagrant</a> and <a href="https://www.docker.com/">Docker</a> together to handle my various development environments. It usually works just fine : it&rsquo;s fast, low weight, it keeps my machine clean and it&rsquo;s quite simple once you&rsquo;ve setup your first VM. Until last time &hellip; read on !</p>

<p>When I tried to start my docker session through Vagrant as usuall, here is the error I suddenly got :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>philou@philou-UX31E:~/code/concurrency-kata$ vagrant up
</span><span class='line'>/home/philou/.ssh/known_hosts updated.
</span><span class='line'>Original contents retained as /home/philou/.ssh/known_hosts.old
</span><span class='line'>A Docker command executed by Vagrant didn't complete successfully!
</span><span class='line'>The command run along with the output from the command is shown
</span><span class='line'>below.
</span><span class='line'>
</span><span class='line'>Command: ["docker", "ps", "-a", "-q", "--no-trunc", {:notify=&gt;[:stdout, :stderr]}]
</span><span class='line'>
</span><span class='line'>Stderr: time="2015-10-19T06:16:27+02:00" level="fatal" msg="Get http:///var/run/docker.sock/v1.17/containers/json?all=1: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Stdout:
</span><span class='line'>ssh: connect to host localhost port 2222: Connection refused</span></code></pre></td></tr></table></div></figure>


<p>After a bit of Google searching, I found that the docker service needed to be started. <code>service docker start</code> did the trick &hellip; until next reboot !</p>

<p>With still some more Googling, I found a <a href="http://askubuntu.com/questions/19320/how-to-enable-or-disable-services">page</a> explaining how to manage Ubuntu services. In order to make the docker service automaticaly start at every reboot, I just had to enter the following :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl enable docker.service</span></code></pre></td></tr></table></div></figure>


<p>That did the trick ! I thought that might be useful for others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The technical debt ponzi scheme]]></title>
    <link href="http://philippe.bourgau.net/the-technical-debt-ponzi-scheme/"/>
    <updated>2015-10-01T19:34:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-technical-debt-ponzi-scheme</id>
    <category term="agile" /><category term="joke" /><category term="software" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>Madoff would have been better off managing software projects than investing on Wall Street !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-10-01-the-technical-debt-ponzi-scheme/bernie.jpg" title="&#34;Madoff's photo in jail&#34;" alt="&#34;Madoff's photo in jail&#34;"></p>

<p>Whereas in finance, a Ponzi scheme is a sure road to jail, it seems to be the de-facto standard in software development.</p>

<p>A few months ago, I read <a href="http://www.amazon.com/Managing-Software-Debt-Inevitable-Development/dp/0321554132/ref=sr_1_2?ie=UTF8&amp;qid=1443728175&amp;sr=8-2&amp;keywords=managing+technical+debt">Managing Software Debt</a>, hoping to find methods about how to manage technical debt with some hard numbers (instead I found some good practices to avoid it, but that&rsquo;s another story). At no place did I read that taking more debt to pay the interests of existing debt was a good practice though &hellip;</p>

<p>Thinking of it, I can remember of such <a href="https://en.wikipedia.org/wiki/Ponzi_scheme">Ponzi Schemes</a> in nearly every organization I worked in. Here are a few typical manifestations I saw :</p>

<ul>
<li>writing bogus code to compensate for some other bogus code</li>
<li>creating tools to workaround existing technical debt. Ex:

<ul>
<li>exotic build tools to build some code riddled with cyclic dependencies that no sane build tool can build</li>
<li>in house tools that do 10% of what standard (open source) tools can do on code following main standards</li>
</ul>
</li>
</ul>


<p>If this goes on for too long, you can end up in a technical debt death spiral : you know debt is out of control, so taking debt becomes the only way of actually getting anything done. &ldquo;Let&rsquo;s win this client now, because we won&rsquo;t be able to later &hellip;&rdquo;. It&rsquo;s like running to one&rsquo;s own ruin.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-10-01-the-technical-debt-ponzi-scheme/road-wall.jpg" title="&#34;A road going straight in a wall&#34;" alt="&#34;A road going straight in a wall&#34;"></p>

<p>If your organization is in this stage, you might think at the <a href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/">&lsquo;time horizon&rsquo;</a> of your product, and discover that fixing the technical debt sometimes brings more value than getting this new client !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Hand Planning Poker]]></title>
    <link href="http://philippe.bourgau.net/binary-hand-planning-poker/"/>
    <updated>2015-09-23T19:44:00+00:00</updated>
    <id>http://philippe.bourgau.net/binary-hand-planning-poker</id>
    <category term="agile" /><category term="joke" />
    <content type="html"><![CDATA[<p>At <a href="http://www.murex.com">work</a>, we are using as we all have Android phones, we are using the <a href="https://play.google.com/store/apps/details?id=artarmin.android.scrum.poker&amp;hl=fr">Scrum Poker Cards</a> app to do our <a href="https://en.wikipedia.org/wiki/Planning_poker">planning poker</a>.</p>

<p>This usually works fine, but newcomers usually have one bad remark about it :</p>

<blockquote><p>It&rsquo;s not geeky enough</p></blockquote>

<p>Obviously, it also does not work if one lakes a phone, but who would come in a meeting without it nowadays ?</p>

<p>Enters the binary hand poker !</p>

<table>
<thead>
<tr>
<th> Score </th>
<th> Sign </th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td> <br/> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/01.jpg" alt="Sign for 1" /></td>
</tr>
<tr>
<td>2</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/02.jpg" alt="Sign for 2" /></td>
</tr>
<tr>
<td>3</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/03.jpg" alt="Sign for 3" /></td>
</tr>
<tr>
<td>5</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/05.jpg" alt="Sign for 5" /></td>
</tr>
<tr>
<td>8</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/08.jpg" alt="Sign for 8" /></td>
</tr>
<tr>
<td>13</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/13.jpg" alt="Sign for 13" /></td>
</tr>
<tr>
<td>20</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/20.jpg" alt="Sign for 20" /></td>
</tr>
</tbody>
</table>


<br/>


<p>Now that&rsquo;s geeky ! I still have to find a symbol for the coffee cup and the question mark though &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silosis]]></title>
    <link href="http://philippe.bourgau.net/silosis/"/>
    <updated>2015-09-05T06:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/silosis</id>
    <category term="joke" /><category term="lean" />
    <content type="html"><![CDATA[<p>I just invented the word, I found it funny :</p>

<blockquote><p>Silosis: an internal organization of an enterprise in which people are grouped by job titles. Although not obvious at first sight, it usually involves excessively high communication costs. Worst cases can create vicious circles where more &lsquo;communication people&rsquo; are added which in turn increase the overall communication costs &hellip;</p></blockquote>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-09-05-silosis/silos.jpg" title="&#34;Silos under a grey sky&#34;" alt="&#34;Silos under a grey sky&#34;"></p>

<p>Here are other reasons I don&rsquo;t like silos :</p>

<ul>
<li>Silos create local optimums, which <a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/B00CAYOX3O/ref=sr_1_sc_2?ie=UTF8&amp;qid=1441546057&amp;sr=8-2-spell&amp;keywords=reinsertsen+flow">lean theory</a> (and mathematics) taught us is bad</li>
<li>Silos create specialists, which bring the whole system to a halt when they leave</li>
<li>Silos create work queue, which increase cycle time</li>
<li>Silos create some form of black market in the organization, through which people can bypass the official communication channel and actually get the job done</li>
<li>Silos hides the big picture to anyone, thus removing autonomy from and <a href="http://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1441546115&amp;sr=8-1&amp;keywords=daniel+pink+drive">demotivating people</a></li>
</ul>


<p>I could go one for hours &hellip; I just hate silos.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-09-05-silosis/no-silos.png" title="&#34;No Silos Logo&#34;" alt="&#34;No Silos Logo&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feedback On 360° Feedback Session]]></title>
    <link href="http://philippe.bourgau.net/feedback-on-360-degrees-feedback-session/"/>
    <updated>2015-08-27T19:40:00+00:00</updated>
    <id>http://philippe.bourgau.net/feedback-on-360-degrees-feedback-session</id>
    <category term="agile" /><category term="feedback" /><category term="management30" />
    <content type="html"><![CDATA[<blockquote><p>If you remove your job, you are promoted. (a classic lean quote)</p></blockquote>

<p>In <a href="http://www.amazon.com/Management-3-0-Leading-Developers-Developing-ebook/dp/B004ISL6JY/ref=sr_1_1?ie=UTF8&amp;qid=1438085414&amp;sr=8-1&amp;keywords=management+3.0">Management 3.0</a>, <a href="http://jurgenappelo.com/">Jurgen Appelo</a> suggests doing full team 360° feedback sessions instead of more traditional manager-collaborator meetings.</p>

<p><a href="http://www.amazon.com/Management-3-0-Leading-Developers-Developing-ebook/dp/B004ISL6JY/ref=sr_1_1?ie=UTF8&amp;qid=1438085414&amp;sr=8-1&amp;keywords=management+3.0"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-27-feedback-on-360-degrees-feedback-session/management30.jpg" title="&#34;The cover of Management 3.0 book&#34;" alt="&#34;The cover of Management 3.0 book&#34;"></a></p>

<p>He argues in favor of this practice in order to :</p>

<ul>
<li>obviously, get some feedback and improve</li>
<li>also give feedback to the manager so he too can improve</li>
<li>help the team to further self organize</li>
<li>practice everyone&rsquo;s people skills</li>
<li>have more quality objective feedback than subjective manager feedback</li>
<li>free some manager time</li>
</ul>


<h2>Our Experience</h2>

<p>We just gave it a try. As a fist experiment, we did it at just 3, all willing to try. Here is the ROTI (Return On Time Invested)</p>

<table>
<thead>
<tr>
<th>Grade(/5) </th>
<th> Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>5 </td>
<td> Useful and healthy. It&rsquo;s a way to stop grumbling. It&rsquo;s also the occasion to say things that we often don&rsquo;t.</td>
</tr>
<tr>
<td>5 </td>
<td> I&rsquo;m leaving the room with real improvement topics. It calms my emotions, it&rsquo;s like &ldquo;balm for the heart&rdquo;</td>
</tr>
<tr>
<td>5 </td>
<td> I&rsquo;m getting out with great advises. I think it&rsquo;s great for team spirit. It took 1h for just the 3 of us, I&rsquo;m wondering how we&rsquo;ll manage this if we are more ?</td>
</tr>
</tbody>
</table>


<h2>If you want to try it</h2>

<p>A few last minute advises  :</p>

<ul>
<li>Don&rsquo;t force it onto people, start with volunteers</li>
<li>There must be a safe and positive atmosphere in the team</li>
<li>This is an improvement exercices, and it should not be used as any kind of evaluation</li>
<li>Learn how to give feedback

<ul>
<li><a href="http://www.murex.com">Our company</a> provides trainings on non violent communication and positive feedback, maybe yours does too !</li>
<li>Appelo explains how to give written feedback in his other book <a href="http://www.amazon.com/gp/product/9492032023">#Workout</a>. Though better suited for email feedback, I found it a great way to prepare for the session.</li>
</ul>
</li>
</ul>


<p><a href="https://management30.com/product/workouts/"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-27-feedback-on-360-degrees-feedback-session/feedback-wrap.jpg" title="&#34;The front page of #Workout chapter about written feedback&#34;" alt="&#34;The front page of #Workout chapter about written feedback&#34;"></a></p>

<p>I&rsquo;d like to ear about your experiences with such collaborative feedbacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Plan For Technical Debt (Lean Software Development Part 7)]]></title>
    <link href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/"/>
    <updated>2015-08-20T17:11:00+00:00</updated>
    <id>http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7</id>
    <category term="agile" /><category term="lean" /><category term="planning" /><category term="software" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>The sad truth :</p>

<blockquote><p>The <a href="http://en.wikipedia.org/wiki/Technical_debt">technical debt</a> metaphor does not help me to fix it.</p></blockquote>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/debt.jpg" title="&#34;A desperate man counting his debts&#34;" alt="&#34;A desperate man counting his debts&#34;"></p>

<p>Here is my modest 2€ plan about how to try to get out of this.</p>

<h2>Why does the metaphor fall short ?</h2>

<p>The debt comparison effectively helps non programming people to understand that bad code costs money. Unfortunately, it does not tell you how much. As a consequence, deciding whether it&rsquo;s best to fix the technical debt or to live with it remains a gut feeling decision <del>(aka programmers want to stop the world and fix all of it while the product owner wants to live with it)</del>.</p>

<p>They are very good reason why we cannot measure how much the technical debt costs :</p>

<ul>
<li>It is purely subjective : bad code for someone might be good code for another. Even worse, as you become a better programmer, yesterday&rsquo;s master piece might become today&rsquo;s crap. More often, as a team gains insight on the domain, old code might suddenly appear completely wrong &hellip;</li>
<li>Tools such as Sonar only spot the a small part of the debt. The larger part (design, architecture and domain) remains invisible</li>
<li>Finally, non-remediation cost (the time wasted working on the bad code) is often overlooked and very difficult to measure : it depends on what you are going to work in the future !</li>
</ul>


<p>No surprise it&rsquo;s difficult to convince anyone else why fixing your debt is a good investment.</p>

<p><a href="http://www.dilbert.com"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/dilbert.jpg" title="&#34;A dilbert cartoon about a programmer killed by technical debt&#34;" alt="&#34;A dilbert cartoon about a programmer killed by technical debt&#34;"></a></p>

<h2>The Plan</h2>

<p>In the team, we usually try not to create debt in the first place. We have strong code conventions and working agreements. We are doing a lot of refactoring in order to keep our code base clean. But even with all this, debt creeps in :</p>

<ul>
<li>a pair worked on something and did not know that there is another part of the system that does roughly the same thing</li>
<li>we understand something new about the domain and some previously fine code becomes debt !</li>
<li>like all programmers, we are constantly in a hurry, and sometimes, we just let debt through</li>
<li>&hellip;</li>
</ul>


<p>If the required refactoring is small enough, we just slip it inside a user story and do it on the fly. The real problem comes larger refactorings.</p>

<p>The strategy to deal with those is to get estimations of both the remediation and non-remediation costs. This way, the technical debt becomes an investment ! Invest X$ now and receive Y$ every month up to the end of the life of product. Provided you have the Cost Of Delay of the product, you can estimate the cost of delay of this individual technical debt fix. For example :</p>

<ul>
<li>Let&rsquo;s define the product horizon as its expected remaining life span at any moment</li>
<li>Suppose the product has a 5 years (60 months) horizon</li>
<li>Suppose the Cost Of Delay of the full product is 150K€/month</li>
<li>Suppose that the technical debt costs 10 days (0.5 month) to fix</li>
<li>Suppose that that once fixed, you&rsquo;ll save 2 days (0.1 month) of work per month</li>
<li>By doing the fix now, at the end of the 5 years, you would have saved : <em>(60 &ndash; 0.5) * 0.1 &ndash; 0.5 = 5.45 months</em></li>
<li>Using CoD, this ammounts to : <em>5.45 * 159K = 817.5K €</em></li>
<li>Dividing by the number of months, we finaly get the CoD for this technical debt fix : <em>817.5K / 60 = 13 625 €/month</em></li>
</ul>


<p>This can be compared to the CoD of other backlog items, allowing us to prioritize large refactorings as we would of any feature or story.</p>

<p>One nice thing about this is that it not only helps to know if a refactoring is cost effective, but also when is the best moment to do it. As the CoD of the refactoring is proportional to inverse of the product horizon, a premature refactoring for a startup product might become a real bargain after the product has settled as a market leader. Here are examples of possible product horizons :</p>

<table>
<thead>
<tr>
<th>Context </th>
<th> Horizon</th>
</tr>
</thead>
<tbody>
<tr>
<td>Startup </td>
<td> 6 months</td>
</tr>
<tr>
<td>3 years old company </td>
<td> 3 years</td>
</tr>
<tr>
<td>Market leading product </td>
<td> 10 years</td>
</tr>
<tr>
<td>Aging System </td>
<td> 5 years</td>
</tr>
<tr>
<td>Legacy System </td>
<td> 2 years</td>
</tr>
</tbody>
</table>


<br/>


<p>Oh, and just one more thing &hellip; prioritizing technical debt fixes in your backlog will create some real time to focus on and only on refactoring, reducing task switching and saving even more time.</p>

<p>All this sounds great ! There&rsquo;s just one last little thing : how do we get estimations of both costs of the technical debt ?</p>

<h2>Idea 1 : Collective Estimations</h2>

<p>When I attended Donald Reinertsen&rsquo;s training, I asked him the question and he answered :</p>

<blockquote><p>I&rsquo;d gather the top programmers in a room and I&rsquo;d make them do an estimation of both costs.</p></blockquote>

<p>So I asked my team if they wanted to do the following :</p>

<ol>
<li>whenever you spot a large piece of debt, create a JIRA issue for it</li>
<li>at the end of your next sprint planning session, go through all your technical debt issues, and for each

<ol>
<li>estimate the remediation cost in story points</li>
<li>estimate the non-remediation cost on the coming sprint, taking the prioritized stories into account</li>
</ol>
</li>
<li>using the ROI horizon for every issues, collectively decide which one to tackle and add them to the sprint backlog</li>
</ol>


<p>To keep the story short, it did not stick. I bet it was just too boring.</p>

<h2>Idea 2 : Technical Debt Code Annotations</h2>

<p>During a retrospective, we discussed marking technical debt directly in the code to decide when to fix it. I created 2 code annotations so that this can be done. Here is an example of some identified technical debt :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Transformers</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="nf">Transformers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@TechnicalDebt</span><span class="o">(</span><span class="n">storyPoints</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span>
</span><span class='line'>     <span class="s">&quot;We need to find a way to do all the ast rewriting before staring the analysis&quot;</span><span class="o">,</span> <span class="n">wastes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>     <span class="nd">@Waste</span><span class="o">(</span><span class="n">date</span> <span class="o">=</span> <span class="s">&quot;2015/05/14&quot;</span><span class="o">,</span> <span class="n">hours</span> <span class="o">=</span> <span class="mi">16</span><span class="o">,</span> <span class="n">summary</span> <span class="o">=</span>
</span><span class='line'>       <span class="s">&quot;For union, we lost quite some time identifying which transformers were not copying the full tree&quot;</span><span class="o">)})</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="n">AstNode</span> <span class="nf">analyzeAst</span><span class="o">(</span><span class="n">AstNode</span> <span class="n">ast</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The @TechnicalDebt annotation identifies areas of the code that could be improved.
The @Waste annotation is a way to log time wasted because of this bad code.</p>

<p>By comparing the time to fix the technical debt and the flow of extra work it incurs, we should be able to more easily justify and prioritize these in our backlog.</p>

<p>We are thinking of writing a sonar plugin to keep track of this technical debt right in our <a href="http://www.sonarqube.org/">Sonar dashboard</a>. It would :</p>

<ul>
<li>create a technical debt item in sonar for every @TechnicalDebt annotation found in the code</li>
<li>link it with a mirror technical debt issue in JIRA</li>
<li>use the story points we entered in the annotation as remediation cost</li>
<li>extrapolate the non remediation cost by the sum of wasted hours registered during the last month</li>
</ul>


<p>We just started using those, and I cannot give enough feedback for the moment. I bet not enough @Waste items will be entered though &hellip; again, it might just be too boring</p>

<p><a href="http://www.sonarqube.org/"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/sonar-sqale.jpg" title="&#34;A screenshot of Sonar Qube Sqale technical debt plugin&#34;" alt="&#34;A screenshot of Sonar Qube Sqale technical debt plugin&#34;"></a></p>

<h2>Idea 3 : Sonar and IDE Plugins</h2>

<p>If it&rsquo;s too boring to add @Waste annotations in the code, it might be easier to have an IDE plugin with 1 big button to register some time wasted on the local @TechnicalDebt zone.</p>

<p>Pushing things a bit further, it might even be possible to estimate non remediation cost by having a look at what files are read the more, what files are triggering the more test failures when changed, etc.</p>

<p>Unfortunately, that&rsquo;s a long shot, we&rsquo;re definitely not there yet !</p>

<h2>Possible Improvements</h2>

<h3>The Mikado Method</h3>

<p>Whether you&rsquo;ve got these estimations or not, it&rsquo;s always a good practice to learn how to  use the <a href="https://mikadomethod.wordpress.com/2010/02/02/the-mikado-method-in-under-a-minute/">mikado method</a>. It&rsquo;s great to split a refactoring into smaller part and spread them over many sprints.</p>

<p>The pill is easier to swallow for everyone, and it keeps the code releasable at any given time.</p>

<h3>Decision Rule</h3>

<p>Provided you have :</p>

<ul>
<li>Product CoD</li>
<li>Top Features CoD</li>
<li>Product horizon</li>
</ul>


<p>You could easily come up with a <a href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">decision rule</a> to help us prioritizing technical debt more quickly, without the need for a formal planning.</p>

<h2>References</h2>

<ul>
<li><a href="http://fr.slideshare.net/zazworka/identifying-and-managing-technical-debt">Identifying and Managing Technical Debt</a></li>
<li><a href="http://www.amazon.com/Managing-Software-Debt-Inevitable-Development/dp/0321948610/ref=sr_1_2?ie=UTF8&amp;qid=1433246385&amp;sr=8-2&amp;keywords=managing+technical+debt">Managing Technical Debt</a></li>
</ul>


<p>This was part 7 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 6 was <a href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">You don&rsquo;t have to ask your boss for a fast build</a>, Part 8 will be <a href="http://philippe.bourgau.net/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/">How I&rsquo;ll Measure the Lean Startup Value of Information in My Next Side Project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining GitHub For New Hires]]></title>
    <link href="http://philippe.bourgau.net/mining-github-for-new-hires/"/>
    <updated>2015-08-19T05:30:00+00:00</updated>
    <id>http://philippe.bourgau.net/mining-github-for-new-hires</id>
    <category term="github" /><category term="hiring" /><category term="programming" /><category term="ruby" />
    <content type="html"><![CDATA[<h2>In search of an experienced software engineer</h2>

<p>We have been trying to hire such a profile for the last year &hellip; The position is hopefully filled now. During that year, we have tried to mine <a href="https://github.com/">github</a> for candidates. Here is how we did it.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-19-mining-github-for-new-hires/github.png" title="Github's banner" ></p>

<p>Software engineers, especially experienced, are known to be hard to find. Over the past months, we had steadily been improving our hiring process :</p>

<ul>
<li>By regularly rewriting and optimizing our job post</li>
<li>By posting it on Twitter</li>
<li>By defining a precise interview template</li>
</ul>


<p>We went from very few applications to :</p>

<ul>
<li>More applications</li>
<li>More experienced candidates</li>
<li>Regular interviews</li>
<li>Effective interviews</li>
</ul>


<p>Unfortunately, we were still not interviewing candidates as skilled as we would have liked to. We were convinced that we were offering a great job : the project is very interesting, and the team is a dream to work in.</p>

<h2>How could we reach more great devs ?</h2>

<p>Someday, I played with <a href="https://github.com/">github</a>&rsquo;s Rest Api and I managed to write a short ruby script that finds the contributors to a given project that are living near Paris (France).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rest_client&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RestClient</span><span class="o">.</span><span class="n">proxy</span> <span class="o">=</span> <span class="s2">&quot;http://proxy:3128&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">github_get</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">RestClient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;https://api.github.com</span><span class="si">#{</span><span class="n">resource</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                              <span class="n">access_token</span><span class="p">:</span> <span class="s1">&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">per_page</span><span class="p">:</span> <span class="mi">200</span><span class="p">}))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">repo</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;searching for </span><span class="si">#{</span><span class="n">repo</span><span class="si">}</span><span class="s2"> contributors in France&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">contributors</span> <span class="o">=</span> <span class="n">github_get</span><span class="p">(</span><span class="s2">&quot;/repos/</span><span class="si">#{</span><span class="n">repo</span><span class="si">}</span><span class="s2">/contributors&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">logins_locations</span> <span class="o">=</span> <span class="n">contributors</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">login</span> <span class="o">=</span> <span class="n">user</span><span class="o">[</span><span class="s1">&#39;login&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">location</span> <span class="o">=</span> <span class="n">github_get</span><span class="p">(</span><span class="s2">&quot;/users/</span><span class="si">#{</span><span class="n">login</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">[</span><span class="s1">&#39;location&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">login</span><span class="p">:</span> <span class="n">login</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="n">location</span><span class="p">}</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;could not see details of </span><span class="si">#{</span><span class="n">login</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">login</span><span class="p">:</span> <span class="n">login</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Here are all the contributors&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">logins_locations</span>
</span><span class='line'><span class="n">french_contributors</span> <span class="o">=</span> <span class="n">logins_locations</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">login_location</span><span class="o">|</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">=</span> <span class="n">login_location</span><span class="o">[</span><span class="ss">:location</span><span class="o">]</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="ow">and</span>
</span><span class='line'>    <span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;france&#39;</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>     <span class="n">location</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;paris&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;----------------------------&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Here are all the frenchcontributors&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">french_contributors</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What&rsquo;s next ?</h2>

<p>We eventually filled the position before following our github experiment. We might continue some day though ! Here is a list of improvements I thought of :</p>

<ul>
<li>Gather a list of projects that overlap with what we are building</li>
<li>Search for repositories using some keyword or regular expression</li>
<li>List github users that contributed to such projects, that live near us and that know java</li>
<li>Use more complex algorithms to find best candidates (<a href="http://www.hackdiary.com/2010/02/10/algorithmic-recruitment-with-github/">Algorithmic Recruitment With GitHub</a>)</li>
<li>Spend more time socializing on GitHub (<a href="http://www.sourcecon.com/news/2014/01/21/the-complete-guide-to-recruiting-and-sourcing-candidates-on-github/">The Complete Guide To Recruiting And Sourcing Candidates On GitHub</a>)</li>
</ul>


<p>It really looks like if software is eating recruitment &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Programmer's TODO List, Hello Personnal Kanban on Jira]]></title>
    <link href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/"/>
    <updated>2015-08-17T05:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira</id>
    <category term="jira" /><category term="kanban" /><category term="programming" /><category term="self-organization" />
    <content type="html"><![CDATA[<p>Not long ago, I wrote that <a href="http://philippe.bourgau.net/real-programmers-have-todo-lists/">Real Programmers have TODO lists</a> &hellip; I was wrong, I now work without a TODO list ! So either I&rsquo;m not a real programmer anymore, or I&rsquo;m actually using TODO List v.2.0. Read on !</p>

<h2>Motivations</h2>

<p>My work has become quite varied lately. On top of programming and pairing, I am also doing quite some coaching within the team. For the whole Murex programmers community, I&rsquo;m organizing <a href="https://github.com/murex/murex-coding-dojo">Coding Dojos</a>, <a href="http://www.brownbaglunch.fr/">Brown Bag Lunches</a> and Technical Talk Video Sessions. Finaly, like all of us, I have to cope with my share of organization overhead.</p>

<p>Multitasking was starting to kill me. I was feeling exhausted at the end of the day, with the certainty that I was not getting much done &hellip;</p>

<h2>Personnal Kanban To The Rescue</h2>

<p><a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a method to organize your work relying on <a href="http://www.personalkanban.com/pk/featured/why-limit-work-in-progress/#sthash.QFI0D8l5.dpbs">Work In Progress limits</a> : it minimizes multitasking and encourages prioritization.</p>

<p>As its name suggests it, <a href="http://personalkanban.com">Personal Kanban</a> is simply applying Kanban to your own tasks. It turns out that :</p>

<ul>
<li>My team tasks are already in <a href="https://www.atlassian.com/software/jira">JIRA</a></li>
<li>Some guys have already tried to <a href="https://jira.atlassian.com/browse/JRA-13472">use JIRA as a todo list</a></li>
<li>JIRA supports Kanban boards with WIP limits and all</li>
</ul>


<h2>The Kanban Board</h2>

<p>In our team, <a href="http://bilal.eltayara.net">TAYARA Bilal</a> had already experimented the approach and asked to JIRA admins to create us a custom project for our todo lists. I piggybacked on it and created my own kanban board. Here is what it looks like.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/board.png" title="Screenshot of the full JIRA board" ></p>

<h3>Mixing Project Stories And Personnal Tasks</h3>

<p>JIRA allows creating a kanban board that spans many projects ! You can simply choose multiple projects when you setup the board for the first time, or you can edit your board filter like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="n">POPIMDB</span><span class="p">,</span> <span class="n">POPABTODO</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to see <em>all</em> of my work at a glance on the same board.</p>

<h3>Work In Progress Limit</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/wip.png" title="Zoom on the wip constraints of the JIRA column" ></p>

<p>JIRA allows WIP limits, warning me with a red background when I am multitasking or when I am getting late on my tasks</p>

<h3>Color Conventions</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/color-cards.png" title="Different colors of JIRA cards" ></p>

<p>JIRA makes it possible to assign different colors to cards, for example</p>

<ul>
<li>Red for tasks that are due soon</li>
<li>orange for cards that are due some time</li>
<li>light brown for project stories</li>
<li>green for other programming tasks</li>
<li>blue for other tasks</li>
</ul>


<h3>Swimlanes</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/swimlanes.png" title="Closup on a JIRA swimlane" ></p>

<p>JIRA has swimlanes, separating project from personal tasks</p>

<h3>Reports</h3>

<p>An extra bonus with JIRA Kanban board is that they have reports ! Here is my cumulative flow diagram for my first week of usage :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/cumulative-flow.png" title="A screenshot of the JIRA cumulative flow diagram" ></p>

<h3>Configuration</h3>

<p>Here is the JQL query I used to configure it this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- board filter</span>
</span><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="n">POPIMDB</span><span class="p">,</span> <span class="n">POPABTODO</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">Assignee</span> <span class="o">=</span> <span class="n">pbourgau</span> <span class="k">OR</span> <span class="n">Co</span><span class="o">-</span><span class="n">Assignees</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="p">)</span> <span class="k">OR</span> <span class="n">mentors</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="p">))</span> <span class="k">AND</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">CLOSED</span> <span class="k">OR</span> <span class="n">updated</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">1</span><span class="n">d</span><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Rank</span> <span class="k">ASC</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Swimlanes</span>
</span><span class='line'><span class="n">priority</span> <span class="o">=</span> <span class="ss">&quot;1-Very High&quot;</span> <span class="c1">-- Expedite</span>
</span><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="ss">&quot;POP IMDB&quot;</span><span class="p">)</span> <span class="k">and</span> <span class="p">(</span><span class="n">labels</span> <span class="k">not</span> <span class="k">in</span> <span class="p">(</span><span class="n">SLACK</span><span class="p">)</span> <span class="k">OR</span> <span class="n">labels</span> <span class="k">is</span> <span class="n">EMPTY</span><span class="p">)</span> <span class="c1">-- IMDB Stories</span>
</span><span class='line'><span class="c1">-- and a blank filter for Other Tasks</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Card Colours</span>
</span><span class='line'><span class="n">duedate</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="n">d</span> <span class="k">or</span> <span class="n">priority</span> <span class="o">=</span> <span class="ss">&quot;1-Very High&quot;</span> <span class="c1">-- red</span>
</span><span class='line'><span class="n">duedate</span> <span class="k">is</span> <span class="k">not</span> <span class="n">EMPTY</span> <span class="c1">-- orange</span>
</span><span class='line'><span class="n">labels</span> <span class="k">in</span> <span class="p">(</span><span class="n">SLACK</span><span class="p">)</span> <span class="c1">-- green</span>
</span><span class='line'><span class="k">type</span> <span class="o">=</span> <span class="n">Task</span> <span class="c1">-- blue</span>
</span><span class='line'><span class="c1">-- and an empty filter for light brown</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The End Result</h2>

<p>By setting a WIP limit of 3 on the &ldquo;In Progress&rdquo; column, the following naturally happened :</p>

<ul>
<li>Once I have started a programming task, I now defer any other activity in the TODO column until I am finished. (HINT: If you get invited to meetings all the time, lock your agenda with &lsquo;Unbookable&rsquo; days when you start programming)</li>
<li>It actually pushed me into finishing the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> training I had started long ago.</li>
</ul>


<p>I also set a high WIP limit (around 10) on the TODO column, this way, I get a kind of warning that next time I finish a programming task, I should take some time off to prune the column.</p>

<p>The overall result is that I do lot less multitasking. I get the feeling of doing steadier, more efficient work.</p>

<p>If you are suffering from multitasking and decide to give it a try, I&rsquo;d love to read about your experience !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actors and Green Threads in Java Demystified]]></title>
    <link href="http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified/"/>
    <updated>2015-08-15T13:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified</id>
    <category term="concurrency" /><category term="java" /><category term="programming" />
    <content type="html"><![CDATA[<p>After finishing my <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>, one of the things that most surprised me, is how simple it was to prototype the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model</a> in Java using <a href="https://en.wikipedia.org/wiki/Green_threads">Green Threads</a>.</p>

<h2>The Code</h2>

<p>First, here is the base class for all actors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Actor</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">threadPool</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">mailbox</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">stoped</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Actor</span><span class="o">(</span><span class="n">ExecutorService</span> <span class="n">threadPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">threadPool</span> <span class="o">=</span> <span class="n">threadPool</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">stoped</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Runnable</span> <span class="n">nextMessage</span> <span class="o">=</span> <span class="n">mailbox</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nextMessage</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nextMessage</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">submitContinuation</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">submitContinuation</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stoped</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mailbox</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">submitContinuation</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">threadPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I simply used Runnable as the type of the messages.</p>

<p>The Actor itself is Runnable, meaning that it can be submitted to the thread pool. When executed :</p>

<ol>
<li>it tries to handle a message from the mailbox if there is one.</li>
<li>It then re-submits the actor itself</li>
</ol>


<p>This ensures that only one thread is executing messages on an actor at a given time, and it also avoids spawning new thread for every new actor.</p>

<p>As an example, here is how I used this to make an actor of an existing InProcessChatRoom class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ChatRoom</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">broadcast</span><span class="o">(</span><span class="n">Output</span> <span class="n">client</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InProcessChatRoom</span> <span class="kd">implements</span> <span class="n">ChatRoom</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatRoomActor</span> <span class="kd">extends</span> <span class="n">Actor</span> <span class="kd">implements</span> <span class="n">ChatRoom</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ChatRoom</span> <span class="n">realChatroom</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ChatRoomActor</span><span class="o">(</span><span class="n">ChatRoom</span> <span class="n">realChatroom</span><span class="o">,</span> <span class="n">ExecutorService</span> <span class="n">threadPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">threadPool</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">realChatroom</span> <span class="o">=</span> <span class="n">realChatroom</span><span class="o">;</span>
</span><span class='line'>        <span class="n">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">broadcast</span><span class="o">(</span><span class="kd">final</span> <span class="n">Output</span> <span class="n">client</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">send</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">realChatroom</span><span class="o">.</span><span class="na">broadcast</span><span class="o">(</span><span class="n">client</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ChatRoomActor is in fact some kind of proxy to use from other actors to send messages to the chat room.</p>

<p>As with any implementation of the Actors Model, the neet thing is the separation of threading and logic. That makes it so much simpler ! (You can get more detail about the complexity I am talking about by taking a look at the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>)</p>

<h2>Performances</h2>

<p>Here is a performance summary of this implementation compared to others on a &ldquo;throughput vs clients&rdquo; benchmark of the style &ldquo;Enter while others are talking&rdquo;</p>

<p><a href="https://github.com/philou/concurrency-kata"><img class="center" src="https://raw.githubusercontent.com/philou/concurrency-kata/master/enter-while-others-are-talking.png" title="Result graphs of benchmark enter while others are talking" ></a></p>

<p>Results can be disappointing compared to other implementations but the example itself is a bit misleading. The chatroom does exclusively message passing, there is not much computation to parallelize, in a different setting, the results would have been completely different.</p>

<h2>Limitations</h2>

<p>As you can see, this implementation is just a quick prototype, nothing production ready. Here are the main limitations I can think of right now :</p>

<ul>
<li>It uses <a href="https://en.wikipedia.org/wiki/Busy_waiting">Busy Waiting</a> for the next message, meaning that it consumes unnecessary resources, and that more important messages to other Actors might be delayed</li>
<li>Usually, actor messages are selected on their type rather than on their order of arrival, this is not the case here</li>
<li>The usage of the Runnable interface as base message type, though handy, opens the door to inter-thread calls that might violate the model altogether</li>
<li>There is absolutely no support of out of process actors until the messages are Serializable</li>
</ul>


<h2>Going Further</h2>

<p>I started this <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> as a training material about concurrency for colleagues at <a href="http://www.murex.com">work</a>. In the spirit of the coding kata, it&rsquo;s a git repo you can walk, explore and experiment with.</p>

<p>So if you want to learn more about different models of concurrency, you are welcome to have a look at the How-To section in the <a href="https://github.com/philou/concurrency-kata">README</a> file.</p>

<p>On my part, although it was a lot more work than I would have guessed at the beginning, I barely scratch the surface of the subject ! I could now :</p>

<ul>
<li>extract the <a href="https://fr.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> or Actor implementation and make them more robust</li>
<li>practice and present the whole kata as a 2 hours live coding session</li>
<li>prepare a hands-on training about concurrency</li>
</ul>


<p>So, if you are willing to do any of the above you are welcome to contribute !</p>
]]></content>
  </entry>
  
</feed>
