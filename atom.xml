<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2015-11-19T21:45:46+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The technical debt ponzi scheme]]></title>
    <link href="http://philippe.bourgau.net/the-technical-debt-ponzi-scheme/"/>
    <updated>2015-10-01T19:34:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-technical-debt-ponzi-scheme</id>
    <category term="agile" /><category term="joke" /><category term="software" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>Madoff would have been better off managing software projects than investing on Wall Street !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-10-01-the-technical-debt-ponzi-scheme/bernie.jpg" title="&#34;Madoff's photo in jail&#34;" alt="&#34;Madoff's photo in jail&#34;"></p>

<p>Whereas in finance, a Ponzi scheme is a sure road to jail, it seems to be the de-facto standard in software development.</p>

<p>A few months ago, I read <a href="http://www.amazon.com/Managing-Software-Debt-Inevitable-Development/dp/0321554132/ref=sr_1_2?ie=UTF8&amp;qid=1443728175&amp;sr=8-2&amp;keywords=managing+technical+debt">Managing Software Debt</a>, hoping to find methods about how to manage technical debt with some hard numbers (instead I found some good practices to avoid it, but that&rsquo;s another story). At no place did I read that taking more debt to pay the interests of existing debt was a good practice though &hellip;</p>

<p>Thinking of it, I can remember of such <a href="https://en.wikipedia.org/wiki/Ponzi_scheme">Ponzi Schemes</a> in nearly every organization I worked in. Here are a few typical manifestations I saw :</p>

<ul>
<li>writing bogus code to compensate for some other bogus code</li>
<li>creating tools to workaround existing technical debt. Ex:

<ul>
<li>exotic build tools to build some code riddled with cyclic dependencies that no sane build tool can build</li>
<li>in house tools that do 10% of what standard (open source) tools can do on code following main standards</li>
</ul>
</li>
</ul>


<p>If this goes on for too long, you can end up in a technical debt death spiral : you know debt is out of control, so taking debt becomes the only way of actually getting anything done. &ldquo;Let&rsquo;s win this client now, because we won&rsquo;t be able to later &hellip;&rdquo;. It&rsquo;s like running to one&rsquo;s own ruin.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-10-01-the-technical-debt-ponzi-scheme/road-wall.jpg" title="&#34;A road going straight in a wall&#34;" alt="&#34;A road going straight in a wall&#34;"></p>

<p>If your organization is in this stage, you might think at the <a href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/">&lsquo;time horizon&rsquo;</a> of your product, and discover that fixing the technical debt sometimes brings more value than getting this new client !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Hand Planning Poker]]></title>
    <link href="http://philippe.bourgau.net/binary-hand-planning-poker/"/>
    <updated>2015-09-23T19:44:00+00:00</updated>
    <id>http://philippe.bourgau.net/binary-hand-planning-poker</id>
    <category term="agile" /><category term="joke" />
    <content type="html"><![CDATA[<p>At <a href="http://www.murex.com">work</a>, we are using as we all have Android phones, we are using the <a href="https://play.google.com/store/apps/details?id=artarmin.android.scrum.poker&amp;hl=fr">Scrum Poker Cards</a> app to do our <a href="https://en.wikipedia.org/wiki/Planning_poker">planning poker</a>.</p>

<p>This usually works fine, but newcomers usually have one bad remark about it :</p>

<blockquote><p>It&rsquo;s not geeky enough</p></blockquote>

<p>Obviously, it also does not work if one lakes a phone, but who would come in a meeting without it nowadays ?</p>

<p>Enters the binary hand poker !</p>

<table>
<thead>
<tr>
<th> Score </th>
<th> Sign </th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td> <br/> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/01.jpg" alt="Sign for 1" /></td>
</tr>
<tr>
<td>2</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/02.jpg" alt="Sign for 2" /></td>
</tr>
<tr>
<td>3</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/03.jpg" alt="Sign for 3" /></td>
</tr>
<tr>
<td>5</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/05.jpg" alt="Sign for 5" /></td>
</tr>
<tr>
<td>8</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/08.jpg" alt="Sign for 8" /></td>
</tr>
<tr>
<td>13</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/13.jpg" alt="Sign for 13" /></td>
</tr>
<tr>
<td>20</td>
<td> <img src="http://philippe.bourgau.net/imgs/2015-09-23-binary-hand-planning-poker/20.jpg" alt="Sign for 20" /></td>
</tr>
</tbody>
</table>


<br/>


<p>Now that&rsquo;s geeky ! I still have to find a symbol for the coffee cup and the question mark though &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silosis]]></title>
    <link href="http://philippe.bourgau.net/silosis/"/>
    <updated>2015-09-05T06:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/silosis</id>
    <category term="joke" /><category term="lean" />
    <content type="html"><![CDATA[<p>I just invented the word, I found it funny :</p>

<blockquote><p>Silosis: an internal organization of an enterprise in which people are grouped by job titles. Although not obvious at first sight, it usually involves excessively high communication costs. Worst cases can create vicious circles where more &lsquo;communication people&rsquo; are added which in turn increase the overall communication costs &hellip;</p></blockquote>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-09-05-silosis/silos.jpg" title="&#34;Silos under a grey sky&#34;" alt="&#34;Silos under a grey sky&#34;"></p>

<p>Here are other reasons I don&rsquo;t like silos :</p>

<ul>
<li>Silos create local optimums, which <a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/B00CAYOX3O/ref=sr_1_sc_2?ie=UTF8&amp;qid=1441546057&amp;sr=8-2-spell&amp;keywords=reinsertsen+flow">lean theory</a> (and mathematics) taught us is bad</li>
<li>Silos create specialists, which bring the whole system to a halt when they leave</li>
<li>Silos create work queue, which increase cycle time</li>
<li>Silos create some form of black market in the organization, through which people can bypass the official communication channel and actually get the job done</li>
<li>Silos hides the big picture to anyone, thus removing autonomy from and <a href="http://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1441546115&amp;sr=8-1&amp;keywords=daniel+pink+drive">demotivating people</a></li>
</ul>


<p>I could go one for hours &hellip; I just hate silos.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-09-05-silosis/no-silos.png" title="&#34;No Silos Logo&#34;" alt="&#34;No Silos Logo&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feedback On 360° Feedback Session]]></title>
    <link href="http://philippe.bourgau.net/feedback-on-360-degrees-feedback-session/"/>
    <updated>2015-08-27T19:40:00+00:00</updated>
    <id>http://philippe.bourgau.net/feedback-on-360-degrees-feedback-session</id>
    <category term="agile" /><category term="feedback" /><category term="management30" />
    <content type="html"><![CDATA[<blockquote><p>If you remove your job, you are promoted. (a classic lean quote)</p></blockquote>

<p>In <a href="http://www.amazon.com/Management-3-0-Leading-Developers-Developing-ebook/dp/B004ISL6JY/ref=sr_1_1?ie=UTF8&amp;qid=1438085414&amp;sr=8-1&amp;keywords=management+3.0">Management 3.0</a>, <a href="http://jurgenappelo.com/">Jurgen Appelo</a> suggests doing full team 360° feedback sessions instead of more traditional manager-collaborator meetings.</p>

<p><a href="http://www.amazon.com/Management-3-0-Leading-Developers-Developing-ebook/dp/B004ISL6JY/ref=sr_1_1?ie=UTF8&amp;qid=1438085414&amp;sr=8-1&amp;keywords=management+3.0"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-27-feedback-on-360-degrees-feedback-session/management30.jpg" title="&#34;The cover of Management 3.0 book&#34;" alt="&#34;The cover of Management 3.0 book&#34;"></a></p>

<p>He argues in favor of this practice in order to :</p>

<ul>
<li>obviously, get some feedback and improve</li>
<li>also give feedback to the manager so he too can improve</li>
<li>help the team to further self organize</li>
<li>practice everyone&rsquo;s people skills</li>
<li>have more quality objective feedback than subjective manager feedback</li>
<li>free some manager time</li>
</ul>


<h2>Our Experience</h2>

<p>We just gave it a try. As a fist experiment, we did it at just 3, all willing to try. Here is the ROTI (Return On Time Invested)</p>

<table>
<thead>
<tr>
<th>Grade(/5) </th>
<th> Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>5 </td>
<td> Useful and healthy. It&rsquo;s a way to stop grumbling. It&rsquo;s also the occasion to say things that we often don&rsquo;t.</td>
</tr>
<tr>
<td>5 </td>
<td> I&rsquo;m leaving the room with real improvement topics. It calms my emotions, it&rsquo;s like &ldquo;balm for the heart&rdquo;</td>
</tr>
<tr>
<td>5 </td>
<td> I&rsquo;m getting out with great advises. I think it&rsquo;s great for team spirit. It took 1h for just the 3 of us, I&rsquo;m wondering how we&rsquo;ll manage this if we are more ?</td>
</tr>
</tbody>
</table>


<h2>If you want to try it</h2>

<p>A few last minute advises  :</p>

<ul>
<li>Don&rsquo;t force it onto people, start with volunteers</li>
<li>There must be a safe and positive atmosphere in the team</li>
<li>This is an improvement exercices, and it should not be used as any kind of evaluation</li>
<li>Learn how to give feedback

<ul>
<li><a href="http://www.murex.com">Our company</a> provides trainings on non violent communication and positive feedback, maybe yours does too !</li>
<li>Appelo explains how to give written feedback in his other book <a href="http://www.amazon.com/gp/product/9492032023">#Workout</a>. Though better suited for email feedback, I found it a great way to prepare for the session.</li>
</ul>
</li>
</ul>


<p><a href="https://management30.com/product/workouts/"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-27-feedback-on-360-degrees-feedback-session/feedback-wrap.jpg" title="&#34;The front page of #Workout chapter about written feedback&#34;" alt="&#34;The front page of #Workout chapter about written feedback&#34;"></a></p>

<p>I&rsquo;d like to ear about your experiences with such collaborative feedbacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Plan For Technical Debt (Lean Software Development Part 7)]]></title>
    <link href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/"/>
    <updated>2015-08-20T17:11:00+00:00</updated>
    <id>http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7</id>
    <category term="agile" /><category term="lean" /><category term="planning" /><category term="software" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>The sad truth :</p>

<blockquote><p>The <a href="http://en.wikipedia.org/wiki/Technical_debt">technical debt</a> metaphor does not help me to fix it.</p></blockquote>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/debt.jpg" title="&#34;A desperate man counting his debts&#34;" alt="&#34;A desperate man counting his debts&#34;"></p>

<p>Here is my modest 2€ plan about how to try to get out of this.</p>

<h2>Why does the metaphor fall short ?</h2>

<p>The debt comparison effectively helps non programming people to understand that bad code costs money. Unfortunately, it does not tell you how much. As a consequence, deciding whether it&rsquo;s best to fix the technical debt or to live with it remains a gut feeling decision <del>(aka programmers want to stop the world and fix all of it while the product owner wants to live with it)</del>.</p>

<p>They are very good reason why we cannot measure how much the technical debt costs :</p>

<ul>
<li>It is purely subjective : bad code for someone might be good code for another. Even worse, as you become a better programmer, yesterday&rsquo;s master piece might become today&rsquo;s crap. More often, as a team gains insight on the domain, old code might suddenly appear completely wrong &hellip;</li>
<li>Tools such as Sonar only spot the a small part of the debt. The larger part (design, architecture and domain) remains invisible</li>
<li>Finally, non-remediation cost (the time wasted working on the bad code) is often overlooked and very difficult to measure : it depends on what you are going to work in the future !</li>
</ul>


<p>No surprise it&rsquo;s difficult to convince anyone else why fixing your debt is a good investment.</p>

<p><a href="http://www.dilbert.com"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/dilbert.jpg" title="&#34;A dilbert cartoon about a programmer killed by technical debt&#34;" alt="&#34;A dilbert cartoon about a programmer killed by technical debt&#34;"></a></p>

<h2>The Plan</h2>

<p>In the team, we usually try not to create debt in the first place. We have strong code conventions and working agreements. We are doing a lot of refactoring in order to keep our code base clean. But even with all this, debt creeps in :</p>

<ul>
<li>a pair worked on something and did not know that there is another part of the system that does roughly the same thing</li>
<li>we understand something new about the domain and some previously fine code becomes debt !</li>
<li>like all programmers, we are constantly in a hurry, and sometimes, we just let debt through</li>
<li>&hellip;</li>
</ul>


<p>If the required refactoring is small enough, we just slip it inside a user story and do it on the fly. The real problem comes larger refactorings.</p>

<p>The strategy to deal with those is to get estimations of both the remediation and non-remediation costs. This way, the technical debt becomes an investment ! Invest X$ now and receive Y$ every month up to the end of the life of product. Provided you have the Cost Of Delay of the product, you can estimate the cost of delay of this individual technical debt fix. For example :</p>

<ul>
<li>Let&rsquo;s define the product horizon as its expected remaining life span at any moment</li>
<li>Suppose the product has a 5 years (60 months) horizon</li>
<li>Suppose the Cost Of Delay of the full product is 150K€/month</li>
<li>Suppose that the technical debt costs 10 days (0.5 month) to fix</li>
<li>Suppose that that once fixed, you&rsquo;ll save 2 days (0.1 month) of work per month</li>
<li>By doing the fix now, at the end of the 5 years, you would have saved : <em>(60 &ndash; 0.5) * 0.1 &ndash; 0.5 = 5.45 months</em></li>
<li>Using CoD, this ammounts to : <em>5.45 * 159K = 817.5K €</em></li>
<li>Dividing by the number of months, we finaly get the CoD for this technical debt fix : <em>817.5K / 60 = 13 625 €/month</em></li>
</ul>


<p>This can be compared to the CoD of other backlog items, allowing us to prioritize large refactorings as we would of any feature or story.</p>

<p>One nice thing about this is that it not only helps to know if a refactoring is cost effective, but also when is the best moment to do it. As the CoD of the refactoring is proportional to inverse of the product horizon, a premature refactoring for a startup product might become a real bargain after the product has settled as a market leader. Here are examples of possible product horizons :</p>

<table>
<thead>
<tr>
<th>Context </th>
<th> Horizon</th>
</tr>
</thead>
<tbody>
<tr>
<td>Startup </td>
<td> 6 months</td>
</tr>
<tr>
<td>3 years old company </td>
<td> 3 years</td>
</tr>
<tr>
<td>Market leading product </td>
<td> 10 years</td>
</tr>
<tr>
<td>Aging System </td>
<td> 5 years</td>
</tr>
<tr>
<td>Legacy System </td>
<td> 2 years</td>
</tr>
</tbody>
</table>


<br/>


<p>Oh, and just one more thing &hellip; prioritizing technical debt fixes in your backlog will create some real time to focus on and only on refactoring, reducing task switching and saving even more time.</p>

<p>All this sounds great ! There&rsquo;s just one last little thing : how do we get estimations of both costs of the technical debt ?</p>

<h2>Idea 1 : Collective Estimations</h2>

<p>When I attended Donald Reinertsen&rsquo;s training, I asked him the question and he answered :</p>

<blockquote><p>I&rsquo;d gather the top programmers in a room and I&rsquo;d make them do an estimation of both costs.</p></blockquote>

<p>So I asked my team if they wanted to do the following :</p>

<ol>
<li>whenever you spot a large piece of debt, create a JIRA issue for it</li>
<li>at the end of your next sprint planning session, go through all your technical debt issues, and for each

<ol>
<li>estimate the remediation cost in story points</li>
<li>estimate the non-remediation cost on the coming sprint, taking the prioritized stories into account</li>
</ol>
</li>
<li>using the ROI horizon for every issues, collectively decide which one to tackle and add them to the sprint backlog</li>
</ol>


<p>To keep the story short, it did not stick. I bet it was just too boring.</p>

<h2>Idea 2 : Technical Debt Code Annotations</h2>

<p>During a retrospective, we discussed marking technical debt directly in the code to decide when to fix it. I created 2 code annotations so that this can be done. Here is an example of some identified technical debt :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Transformers</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="nf">Transformers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@TechnicalDebt</span><span class="o">(</span><span class="n">storyPoints</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span>
</span><span class='line'>     <span class="s">&quot;We need to find a way to do all the ast rewriting before staring the analysis&quot;</span><span class="o">,</span> <span class="n">wastes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>     <span class="nd">@Waste</span><span class="o">(</span><span class="n">date</span> <span class="o">=</span> <span class="s">&quot;2015/05/14&quot;</span><span class="o">,</span> <span class="n">hours</span> <span class="o">=</span> <span class="mi">16</span><span class="o">,</span> <span class="n">summary</span> <span class="o">=</span>
</span><span class='line'>       <span class="s">&quot;For union, we lost quite some time identifying which transformers were not copying the full tree&quot;</span><span class="o">)})</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="n">AstNode</span> <span class="nf">analyzeAst</span><span class="o">(</span><span class="n">AstNode</span> <span class="n">ast</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The @TechnicalDebt annotation identifies areas of the code that could be improved.
The @Waste annotation is a way to log time wasted because of this bad code.</p>

<p>By comparing the time to fix the technical debt and the flow of extra work it incurs, we should be able to more easily justify and prioritize these in our backlog.</p>

<p>We are thinking of writing a sonar plugin to keep track of this technical debt right in our <a href="http://www.sonarqube.org/">Sonar dashboard</a>. It would :</p>

<ul>
<li>create a technical debt item in sonar for every @TechnicalDebt annotation found in the code</li>
<li>link it with a mirror technical debt issue in JIRA</li>
<li>use the story points we entered in the annotation as remediation cost</li>
<li>extrapolate the non remediation cost by the sum of wasted hours registered during the last month</li>
</ul>


<p>We just started using those, and I cannot give enough feedback for the moment. I bet not enough @Waste items will be entered though &hellip; again, it might just be too boring</p>

<p><a href="http://www.sonarqube.org/"><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/sonar-sqale.jpg" title="&#34;A screenshot of Sonar Qube Sqale technical debt plugin&#34;" alt="&#34;A screenshot of Sonar Qube Sqale technical debt plugin&#34;"></a></p>

<h2>Idea 3 : Sonar and IDE Plugins</h2>

<p>If it&rsquo;s too boring to add @Waste annotations in the code, it might be easier to have an IDE plugin with 1 big button to register some time wasted on the local @TechnicalDebt zone.</p>

<p>Pushing things a bit further, it might even be possible to estimate non remediation cost by having a look at what files are read the more, what files are triggering the more test failures when changed, etc.</p>

<p>Unfortunately, that&rsquo;s a long shot, we&rsquo;re definitely not there yet !</p>

<h2>Possible Improvements</h2>

<h3>The Mikado Method</h3>

<p>Whether you&rsquo;ve got these estimations or not, it&rsquo;s always a good practice to learn how to  use the <a href="https://mikadomethod.wordpress.com/2010/02/02/the-mikado-method-in-under-a-minute/">mikado method</a>. It&rsquo;s great to split a refactoring into smaller part and spread them over many sprints.</p>

<p>The pill is easier to swallow for everyone, and it keeps the code releasable at any given time.</p>

<h3>Decision Rule</h3>

<p>Provided you have :</p>

<ul>
<li>Product CoD</li>
<li>Top Features CoD</li>
<li>Product horizon</li>
</ul>


<p>You could easily come up with a <a href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">decision rule</a> to help us prioritizing technical debt more quickly, without the need for a formal planning.</p>

<h2>References</h2>

<ul>
<li><a href="http://fr.slideshare.net/zazworka/identifying-and-managing-technical-debt">Identifying and Managing Technical Debt</a></li>
<li><a href="http://www.amazon.com/Managing-Software-Debt-Inevitable-Development/dp/0321948610/ref=sr_1_2?ie=UTF8&amp;qid=1433246385&amp;sr=8-2&amp;keywords=managing+technical+debt">Managing Technical Debt</a></li>
</ul>


<p>This was part 7 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 6 was <a href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">You don&rsquo;t have to ask your boss for a fast build</a>, Part 8 will be &ldquo;Measure the value of the lean startup &lsquo;learning&rsquo;&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining GitHub For New Hires]]></title>
    <link href="http://philippe.bourgau.net/mining-github-for-new-hires/"/>
    <updated>2015-08-19T05:30:00+00:00</updated>
    <id>http://philippe.bourgau.net/mining-github-for-new-hires</id>
    <category term="github" /><category term="hiring" /><category term="programming" /><category term="ruby" />
    <content type="html"><![CDATA[<h2>In search of an experienced software engineer</h2>

<p>We have been trying to hire such a profile for the last year &hellip; The position is hopefully filled now. During that year, we have tried to mine <a href="https://github.com/">github</a> for candidates. Here is how we did it.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-19-mining-github-for-new-hires/github.png" title="Github's banner" ></p>

<p>Software engineers, especially experienced, are known to be hard to find. Over the past months, we had steadily been improving our hiring process :</p>

<ul>
<li>By regularly rewriting and optimizing our job post</li>
<li>By posting it on Twitter</li>
<li>By defining a precise interview template</li>
</ul>


<p>We went from very few applications to :</p>

<ul>
<li>More applications</li>
<li>More experienced candidates</li>
<li>Regular interviews</li>
<li>Effective interviews</li>
</ul>


<p>Unfortunately, we were still not interviewing candidates as skilled as we would have liked to. We were convinced that we were offering a great job : the project is very interesting, and the team is a dream to work in.</p>

<h2>How could we reach more great devs ?</h2>

<p>Someday, I played with <a href="https://github.com/">github</a>&rsquo;s Rest Api and I managed to write a short ruby script that finds the contributors to a given project that are living near Paris (France).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rest_client&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RestClient</span><span class="o">.</span><span class="n">proxy</span> <span class="o">=</span> <span class="s2">&quot;http://proxy:3128&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">github_get</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">RestClient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;https://api.github.com</span><span class="si">#{</span><span class="n">resource</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                              <span class="n">access_token</span><span class="p">:</span> <span class="s1">&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">per_page</span><span class="p">:</span> <span class="mi">200</span><span class="p">}))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">repo</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;searching for </span><span class="si">#{</span><span class="n">repo</span><span class="si">}</span><span class="s2"> contributors in France&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">contributors</span> <span class="o">=</span> <span class="n">github_get</span><span class="p">(</span><span class="s2">&quot;/repos/</span><span class="si">#{</span><span class="n">repo</span><span class="si">}</span><span class="s2">/contributors&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">logins_locations</span> <span class="o">=</span> <span class="n">contributors</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">login</span> <span class="o">=</span> <span class="n">user</span><span class="o">[</span><span class="s1">&#39;login&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">location</span> <span class="o">=</span> <span class="n">github_get</span><span class="p">(</span><span class="s2">&quot;/users/</span><span class="si">#{</span><span class="n">login</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">[</span><span class="s1">&#39;location&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">login</span><span class="p">:</span> <span class="n">login</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="n">location</span><span class="p">}</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;could not see details of </span><span class="si">#{</span><span class="n">login</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">login</span><span class="p">:</span> <span class="n">login</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Here are all the contributors&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">logins_locations</span>
</span><span class='line'><span class="n">french_contributors</span> <span class="o">=</span> <span class="n">logins_locations</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">login_location</span><span class="o">|</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">=</span> <span class="n">login_location</span><span class="o">[</span><span class="ss">:location</span><span class="o">]</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="ow">and</span>
</span><span class='line'>    <span class="p">(</span><span class="n">location</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;france&#39;</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>     <span class="n">location</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;paris&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;----------------------------&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Here are all the frenchcontributors&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">french_contributors</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What&rsquo;s next ?</h2>

<p>We eventually filled the position before following our github experiment. We might continue some day though ! Here is a list of improvements I thought of :</p>

<ul>
<li>Gather a list of projects that overlap with what we are building</li>
<li>Search for repositories using some keyword or regular expression</li>
<li>List github users that contributed to such projects, that live near us and that know java</li>
<li>Use more complex algorithms to find best candidates (<a href="http://www.hackdiary.com/2010/02/10/algorithmic-recruitment-with-github/">Algorithmic Recruitment With GitHub</a>)</li>
<li>Spend more time socializing on GitHub (<a href="http://www.sourcecon.com/news/2014/01/21/the-complete-guide-to-recruiting-and-sourcing-candidates-on-github/">The Complete Guide To Recruiting And Sourcing Candidates On GitHub</a>)</li>
</ul>


<p>It really looks like if software is eating recruitment &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Programmer's TODO List, Hello Personnal Kanban on Jira]]></title>
    <link href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/"/>
    <updated>2015-08-17T05:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira</id>
    <category term="jira" /><category term="kanban" /><category term="programming" /><category term="self-organization" />
    <content type="html"><![CDATA[<p>Not long ago, I wrote that <a href="http://philippe.bourgau.net/real-programmers-have-todo-lists/">Real Programmers have TODO lists</a> &hellip; I was wrong, I now work without a TODO list ! So either I&rsquo;m not a real programmer anymore, or I&rsquo;m actually using TODO List v.2.0. Read on !</p>

<h2>Motivations</h2>

<p>My work has become quite varied lately. On top of programming and pairing, I am also doing quite some coaching within the team. For the whole Murex programmers community, I&rsquo;m organizing <a href="https://github.com/murex/murex-coding-dojo">Coding Dojos</a>, <a href="http://www.brownbaglunch.fr/">Brown Bag Lunches</a> and Technical Talk Video Sessions. Finaly, like all of us, I have to cope with my share of organization overhead.</p>

<p>Multitasking was starting to kill me. I was feeling exhausted at the end of the day, with the certainty that I was not getting much done &hellip;</p>

<h2>Personnal Kanban To The Rescue</h2>

<p><a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a method to organize your work relying on <a href="http://www.personalkanban.com/pk/featured/why-limit-work-in-progress/#sthash.QFI0D8l5.dpbs">Work In Progress limits</a> : it minimizes multitasking and encourages prioritization.</p>

<p>As its name suggests it, <a href="http://personalkanban.com">Personal Kanban</a> is simply applying Kanban to your own tasks. It turns out that :</p>

<ul>
<li>My team tasks are already in <a href="https://www.atlassian.com/software/jira">JIRA</a></li>
<li>Some guys have already tried to <a href="https://jira.atlassian.com/browse/JRA-13472">use JIRA as a todo list</a></li>
<li>JIRA supports Kanban boards with WIP limits and all</li>
</ul>


<h2>The Kanban Board</h2>

<p>In our team, <a href="http://bilal.eltayara.net">TAYARA Bilal</a> had already experimented the approach and asked to JIRA admins to create us a custom project for our todo lists. I piggybacked on it and created my own kanban board. Here is what it looks like.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/board.png" title="Screenshot of the full JIRA board" ></p>

<h3>Mixing Project Stories And Personnal Tasks</h3>

<p>JIRA allows creating a kanban board that spans many projects ! You can simply choose multiple projects when you setup the board for the first time, or you can edit your board filter like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="n">POPIMDB</span><span class="p">,</span> <span class="n">POPABTODO</span><span class="p">)</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes it possible to see <em>all</em> of my work at a glance on the same board.</p>

<h3>Work In Progress Limit</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/wip.png" title="Zoom on the wip constraints of the JIRA column" ></p>

<p>JIRA allows WIP limits, warning me with a red background when I am multitasking or when I am getting late on my tasks</p>

<h3>Color Conventions</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/color-cards.png" title="Different colors of JIRA cards" ></p>

<p>JIRA makes it possible to assign different colors to cards, for example</p>

<ul>
<li>Red for tasks that are due soon</li>
<li>orange for cards that are due some time</li>
<li>light brown for project stories</li>
<li>green for other programming tasks</li>
<li>blue for other tasks</li>
</ul>


<h3>Swimlanes</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/swimlanes.png" title="Closup on a JIRA swimlane" ></p>

<p>JIRA has swimlanes, separating project from personal tasks</p>

<h3>Reports</h3>

<p>An extra bonus with JIRA Kanban board is that they have reports ! Here is my cumulative flow diagram for my first week of usage :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/cumulative-flow.png" title="A screenshot of the JIRA cumulative flow diagram" ></p>

<h3>Configuration</h3>

<p>Here is the JQL query I used to configure it this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- board filter</span>
</span><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="n">POPIMDB</span><span class="p">,</span> <span class="n">POPABTODO</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">Assignee</span> <span class="o">=</span> <span class="n">pbourgau</span> <span class="k">OR</span> <span class="n">Co</span><span class="o">-</span><span class="n">Assignees</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="p">)</span> <span class="k">OR</span> <span class="n">mentors</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="p">))</span> <span class="k">AND</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">CLOSED</span> <span class="k">OR</span> <span class="n">updated</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">1</span><span class="n">d</span><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Rank</span> <span class="k">ASC</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Swimlanes</span>
</span><span class='line'><span class="n">priority</span> <span class="o">=</span> <span class="ss">&quot;1-Very High&quot;</span> <span class="c1">-- Expedite</span>
</span><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="ss">&quot;POP IMDB&quot;</span><span class="p">)</span> <span class="k">and</span> <span class="p">(</span><span class="n">labels</span> <span class="k">not</span> <span class="k">in</span> <span class="p">(</span><span class="n">SLACK</span><span class="p">)</span> <span class="k">OR</span> <span class="n">labels</span> <span class="k">is</span> <span class="n">EMPTY</span><span class="p">)</span> <span class="c1">-- IMDB Stories</span>
</span><span class='line'><span class="c1">-- and a blank filter for Other Tasks</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Card Colours</span>
</span><span class='line'><span class="n">duedate</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="n">d</span> <span class="k">or</span> <span class="n">priority</span> <span class="o">=</span> <span class="ss">&quot;1-Very High&quot;</span> <span class="c1">-- red</span>
</span><span class='line'><span class="n">duedate</span> <span class="k">is</span> <span class="k">not</span> <span class="n">EMPTY</span> <span class="c1">-- orange</span>
</span><span class='line'><span class="n">labels</span> <span class="k">in</span> <span class="p">(</span><span class="n">SLACK</span><span class="p">)</span> <span class="c1">-- green</span>
</span><span class='line'><span class="k">type</span> <span class="o">=</span> <span class="n">Task</span> <span class="c1">-- blue</span>
</span><span class='line'><span class="c1">-- and an empty filter for light brown</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The End Result</h2>

<p>By setting a WIP limit of 3 on the &ldquo;In Progress&rdquo; column, the following naturally happened :</p>

<ul>
<li>Once I have started a programming task, I now defer any other activity in the TODO column until I am finished. (HINT: If you get invited to meetings all the time, lock your agenda with &lsquo;Unbookable&rsquo; days when you start programming)</li>
<li>It actually pushed me into finishing the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> training I had started long ago.</li>
</ul>


<p>I also set a high WIP limit (around 10) on the TODO column, this way, I get a kind of warning that next time I finish a programming task, I should take some time off to prune the column.</p>

<p>The overall result is that I do lot less multitasking. I get the feeling of doing steadier, more efficient work.</p>

<p>If you are suffering from multitasking and decide to give it a try, I&rsquo;d love to read about your experience !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actors and Green Threads in Java Demystified]]></title>
    <link href="http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified/"/>
    <updated>2015-08-15T13:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified</id>
    <category term="concurrency" /><category term="java" /><category term="programming" />
    <content type="html"><![CDATA[<p>After finishing my <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>, one of the things that most surprised me, is how simple it was to prototype the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model</a> in Java using <a href="https://en.wikipedia.org/wiki/Green_threads">Green Threads</a>.</p>

<h2>The Code</h2>

<p>First, here is the base class for all actors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Actor</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">threadPool</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">mailbox</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">stoped</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Actor</span><span class="o">(</span><span class="n">ExecutorService</span> <span class="n">threadPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">threadPool</span> <span class="o">=</span> <span class="n">threadPool</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">stoped</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Runnable</span> <span class="n">nextMessage</span> <span class="o">=</span> <span class="n">mailbox</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nextMessage</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nextMessage</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">submitContinuation</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">submitContinuation</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stoped</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mailbox</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">submitContinuation</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">threadPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I simply used Runnable as the type of the messages.</p>

<p>The Actor itself is Runnable, meaning that it can be submitted to the thread pool. When executed :</p>

<ol>
<li>it tries to handle a message from the mailbox if there is one.</li>
<li>It then re-submits the actor itself</li>
</ol>


<p>This ensures that only one thread is executing messages on an actor at a given time, and it also avoids spawning new thread for every new actor.</p>

<p>As an example, here is how I used this to make an actor of an existing InProcessChatRoom class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ChatRoom</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">broadcast</span><span class="o">(</span><span class="n">Output</span> <span class="n">client</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InProcessChatRoom</span> <span class="kd">implements</span> <span class="n">ChatRoom</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatRoomActor</span> <span class="kd">extends</span> <span class="n">Actor</span> <span class="kd">implements</span> <span class="n">ChatRoom</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ChatRoom</span> <span class="n">realChatroom</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ChatRoomActor</span><span class="o">(</span><span class="n">ChatRoom</span> <span class="n">realChatroom</span><span class="o">,</span> <span class="n">ExecutorService</span> <span class="n">threadPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">threadPool</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">realChatroom</span> <span class="o">=</span> <span class="n">realChatroom</span><span class="o">;</span>
</span><span class='line'>        <span class="n">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">broadcast</span><span class="o">(</span><span class="kd">final</span> <span class="n">Output</span> <span class="n">client</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">send</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">realChatroom</span><span class="o">.</span><span class="na">broadcast</span><span class="o">(</span><span class="n">client</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ChatRoomActor is in fact some kind of proxy to use from other actors to send messages to the chat room.</p>

<p>As with any implementation of the Actors Model, the neet thing is the separation of threading and logic. That makes it so much simpler ! (You can get more detail about the complexity I am talking about by taking a look at the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>)</p>

<h2>Performances</h2>

<p>Here is a performance summary of this implementation compared to others on a &ldquo;throughput vs clients&rdquo; benchmark of the style &ldquo;Enter while others are talking&rdquo;</p>

<p><a href="https://github.com/philou/concurrency-kata"><img class="center" src="https://raw.githubusercontent.com/philou/concurrency-kata/master/enter-while-others-are-talking.png" title="Result graphs of benchmark enter while others are talking" ></a></p>

<p>Results can be disappointing compared to other implementations but the example itself is a bit misleading. The chatroom does exclusively message passing, there is not much computation to parallelize, in a different setting, the results would have been completely different.</p>

<h2>Limitations</h2>

<p>As you can see, this implementation is just a quick prototype, nothing production ready. Here are the main limitations I can think of right now :</p>

<ul>
<li>It uses <a href="https://en.wikipedia.org/wiki/Busy_waiting">Busy Waiting</a> for the next message, meaning that it consumes unnecessary resources, and that more important messages to other Actors might be delayed</li>
<li>Usually, actor messages are selected on their type rather than on their order of arrival, this is not the case here</li>
<li>The usage of the Runnable interface as base message type, though handy, opens the door to inter-thread calls that might violate the model altogether</li>
<li>There is absolutely no support of out of process actors until the messages are Serializable</li>
</ul>


<h2>Going Further</h2>

<p>I started this <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> as a training material about concurrency for colleagues at <a href="http://www.murex.com">work</a>. In the spirit of the coding kata, it&rsquo;s a git repo you can walk, explore and experiment with.</p>

<p>So if you want to learn more about different models of concurrency, you are welcome to have a look at the How-To section in the <a href="https://github.com/philou/concurrency-kata">README</a> file.</p>

<p>On my part, although it was a lot more work than I would have guessed at the beginning, I barely scratch the surface of the subject ! I could now :</p>

<ul>
<li>extract the <a href="https://fr.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> or Actor implementation and make them more robust</li>
<li>practice and present the whole kata as a 2 hours live coding session</li>
<li>prepare a hands-on training about concurrency</li>
</ul>


<p>So, if you are willing to do any of the above you are welcome to contribute !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You don't have to ask your boss for a fast build (Lean Software Development part 6)]]></title>
    <link href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/"/>
    <updated>2015-06-03T04:43:00+00:00</updated>
    <id>http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6</id>
    <category term="agile" /><category term="lean" />
    <content type="html"><![CDATA[<p>A slow build costs money. I mean it costs <em>a whole lot of money all the time !</em></p>

<p>Spending some time to speed up the build is like an investment, you&rsquo;ll pay some money now, but then it&rsquo;s only a matter of time until you get a return on investment. Here is the trick, if you manage to get it quickly, no one will even notice that you spent some time making the build faster !</p>

<p>With a bit of maths, you can even get what <a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?ie=UTF8&amp;qid=1432909293&amp;sr=8-1&amp;keywords=reinertsen+flow">Reinertsen</a> calls a &ldquo;Decentralized Decision Rule&rdquo;, making it possible for anyone in the organization to figure out if he should spend some time on the build or not; without the need to ask the permission to anyone.</p>

<p><a href="http://fr.wikipedia.org/wiki/Balance_%28instrument%29"><img class="center" src="http://philippe.bourgau.net/imgs/2015-06-03-you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/Balance_ordinaire.jpg" title="A 2-pan balance (From Wikipedia)" ></a></p>

<h2>Our example</h2>

<p>Our team is constituted of 5 pairs, each running the build at least 10 times per day. Let&rsquo;s figure out the value of 1 minute build time speed-up</p>

<ul>
<li>The whole team would save : 1m x 5 pairs x 10 builds = 50 minutes per day</li>
<li>In a 2 weeks sprint, this would amount to around 1 day of work</li>
</ul>


<p>This means that if a pair spends half a day to get a 1 minute build speed-up, it would not change the output of the sprint, and it would in fact increase the throughput of the team for further sprints.</p>

<p>Anyone in our team that spots a potential 1 minute build time speed-up that would take less that 1 man.day to implement should do it right away, without asking the permission to anyone</p>

<h2>Other Benefits</h2>

<p>A direct benefit is that the issue will not have to be re-discussed every time someone spots a build time improvement. This will save some management time, and more build speed-up actions will eventually be undertaken.</p>

<p>The astute lean reader will have noticed that I completely ignored the second effect of fast feedback :</p>

<ul>
<li>if the build is faster</li>
<li>we will run it more often</li>
<li>we&rsquo;ll spot errors earlier</li>
<li>less errors will be submitted</li>
<li>the overall throughput will be increased even more</li>
</ul>


<p>Another hidden benefit concerns the <a href="http://en.wikipedia.org/wiki/Cost_of_delay">Cost of Delay</a> (the cost of not selling the product NOW). As Cost of Delay typically trumps the work costs, this means that any improvement to the build time will bring even greater ROI in the long term.</p>

<h2>Variations</h2>

<p><a href="http://en.wikipedia.org/wiki/Boeing_777"><img class="center" src="http://philippe.bourgau.net/imgs/2015-06-03-you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/Boeing_777.jpg" title="A Boeing 777 in flight over the mountains (From Wikipedia)" ></a></p>

<p>If your sponsor agrees, you can negotiate a longer return on investment period for your decision rule. For example, if he agreed to increase the horizon to 2 sprints, we could undertake more build time speed-up tasks. You might also prefer only to discuss really long ROI investments with him.</p>

<p>While designing the 777 Boeing used a similar decision rule to meet the required weight of the plan : any engineer could increase the production cost of 300$ provided it saved a pound of weight on the plane. This fixed issues they previously had with department weight budgets and escalation.</p>

<p>Finally, it would be great if we had the same rule for technical debt ! Imagine that you knew both the costs of fixing and not fixing your technical debt, you could then decided whether it makes sense to work on the debt right now or not. But that&rsquo;s for a later experiment.</p>

<p>This was part 6 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">Lean Software Development Series</a>. Part 5 was <a href="http://philippe.bourgau.net/what-optimization-should-we-work-on-lean-software-development-part-5/">What optimization should we work on ?</a>, Part 7 will be <a href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/">A Plan for Technical Debt</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Agile Change Management Viral Hack]]></title>
    <link href="http://philippe.bourgau.net/the-agile-change-management-viral-hack/"/>
    <updated>2015-05-23T05:51:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-agile-change-management-viral-hack</id>
    <category term="Agile" /><category term="Coaching" /><category term="Testing" />
    <content type="html"><![CDATA[<p>We just discovered a hack to spread agile (<a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a> by the way) through an organization. It works provided :</p>

<ul>
<li>There is a BDD testing expert in your team</li>
<li>Your team is using the work of another software team from your company</li>
</ul>


<p>If this team does not use agile practices, they are likely to regularly create regressions or to be late at providing new versions.</p>

<p>Use your client role in the relation, and propose your help ! Spend some time with them to help them put automated customer tests in place. Be genuinely nice with them, show example, be available and, obviously, bring improvement. With some chance, they might soon be asking for more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="n">there</span> <span class="n">are</span> <span class="n">too</span> <span class="n">many</span> <span class="n">bugs</span>
</span><span class='line'><span class="no">When</span> <span class="n">you</span> <span class="n">can</span> <span class="n">help</span>
</span><span class='line'><span class="no">Then</span> <span class="no">DO</span> <span class="no">IT</span> <span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Programmers Have Todo Lists]]></title>
    <link href="http://philippe.bourgau.net/real-programmers-have-todo-lists/"/>
    <updated>2015-04-20T05:42:00+00:00</updated>
    <id>http://philippe.bourgau.net/real-programmers-have-todo-lists</id>
    <category term="programming" />
    <content type="html"><![CDATA[<p>Productive programmers maintain a todo list. No Exception.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-20-real-programmers-have-todo-lists/programmer.jpg" title="A programmer concentrating on his code" ></p>

<h2>Why is it so important</h2>

<p>As programmers, here is the typical internal discussion we have all day long :</p>

<blockquote><p>- Why the hell am I doing this again ?<br>
&hellip; hard thinking &hellip;<br>
- Yes ! I remember now :<br>
- Encapsulate this field<br>
- In order to move it to another class<br>
- In order to move this other function there too<br>
- In order to be able to remove that other static variable<br>
- In order to refactor the login module<br>
- In order to remove the dependency between the custom search query generator and the login module<br>
- In order to refactor the query generator<br>
- In order to be able to optimize it<br>
- In order to speed up the whole website !</p></blockquote>

<p>Phew, now that&rsquo;s a list ! A 9 frame stack, all in our heads, and that&rsquo;s only a simple example. Knowing that us humans usually have around 7 &lsquo;registers&rsquo; in our brains, this makes a lot of clutter to remember.</p>

<p>Maintaining all this in a todo list frees us some brainpower !</p>

<h2>What happens when you use a todo list</h2>

<p>Quite a lot in fact :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-20-real-programmers-have-todo-lists/check.gif" title="A tick in a check box" ></p>

<ul>
<li>It&rsquo;s satisfying to check something as done !</li>
<li>Our programming gets better, because we can fully concentrate on it</li>
<li>We have a clear idea about what&rsquo;s done, what&rsquo;s still to be done, and why we are doing it</li>
<li>We avoid getting lost in things that don&rsquo;t really need to be done</li>
<li>We can make better choices about what to do, what to postpone, and what not to do</li>
<li>We can make more accurate estimates about the time it will take to finish the job</li>
</ul>


<p>In the end, all this makes you feel less stressed and more productive !</p>

<h2>How to do it</h2>

<p>There are many ways to maintain a todo list. Which to choose is not as important as having one. Here are my 2 design principles for a todo list system :</p>

<ul>
<li>It goes in finer details than a typical bug tracking software</li>
<li>It should help you to concentrate on the few items you can do in the coming hours</li>
</ul>


<p>For example, I am now using a simple TODAY &hellip; TOMORROW &hellip; LATER &hellip; scheme. I tend to avoid deep hierarchies as it gets in the way of my second principle. I like to keep DONE items visible to keep track of what I did for up to 1 day.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-20-real-programmers-have-todo-lists/org-mode.jpg" title="A screen shot of my org-mode todo list" ></p>

<p>Here is a list of tools you can use to set up a todo list :</p>

<ul>
<li>Any text editor using a simple format convention will do</li>
<li><a href="http://www.dropbox.com">Dropbox</a> or any other synchronization tool can be helpful to access it from different places</li>
<li><a href="http://orgmode.org/">Org Mode</a> of <a href="https://www.gnu.org/software/emacs/">Emacs</a> has built-in support for todo lists. It&rsquo;s a simple text file, but with color highlighting and shortcuts</li>
<li><a href="https://keep.google.com/">Google Keep</a> might do just fine for you</li>
<li><a href="https://docs.google.com">Google Docs</a> can also be useful, especially if you need to share your todo list with others (when pair programming for example)</li>
<li><a href="https://trello.com">Trello</a> is also a good one, it can even be used as a personal kanban board</li>
<li>Any other todo list tool that suits you !</li>
</ul>


<p>If you are not already using a todo list, start now and become more productive ! No excuse !</p>

<p>EDIT 2015-08-18 : <a href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">I am now using Personnal Kanban instead of TODO lists</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trellospectives : Remote Retrospectives with Trello]]></title>
    <link href="http://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello/"/>
    <updated>2015-04-05T06:18:00+00:00</updated>
    <id>http://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello</id>
    <category term="agile" /><category term="remote" />
    <content type="html"><![CDATA[<p>As a distributed team working from Paris and Beirut, after <a href="http://philippe.bourgau.net/from-zero-to-pair-programming-hero/">pair programming</a>, it was time for our retrospectives to get remote !</p>

<p><a href="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/setup.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/setup-small.jpg" title="A remote retrospective meeting with Trello setup" ></a></p>

<h2>Initial setup</h2>

<p>At first we were using the visio conference system. The retrospective facilitator would connect with the remote participants through instant chat and forward theirs post-its. We also used an extra webcam connected to the laptop in order to show the whiteboard in the other room.</p>

<h4>Pros</h4>

<ul>
<li>Anyone can do it now</li>
<li>Kind of works</li>
</ul>


<h4>Cons</h4>

<ul>
<li>We often used to loose 5 minutes setting all the infrastructure up</li>
<li>The remote room cannot see the board clearly through the webcam</li>
<li>The animator has to spend his time forwarding the other room&rsquo;s points</li>
<li>There is a &lsquo;master&rsquo; and a &lsquo;slave&rsquo; room</li>
</ul>


<h2>Sensei Tool</h2>

<p>When Mohamad joined the team in Beirut, we thought that this was not going to scale &hellip; We decided to try something else. With the availability of the new conferencing system, we had the idea to use a web tool to run the retro. We found and tried <a href="http://senseitool.com/">senseitool.com</a>. After creating accounts for every member of the team and scheduling a retrospective through the tool, we could all equally participate using our smartphones. The retrospective follows a typical workflow that is fine for teams new to the practice.</p>

<h4>Pros</h4>

<ul>
<li>Even easier to setup</li>
<li>Works fine</li>
</ul>


<h4>Cons</h4>

<ul>
<li>The website was a bit slow</li>
<li>The retrospective was too guided for an experienced team, we did not get as good outputs as we used to</li>
<li>Everyone could participate as easily</li>
</ul>


<h2>Trello</h2>

<p><a href="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/boat.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/boat-small.jpg" title="The boat activity on Trello" ></a></p>

<p><a href="https://www.google.fr/search?sourceid=chrome-psyapi2&amp;ion=1&amp;espv=2&amp;ie=UTF-8&amp;q=remote%20retrospective">Asking Google</a>, we discovered that some teams were having success using <a href="https://trello.com/">Trello</a> for their remote retrospectives. We decided to give it a try. Ahmad from Beirut got to work on our first retrospective with it. He had to prepare it beforehand (as we always have been doing). In practice :</p>

<ul>
<li>Ahmad created an organization for our team</li>
<li>We all registered to Trello and joined the organization (we like joining (smile))</li>
<li>Ahmad created a custom board for each activity</li>
<li>During the meeting, we used the video conferencing system and the instant chat to have both visio and screen sharing</li>
<li>The animator used a laptop to manage the Trello boards</li>
<li>Everyone of us could add post-its through his smartphone app</li>
</ul>


<h4>Pros</h4>

<ul>
<li>The setup is easy</li>
<li>The retrospective worked well and delivered interesting output</li>
<li>We actually all see the board</li>
<li>The smartphone app works well</li>
<li>It is possible to vote directly through Trello</li>
<li>Everyone could participate as easily</li>
<li>We can classify post-its with labels</li>
<li>We can insert pictures and photos</li>
<li>There are a lot of chrome extensions to Trello (<a href="https://chrome.google.com/webstore/detail/vertical-lists-for-trello/aldklnbenbdgfgfbflalmlddkkndgnlc?utm_source=chrome-app-launcher-info-dialog">Vertical Lists for Trello</a>), <a href="https://chrome.google.com/webstore/detail/card-color-titles-for-tre/hpmobkglehhleflhaefmfajhbdnjmgim?utm_source=chrome-app-launcher-info-dialog">Card Color Titles for Trello</a></li>
</ul>


<h4>Cons</h4>

<ul>
<li>There is nothing to &lsquo;group&rsquo; post its together</li>
<li>We need to prepare custom boards for every activity</li>
<li>We would need to pay for the gold version with custom backgrounds and stickers</li>
</ul>


<h2>Conclusion</h2>

<p><a href="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/roti.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/roti-small.jpg" title="The Return On Time Invested activity on Trello" ></a></p>

<p>While missing a few features that would make it awesome, Trello is the best tool we found for remote retrospective, and is better than our initial physical setup. We&rsquo;re continuing to use it, and we now have to figure out</p>

<ul>
<li>If we could find a way to speed up the meeting preparation</li>
<li>How to handle &lsquo;graph oriented&rsquo; activities such as the &lsquo;5 whys&rsquo;</li>
</ul>


<p><a href="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/5-whys.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/5-whys-small.jpg" title="The 5 why activity on a physical whiteboard" ></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Optimization Should We Work On (Lean Software Development Part 5)]]></title>
    <link href="http://philippe.bourgau.net/what-optimization-should-we-work-on-lean-software-development-part-5/"/>
    <updated>2015-03-26T20:30:00+00:00</updated>
    <id>http://philippe.bourgau.net/what-optimization-should-we-work-on-lean-software-development-part-5</id>
    <category term="agile" /><category term="lean" /><category term="performance" /><category term="xp" />
    <content type="html"><![CDATA[<p>At work, we are building a risk aggregation system. As it&rsquo;s dealing with a large bunch of numbers, it&rsquo;s a huge heap of optimizations. Once that its most standard features set is supported, our job mostly consists of making it faster.</p>

<p>That&rsquo;s were we are now doing.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-03-26-what-optimization-should-we-work-on-lean-software-development-part-5/turtle.jpg" title="A turtle with a rocket on the back" ></p>

<h1>How do we choose which optimization to work on ?</h1>

<p>The system still being young, we have a wide range of options to optimize it. To name just a few : caches, better algorithms, better low level hardware usage &hellip;</p>

<p>It turns out that we can use the speedup factor as a substitute for business value and use known techniques to help us to make the best decisions.</p>

<h2>Let&rsquo;s walk through an example</h2>

<h3>I. List the optimizations you are thinking of</h3>

<p>Let&rsquo;s suppose we are thinking of the following 3 optimizations for our engine</p>

<ul>
<li>Create better data structures to speed up the reconciliation algorithm</li>
<li>Optimize the reconciliation algorithm itself to reduce CPU cache misses</li>
<li>Minimize boxing and unboxing</li>
</ul>


<h3>II. Poker estimate the story points and speedup</h3>

<p>Armed with these stories, we can poker estimate them, by story points and by expected speedup.
As a substitute for WSJF, we will then be able to compute the speedup rate per story point.
We will then just have to work on the stories with the highest speedup rate first.</p>

<table>
<thead>
<tr>
<th>Title                   </th>
<th> Story Points  </th>
<th> /10    </th>
<th> /2     </th>
<th> -10%    </th>
<th> ~  </th>
<th> +10%   </th>
<th> x2      </th>
<th> x10     </th>
<th> Expected Speedup ratio* </th>
<th> Speedup rate / story point**</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data Structures     </td>
<td> 13        </td>
<td>        </td>
<td>        </td>
<td>             </td>
<td>        </td>
<td> 4 votes</td>
<td> 5 votes </td>
<td>         </td>
<td> x 1.533                 </td>
<td> x 1.033</td>
</tr>
<tr>
<td>Algorithm           </td>
<td> 13        </td>
<td>    </td>
<td> 1 vote </td>
<td> 1 vote      </td>
<td> 2 votes</td>
<td> 1 vote </td>
<td> 2 votes </td>
<td> 2 votes </td>
<td> x 1.799                 </td>
<td> x 1.046</td>
</tr>
<tr>
<td>Boxing                  </td>
<td> 8     </td>
<td>    </td>
<td>        </td>
<td>             </td>
<td>        </td>
<td> 9 votes</td>
<td>         </td>
<td>         </td>
<td> x 1.1                   </td>
<td> x 1.012</td>
</tr>
</tbody>
</table>


<p><sup><em>* Expected speedup ratio is the logarithmic average of the voted speedups</em></sup><br>
<sup><em>** Speedup rate is &ldquo;speedup<sup>(1/ story points)</sup>&rdquo;</em></sup></p>

<p>So based on speedup rate, here is the order in which we should perform the stories :</p>

<ol>
<li>Algorithm</li>
<li>Data Structures</li>
<li>Boxing</li>
</ol>


<h3>III. And what about the risks ?</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-03-26-what-optimization-should-we-work-on-lean-software-development-part-5/danger.jpg" title="A danger zone panel" ></p>

<p>This poker estimation tells us something else &hellip;</p>

<blockquote><p>We don&rsquo;t have a clue about the speedup we will get by trying to optimize the algorithm !</p></blockquote>

<p>The votes range from /2 to x10 ! This is the perfect situation for an XP spike.</p>

<table>
<thead>
<tr>
<th>Title </th>
<th> Story points </th>
<th> Expected Speedup rate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Algorithm spike : measure out of context CPU cache optimization speedup </td>
<td> 2 </td>
<td>   ?</td>
</tr>
</tbody>
</table>


<br>


<p>In order to compute the expected speedup rate, let&rsquo;s suppose that they are 2 futures, one where we get a high speedup and another where we get a low one.</p>

<p>They are computed by splitting the votes in 2 :</p>

<ul>
<li><em>low_speedup = 0.846</em></li>
<li><em>high_speedup = 3.827</em></li>
</ul>


<h4>If the spike succeeds</h4>

<p>We&rsquo;ll first work on the spike, and then on the algorithm story. In the end, we would get the speedup of the algorithm optimization.</p>

<ul>
<li><em>spike_high_speedup = high_speedup = 3.827</em></li>
</ul>


<h4>If the spike fails</h4>

<p>We&rsquo;ll also start by working on the spike. Afterwards, instead of the algorithm story, we&rsquo;ll tackle another optimization stories, yielding our average speedup rate for the duration of the algorithm story. The average speedup rate can be obtained from historical benchmark data, or by averaging the speedup rate of the other stories.</p>

<ul>
<li><em>average_speedup_rate = (1.033 * 1.011)<sup>&frac12;</sup> = 1.022</em></li>
<li><em>spike_low_speedup = average_speedup_rate<sup>story_points</sup> = 1.02213 = 1.326</em></li>
</ul>


<h4>Spike speedup rate</h4>

<p>We can now compute the average expected speedup rate for the full period &lsquo;spike &amp; algorithm&rsquo; stories. From this we will be able to get the speedup rate and finally, to prioritize this spike against the other stories in our backlog.</p>

<ul>
<li><em>spike_speedup = (spike_low_speedup * spike_high_speedup)<sup>&frac12;</sup> = 2.253</em></li>
<li><em>spike_speedup_rate = spike_speedup<sup>1/(spike_story_points + algorithm_story_points)</sup> = 2.253<sup>1/(2 + 13)</sup> = 1.056</em></li>
</ul>


<h3>IV. Putting it all together</h3>

<p>Here are all the speedup rate for the different stories.</p>

<table>
<thead>
<tr>
<th>Title </th>
<th> Speedup rate / story point</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data Structure  </td>
<td> x 1.033</td>
</tr>
<tr>
<td>Algorithm           </td>
<td> x 1.046</td>
</tr>
<tr>
<td>Boxing                  </td>
<td> x 1.012</td>
</tr>
<tr>
<td>Algorithm spike         </td>
<td> x 1.056</td>
</tr>
</tbody>
</table>


<br>


<p>Finally, here is the optimal order through which we should perform the stories :</p>

<ul>
<li>Algorithm spike</li>
<li>Algorithm (only if the spike proved it would work)</li>
<li>Data Structures</li>
<li>Boxing</li>
</ul>


<h2>Summary</h2>

<p>The math are not that complex, and a simple formula can be written to compute the spike speedup rate :</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-03-26-what-optimization-should-we-work-on-lean-software-development-part-5/poc_speedup_rate.png" title="Formula for a spike speedup rate" ></p>

<p>I think most experienced engineers would have come to the same conclusion by gut feeling &hellip;</p>

<p>Nevertheless I believe that systematically applying the such method when prioritizing optimizations can lead to a greater speedup rate than the competition in the long run. This is a perfect example where taking measured risks can payoff !</p>

<p>This was part 5 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">Lean Software Development Series</a>. Part 4 was <a href="http://philippe.bourgau.net/measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/">Measure the business value of your spikes and take high payoff risks</a>, Part 5 will be <a href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">You don&rsquo;t have to ask your boss for a fast build</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress with Vagrant and rbenv]]></title>
    <link href="http://philippe.bourgau.net/setting-up-octopress-with-vagrant-and-rbenv/"/>
    <updated>2015-03-20T05:33:00+00:00</updated>
    <id>http://philippe.bourgau.net/setting-up-octopress-with-vagrant-and-rbenv</id>
    <category term="octopress" /><category term="ruby" /><category term="vagrant" />
    <content type="html"><![CDATA[<p>I recently got hands on an abandonned laptop that was better than the one I was currently using for my personnal hackings, so I decided to switch to this one. I felt this was the time to learn Vagrant and save me some time later on. I settled on creating a <a href="https://www.vagrantup.com/">Vagrant</a> environment for this <a href="http://octopress.org/">Octopress</a> blogging. That proved a lot longer than I thought it would.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-03-20-setting-up-octopress-with-vagrant-and-rbenv/vagrant-octopress.png" title="Vagrant logo + Octopress logo" ></p>

<p>If you want to jump to the solution, just have a look at this <a href="https://github.com/philou/philou.github.com/commit/67b17f7702c213ff40313fc7bd0cbfa8a6e8e29b">git change</a>. Here is the slightly longer version.</p>

<ul>
<li><p>Add a Vagrantfile and setup a VM. There are explainations about how to do this all over the web, that was easy.</p></li>
<li><p>Provision your VM. That proved a lot more complex. There are a lot of examples using variants of <a href="https://www.chef.io/">Chef</a>, but the steep learning curve for Chef seemed unneccessarily complex compared to what I wanted to do. Eventually, I figured it out using simple shell provisioning.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">    echo &quot;Updating package definitions&quot;</span>
</span><span class='line'><span class="sh">    sudo apt-get update</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    echo &quot;Installing git and build tools&quot;</span>
</span><span class='line'><span class="sh">    sudo apt-get -y install git autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">privileged</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">    git config --global user.name &quot;john.doe&quot;</span>
</span><span class='line'><span class="sh">    git config --global user.email &quot;john.doe@mail.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    if [ ! -d &quot;$HOME/.rbenv&quot; ]; then</span>
</span><span class='line'><span class="sh">      echo &quot;Installing rbenv and ruby-build&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      git clone https://github.com/sstephenson/rbenv.git ~/.rbenv</span>
</span><span class='line'><span class="sh">      git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      echo &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc</span>
</span><span class='line'><span class="sh">      echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; ~/.bashrc</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    else</span>
</span><span class='line'><span class="sh">      echo &quot;Updating rbenv and ruby-build&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      cd ~/.rbenv</span>
</span><span class='line'><span class="sh">      git pull</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      cd ~/.rbenv/plugins/ruby-build</span>
</span><span class='line'><span class="sh">      git pull</span>
</span><span class='line'><span class="sh">    fi</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;</span>
</span><span class='line'><span class="sh">    eval &quot;$(rbenv init -)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    if [ ! -d &quot;$HOME/.rbenv/versions/2.2.0&quot; ]; then</span>
</span><span class='line'><span class="sh">      echo &quot;Installing ruby&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      rbenv install 2.2.0</span>
</span><span class='line'><span class="sh">      rbenv global 2.2.0</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      gem update --system</span>
</span><span class='line'><span class="sh">      gem update</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      gem install bundler</span>
</span><span class='line'><span class="sh">      bundle config path vendor/bundle</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      rbenv rehash</span>
</span><span class='line'><span class="sh">    fi</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    cd /vagrant</span>
</span><span class='line'><span class="sh">    bundle install</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    if [ ! -d &quot;/vagrant/_deploy&quot; ]; then</span>
</span><span class='line'><span class="sh">      bundle exec rake setup_github_pages[&quot;git@github.com:philou/philou.github.com&quot;]</span>
</span><span class='line'><span class="sh">      git checkout . # Revert github deploy url to my domain</span>
</span><span class='line'><span class="sh">      cd _deploy</span>
</span><span class='line'><span class="sh">      git pull origin master # pull to avoid non fast forward push</span>
</span><span class='line'><span class="sh">      cd ..</span>
</span><span class='line'><span class="sh">    fi</span>
</span><span class='line'><span class="no">  SHELL</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Setup port forwarding. That should have been simple &hellip; after forwarding port 4000 to 4000, I could still not manage to access my blog preview from the host machine. After searching throughout the web for a long time, I eventually fixed it with by adding <code>--host 0.0.0.0</code> to the rackup command line in <a href="https://github.com/philou/philou.github.com/commit/67b17f7702c213ff40313fc7bd0cbfa8a6e8e29b/Rakefile">Octopress Rackfile</a></p></li>
<li><p>Setup ssh forwarding. In order to be able to deploy to github pages with my local ssh keys, I added the following to my Vagrantfile.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># The path to the private key to use to SSH into the guest machine. By</span>
</span><span class='line'>  <span class="c1"># default this is the insecure private key that ships with Vagrant, since</span>
</span><span class='line'>  <span class="c1"># that is what public boxes use. If you make your own custom box with a</span>
</span><span class='line'>  <span class="c1"># custom SSH key, this should point to that private key.</span>
</span><span class='line'>  <span class="c1"># You can also specify multiple private keys by setting this to be an array.</span>
</span><span class='line'>  <span class="c1"># This is useful, for example, if you use the default private key to</span>
</span><span class='line'>  <span class="c1"># bootstrap the machine, but replace it with perhaps a more secure key later.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">private_key_path</span> <span class="o">=</span> <span class="s2">&quot;~/.ssh/id_rsa&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#  If true, agent forwarding over SSH connections is enabled. Defaults to false.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">forward_agent</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Fix virtual box synced folder. When I tried to pimp my favicon up, changing the png in the host machine did not update it on the guest ! I lost almost 3 hours figuring this out &hellip; searching google, I eventually found that <a href="http://docs.vagrantup.com/v2/synced-folders/virtualbox.html">Virtual Box synced folders can have issues</a>, and that <a href="http://stackoverflow.com/questions/18933547/vagrant-virtualbox-shared-folder-out-of-sync-when-there-are-many-file-related">installing the guest additions is recommended</a>. For this, just enter the following in the command line from your project&rsquo;s working dir :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vagrant</span> <span class="n">plugin</span> <span class="n">install</span> <span class="n">vagrant</span><span class="o">-</span><span class="n">vbguest</span>
</span><span class='line'><span class="n">vagrant</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll tell you if this does not do the trick.</p>

<p>I admit it was a lot longer than I expected it to be, but at least now it&rsquo;s repeatable !</p>

<p><a href="http://docker.io"><img class="center" src="http://philippe.bourgau.net/imgs/2015-03-20-setting-up-octopress-with-vagrant-and-rbenv/docker.png" title="The Docker logo" ></a></p>

<p>Next steps will be to use <a href="http://docker.io">Docker</a> providers and Dockerfile to factorize provisioning and speedup up VM startup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measure The Business Value of Your Spikes and Take High Payoff Risks (Lean Software Development Part 4)]]></title>
    <link href="http://philippe.bourgau.net/measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/"/>
    <updated>2015-01-31T15:13:00+00:00</updated>
    <id>http://philippe.bourgau.net/measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4</id>
    <category term="agile" /><category term="lean" /><category term="xp" />
    <content type="html"><![CDATA[<p>Lately <a href="http://www.murex.com">at work</a>, we&rsquo;ve unexpectedly been asked by other teams if they could use our product for something that we had not forseen. As we are not sure whether we&rsquo;ll be able to tune our product to their needs, we are thinking about doing a short study to know the answer. This looks like a great opportunity to try out <a href="http://en.wikipedia.org/wiki/Cost_of_delay">Cost of Delay</a> analysis about uncertain tasks.</p>

<p>Unfortunately, I cannot write the details of what we are creating at work in this blog, so let&rsquo;s assume that we are building a Todo List Software.</p>

<p>We have been targeting the enterprise market. Lately, we&rsquo;ve seen some interest from individuals planning to use our todo list system for themselves at home.</p>

<p>For individuals, the system would need to be highly available and live 24/7 over the internet, latency will also be critical to retain customers, but the product could get a market share with a basic feature set.</p>

<p>On the other side, enterprise customers need advanced features, absolute data safety, but they can cope with nightly restarts of the server.</p>

<p>In order to know if we can make our todo list system available and fast enough for the individuals market, we are planning to conduct a pre-study, so as not to waste time on an unreachable goal. In <a href="http://www.extremeprogramming.org/">XP</a> terms, this is a <a href="http://www.extremeprogramming.org/rules/spike.html">spike</a>, and it&rsquo;s a bunch of experiments rather than a theoretical study.</p>

<p><a href="http://philippe.bourgau.net/imgs/2015-01-31-measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/study.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-31-measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/study-petit.jpg" title="Photo of someone studying behind piles of books" ></a></p>

<h2>When should we prioritize this spike ?</h2>

<p>If we are using the <a href="http://www.scaledagileframework.com/wsjf/">Weighted Shortest Job First</a> metric to prioritize our work, we need to estimate the cost of delay of a task to determine its priority. Hereafter I will explain how we could determine the value of this spike.</p>

<h2>Computing the cost of delay</h2>

<p>The strategy to compute the cost of delay for such a risk mitigation task is to compute the difference in cost of delays with or without doing it.</p>

<h3>1. The products, the features, the MVP and the estimates</h3>

<p>As I explained in <a href="http://philippe.bourgau.net/how-to-measure-your-speed-with-your-business-value-lean-software-development-part-3/">a previous post</a>, for usual features, cost of delay is equivalent to it&rsquo;s value. Along with our gross estimates, here are the relative values that our product owner gave us for the different products we are envisioning.</p>

<table>
<thead>
<tr>
<th>Feature                   </th>
<th> $ Enterprise </th>
<th> $ Individuals </th>
<th> Estimated work</th>
</tr>
</thead>
<tbody>
<tr>
<td>Robustness            </td>
<td> 20*          </td>
<td> 20*           </td>
<td> 2</td>
</tr>
<tr>
<td>Availability              </td>
<td> 0            </td>
<td> 40*           </td>
<td> 2</td>
</tr>
<tr>
<td>Latency                   </td>
<td> 0            </td>
<td> 40*           </td>
<td> 1</td>
</tr>
<tr>
<td>Durability            </td>
<td> 40*          </td>
<td> 13            </td>
<td> 2</td>
</tr>
<tr>
<td>Multi user lists          </td>
<td> 20*          </td>
<td> 8             </td>
<td> 2</td>
</tr>
<tr>
<td>Labels                    </td>
<td> 20           </td>
<td> 13            </td>
<td> 2</td>
</tr>
<tr>
<td>Custom report tool        </td>
<td> 13           </td>
<td> 0             </td>
<td> 3</td>
</tr>
<tr>
<td>TOTAL Cost Of Delay of v1 </td>
<td> 80           </td>
<td> 100           </td>
<td></td>
</tr>
</tbody>
</table>


<p><small>Stared (*) features are required for the first version of the product. Features with a value of 0 are not required for the product. Eventually, unstared features with a non null business value would be great for a second release.</small><br></p>

<p>It seems that the individuals market is a greater opportunity, so it&rsquo;s worth thinking about it. Unfortunately for the moment, we really don&rsquo;t know if we&rsquo;ll manage to get the high availability that is required for such a product.</p>

<p>The availability spike we are envisioning would take 1 unit of time.</p>

<h3>2. Computing the cost of delay of this spike</h3>

<p>The cost of delay of a task involving some uncertainty is the probabilistic expected value of its cost of delay. We estimate that we have 50% of chances of matching the availability required by individuals. It means that CoD of the spike = 50% * CoD if we match the latency + 50% CoD if we don&rsquo;t match the availability.</p>

<h4>2.a. The Cost of Delay if we get the availability</h4>

<p>Let&rsquo;s consider the future in which we&rsquo;ll manage to reduce the latency.
The cost of delay of a spike task is the difference in Cost with and without doing the spike, per relevent months.</p>

<h5>2.a.i. The cost if we don&rsquo;t do the spike</h5>

<p>Unfortunately, at this point in this future, we don&rsquo;t yet know that we&rsquo;ll manage to get to the availability.</p>

<table>
<thead>
<tr>
<th>Feature                   </th>
<th> $ Enterprise </th>
<th> $ Individuals </th>
<th> $ Expected   </th>
<th> Estimated work </th>
<th> WSJF</th>
</tr>
</thead>
<tbody>
<tr>
<td>Latency                   </td>
<td> 0            </td>
<td> 40*           </td>
<td> 20           </td>
<td> 1              </td>
<td> 20</td>
</tr>
<tr>
<td>Durability            </td>
<td> 40*          </td>
<td> 13            </td>
<td> 26           </td>
<td> 2              </td>
<td> 13</td>
</tr>
<tr>
<td>Robustness            </td>
<td> 20*          </td>
<td> 20*           </td>
<td> 20           </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Availability              </td>
<td> 0            </td>
<td> 40*           </td>
<td> 20           </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Labels                    </td>
<td> 20           </td>
<td> 13            </td>
<td> 17           </td>
<td> 2              </td>
<td> 9</td>
</tr>
<tr>
<td>Multi user lists          </td>
<td> 20*          </td>
<td> 8             </td>
<td> 14           </td>
<td> 2              </td>
<td> 7</td>
</tr>
<tr>
<td>Custom report tool        </td>
<td> 13           </td>
<td> 0             </td>
<td> 8            </td>
<td> 3              </td>
<td> 3</td>
</tr>
</tbody>
</table>


<br>


<p>We&rsquo;ll resort to WSJF to prioritize our work. Here is what we&rsquo;ll be able to ship :</p>

<table>
<thead>
<tr>
<th>Product </th>
<th> Delay </th>
<th> CoD </th>
<th> Cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>Individuals                     </td>
<td> 7    </td>
<td> 100   </td>
<td>  700</td>
</tr>
<tr>
<td>Individuals Durability          </td>
<td> 7    </td>
<td> 13    </td>
<td>   91</td>
</tr>
<tr>
<td>Individuals Labels              </td>
<td> 9    </td>
<td> 13    </td>
<td>  117</td>
</tr>
<tr>
<td>Enterprise                      </td>
<td> 11   </td>
<td> 80    </td>
<td>  880</td>
</tr>
<tr>
<td>Enterprise labels               </td>
<td> 11   </td>
<td> 20    </td>
<td>  220</td>
</tr>
<tr>
<td>Individuals Multi user lists    </td>
<td> 13   </td>
<td> 8     </td>
<td>  104</td>
</tr>
<tr>
<td>Enterprise Custom reports       </td>
<td> 16   </td>
<td> 13    </td>
<td>  208</td>
</tr>
<tr>
<td>                                </td>
<td>      </td>
<td>       </td>
<td> 2320</td>
</tr>
</tbody>
</table>


<br>


<h5>2.a.ii. The cost if we do the spike</h5>

<p>In this case, we would start by the spike, and it would tell us that we can reach the individuals availability and so that we should go for this feature first. Here will be our planning</p>

<table>
<thead>
<tr>
<th>Feature                   </th>
<th> $ Enterprise </th>
<th> $ Individuals </th>
<th> Estimated work </th>
<th> Enterprise WSJF </th>
<th> Individuals WSJF</th>
</tr>
</thead>
<tbody>
<tr>
<td>Feasibility spike         </td>
<td>              </td>
<td>               </td>
<td> 1              </td>
<td>                 </td>
<td></td>
</tr>
<tr>
<td>Latency                   </td>
<td> 0            </td>
<td> 40*           </td>
<td> 1              </td>
<td>                 </td>
<td> 40</td>
</tr>
<tr>
<td>Availability              </td>
<td> 0            </td>
<td> 40*           </td>
<td> 2              </td>
<td>                 </td>
<td> 20</td>
</tr>
<tr>
<td>Robustness            </td>
<td> 20*          </td>
<td> 20*           </td>
<td> 2              </td>
<td> 10              </td>
<td> 10</td>
</tr>
<tr>
<td>Durability            </td>
<td> 40*          </td>
<td> 13            </td>
<td> 2              </td>
<td> 20              </td>
<td> 7</td>
</tr>
<tr>
<td>Multi user lists          </td>
<td> 20*          </td>
<td> 8             </td>
<td> 2              </td>
<td> 10              </td>
<td> 4</td>
</tr>
<tr>
<td>Labels                    </td>
<td> 20           </td>
<td> 13            </td>
<td> 2              </td>
<td> 10              </td>
<td> 7</td>
</tr>
<tr>
<td>Custom report tool        </td>
<td> 13           </td>
<td> 0             </td>
<td> 3              </td>
<td> 4               </td>
<td></td>
</tr>
</tbody>
</table>


<br>


<p>Here is how we will be able to ship :</p>

<table>
<thead>
<tr>
<th>Product </th>
<th> Delay </th>
<th> CoD </th>
<th> Cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>Individuals                     </td>
<td> 6    </td>
<td> 100   </td>
<td>  600</td>
</tr>
<tr>
<td>Individuals Durability          </td>
<td> 8    </td>
<td> 13    </td>
<td>  104</td>
</tr>
<tr>
<td>Individuals Multi user lists    </td>
<td> 10   </td>
<td> 8     </td>
<td>   80</td>
</tr>
<tr>
<td>Enterprise                      </td>
<td> 10   </td>
<td> 80    </td>
<td>  800</td>
</tr>
<tr>
<td>Individuals Labels              </td>
<td> 12   </td>
<td> 13    </td>
<td>  156</td>
</tr>
<tr>
<td>Enterprise Labels               </td>
<td> 12   </td>
<td> 20    </td>
<td>  240</td>
</tr>
<tr>
<td>Enterprise Custom reports       </td>
<td> 15   </td>
<td> 13    </td>
<td>  195</td>
</tr>
<tr>
<td>                                </td>
<td>      </td>
<td>       </td>
<td> 2175</td>
</tr>
</tbody>
</table>


<br>


<h5>2.a.iii. Cost of delay of the spike if we reach the availability</h5>

<p>By making the spike, we would save 2320 &ndash; 2175 = 145$</p>

<p>Without doing the spike, we would discover whether we would reach the availability when we try it, around time 7 (see 2.a.i).</p>

<p>So the cost of delay for the spike would be around 145/7 = 21 $/m</p>

<h4>2.b. The Cost of Delay if we don&rsquo;t get the availability</h4>

<p>Let&rsquo;s now consider the future in which we don&rsquo;t manage to increase the availability.</p>

<p>Using the same logic as before, let&rsquo;s now see what happens</p>

<h5>2.b.i. The cost if we don&rsquo;t do the spike</h5>

<p>Unfortunately, at this point in this future, we don&rsquo;t yet know that we&rsquo;ll not manage to get to the availability.</p>

<table>
<thead>
<tr>
<th>Feature                   </th>
<th> $ Enterprise </th>
<th> $ Individuals </th>
<th> $ Expected   </th>
<th> Estimated work </th>
<th> WSJF</th>
</tr>
</thead>
<tbody>
<tr>
<td>Latency                   </td>
<td> 0            </td>
<td> 40*           </td>
<td> 20           </td>
<td> 1              </td>
<td> 20</td>
</tr>
<tr>
<td>Durability            </td>
<td> 40*          </td>
<td> 13            </td>
<td> 26           </td>
<td> 2              </td>
<td> 13</td>
</tr>
<tr>
<td>Robustness            </td>
<td> 20*          </td>
<td> 20*           </td>
<td> 20           </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Availability              </td>
<td> 0            </td>
<td> 40*           </td>
<td> 20           </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Multi user lists          </td>
<td> 20*          </td>
<td> 8             </td>
<td> 14           </td>
<td> 2              </td>
<td> 7</td>
</tr>
<tr>
<td>Labels                    </td>
<td> 20           </td>
<td> 13            </td>
<td> 17           </td>
<td> 2              </td>
<td> 9</td>
</tr>
<tr>
<td>Custom report tool        </td>
<td> 13           </td>
<td> 0             </td>
<td> 8            </td>
<td> 3              </td>
<td> 3</td>
</tr>
</tbody>
</table>


<br>


<p>When we&rsquo;ll fail at the availability, we&rsquo;ll switch multi user lists and labels to be able to ship to enterprises as quickly as possible.
Here is what we&rsquo;ll ship.</p>

<table>
<thead>
<tr>
<th>Product </th>
<th> Delay </th>
<th> CoD </th>
<th> Cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>Enterprise                      </td>
<td>  9   </td>
<td> 80    </td>
<td>  720</td>
</tr>
<tr>
<td>Enterprise Labels               </td>
<td> 11   </td>
<td> 20    </td>
<td>  220</td>
</tr>
<tr>
<td>Enterprise Custom reports       </td>
<td> 14   </td>
<td> 13    </td>
<td>  182</td>
</tr>
<tr>
<td>                                </td>
<td>      </td>
<td>       </td>
<td> 1122</td>
</tr>
</tbody>
</table>


<br>


<h5>2.b.ii. The cost if we do the spike</h5>

<p>In this case, we would start by the spike, and it would tell us that we won&rsquo;t match the availability required for individuals and so that that there&rsquo;s no need to run after this now.</p>

<table>
<thead>
<tr>
<th>Feature            </th>
<th> $ Enterprise </th>
<th> Estimated work </th>
<th> WSJF</th>
</tr>
</thead>
<tbody>
<tr>
<td>Feasibility spike  </td>
<td>              </td>
<td> 1              </td>
<td></td>
</tr>
<tr>
<td>Durability     </td>
<td> 40*      </td>
<td> 2              </td>
<td> 13</td>
</tr>
<tr>
<td>Robustness     </td>
<td> 20*      </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Multi user lists   </td>
<td> 20*          </td>
<td> 2              </td>
<td> 7</td>
</tr>
<tr>
<td>Labels             </td>
<td> 20           </td>
<td> 2              </td>
<td> 9</td>
</tr>
<tr>
<td>Custom report tool </td>
<td> 13           </td>
<td> 3              </td>
<td> 3</td>
</tr>
</tbody>
</table>


<br>


<p>Here is how we will be able to ship :</p>

<table>
<thead>
<tr>
<th>Product </th>
<th> Delay </th>
<th> CoD </th>
<th> Cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>Enterprise                      </td>
<td>  7   </td>
<td> 80    </td>
<td>  560</td>
</tr>
<tr>
<td>Enterprise Labels               </td>
<td>  9   </td>
<td> 20    </td>
<td>  180</td>
</tr>
<tr>
<td>Enterprise Custom reports       </td>
<td> 12   </td>
<td> 13    </td>
<td>  156</td>
</tr>
<tr>
<td>                                </td>
<td>      </td>
<td>       </td>
<td>  896</td>
</tr>
</tbody>
</table>


<br>


<h5>2.b.iii. Cost of delay of the spike if we reach the availability</h5>

<p>By making the spike, we would save 1122 &ndash; 896 = 226$</p>

<p>As before, without doing the spike, we would discover whether we would get the availability when we try it, around time 7.</p>

<p>So the cost of delay for the spike is around 226/7 = 32 $/m</p>

<h4>2.c. Compute overall Cost of Delay of the Spike</h4>

<p><a href="http://philippe.bourgau.net/imgs/2015-01-31-measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/CoD.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-31-measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/CoD-petit.jpg" title="Bank notes going through an hourglass" ></a></p>

<p>Given that we estimate that there is a 50% chances of making the latency, the overall expected cost of delay is</p>

<p>50% * 21 + 50% * 32 = 26.5 $/m</p>

<p>Inject the spike in the backlog</p>

<p>With the Cost of Delay of the spike, we can compute it&rsquo;s WSJF and prioritize it against other features.</p>

<table>
<thead>
<tr>
<th>Feature </th>
<th> $ Enterprise </th>
<th> $ Individuals </th>
<th> Expected $ </th>
<th> Estimated work </th>
<th> WSJF</th>
</tr>
</thead>
<tbody>
<tr>
<td>Feasibility Spike         </td>
<td>              </td>
<td>               </td>
<td> 26.5         </td>
<td> 1              </td>
<td> 26.5</td>
</tr>
<tr>
<td>Latency                   </td>
<td> 0            </td>
<td> 40*           </td>
<td> 20           </td>
<td> 1              </td>
<td> 20</td>
</tr>
<tr>
<td>Durability            </td>
<td> 40*          </td>
<td> 13            </td>
<td> 26           </td>
<td> 2              </td>
<td> 13</td>
</tr>
<tr>
<td>Robustness            </td>
<td> 20*          </td>
<td> 20*           </td>
<td> 20           </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Availability              </td>
<td> 0            </td>
<td> 40*           </td>
<td> 20           </td>
<td> 2              </td>
<td> 10</td>
</tr>
<tr>
<td>Multi user lists          </td>
<td> 20*          </td>
<td> 8             </td>
<td> 14           </td>
<td> 2              </td>
<td> 7</td>
</tr>
<tr>
<td>Labels                    </td>
<td> 20           </td>
<td> 13            </td>
<td> 17           </td>
<td> 2              </td>
<td> 9</td>
</tr>
<tr>
<td>Custom report tool        </td>
<td> 13           </td>
<td> 0             </td>
<td> 8            </td>
<td> 3              </td>
<td> 3</td>
</tr>
</tbody>
</table>


<br>


<p>The spike comes at the top of our backlog. Which confirms our gut feeling.</p>

<h2>Conclusion</h2>

<p>Doing this long study confirmed classic rule of thumbs</p>

<ul>
<li>Don&rsquo;t develop many products at the same time</li>
<li>Do some Proof Of Concepts early before starting to work on uncertain features</li>
<li>Tackle the most risky features first</li>
</ul>


<p>By improving the inputs, we could get more quality results :</p>

<ul>
<li>If we had access to real sales or finance figures for the costs</li>
<li>If we did some sort of poker risk estimation instead of just guessing at 50% chances</li>
</ul>


<p>Obviously, the analysis itself is not perfect, but it hints to the good choices. And as <a href="http://reinertsenassociates.com/">Don Reinertsen</a> puts it, using an economical framework, the spread between people estimations goes down from <a href="http://leanmagazine.net/lean/cost-of-delay-don-reinertsen/">50:1</a> to 2:1 ! This seems a good alternative to the experience and gut feeling approach which :</p>

<ul>
<li>can trigger heated unfounded discussions</li>
<li>often means high dependence on the intuition of a single individual</li>
</ul>


<p>As everything is quantitative though, one could imagine that with other figures, we could have got to another conclusion, such as :</p>

<ul>
<li>The spike is not worth doing (it costs more than it might save)</li>
<li>The spike can wait a bit</li>
</ul>


<p><a href="http://dilbert.com/strip/2014-03-30"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-31-measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/dt140330.jpg" title="A dilbert strip about gut feeling at work" ></a></p>

<p>This was part 4 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">Lean Software Development Series</a>. Part 3 was <a href="http://philippe.bourgau.net/how-to-measure-your-speed-with-your-business-value-lean-software-development-part-3/">How to measure your speed with your business value</a>, continue on Part 5 : <a href="http://philippe.bourgau.net/what-optimization-should-we-work-on-lean-software-development-part-5/">What optimization should we work on ?</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Zero to Pair Programming Hero]]></title>
    <link href="http://philippe.bourgau.net/from-zero-to-pair-programming-hero/"/>
    <updated>2015-01-27T06:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/from-zero-to-pair-programming-hero</id>
    <category term="agile" /><category term="pair programming" /><category term="remote" />
    <content type="html"><![CDATA[<p>In my team at <a href="http://www.murex.com">Murex</a>, we&rsquo;ve been doing Pair programming 75% of our time for the past 9 months now.</p>

<p><a href="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/real-teamwork.JPG"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/real-teamwork.resized.JPG" title="Photo of all the team doing pair programming" ></a></p>

<p>Before I explain how we got there, let&rsquo;s summarize our observations :</p>

<ul>
<li>No immediate productivity drop</li>
<li>Pair programming is really tiring</li>
<li>Quality expectations throughout the team soared up</li>
<li>As a result, the quality actually increased a lot</li>
<li>But existing technical debt suddenly became incompatible with the team&rsquo;s own quality criterion. We went on to pay it back, which slowed us down for a while</li>
<li>Productivity is regularly going up as the technical debt is reduced</li>
<li>It helped us to define shared coding conventions</li>
<li>Pair programming is not for everyone. It has likely precipitated the departure of one team member</li>
<li>It certainly helped the team to <a href="http://www.hans-eric.com/2007/08/13/is-your-team-jelled/">jell</a></li>
<li>Newcomers can submit code on day 1</li>
<li>The skills of everyone increase a lot quicker than before</li>
<li><em>Bonus</em> : it improves personal skills of all the team members</li>
</ul>


<p>If you are interested in how we got there, read on, here is our story :</p>

<h2>Best Effort Code Reviews</h2>

<p>At the beginning, only experienced team members were reviewing the submitted code, and making remarks for improvement over our default review system : <a href="http://smartbear.com/product/collaborator/overview/">Code Collaborator</a>.</p>

<p>This practice revealed tedious, especially with large change lists. As it was not systematic, reviewers constantly had to remind to the reviewees to act on the remarks, which hindered empowerment.</p>

<h2>Systematic Code Reviews</h2>

<p>Observing this during a <a href="http://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives/">retrospective</a>, we decided to do add code review to our <a href="https://www.scrum.org/Resources/Scrum-Glossary/Definition-of-Done">Definition Of Done</a>. Inspired by <a href="http://producingoss.com/en/setting-tone.html#code-review">best practices in the Open Source world</a>, we created a ruby review script that automatically creates Code Collaborator reviews based on the <a href="www.perforce.com">Perforce</a> submits. Everyone was made observer of any code change, and everyone was to participate in the reviews.</p>

<p>At first, to make this practice stick, a few benevolent review champions had to comment all the submitted code; once the habit was taken, everyone participated in the reviews.</p>

<p>Code Collaborator spamming was certainly an issue, but using Code Collaborator System Tray App helped each of us to keep up to date with the remaining reviews to do.</p>

<p><em>Bonus</em> : As everyone was doing reviews, and that reviews of small changes are easier, submits became smaller.</p>

<p><a href="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/code-collaborator.png"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/code-collaborator.resized.png" title="A screenshot of our code collaborator installation" ></a></p>

<p>This was certainly an improvement, but it remained time consuming. We believed we could do better.</p>

<h2>Pair Programming</h2>

<p>After 1 or 2 months of systematic code reviews, during a retrospective (again) nearly all the team members decided to give <a href="http://blogs.sourceallies.com/2011/03/pair-programming-101/">pair programming</a> a try.</p>

<p>We felt the difference after the very first day : pair programming is intense, but the results are great. We never turned back.</p>

<p>With pair programming in place, we had to settle a pair switching frequency. We started with the full story, tried a one day rotation, and eventually settled on &ldquo;MIN(1 week, the story)&rdquo;.</p>

<p>This is not set in stone and is team dependent. It may vary depending on the learning curve required to work on a story. We might bring it down later maybe.</p>

<h2>Remote Pair Programming</h2>

<p>Ahmad, a Murex guy from Beirut joined the team a few months ago. We did not want to change our way of working, and decided to try remote pair programming.</p>

<h3>Initial Setup</h3>

<p>At the beginning, we were using <a href="http://products.office.com/en-us/Lync/lync-2013-video-conferencing-meeting-software">Lync</a> (Microsoft&rsquo;s chat system) with webcams, headphones and screen sharing. It works, but Lync&rsquo;s screen sharing does not allow seamless remote control between Paris and Beirut. Here is how we coped with this :</p>

<ul>
<li>Only exceptionally use Lync&rsquo;s &ldquo;Give Control&rdquo; feature : it lags too much</li>
<li>Do small submits, and switch control at submits</li>
<li>When you cannot submit soon, shelve the code on perforce (you would just pull your buddy&rsquo;s repo with git), and switch control</li>
</ul>


<p>As a result, Ahmad became productive a lot more quickly. We are not 2 sub teams focusing on their own area of expertise, but 1 single distributed team sharing everything.</p>

<p><a href="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-setup.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-setup.resized.jpg" title="My remote pair programming setup" ></a></p>

<h3>Improved Setup</h3>

<p>Remote pair programming as such is workable, but does not feel as easy as being collocated. Here are a few best practices we are now using to improve the experience :</p>

<ul>
<li>Keep your pair&rsquo;s video constantly visible : either on your laptop of in a corner of you main screen, but it&rsquo;s important to see his facial expression all the time</li>
<li>In order to allow eye contact, place your cam next to the window containing the video of your pair.</li>
<li>Using 2 cameras, <a href="http://download.manycam.com/">ManyCams</a> and a small whiteboard allows to share drawings !</li>
</ul>


<p><a href="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-screenshot.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-screenshot.resized.jpg" title="A screenshot of my pair programming environment" ></a></p>

<ul>
<li>We started using the <a href="http://pomodorotechnique.com/">Pomodoro technique</a> for control switching. <a href="http://www.marinaratimer.com/">MarinaraTimer</a> provides an online and shareable timer.</li>
<li>We also started maintaining a todo list with an online shareable editor such as <a href="http://collabedit.com/">CollabEdit</a> or <a href="https://docs.google.com/">Google Docs</a>.</li>
</ul>


<h3>Future Setup</h3>

<p>We are currently welcoming a new engineer in Beirut, and as we will be doing more remote pair programming, we&rsquo;ll need to make this more seamless. Control sharing and lag through Lync remain the main issues. We don&rsquo;t have a solution for that yet, but here are the fixes we are looking into</p>

<ul>
<li><a href="http://www.saros-project.org/">Saros</a> is an <a href="https://eclipse.org/">Eclipse</a> plugin for remote concurrent and real time editing of files. Many people can edit the files at the same time. We are waiting for the <a href="https://www.jetbrains.com/idea/">Intellij</a> version that is still under development</li>
</ul>


<p><a href="http://www.saros-project.org/screenshots"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-27-from-zero-to-pair-programming-hero/saros.resized.png" title="A screenshot from Eclipse with Saros plugin" ></a></p>

<ul>
<li><a href="https://floobits.com/">Floobits</a> is a commercial equivalent of saros. We tried it and it seems great. It&rsquo;s not cheap though, especially with in-house servers.</li>
<li><a href="https://screenhero.com/">Screenhero</a> is a commercial low-lag, multi cursor screen sharing tool. Unfortunately, it currently does not work behind a proxy, and so we were not able to evaluate it yet.</li>
</ul>


<h2>Final thoughts</h2>

<p>I believe that collocated, and remote, pair programming are becoming key skills for a modern software engineer.</p>

<p>I hope this will help teams envisioning pair programming. We&rsquo;d love to read about your best practices as well !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can agile teams commit?]]></title>
    <link href="http://philippe.bourgau.net/can-agile-teams-commit/"/>
    <updated>2015-01-21T06:57:00+00:00</updated>
    <id>http://philippe.bourgau.net/can-agile-teams-commit</id>
    <category term="agile" /><category term="planning" /><category term="risks" />
    <content type="html"><![CDATA[<p>Making commitments to deliver software is always difficult. Whatever the margin you might take, it invariably seems wrong afterward &hellip;</p>

<p>Most Scrum, XP or Kanban litterature does not adress the issue, simply saying that commitment is not required, as long as you continuously deliver value (faster than your competition). That&rsquo;s kind of true, but sometimes you need commitments, for example if your customer is not yet ready to deploy your new software every friday worldwide &hellip;</p>

<p>So how can you do it while remaining agile ?</p>

<p>Grossly speaking, you have 2 options :</p>

<h2>Do it as usual</h2>

<p>Discuss with your experts, take some margin, do whatever voodoo you are used to. This will not be worse than it used to be. It might turn out better, thanks to your agile process, you should be able to deploy with a reduced the scope if needed.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-21-can-agile-teams-commit/voodoo.jpg" title="A guy entranced with voodoo" ></p>

<h2>Use your agile process metrics</h2>

<p>This technique is explained in <a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1411140759&amp;sr=1-1&amp;keywords=the+art+of+agile+development">The Art of Agile Development</a>, in section &ldquo;Risk Management&rdquo;, page 227.</p>

<p><a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1411140759&amp;sr=1-1&amp;keywords=the+art+of+agile+development"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-21-can-agile-teams-commit/art-of-agile-development.jpg" title="The cover of The Art of Agile Development" ></a></p>

<h3>Let&rsquo;s estimate the time you&rsquo;ll need before the release</h3>

<ul>
<li>First, list all the stories you want it your release</li>
<li>Then estimate them with story points.</li>
<li>Now that you have the total number of story points you&rsquo;ll have to deliver before the release, apply a generic risk multiplier :</li>
</ul>


<table>
<thead>
<tr>
<th>Chances of making it </th>
<th> Using XP practices </th>
<th> Otherwise </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>10%              </td>
<td>x1              </td>
<td> x1        </td>
<td> Almost impossible (ignore)</td>
</tr>
<tr>
<td>50%              </td>
<td>x1.4            </td>
<td> x2        </td>
<td> 50-50 chance (stretch goal)</td>
</tr>
<tr>
<td>90%              </td>
<td>x1.8            </td>
<td> x4        </td>
<td> Virtually certain (commit)</td>
</tr>
</tbody>
</table>


<p><em>As explained in <a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1411140759&amp;sr=1-1&amp;keywords=the+art+of+agile+development">The Art of Agile Development</a> page 227, these numbers com from <a href="http://www.systemsguild.com/riskology/">DeMarco&rsquo;s Riskology</a> system. Using XP practices means fixing all bugs at all iteration, sticking rigorously to DONE-DONE, and having a stable velocity over iterations.</em></p>

<p>This factor will account for unavoidable scope creep and wrong estimations.
* Use you iteration velocity to know how many sprints you&rsquo;ll need to finish.</p>

<h4>For example :</h4>

<p>Suppose you have 45 stories that account for a total of 152 story points, and that your velocity is 23 story points per iteration. You need to do a commitment, but hopefully, you are applying all the XP practices. So you can compute :</p>

<blockquote><p>Number of sprints = 152*1.8/23 = 12 sprints, (24 weeks, or about 5.5 months)</p></blockquote>

<h3>What about unknown risks ?</h3>

<p>Unfortunately, using just the previous, you might miss some unavoidable important tasks you&rsquo;ll need to do before you can release. Think about monitoring tools and stress testing, when did your product owner prioritize these ? These are risk management activities that need to be added to your backlog in the first place. Here is how to list most of them.</p>

<ul>
<li>Do a full team brainstorming about anything that could possibly go bad for your project</li>
<li>For every item discovered, estimate

<ul>
<li>It&rsquo;s probability of occurrence (low, medium, high)</li>
<li>It&rsquo;s consequences (delay, cost, cancellation of the project)</li>
</ul>
</li>
<li>For every item, decide whether to

<ul>
<li>avoid it : you have to find a way to make sure this will not happen</li>
<li>contain it : you&rsquo;ll deal with the risk when it occurs</li>
<li>mitigate it : you have to find a way to reduce it&rsquo;s impact</li>
<li>ignore it : don&rsquo;t bother with unlikely risks of no importance</li>
</ul>
</li>
<li>Finally, create stories to match your risk management decisions. These might be :

<ul>
<li>Monitoring systems helps to contain a risk</li>
<li>Logging helps to mitigate a risk</li>
<li>An automated scaling in script for situations of high demand helps both mitigate and contain the risk</li>
</ul>
</li>
<li>Simply add these stories to your backlog, and repeat the previous section. You can now make your commitment</li>
</ul>


<h2>Afterthoughts</h2>

<p>Contrary to the widespread belief, agile practices and metrics actually helps to make commitments.</p>

<p>It would be better if we had project specific statistics instead of generic risk multipliers. It&rsquo;s a shame that task tracking tools (JIRA &amp; friends) still don&rsquo;t help us with this.</p>

<p>We should keep in mind though, that estimating all your backlog in advance takes some time and is actually some kind of waste. If possible, just sticking to build (and sell) the thing that is the most useful now is more simple (<a href="http://vimeo.com/75196281">this guy calls it drunken stumble</a>).</p>

<iframe src="http://philippe.bourgau.net//player.vimeo.com/video/75196281" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/75196281">Tech Mesh 2012 &ndash; Building an Application Platform: Lessons from CloudBees &ndash; Garrett Smith</a> from <a href="http://vimeo.com/erlang">Erlang Solutions</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance is a feature]]></title>
    <link href="http://philippe.bourgau.net/performance-is-a-feature/"/>
    <updated>2015-01-19T06:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/performance-is-a-feature</id>
    <category term="agile" /><category term="performance" /><category term="testing" />
    <content type="html"><![CDATA[<p>Now that is a widespread title for blog articles ! Just <a href="https://www.google.fr/search?sourceid=chrome-psyapi2&amp;ion=1&amp;espv=2&amp;ie=UTF-8&amp;q=performance%20is%20a%20feature">search Google</a>, and you&rsquo;ll find &ldquo;Performance is a feature&rdquo; in <a href="http://blog.codinghorror.com/performance-is-a-feature/">Coding Horror</a> and <a href="http://coffeeonthekeyboard.com/performance-is-a-feature-623/">others</a>.</p>

<p><a href="http://www.motorstown.com/50701-dragster-jet.html"><img class="center" src="http://philippe.bourgau.net/imgs/2015-01-19-performance-is-a-feature/dragster.jpg" title="A Dragster at full speed" ></a></p>

<h1>What&rsquo;s in it for us ?</h1>

<p>If performance is indead a feature, then it can be managed like any feature :</p>

<ul>
<li><p>It should result from use cases</p>

<blockquote><p>During use case X, the user should not wait more than Y seconds for Z</p></blockquote></li>
<li><p>It can be split into user stories</p></li>
</ul>


<blockquote><ul>
<li>Story 1: During use case X, the user should not wait more than 2*Y seconds for Z</li>
<li>Story 2: During use case X, the user should not wait more than Y seconds for Z</li>
</ul>
</blockquote>

<ul>
<li>They can be prioritized against other stories</li>
</ul>


<blockquote><ul>
<li>Let&rsquo;s forget about performance for now and deliver functionality A as soon as ready, we&rsquo;ll speed things up later.</li>
<li>Let&rsquo;s fix basic performance constraints for use case X for now, every story will have to comply with these constraints later.</li>
</ul>
</blockquote>

<ul>
<li>The performance on these use cases should be automatically tested and non regressed</li>
</ul>


<blockquote><ul>
<li>If we slow things too much and these tests breaks, we&rsquo;ll have to optimize the code.</li>
<li>But as long as we don&rsquo;t break the tests, it&rsquo;s ok to unoptimize the code !</li>
</ul>
</blockquote>

<p>Maybe that&rsquo;s a chance to stop performance related gut feeling quarrels !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup a weekly fruit basket in no time]]></title>
    <link href="http://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time/"/>
    <updated>2014-12-17T07:11:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time</id>
    <category term="team building" /><category term="workplace" />
    <content type="html"><![CDATA[<p><a href="http://www.groupe-patus.fr/wp-content/uploads/2014/03/07-Beautiful-Fruit-Wallpapers.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2014-12-17-how-to-setup-a-weekly-fruit-basket-in-no-time/fruit.jpg" title="&#34;A multi-fruit sandwich&#34;" alt="&#34;A multi-fruit sandwich&#34;"></a></p>

<p>If you&rsquo;re interested in agile software development, just read Kent Beck&rsquo;s <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/B00CF6EJG8/ref=sr_1_1?ie=UTF8&amp;qid=1417609208&amp;sr=8-1&amp;keywords=embrace+change+1st+edition">Extreme Programming Explained : Embrace Change 1st edition</a>. It&rsquo;s only 200 pages, it was written in 1999, but it&rsquo;s still tremendously relevent, and it&rsquo;s got the highest ratio of information per page on the subject.</p>

<p>If you actually read it, you&rsquo;ll notice that Kent emphasizes about having food at the office. He claims that it improves the moral and builds team cohesion.</p>

<p>As my company already provides free drinks, my first attempt was to asked for weekly fresh fruits baskets. They are currently experimenting regular self service fruit baskets deliveries in some offices. Unfortunately not in ours yet. Let&rsquo;s hope it changes soon. Meanwhile, we decided to handle the thing ourselves.</p>

<h2>Here comes the fruit basket lean startup !</h2>

<h3>First, let&rsquo;s setup the simplest way it could possibly work</h3>

<ul>
<li>Invest 10€</li>
<li>Buy some fruits from the closest shop</li>
<li>Put them in a basket next to my desk</li>
<li>Let people buy them for 50c each</li>
<li>Leave a plastic cup next to the basket to receive the money</li>
<li>Hold the accounting public and visible in your wiki for example</li>
<li>Repeat every monday</li>
</ul>


<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-12-17-how-to-setup-a-weekly-fruit-basket-in-no-time/fruits-basket.jpg" title="&#34;Our fruit basket at my desk&#34;" alt="&#34;Our fruit basket at my desk&#34;"></p>

<h3>Then, verify that it is sustainable</h3>

<p>It turns out it works fine !</p>

<h3>&hellip; Until someone started to steal some money !</h3>

<p>If we forgot to hide the money cup before we left in the evening, obvious isn&rsquo;t it ?
We tried the following, in that order :</p>

<ol>
<li>Setup an automatic reminder to hide the money before leaving &hellip; FAIL</li>
<li>Setup a fake webcam and a warning notice &hellip; FAIL</li>
<li>Only keep 1€ worth of change in the money cup, and repeatedly lock up the rest in a safe place &hellip; SUCCESS !</li>
</ol>


<p>With just a bit of time, anyone, anywhere can setup a fresh fruit basket at work. It does improve the moral and build the team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to measure your speed with your business value ? (Lean Software Development Part 3)]]></title>
    <link href="http://philippe.bourgau.net/how-to-measure-your-speed-with-your-business-value-lean-software-development-part-3/"/>
    <updated>2014-10-16T07:07:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-measure-your-speed-with-your-business-value-lean-software-development-part-3</id>
    <category term="agile" /><category term="business-value" /><category term="lean" />
    <content type="html"><![CDATA[<p>There is a french idiom that basicaly is</p>

<blockquote><p>No use to run, all that is needed is to start on time &hellip;</p></blockquote>

<p>an agile engineer would add</p>

<blockquote><p>&hellip; and to go in the good direction</p></blockquote>

<p>Indeed, velocity or mean cycle time as speed measures have their shortcomings :</p>

<ul>
<li>Can be falsified by story point inflation !</li>
<li>Does not tell the team or its product owner whether they are working on the right thing.</li>
</ul>


<p>Wouldn&rsquo;t it be great if we could track the business value we are creating instead ? Wouldn&rsquo;t it be more motivating for developpers to know how they are contributing to the bottom line ? Wouldn&rsquo;t it help various people to align inside the organization ?</p>

<h2>How to track and prioritize based on your business value</h2>

<p>From <a href="http://www.amazon.com/The-Principles-Product-Development-Flow/dp/1935401009/ref=sr_1_1?ie=UTF8&amp;qid=1413953773&amp;sr=8-1&amp;keywords=product+development+flow">Reinertsen&rsquo;s Flow book</a>, we learned that the cost of delay is the main driver of the value creation : the faster you deliver a feature, less you spend the cost of delay of that feature, the more value you are creating for your company. <a href="http://scaledagileframework.com/wsjf/">This article</a> suggests that the cost of delay can be computed with the following formula :</p>

<blockquote><p>cost of delay = f(user business value) + g(time criticality) + h(risk reduction opportunity)</p></blockquote>

<p><a href="http://fr.slideshare.net/jchyip/estimating-cost-of-delay/27">This other article</a> suggests that they are different types of tasks that corresponds to the different terms of the formula above.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-10-16-how-to-measure-your-speed-with-your-business-value-lean-software-development-part-3/task-types.jpeg" title="&#34;Different kind of tasks&#34;" alt="&#34;Different kind of tasks&#34;"></p>

<p>Here is how we could link the 2 articles :</p>

<ul>
<li>Stories with deadlines : either through legal or market constraints, not doing this will put you out of business (&lsquo;time criticality&rsquo; in the formula)</li>
<li>Stories that influence the bottom line : by increasing the sales figures when delivered, or decreasing them when not delivered, which is kind of the same (&lsquo;user business value&rsquo; in the formula)</li>
<li>Risk reduction tasks : by mitigating risk or streamlining the process, these tasks actually improve the bottom line of other stories (&lsquo;risk reduction opportunity&rsquo; in the formula)</li>
</ul>


<p>The later type of task will be detailed in other articles. Let&rsquo;s focus on the two others.</p>

<h2>The case of the deadlined feature ?</h2>

<p>First, I&rsquo;d say its business value is 0, until it&rsquo;s too late. You should not be working on it too soon, but you should not be working on it too late neither !</p>

<p>In his book <a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1413954965&amp;sr=1-1&amp;keywords=the+art+of+agile+development">The Art of Agile Development</a> James Shore details in great details how an agile team can commit to deliverables (I really recommend this part, I might even write a post about it). He explains that in order to commit, teams should multiply their estimates by 4, or by 1.8 if they are very rigourous in their application of all the XP practices.</p>

<p>So a rule to handle such a task could be to</p>

<ul>
<li>estimate it</li>
<li>multiply that estimate by 4</li>
<li>substract this time from the deadline</li>
<li>prioritize it so that it can be started at that date, but not earlier</li>
<li>don&rsquo;t expect to be creating any value by completing these stories</li>
</ul>


<h2>What&rsquo;s the business value of other typical user stories</h2>

<p><a href="http://scaledagileframework.com/wsjf/">This article</a> suggests that in this case the cost of delay is equal to the business value of the feature for the user. But how can we have an idea of its actual user business value ?</p>

<p>Before actually selling and getting the money, it&rsquo;s just an estimation. With the good information, some people will make better estimates than others, never the less, it&rsquo;s still an estimate. Let&rsquo;s try a &ldquo;Business Value Poker&rdquo; ! Here are a few ideas about how to conduct this:</p>

<ul>
<li>Estimate business value at the same time as you estimate the complexity of a story</li>
<li>Create some business value $ poker estimate cards, write an app for this, or bring in some Poker Chips to estimate the value</li>
<li>Invite some business people (sales, marketting &hellip;) to the meeting to get real knowledge (being organized as a feature team will help)</li>
</ul>


<p><a href="https://gigaom.com/2012/05/16/social-gaming-to-gambling-states-inch-forward/poker-chips-by-sanzar-murzin/"><img class="center" src="http://philippe.bourgau.net/imgs/2014-10-16-how-to-measure-your-speed-with-your-business-value-lean-software-development-part-3/all-in.jpg" title="&#34;Hands pushing poker chips for an all-in&#34;" alt="&#34;Hands pushing poker chips for an all-in&#34;"></a></p>

<p>At the end, when you have the estimated cost of delay and duration of every task, you can directly prioritize using the WSJF (Weighted Shortest Job First) :</p>

<blockquote><p>WSJF = Cost of Delay / Duration</p></blockquote>

<p>Just do the tasks by decreasing order of WSJF.</p>

<p>At the end of the sprint, just as we track the story points we completed with the velocity, we could track the business value we created, that would be our business value speed. If you have access to real sales numbers, it might be interesting to see if it&rsquo;s possible to correlate the figures.</p>

<h2>Afterthoughts</h2>

<p>The more I learn about Lean principles, the more I find our current Issues Tracking Systems (I&rsquo;m used to Jira) limited. They seem to be databases with a nice UI, whereas what we need are tools to help us to make better decisions out of the multitude of items &hellip; How come they do not provide something as simple as the WSJF ?</p>

<h2>Edit 12/09/2014</h2>

<p>I got some pretty positive feedback from practicing these business value pokers. Inviting the product owner forced him to explain in details why he believed some features were more valuable than others. On the opposite, it allowed the developpers to hightlight how some seemingly unimportant stories were critical to a long term goal. In the end, everyone, including the product owner, is asking for more. It&rsquo;s a good practice that helps introducing the business value / cost of delay concept.</p>

<p>This was part 3 of my <a href="http://philippe.bourgau.net/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 2 was <a href="http://philippe.bourgau.net/why-extreme-programming-works-lean-software-development-part-2/">Why eXtreme Programming works ?</a>, Part 4 will be <a href="http://philippe.bourgau.net/measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/">Measure the business value of your spikes and take high payoff risks</a>.</p>
]]></content>
  </entry>
  
</feed>
