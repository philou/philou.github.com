<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2014-03-05T07:04:09+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Harley Davidson programming]]></title>
    <link href="http://philippe.bourgau.net/harley-davidson-programming/"/>
    <updated>2014-03-05T06:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/harley-davidson-programming</id>
    <category term="comic" /><category term="joke" /><category term="programming" />
    <content type="html"><![CDATA[<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-03-05-harley-davidson-programming/programmer.jpg" title="Drawing of a software programmer sitting at the bottom of his chair lower than his computer" ></p>

<p>Maybe we should add motors to these desk chairs ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming as an exponential problem]]></title>
    <link href="http://philippe.bourgau.net/programming-as-an-exponential-problem/"/>
    <updated>2014-02-21T06:30:00+01:00</updated>
    <id>http://philippe.bourgau.net/programming-as-an-exponential-problem</id>
    <category term="complexity" /><category term="programming" /><category term="reflexion" />
    <content type="html"><![CDATA[<p>As said Tom Cargill</p>

<blockquote><p>The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.</p></blockquote>

<p>By extrapolation, this would mean that every time we increase the requirements by 10%, we need to double the total development time ! That would mean that solution complexity is an exponential function of the complexity of the problem.</p>

<p>That could explain why techniques that work well for small problems don&rsquo;t work well at all for large problems, and vice et versa. For example</p>

<table>
<thead>
<tr>
<th align="center"> In the small (think one page script) </th>
<th align="center"> In the large (think multi millions lines system)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> Dynamic typing                       </td>
<td align="center"> Static typing</td>
</tr>
<tr>
<td align="center"> Mutable globals                      </td>
<td align="center"> Immutability</td>
</tr>
<tr>
<td align="center"> Imperative style                     </td>
<td align="center"> Declarative style</td>
</tr>
<tr>
<td align="center"> Manual memory management             </td>
<td align="center"> Garbage collection</td>
</tr>
<tr>
<td align="center"> Shared memory                        </td>
<td align="center"> Message passing</td>
</tr>
</tbody>
</table>


<br/>


<p>Just for fun, let&rsquo;s suppose that we could deduce a unique constant C for every language such that</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-02-21-programming-as-an-exponential-problem/formula.png" title="Secret formula linking problem and solution complexities" ></p>

<p>Here is a plot of this formula with different values of C (0.5, 1 and 2)</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-02-21-programming-as-an-exponential-problem/close-plot.png" title="Plot of the formula for different C constant values" ></p>

<p>We can see that small values of C are best for small problems, whereas greater values are evolve better with larger problems. For a given problem, there is quite a difference in the solution complexity, if the formula was true, and that we knew in which zone of complexity our problem will always be, we could choose the appropriate technology ! Experienced engineers already have the gut knowledge about how to chose the right tool for the job !</p>

<p>That&rsquo;s not all, let&rsquo;s have a bird&rsquo;s eye view of the same formulas</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-02-21-programming-as-an-exponential-problem/wide-plot.png" title="Same plot at a larger scale" ></p>

<p>I increased the maximum problem complexity by a factor of 3, I had to multiply the solution complexity by 100 ! In the end, these exponential curves all seem frighteningly vertical. This could explain why the divide and conquer approach works so well in software : 2e<sup>x</sup> &lt; e<sup>2x</sup>. Abstract and powerful APIs might be our best weapon against complexity.</p>

<p>People behaviour does not match this exponential hypothesis though :</p>

<ul>
<li>At work, I&rsquo;ve seen quite a few projects started from scratch, and everybody expecting it to maintain it&rsquo;s initial speed during its whole lifetime</li>
<li>Some recent hiring or investing trend seem to rely on hackathons, startup week ends, or coding games, all &lsquo;in the small&rsquo; exercises</li>
<li>I&rsquo;ve observed in quick and dirty overtime work to meet a deadline &hellip; If productivity is proportional to the solution complexity, that crunch mode would be completely unproductive</li>
</ul>


<p>This leads to more interesting questions :</p>

<ul>
<li>Is my exponential model complete garbage ?</li>
<li>Or are humans particularly bad at forecasting an exponential behaviour ?</li>
<li>If so, what practices could we adopt to stop relying on this misleading gut feeling ?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retroactively add keywords for your existing Octopress posts]]></title>
    <link href="http://philippe.bourgau.net/retroactively-add-keywords-for-your-existing-octopress-posts/"/>
    <updated>2014-02-11T06:54:00+01:00</updated>
    <id>http://philippe.bourgau.net/retroactively-add-keywords-for-your-existing-octopress-posts</id>
    <category term="blogging" /><category term="octopress" /><category term="seo" />
    <content type="html"><![CDATA[<p>At the moment, I am exploring the world of SEO, and so I thought I could start with my blog. I found <a href="http://xit0.org/2013/05/seo-for-octopress-websites/">SEO for Octopress websites</a> that I followed to add keywords and descriptions to this blog.</p>

<p>To fill actual keywords for all my existing posts, I had 2 options :</p>

<ul>
<li>edit around 60 posts by hand</li>
<li>write a script to parse Yaml post descriptions and extract and inject keywords</li>
</ul>


<p>Sorry, I chose the geeky solution &hellip;</p>

<p>
<script src="https://gist.github.com/philou/8929876.js"></script>
</p>


<p>Just add this code to your toplevel Rakefile, and run <code>bundle exec rake add_keywords</code> and keywords will be added to your existing posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My humble advices about how to write maintainable tests]]></title>
    <link href="http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests/"/>
    <updated>2014-02-04T06:10:00+01:00</updated>
    <id>http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests</id>
    <category term="agile" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>I love writing automated tests &hellip; or rather, I hate having to work in untested code. I find it makes my life unnecessarily stressful. On the other hand, the cost of maintaining badly written tests can sometimes outweigh their benefits. This is usually the moment where the team resorts to manual testing, and gets back to the ways of &lsquo;the good old days&rsquo;. Personally, I don&rsquo;t like the good old days when we had to stay up all night <del>to add even more mess</del> to fix something for an important deadline.</p>

<p>Here is how I try to make my tests as maintainable as possible :</p>

<ul>
<li>Write the tests before the code, it gets a (short) time to get used to, but after that, it&rsquo;s just a lot more fun. Just try it for a while</li>
<li>Write tests with no side effects, otherwise, it will not be possible to run your tests alone, or in a different order ! So don&rsquo;t use globals</li>
<li>Write readable tests : did you ever had to fix a test that you cannot figure out the intent ? A lot of the other points just help writing more readable tests</li>
<li>Write small tests : they are usually faster to run, allow you to test more edge cases, and make a better job at pinpointing the actual faulty code. The receipe for writing short tests is to follow the given-when-then pattern :

<ul>
<li>start your test by setting the context (given)</li>
<li>do the thing you actually want to test (when)</li>
<li>verify that it did what you wanted (then)</li>
</ul>
</li>
<li>Remove code duplication from your tests, in the same way as you would in production code. This will help you when you&rsquo;ll want to modify that constructor that is used in 764 test files &hellip;</li>
<li>Use test data builders. This will avoid duplicated and long context setup at the beginning of every test. Don&rsquo;t use factory methods or the object mother pattern, it just does not scale. In java, this usually means <a href="http://www.natpryce.com/articles/000714.html">rollying your own</a>, in ruby, just use <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a></li>
<li>Use custom assertion objects. This will avoid duplicated and complicated verification code at the end of every test. It will also help to improve assertion messages. In ruby, this comes built in <a href="http://rspec.info/">rspec</a> and its <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/define-matcher">matcher dsl</a>. Lately, in Java I have been using <a href="https://github.com/alexruiz/fest-assert-2.x">Fest Assert</a></li>
<li>Use the extended red &ndash;> red with explicit error message &ndash;> green &ndash;> refactor in place of the shorter red &ndash;> green &ndash;> refactor. By spending some time to improve your assertion messages, you&rsquo;ll eventually save time to understand what broke when the test fails</li>
<li>As <a href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">I already wrote about</a>, only use mocks to

<ul>
<li>speed up a test that is too slow</li>
<li>cut off a dependency to an unavailable subsystem</li>
<li>simplify an overly complex test setup</li>
</ul>
</li>
<li>Use constructor based dependency injection. It&rsquo;s straightforward, low tech, and simplifies test setup</li>
<li>As there is no need to mock immutable data structures, I found that using immutable classes for values simplifies tests</li>
<li>Usually use hand coded mocks. Hand coded mocks become difficult to maintain when the code becomes too tangled, they can help me to know that I am doing something wrong (not mocking at the correct place, testing implementation, not doing enough refactoring &hellip;). On the contrary, mock framework make this so easy that I usually miss the issue completely until it is too late</li>
<li>Except when your mocking framework provides object proxing and automatic unmocking. Ruby&rsquo;s <a href="http://rr.github.io/rr/">RR</a> provides this. Both features can be really useful when needed.</li>
<li>Use existing mocks when possible. For example, <a href="http://www.sqlite.org/">Sqlite</a> in memory database : it speeds up the tests, removes the need for any environment setup, and is usually very simple to setup</li>
<li>Last of all, listen to your tests : if they get difficult to write, they might be a design improvement opportunity lying somewhere</li>
</ul>


<p>All in all there is nothing new here. A lot of things come from <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1391579113&amp;sr=8-1&amp;keywords=growing+object-oriented+software+guided+by+tests">GOOS</a> others from <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=pd_bxgy_b_text_y">Clean Code</a>, the mocking &lsquo;requirements&rsquo; come from <a href="http://blog.rubybestpractices.com/posts/gregory/052-issue-20-thoughts-on-mocking.html">an article from Gregory Brown</a>, I found others from my own experience and from a lot of other sources I cannot remember now &hellip;</p>

<p>Happy testing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online store scrapping DSL gem]]></title>
    <link href="http://philippe.bourgau.net/online-store-scrapping-dsl-gem/"/>
    <updated>2014-01-21T06:50:00+01:00</updated>
    <id>http://philippe.bourgau.net/online-store-scrapping-dsl-gem</id>
    <category term="dsl" /><category term="gem" /><category term="open source" /><category term="ruby" /><category term="scrapping" />
    <content type="html"><![CDATA[<p>Since I decided to stop <a href="http://www.mes-courses.com">Mes Courses</a> to focus on <a href="http://www.agileavatars.com">AgileAvatars</a>, I have been extracting open source gems from the code base. The last one is <a href="https://github.com/philou/storexplore">Storexplore</a> : a declarative scrapping DSL that lets one define directory like apis to an online store.</p>

<p>As explained in the Readme, it allows one to declare a store this way :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Storexplore</span><span class="p">:</span><span class="ss">:define_api</span> <span class="s1">&#39;dummy-store.com&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">categories</span> <span class="s1">&#39;a.category&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">attributes</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">categories</span> <span class="s1">&#39;a.category&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="k">do</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">items</span> <span class="s1">&#39;a.item&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">attributes</span> <span class="k">do</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:brand</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#brand&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#price&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">to_f</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#image&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:remote_id</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">get_one</span><span class="p">(</span><span class="s1">&#39;#remote_id&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to use it like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Api</span><span class="o">.</span><span class="n">browse</span><span class="p">(</span><span class="s1">&#39;http://www.dummy-store.com&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;category: </span><span class="si">#{</span><span class="n">category</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;attributes: </span><span class="si">#{</span><span class="n">category</span><span class="o">.</span><span class="n">attributes</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">category</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sub_category</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  category: </span><span class="si">#{</span><span class="n">sub_category</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  attributes: </span><span class="si">#{</span><span class="n">sub_category</span><span class="o">.</span><span class="n">attributes</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sub_category</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    item: </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    attributes: </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">attributes</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried my best to make this library high quality :</p>

<ul>
<li>The code evolved from a simple procedural script to a dsl through constant refactorings</li>
<li>Real world features like constant memory usage have been added to fix production bugs</li>
<li>Documented with samples and rdoc</li>
<li>Extensive automated testing</li>
</ul>


<p>Let&rsquo;s hope it will be usefull for some.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprints are not sprints]]></title>
    <link href="http://philippe.bourgau.net/sprints-are-not-sprints/"/>
    <updated>2014-01-07T06:22:00+01:00</updated>
    <id>http://philippe.bourgau.net/sprints-are-not-sprints</id>
    <category term="agile" /><category term="scrum" />
    <content type="html"><![CDATA[<p>I really don&rsquo;t know why <a href="http://www.scrum.org">Scrum</a> Sprints are called sprints ! From my experience, the number one mistake made by team starting with Scrum is to work as quickly and dirty as possible to complete the sprint, forgetting the <a href="http://www.sustainablepace.net/">sustainable pace</a>.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-01-07-sprints-are-not-sprints/marathoner-vs-retail-sprinter.jpg" title="Side by side photos of a marathoner and a sprinter" ></p>

<p>Finding another word is difficult though, I thought of &lsquo;stage&rsquo; or &lsquo;milestone&rsquo; that both convey the long run idea, but both feel more content than time bounded. A more exotic word could be a &lsquo;Scrum push&rsquo;, it conveys slow and intense action action rather than quick results.</p>

<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/ST_vs_Gloucester_-_Match_-_23.JPG/640px-ST_vs_Gloucester_-_Match_-_23.JPG" title="A rugby scrum (Wikimedia)" ></p>

<p>Overall, the traditional agile &lsquo;iteration&rsquo; is not bad at all, at least a lot better than Sprint.</p>

<p><strong>EDIT 01/08/2014:</strong></p>

<p>The &lsquo;Quick and Dirty&rsquo; Sprint strategy, is like trying to win a marathon with a greedy algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="ow">not</span> <span class="n">finished</span>
</span><span class='line'>  <span class="n">sprint</span><span class="p">(</span><span class="mi">100</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not likely to work &hellip; Marathoners know that they&rsquo;ve got to stick to a constant speed during the whole race in order to finish it. The way to get faster is to :</p>

<ul>
<li>increase this cruise speed just a bit</li>
<li>get at ease with it during a few races</li>
<li>repeat</li>
</ul>


<p>Is there something to learn from this to improve software development speed ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying to explain monads in java]]></title>
    <link href="http://philippe.bourgau.net/trying-to-explain-monads-in-java/"/>
    <updated>2013-12-07T07:37:00+01:00</updated>
    <id>http://philippe.bourgau.net/trying-to-explain-monads-in-java</id>
    <category term="functional programming" /><category term="kata" /><category term="monads" />
    <content type="html"><![CDATA[<p>A few days ago, a colleague currently taking <a href="https://www.coursera.org/course/reactive">the coursera course about reactive programming in scala</a>, asked me to explain him what monads are. It&rsquo;s always a tough question, and I rarely manage to give un understandable answer simply. This time though, I kind of managed to pass him some understanding of monads :</p>

<ol>
<li>When modelising a statefull data structure with immutable constructs, one has to pass in and return the data structure state of every function</li>
<li>This results in a lot repeated code to pass this state around</li>
<li>With a monad, you can factorize this glue code and only write the &lsquo;real&rsquo; code</li>
</ol>


<p>I thought it might be a good subject for a java kata ! This is what I tried to do in <a href="https://github.com/philou/java-monads-kata">java-monads-kata</a>. Here is some sample monadic code from the kata itself :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span>
</span><span class='line'><span class="n">pops_objects_in_reverse_push_order</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">monad</span> <span class="o">=</span> <span class="n">monad</span><span class="o">.</span>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">push</span><span class="o">(</span><span class="n">A</span><span class="o">)).</span>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">push</span><span class="o">(</span><span class="n">B</span><span class="o">)).</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">monad</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">monad</span> <span class="o">=</span> <span class="n">monad</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">monad</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">empty</span><span class="o">(),</span> <span class="n">monad</span><span class="o">.</span><span class="na">stack</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can have a look at all <a href="https://github.com/philou/java-monads-kata">the final code</a>, or <a href="https://github.com/philou/java-monads-kata/commits/master">go through the whole history</a> to get the &lsquo;kata&rsquo; feeling. It&rsquo;s a shame Github does not offer a nice chronological repo history slideshow, for better experience, I recommend that you use Chrome with <a href="https://chrome.google.com/webstore/detail/github-improved/nkbnmpfpclijlllipmfbkkednidgngaa">Github improved</a> : this allows to view diffs right from the Github history.</p>

<p>The resulting code is still quite far from a <a href="http://www.haskell.org/haskellwiki/Monad">Haskell monad</a> :</p>

<ul>
<li>Functions are not first class objects in Java. It is written in Java 7, without lambda, which does not help neither.</li>
<li>Java does not have Haskell type class polymorphism, but only supports OO polymorphism and very little covariance</li>
<li>The whole monad thing, designed at simulating/isolating side effects has a WTF feel in Java where side effects are just everywhere</li>
</ul>


<p>I&rsquo;d love to hear some feedback about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviews for everyone]]></title>
    <link href="http://philippe.bourgau.net/reviews-for-everyone/"/>
    <updated>2013-12-02T06:33:00+01:00</updated>
    <id>http://philippe.bourgau.net/reviews-for-everyone</id>
    <category term="agile" /><category term="code reviews" /><category term="version control" />
    <content type="html"><![CDATA[<p>We are using <a href="http://www.scrum.org">Scrum</a> at work. As an <a href="http://www.extremeprogramming.org/">eXtreme Programmer</a> to the bones, I wanted more <a href="http://www.extremeprogramming.org/rules/collective.html">collective code ownsership</a>. We were already doing some <a href="http://en.wikipedia.org/wiki/Pair_programming">pair programming</a> from time to time, but I thought it might be a good time to try public <a href="http://en.wikipedia.org/wiki/Code_review">code reviews</a>.</p>

<p>I have already been doing code reviews in other jobs, but the experience has been disappointing up till now for the following reasons :</p>

<ul>
<li>Even with review tools, they involved too much manual efforts</li>
<li>I&rsquo;ve been in jobs with reinforcing loops :
<img class="center" src="http://philippe.bourgau.net/imgs/2013-12-02-reviews-for-everyone/graph.png" title="Schema of a vicious circle : poor quality, bugs, not enough time, poor quality ..." >
In this kind of environment, even mandatory code reviews tend to become a useless &ldquo;tick in the box&rdquo; operation</li>
<li>Often they are used as a control mechanism rather than a share tool</li>
</ul>


<p>Public reviews, <a href="http://producingoss.com/en/setting-tone.html#code-review">as discribed by Karl Fogel in Producing Free Open Source Software</a> on the other hand seem something great to encourage share and peer review. The principles are simple :</p>

<ul>
<li>All commits must be reviewed by at least one person</li>
<li>Anyone can review anyone&rsquo;s code</li>
</ul>


<p>At work, we are using <a href="http://www.perforce.com">Perforce</a> and <a href="http://smartbear.com/products/software-development/code-review/">Code Collaborator</a> as a review tool. We did not have the possibility to send an email at every perforce submit, and manually creating code collaborator reviews for every change is a chore. I spent an afternoon writing a small ruby script that polls perforce for new changes, and automaticaly creates reviews in Code Collaborator from these. I also added something to spot existing Jira ids in commit messages, to enlarge the existing review instead of creating a new one for every commit.</p>

<p>We are very pleased with the result, all the team is participating to the reviews. As with all good code reviews, it&rsquo;s helps :</p>

<ul>
<li>Spoting some bugs</li>
<li>Spoting some possible design improvements</li>
<li>Discussing the global design and architechure of our system</li>
<li>Gathering coding standards</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I organized my javascript assets in Rails]]></title>
    <link href="http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails/"/>
    <updated>2013-11-27T05:56:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails</id>
    <category term="assets" /><category term="javascript" /><category term="rails" /><category term="testing" />
    <content type="html"><![CDATA[<p><a href="http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails/">Lately</a>, I have been introducing javascript and coffeescript in <a href="http://www.mes-courses.com">www.mes-courses.fr</a> (with structural architecture issues as a side effect, but that&rsquo;s another story &hellip;).</p>

<p>Here are the general goals I had when using the rails asset pipeline :</p>

<ul>
<li>most of js compiled in a single file</li>
<li>no js code in your html files : I want to use unintrusive javascript techniques, and have some outside js hook code that will wire js and html together</li>
<li>sometimes, I want some js code to be only explicitly included by some particular pages (example: hooking a timer on the document ready event of a particular html page). This means that I cannot simply compile all js code in a single minified file</li>
<li>In unit tests, I want to be able to manually set up and tear down the js hooks</li>
</ul>


<p>So, here is how I eventually organized my js code :</p>

<ul>
<li>I create a specific dependencies.js file that will require all outside dependencies</li>
<li>I split my js code under 3 subdirectories :

<ul>
<li>explicit : hooks that will be explicitly included</li>
<li>hooks : all the other hooks</li>
<li>application : all the real code</li>
</ul>
</li>
<li>In my application.js, I include dependencies and all files under application and hooks. Here is my app/assets/javascript/application.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require dependencies.js</span>
</span><span class='line'><span class="c1">//= require_tree ./application</span>
</span><span class='line'><span class="c1">//= require_tree ./hooks</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>In my tests, I only load dependencies and files from the application directory. Here is my spec/javascript/spec.js.coffee</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#= require ../../app/assets/javascripts/dependencies.js</span>
</span><span class='line'><span class="c1">#= require_tree ../../app/assets/javascripts/application</span>
</span><span class='line'><span class="c1">#= require_tree ./</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Hook code only consists of calling a setup function from the &lsquo;real&rsquo; code. For example, here is my app/assets/javascript/hooks/cart_lines/index.coffee file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">mesCourses</span><span class="p">.</span><span class="nx">cartLines</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">setUp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>this setUp function is defined in the app/assets/javascript/application/cart_lines/index.coffee file</p>

<ul>
<li>This way, from the unit tests, I can explicitly call this setUp function, here is the beginning of my spec/javascript/application/cart_lines/index_spec.coffee file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;mesCourses.cartLines.index&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">mesCourses</span><span class="p">.</span><span class="nx">cartLines</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">setUp</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you, how are you organizing your javacript assets ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileAvatars.com magnets for real]]></title>
    <link href="http://philippe.bourgau.net/agileavatars-dot-com-magnets-for-real/"/>
    <updated>2013-11-25T06:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/agileavatars-dot-com-magnets-for-real</id>
    
    <content type="html"><![CDATA[<p>A software team is now using <a href="https://www.scrum.org/">Scrum</a> and <a href="http://www.agileavatars.com">AgileAvatars.com</a> magnets in their daily work ! A few days ago, I sold my first lot of agile magnets. These customers were ready to experiment and iterate, and after trying some things that did not work so well, we came to a great result :</p>

<ul>
<li>As the surface of the magnets is rather small (4 by 4 centimeters), it required enough magnetic force to hold post-its and bristol cards to the board. I now use some 0.75 mm thick magnetic board, the same that is used to stick ads on driving cars</li>
<li>The magnets will be moved from hand to hand every day, I chose high quality glossy paper to make sure they&rsquo;ll stand the test of time.</li>
</ul>


<p><img class="center" src="http://philippe.bourgau.net/imgs/2013-11-25-agileavatars-dot-com-magnets-for-real/magnets.JPG" title="Photo of our first real magnets" ></p>

<p>I did not yet build any automatic order site or app, but I can now ship magnets for real though ! Don&rsquo;t hesitate to contact me through my email or the contact form on <a href="http://www.agileavatars.com">AgileAvatars.com</a> if ever you want more !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I just replaced Feedburner with MailChimp]]></title>
    <link href="http://philippe.bourgau.net/i-just-replaced-feedburner-with-mailchimp/"/>
    <updated>2013-10-08T06:36:00+02:00</updated>
    <id>http://philippe.bourgau.net/i-just-replaced-feedburner-with-mailchimp</id>
    <category term="rss" /><category term="web" />
    <content type="html"><![CDATA[<p>Until now, I had been using <a href="http://www.feedburner.com">Feedburner</a> to manage the email subscriptions to my <a href="https://www.mes-courses.fr/blog">blog on mes-courses.fr</a>. <del>It had been working fine</del> I thought it had been working fine until a friend of mine asked me if I was still working on it, since it had been a time since she did not receive any email !</p>

<p>It turned out that feedburner had not been forwarding emails for 6 months and that it had gone unnoticed &hellip; I had already had this issue before, and it was because my rss was not well formed according to feedburner (something related to unicode encoding I think). So to summarise :</p>

<ul>
<li>I lost trust in feedburner to forward my posts correctly</li>
<li>Feedburner is not maintained by Google anymore</li>
<li>They have been persistant rumors about Google shutting down Feedburner completly especially since the Reader shut down</li>
</ul>


<p>I started looking for alternatives. I tried <a href="http://www.nouri.sh">Nourish</a> and <a href="http://www.mailchimp.com">MailChimp</a> I did not manage to make Nourish work like I wanted, but I found MailChimp an intuitive and well documented product.</p>

<p>The setup with MailChimp was a lot longer than with Feedburner, but the result is great. I feed a lot more confident about these emails being delivered now.</p>

<p>There are a few points I still miss though :</p>

<ul>
<li>The social forward does not seem to work the same easy way, it looks like if MailChimp pushes the email content to your networks, but not a direct link to your blog</li>
<li>MailChimp does not track non-email subscribers to your rss. I&rsquo;ll have to check my analytics to see how to do it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Matchers Combinators 2 : spec_combos gem]]></title>
    <link href="http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem/"/>
    <updated>2013-09-25T21:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem</id>
    <category term="gem" /><category term="open source" /><category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>I already wrote about my <a href="http://philippe.bourgau.net/rspec-matchers-combinators/">RSpec Matchers Combinators</a>, I decided to extract them into the <a href="https://github.com/philou/spec_combos">spec_combos</a> gem.</p>

<p>To use it, just add the following to your Gemfile :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;spec_combos&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="s1">&#39;test&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compared to the first version of the matchers, I added better error messages. For example, consider the following complex nested assertion :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">all_</span><span class="p">{</span><span class="n">and_</span><span class="p">(</span><span class="n">be_odd</span><span class="p">,</span> <span class="n">be_instance_of</span><span class="p">(</span><span class="no">Fixnum</span><span class="p">))}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It outputs the following error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Failure/Error: expect([1,2,3]).to all_{and_(be_odd, be_instance_of(Fixnum))}
</span><span class='line'>  expected [1, 2, 3] to all be odd and be an instance of Fixnum, but the following were not:
</span><span class='line'>    [1] (2): expected 2 to be odd and be an instance of Fixnum, but:
</span><span class='line'>      expected odd? to return true, got false
</span></code></pre></td></tr></table></div></figure>


<p>I hope this might help !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec matchers combinators]]></title>
    <link href="http://philippe.bourgau.net/rspec-matchers-combinators/"/>
    <updated>2013-09-11T12:23:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspec-matchers-combinators</id>
    <category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p><a href="http://rubydoc.info/gems/rspec-expectations">Rspec matchers</a> are a lot like predicates. Predicates that can talk &hellip; The good thing about predicates, as anybody who has done a bit of functional programming will tell you, is that they are easy to combine together into bigger predicates. I was really suprised to see that rspec does not come with such simple combinators as &lsquo;and&rsquo; or &lsquo;or&rsquo;.</p>

<p>Here is a gist where I define simple combinators :</p>

<script src="https://gist.github.com/philou/6521797.js"></script>


<p>With this and the <a href="https://github.com/bmabey/email-spec">email_spec</a> matchers, it is possible to write something like this to find if an email was sent by rails :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">all_emails</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_any_that</span><span class="p">(</span><span class="n">and_</span><span class="p">(</span><span class="n">deliver_to</span><span class="p">(</span><span class="n">receiver</span><span class="p">),</span>
</span><span class='line'>                                         <span class="n">have_subject</span><span class="p">(</span><span class="n">subject</span><span class="p">),</span>
</span><span class='line'>                                         <span class="n">have_body_text</span><span class="p">(</span><span class="n">body</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It enables expressive test code and high reusability.</p>

<p>Using the &lsquo;all&rsquo; combinator it is possible to write things like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">sample_items_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">all_</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:price</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had to prepend &lsquo;all&rsquo; and &lsquo;and&rsquo; with an underscore because I would otherwise get conflicts&hellip; I&rsquo;m not overly satisfied with this, but it will do for the moment.</p>

<p>I was happily supprised by the readability of error messages when the mach fails. Rspec does a very good job about this. I think it would be possible to get even better error messages by explicity using the sub matchers messages though. If anyone is interested, help yourself !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby regex captures oneliner]]></title>
    <link href="http://philippe.bourgau.net/ruby-regex-captures-oneliner/"/>
    <updated>2013-09-11T09:02:00+02:00</updated>
    <id>http://philippe.bourgau.net/ruby-regex-captures-oneliner</id>
    <category term="regex" /><category term="ruby" />
    <content type="html"><![CDATA[<p>Surely this post is nothing new for experienced ruby developpers, but I found it so handy, that I thought it deserved a post of its own though. The problem is :</p>

<blockquote><p>How do I match and assign captures from a regex in a single line of code ?</p></blockquote>

<p>Here is the idea :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">brand</span><span class="p">,</span> <span class="n">item</span> <span class="o">=</span> <span class="sr">/([^,]*), (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brand</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;APPLE&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">item</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ipad&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few variations around this, like grouping some catpures in an array :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">brand</span><span class="p">,</span> <span class="o">*</span><span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brand</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;APPLE&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or to ignore some capture, we could shorten skip some captures :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">item</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">item</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ipad&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;iOs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this only works for first or last captures, when this is not the case, one can also use the functional programming &lsquo;_&rsquo; sink convention :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">brand</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brand</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;APPLE&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;iOs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One can even use &lsquo;_&rsquo; multiple times on the same match</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;iOs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spork alternative compatible with cucumber]]></title>
    <link href="http://philippe.bourgau.net/spork-alternative-compatible-with-cucumber/"/>
    <updated>2013-08-03T08:51:00+02:00</updated>
    <id>http://philippe.bourgau.net/spork-alternative-compatible-with-cucumber</id>
    <category term="cucumber" /><category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>Version 1.3.0 of <a href="http://cukes.info/">Cucumber</a> droped spork support, so I had to find something else. I am using <a href="https://github.com/guard/guard">Guard</a> setup with <a href="http://rspec.info/">rspec</a> and Cucumber for my <a href="http://rubyonrails.org/">Rails</a> app.</p>

<p>I first tried <a href="https://github.com/burke/zeus">Zeus</a> with <a href="https://github.com/qnm/guard-zeus">guard-zeus</a>, it kind of worked, but it ruined my Guard console with the Zeus server status, and it left zombie processes on guard exit &hellip;</p>

<p>Eventually, I tried <a href="https://github.com/jonleighton/spring">Spring</a>, and once I made sure <a href="http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/">rspec and cucumber both ran on the test environment</a>, it worked fine with minimal configuration. Here is what I had to do to get it working</p>

<ul>
<li>remove spork from your Gemfile</li>
<li>remove require &lsquo;spork&rsquo;, Spork.prefork and Spork.each_run calls from spec/spec_helper.rb and features/support/env.rb</li>
<li>install spring</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install spring</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add spring to your Gemfile ! Also <a href="https://github.com/jonleighton/spring/blob/master/README.md">they say it is not required</a> I later had an error complaining it wasn&rsquo;t.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;spring&#39;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">group</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>update your Guardfile example :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="ss">:rspec</span><span class="p">,</span> <span class="ss">cli</span><span class="p">:</span> <span class="s2">&quot;--tag ~@slow&quot;</span><span class="p">,</span> <span class="n">all_after_pass</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">all_on_start</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">keep_failed</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">spring</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">bundler</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;cucumber&#39;</span><span class="p">,</span> <span class="n">all_on_start</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">cli</span><span class="p">:</span> <span class="s1">&#39;--format progress --no-profile&#39;</span><span class="p">,</span> <span class="n">command_prefix</span><span class="p">:</span> <span class="s1">&#39;spring&#39;</span><span class="p">,</span> <span class="ss">bundler</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add a .spring.rb file to automaticaly restart Spring on main file changes. I think I&rsquo;ll have to update this file when I discover that a test failed because spring needs to be restarted</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch</span> <span class="s2">&quot;.spring.rb&quot;</span>
</span><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch</span> <span class="s2">&quot;spec/factories&quot;</span>
</span><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch</span> <span class="s2">&quot;features/env.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch_method</span> <span class="o">=</span> <span class="ss">:listen</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplest way to speed up rspec with in memory sqlite db]]></title>
    <link href="http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/"/>
    <updated>2013-08-02T09:16:00+02:00</updated>
    <id>http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db</id>
    <category term="cucumber" /><category term="rails" /><category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>There are already a lot of articles explaining how to setup an in memory <a href="http://www.sqlite.org/">SQLite</a> database to speed up <a href="http://rubyonrails.org/">Rails</a> specs or unit tests. Most of them explain how to change your database.yml and to run setup your schema before running the tests. It works fine.</p>

<p>There&rsquo;s a catch though : suppose you are using <a href="http://cukes.info/">cucumber</a>, it&rsquo;s likely you&rsquo;d rather run cucumber on a real database (<a href="http://www.postgresql.org/">PostgreSQL</a>, <a href="http://www.mysql.com/">MySQL</a> or whatever). Most gems expect cucumber and <a href="http://rspec.info/">rspec</a> to both run in the test environment &hellip; Every time I updated my bundle or that I wanted to use a new test gem, I would hit an issue about cucumber being run in its own &lsquo;cucumber&rsquo; environment : unexpected warnings and things not working out of the box.</p>

<p>Eventually, I ditched the cucumber env, setup a PostgreSQL db on the test env, and injected the in memory sqlite database right inside spec_helper.rb :</p>

<p>In database.yml :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mes_courses_test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mes_courses</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">secret</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5433</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the bottom of spec_helper.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">setup_sqlite_db</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="ss">adapter</span><span class="p">:</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="ss">database</span><span class="p">:</span> <span class="s1">&#39;:memory:&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">load</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">/db/schema.rb&quot;</span> <span class="c1"># use db agnostic schema by default</span>
</span><span class='line'>  <span class="c1"># ActiveRecord::Migrator.up(&#39;db/migrate&#39;) # use migrations</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">silence_stream</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">setup_sqlite_db</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My own side project best practices after reading the 'Side Project Book']]></title>
    <link href="http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book/"/>
    <updated>2013-07-25T07:26:00+02:00</updated>
    <id>http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book</id>
    <category term="boostrapping" /><category term="side project" /><category term="startup" />
    <content type="html"><![CDATA[<p>First, i recommend <a href="http://sideprojectbook.com/">this book</a> to any side project infected person : it&rsquo;s a great motivation boost !</p>

<p>After reading it, it seems that there are no absolute rules to side projects success. Some did no marketting and just did what they loved, others did à carefull market study before building anything, some did the whole things, others outsourced the code or the design, or even both &hellip; That said, as I read somewhere, it seems that one is more likely to achieve commercial success if he first focusses on the market, then marketting, then the design, and eventually on the features.</p>

<p>Common advices from the interviewees are :</p>

<ul>
<li>ship early</li>
<li>iterate</li>
<li>don&rsquo;t give up</li>
</ul>


<p>Why not apply these principle to &ldquo;building a side project&rdquo; instead of &ldquo;building XXX in my free time&rdquo; ?</p>

<p>From now on, I am going to set up project target duration and revenue. For example, if I don&rsquo;t make at least 100€ / month after one year, I&rsquo;ll stop working on it and start a new one.</p>

<p>I hope that by iterating more quickly through projects I&rsquo;ll learn more and increase my chances of successes as the time goes. Keeping the same target duration and revenue for all projects should make me better at filtering ideas that are a good fit to my resources. As I tend to get bored quickly, it should also allow me to keep my motivation high.</p>

<p>Let&rsquo;s see what happens !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[www.agileavatars.com : order customized avatar magnets]]></title>
    <link href="http://philippe.bourgau.net/www-dot-agileavatars-dot-com-order-customized-avatar-magnets/"/>
    <updated>2013-07-18T07:56:00+02:00</updated>
    <id>http://philippe.bourgau.net/www-dot-agileavatars-dot-com-order-customized-avatar-magnets</id>
    <category term="agile" /><category term="agileavatars.com" /><category term="side-project" /><category term="startup" />
    <content type="html"><![CDATA[<p>As agile and lean methodologies are gaining some place inside the workplace, especially in large corporations, I heard and saw quite a few teams struggling with their whiteboard because of :</p>

<ul>
<li>falling post-its</li>
<li>too few magnets</li>
<li>looking alike customized magnets</li>
</ul>


<p>The best practice seemed to order magnetic paper, and loose half a day to create individual avatars, print them and stick them to small pieces of magnetic paper.</p>

<p>This is the main idea behind <a href="http://www.agileavatars.com">AgileAvatars.com</a>. The main feature would be :</p>

<ul>
<li>create the avatars for your whole team</li>
<li>pass a group order, and receive the whole package directly at work</li>
</ul>


<p>For the moment, I am just testing the idea, so please enter your email in <a href="http://www.agileavatars.com">the contact form</a> to push the product. Tweet about it and it will be even better !</p>

<p>If it turns out people are interested, I&rsquo;ll start defining the MVP with the interested users :</p>

<ul>
<li>How much should I charge to burn the magnets ?</li>
<li>Should it be a web or phone app ?</li>
<li>How to create the avatars ?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine and coffeescript setup for rails]]></title>
    <link href="http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails/"/>
    <updated>2013-07-04T07:44:00+02:00</updated>
    <id>http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails</id>
    <category term="coffeescript" /><category term="jasmine" /><category term="javascript" /><category term="rails" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>As I started to write more javascript code in my <a href="https://www.mes-courses.fr">rails app</a>, it became obvious that I should be testing it ! I wanted to use <a href="http://pivotal.github.io/jasmine/">jasmine</a> and <a href="http://coffeescript.org">coffeescript</a>. I searched a long time to find out what was the most common and supported setup for a rails app, so now I recommand</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;jasmine&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jasminerice&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-jasmine&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <a href="https://github.com/pivotal/jasmine-gem">jasmine gem</a> is by far the most common jasmine gem, it is supported by <a href="http://pivotallabs.com">Pivotal Labs</a> so there is no fear of it being droped soon.</li>
<li>The <a href="https://github.com/netzpirat/guard-jasmine">guard-jasmin gem</a> is supported by <a href="https://mksoft.ch">MKSoft</a>, and is not only handling continuous <a href="http://phantomjs.org/">phantomjs</a> headless jasmine testing through guard, but it also provides command line and rake tools to run your jasmine specs during continuous integration.</li>
<li>Eventually, the <a href="https://github.com/bradphelan/jasminerice">jasminerice gem</a> makes it easy to write your jasmine specs with coffeescript. It also wraps a version of <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a> to assist client javascript testing. Although there is a &ldquo;looking for maintainer&rdquo; message on the README page, there are some recent commits, so it seems that pull requests are still being merged even if the project is not actively developpped anymore &hellip; I belive volunteers are welcome.</li>
</ul>


<p>All 3 have detailed and up to date setup and usage instructions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ditching autotest for guard]]></title>
    <link href="http://philippe.bourgau.net/ditching-autotest-for-guard/"/>
    <updated>2013-07-03T06:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/ditching-autotest-for-guard</id>
    <category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>I have been using <a href="https://github.com/grosser/autotest">autotest</a> for 2 years, and it&rsquo;s been great ! The first time I ran it I thought &ldquo;This rocks !&rdquo; and I have always been using it since &hellip;</p>

<p>A little later I read the book <a href="http://pragprog.com/book/rcctr/continuous-testing">Continuous Testing: with Ruby, Rails and JavaScript</a> and it suggested to use <a href="https://github.com/mynyml/watchr">watchr</a> instead. I never switched, partly because I did not take the time, and partly because watchr seemed to need quite a bit of manual configuration. Then, while contributing to other gems, I stumbled upon <a href="https://github.com/guard/guard">guard</a> and this one seemed great.</p>

<p>Switching to guard was in fact very simple, It took about 15 minutes, a lot less than the time I had spent configuring or tweaking autotest. I simply added these to my Gemfile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-cucumber&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran the install steps, and everything was working ! It&rsquo;s a shame I did not do the change earlier.</p>
]]></content>
  </entry>
  
</feed>
