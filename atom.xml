<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2014-01-21T06:28:08+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sprints are not sprints]]></title>
    <link href="http://philippe.bourgau.net/sprints-are-not-sprints/"/>
    <updated>2014-01-07T06:22:00+01:00</updated>
    <id>http://philippe.bourgau.net/sprints-are-not-sprints</id>
    <category term="agile" /><category term="scrum" />
    <content type="html"><![CDATA[<p>I really don&rsquo;t know why <a href="http://www.scrum.org">Scrum</a> Sprints are called sprints ! From my experience, the number one mistake made by team starting with Scrum is to work as quickly and dirty as possible to complete the sprint, forgetting the <a href="http://www.sustainablepace.net/">sustainable pace</a>.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2014-01-07-sprints-are-not-sprints/marathoner-vs-retail-sprinter.jpg" title="Side by side photos of a marathoner and a sprinter" ></p>

<p>Finding another word is difficult though, I thought of &lsquo;stage&rsquo; or &lsquo;milestone&rsquo; that both convey the long run idea, but both feel more content than time bounded. A more exotic word could be a &lsquo;Scrum push&rsquo;, it conveys slow and intense action action rather than quick results.</p>

<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/ST_vs_Gloucester_-_Match_-_23.JPG/640px-ST_vs_Gloucester_-_Match_-_23.JPG" title="A rugby scrum (Wikimedia)" ></p>

<p>Overall, the traditional agile &lsquo;iteration&rsquo; is not bad at all, at least a lot better than Sprint.</p>

<p><strong>EDIT 01/08/2014:</strong></p>

<p>The &lsquo;Quick and Dirty&rsquo; Sprint strategy, is like trying to win a marathon with a greedy algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="ow">not</span> <span class="n">finished</span>
</span><span class='line'>  <span class="n">sprint</span><span class="p">(</span><span class="mi">100</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not likely to work &hellip; Marathoners know that they&rsquo;ve got to stick to a constant speed during the whole race in order to finish it. The way to get faster is to :</p>

<ul>
<li>increase this cruise speed just a bit</li>
<li>get at ease with it during a few races</li>
<li>repeat</li>
</ul>


<p>Is there something to learn from this to improve software development speed ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying to explain monads in java]]></title>
    <link href="http://philippe.bourgau.net/trying-to-explain-monads-in-java/"/>
    <updated>2013-12-07T07:37:00+01:00</updated>
    <id>http://philippe.bourgau.net/trying-to-explain-monads-in-java</id>
    <category term="functional programming" /><category term="kata" /><category term="monads" />
    <content type="html"><![CDATA[<p>A few days ago, a colleague currently taking <a href="https://www.coursera.org/course/reactive">the coursera course about reactive programming in scala</a>, asked me to explain him what monads are. It&rsquo;s always a tough question, and I rarely manage to give un understandable answer simply. This time though, I kind of managed to pass him some understanding of monads :</p>

<ol>
<li>When modelising a statefull data structure with immutable constructs, one has to pass in and return the data structure state of every function</li>
<li>This results in a lot repeated code to pass this state around</li>
<li>With a monad, you can factorize this glue code and only write the &lsquo;real&rsquo; code</li>
</ol>


<p>I thought it might be a good subject for a java kata ! This is what I tried to do in <a href="https://github.com/philou/java-monads-kata">java-monads-kata</a>. Here is some sample monadic code from the kata itself :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span>
</span><span class='line'><span class="n">pops_objects_in_reverse_push_order</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">monad</span> <span class="o">=</span> <span class="n">monad</span><span class="o">.</span>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">push</span><span class="o">(</span><span class="n">A</span><span class="o">)).</span>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">push</span><span class="o">(</span><span class="n">B</span><span class="o">)).</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">monad</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">monad</span> <span class="o">=</span> <span class="n">monad</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">A</span><span class="o">,</span> <span class="n">monad</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="n">empty</span><span class="o">(),</span> <span class="n">monad</span><span class="o">.</span><span class="na">stack</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can have a look at all <a href="https://github.com/philou/java-monads-kata">the final code</a>, or <a href="https://github.com/philou/java-monads-kata/commits/master">go through the whole history</a> to get the &lsquo;kata&rsquo; feeling. It&rsquo;s a shame Github does not offer a nice chronological repo history slideshow, for better experience, I recommend that you use Chrome with <a href="https://chrome.google.com/webstore/detail/github-improved/nkbnmpfpclijlllipmfbkkednidgngaa">Github improved</a> : this allows to view diffs right from the Github history.</p>

<p>The resulting code is still quite far from a <a href="http://www.haskell.org/haskellwiki/Monad">Haskell monad</a> :</p>

<ul>
<li>Functions are not first class objects in Java. It is written in Java 7, without lambda, which does not help neither.</li>
<li>Java does not have Haskell type class polymorphism, but only supports OO polymorphism and very little covariance</li>
<li>The whole monad thing, designed at simulating/isolating side effects has a WTF feel in Java where side effects are just everywhere</li>
</ul>


<p>I&rsquo;d love to hear some feedback about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviews for everyone]]></title>
    <link href="http://philippe.bourgau.net/reviews-for-everyone/"/>
    <updated>2013-12-02T06:33:00+01:00</updated>
    <id>http://philippe.bourgau.net/reviews-for-everyone</id>
    <category term="agile" /><category term="code reviews" /><category term="version control" />
    <content type="html"><![CDATA[<p>We are using <a href="http://www.scrum.org">Scrum</a> at work. As an <a href="http://www.extremeprogramming.org/">eXtreme Programmer</a> to the bones, I wanted more <a href="http://www.extremeprogramming.org/rules/collective.html">collective code ownsership</a>. We were already doing some <a href="http://en.wikipedia.org/wiki/Pair_programming">pair programming</a> from time to time, but I thought it might be a good time to try public <a href="http://en.wikipedia.org/wiki/Code_review">code reviews</a>.</p>

<p>I have already been doing code reviews in other jobs, but the experience has been disappointing up till now for the following reasons :</p>

<ul>
<li>Even with review tools, they involved too much manual efforts</li>
<li>I&rsquo;ve been in jobs with reinforcing loops :
<img class="center" src="http://philippe.bourgau.net/imgs/2013-12-02-reviews-for-everyone/graph.png" title="Schema of a vicious circle : poor quality, bugs, not enough time, poor quality ..." >
In this kind of environment, even mandatory code reviews tend to become a useless &ldquo;tick in the box&rdquo; operation</li>
<li>Often they are used as a control mechanism rather than a share tool</li>
</ul>


<p>Public reviews, <a href="http://producingoss.com/en/setting-tone.html#code-review">as discribed by Karl Fogel in Producing Free Open Source Software</a> on the other hand seem something great to encourage share and peer review. The principles are simple :</p>

<ul>
<li>All commits must be reviewed by at least one person</li>
<li>Anyone can review anyone&rsquo;s code</li>
</ul>


<p>At work, we are using <a href="http://www.perforce.com">Perforce</a> and <a href="http://smartbear.com/products/software-development/code-review/">Code Collaborator</a> as a review tool. We did not have the possibility to send an email at every perforce submit, and manually creating code collaborator reviews for every change is a chore. I spent an afternoon writing a small ruby script that polls perforce for new changes, and automaticaly creates reviews in Code Collaborator from these. I also added something to spot existing Jira ids in commit messages, to enlarge the existing review instead of creating a new one for every commit.</p>

<p>We are very pleased with the result, all the team is participating to the reviews. As with all good code reviews, it&rsquo;s helps :</p>

<ul>
<li>Spoting some bugs</li>
<li>Spoting some possible design improvements</li>
<li>Discussing the global design and architechure of our system</li>
<li>Gathering coding standards</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I organized my javascript assets in Rails]]></title>
    <link href="http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails/"/>
    <updated>2013-11-27T05:56:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails</id>
    <category term="assets" /><category term="javascript" /><category term="rails" /><category term="testing" />
    <content type="html"><![CDATA[<p><a href="http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails/">Lately</a>, I have been introducing javascript and coffeescript in <a href="http://www.mes-courses.com">www.mes-courses.fr</a> (with structural architecture issues as a side effect, but that&rsquo;s another story &hellip;).</p>

<p>Here are the general goals I had when using the rails asset pipeline :</p>

<ul>
<li>most of js compiled in a single file</li>
<li>no js code in your html files : I want to use unintrusive javascript techniques, and have some outside js hook code that will wire js and html together</li>
<li>sometimes, I want some js code to be only explicitly included by some particular pages (example: hooking a timer on the document ready event of a particular html page). This means that I cannot simply compile all js code in a single minified file</li>
<li>In unit tests, I want to be able to manually set up and tear down the js hooks</li>
</ul>


<p>So, here is how I eventually organized my js code :</p>

<ul>
<li>I create a specific dependencies.js file that will require all outside dependencies</li>
<li>I split my js code under 3 subdirectories :

<ul>
<li>explicit : hooks that will be explicitly included</li>
<li>hooks : all the other hooks</li>
<li>application : all the real code</li>
</ul>
</li>
<li>In my application.js, I include dependencies and all files under application and hooks. Here is my app/assets/javascript/application.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require dependencies.js</span>
</span><span class='line'><span class="c1">//= require_tree ./application</span>
</span><span class='line'><span class="c1">//= require_tree ./hooks</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>In my tests, I only load dependencies and files from the application directory. Here is my spec/javascript/spec.js.coffee</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#= require ../../app/assets/javascripts/dependencies.js</span>
</span><span class='line'><span class="c1">#= require_tree ../../app/assets/javascripts/application</span>
</span><span class='line'><span class="c1">#= require_tree ./</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Hook code only consists of calling a setup function from the &lsquo;real&rsquo; code. For example, here is my app/assets/javascript/hooks/cart_lines/index.coffee file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">mesCourses</span><span class="p">.</span><span class="nx">cartLines</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">setUp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>this setUp function is defined in the app/assets/javascript/application/cart_lines/index.coffee file</p>

<ul>
<li>This way, from the unit tests, I can explicitly call this setUp function, here is the beginning of my spec/javascript/application/cart_lines/index_spec.coffee file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;mesCourses.cartLines.index&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">mesCourses</span><span class="p">.</span><span class="nx">cartLines</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">setUp</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you, how are you organizing your javacript assets ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileAvatars.com magnets for real]]></title>
    <link href="http://philippe.bourgau.net/agileavatars-dot-com-magnets-for-real/"/>
    <updated>2013-11-25T06:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/agileavatars-dot-com-magnets-for-real</id>
    
    <content type="html"><![CDATA[<p>A software team is now using <a href="https://www.scrum.org/">Scrum</a> and <a href="http://www.agileavatars.com">AgileAvatars.com</a> magnets in their daily work ! A few days ago, I sold my first lot of agile magnets. These customers were ready to experiment and iterate, and after trying some things that did not work so well, we came to a great result :</p>

<ul>
<li>As the surface of the magnets is rather small (4 by 4 centimeters), it required enough magnetic force to hold post-its and bristol cards to the board. I now use some 0.75 mm thick magnetic board, the same that is used to stick ads on driving cars</li>
<li>The magnets will be moved from hand to hand every day, I chose high quality glossy paper to make sure they&rsquo;ll stand the test of time.</li>
</ul>


<p><img class="center" src="http://philippe.bourgau.net/imgs/2013-11-25-agileavatars-dot-com-magnets-for-real/magnets.JPG" title="Photo of our first real magnets" ></p>

<p>I did not yet build any automatic order site or app, but I can now ship magnets for real though ! Don&rsquo;t hesitate to contact me through my email or the contact form on <a href="http://www.agileavatars.com">AgileAvatars.com</a> if ever you want more !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I just replaced Feedburner with MailChimp]]></title>
    <link href="http://philippe.bourgau.net/i-just-replaced-feedburner-with-mailchimp/"/>
    <updated>2013-10-08T06:36:00+02:00</updated>
    <id>http://philippe.bourgau.net/i-just-replaced-feedburner-with-mailchimp</id>
    <category term="rss" /><category term="web" />
    <content type="html"><![CDATA[<p>Until now, I had been using <a href="http://www.feedburner.com">Feedburner</a> to manage the email subscriptions to my <a href="https://www.mes-courses.fr/blog">blog on mes-courses.fr</a>. <del>It had been working fine</del> I thought it had been working fine until a friend of mine asked me if I was still working on it, since it had been a time since she did not receive any email !</p>

<p>It turned out that feedburner had not been forwarding emails for 6 months and that it had gone unnoticed &hellip; I had already had this issue before, and it was because my rss was not well formed according to feedburner (something related to unicode encoding I think). So to summarise :</p>

<ul>
<li>I lost trust in feedburner to forward my posts correctly</li>
<li>Feedburner is not maintained by Google anymore</li>
<li>They have been persistant rumors about Google shutting down Feedburner completly especially since the Reader shut down</li>
</ul>


<p>I started looking for alternatives. I tried <a href="http://www.nouri.sh">Nourish</a> and <a href="http://www.mailchimp.com">MailChimp</a> I did not manage to make Nourish work like I wanted, but I found MailChimp an intuitive and well documented product.</p>

<p>The setup with MailChimp was a lot longer than with Feedburner, but the result is great. I feed a lot more confident about these emails being delivered now.</p>

<p>There are a few points I still miss though :</p>

<ul>
<li>The social forward does not seem to work the same easy way, it looks like if MailChimp pushes the email content to your networks, but not a direct link to your blog</li>
<li>MailChimp does not track non-email subscribers to your rss. I&rsquo;ll have to check my analytics to see how to do it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Matchers Combinators 2 : spec_combos gem]]></title>
    <link href="http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem/"/>
    <updated>2013-09-25T21:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem</id>
    <category term="gem" /><category term="open source" /><category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>I already wrote about my <a href="http://philippe.bourgau.net/rspec-matchers-combinators/">RSpec Matchers Combinators</a>, I decided to extract them into the <a href="https://github.com/philou/spec_combos">spec_combos</a> gem.</p>

<p>To use it, just add the following to your Gemfile :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;spec_combos&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="s1">&#39;test&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compared to the first version of the matchers, I added better error messages. For example, consider the following complex nested assertion :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">all_</span><span class="p">{</span><span class="n">and_</span><span class="p">(</span><span class="n">be_odd</span><span class="p">,</span> <span class="n">be_instance_of</span><span class="p">(</span><span class="no">Fixnum</span><span class="p">))}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It outputs the following error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Failure/Error: expect([1,2,3]).to all_{and_(be_odd, be_instance_of(Fixnum))}
</span><span class='line'>  expected [1, 2, 3] to all be odd and be an instance of Fixnum, but the following were not:
</span><span class='line'>    [1] (2): expected 2 to be odd and be an instance of Fixnum, but:
</span><span class='line'>      expected odd? to return true, got false
</span></code></pre></td></tr></table></div></figure>


<p>I hope this might help !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec matchers combinators]]></title>
    <link href="http://philippe.bourgau.net/rspec-matchers-combinators/"/>
    <updated>2013-09-11T12:23:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspec-matchers-combinators</id>
    <category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p><a href="http://rubydoc.info/gems/rspec-expectations">Rspec matchers</a> are a lot like predicates. Predicates that can talk &hellip; The good thing about predicates, as anybody who has done a bit of functional programming will tell you, is that they are easy to combine together into bigger predicates. I was really suprised to see that rspec does not come with such simple combinators as &lsquo;and&rsquo; or &lsquo;or&rsquo;.</p>

<p>Here is a gist where I define simple combinators :</p>

<script src="https://gist.github.com/philou/6521797.js"></script>


<p>With this and the <a href="https://github.com/bmabey/email-spec">email_spec</a> matchers, it is possible to write something like this to find if an email was sent by rails :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">all_emails</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_any_that</span><span class="p">(</span><span class="n">and_</span><span class="p">(</span><span class="n">deliver_to</span><span class="p">(</span><span class="n">receiver</span><span class="p">),</span>
</span><span class='line'>                                         <span class="n">have_subject</span><span class="p">(</span><span class="n">subject</span><span class="p">),</span>
</span><span class='line'>                                         <span class="n">have_body_text</span><span class="p">(</span><span class="n">body</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It enables expressive test code and high reusability.</p>

<p>Using the &lsquo;all&rsquo; combinator it is possible to write things like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">sample_items_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">all_</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:price</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had to prepend &lsquo;all&rsquo; and &lsquo;and&rsquo; with an underscore because I would otherwise get conflicts&hellip; I&rsquo;m not overly satisfied with this, but it will do for the moment.</p>

<p>I was happily supprised by the readability of error messages when the mach fails. Rspec does a very good job about this. I think it would be possible to get even better error messages by explicity using the sub matchers messages though. If anyone is interested, help yourself !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby regex captures oneliner]]></title>
    <link href="http://philippe.bourgau.net/ruby-regex-captures-oneliner/"/>
    <updated>2013-09-11T09:02:00+02:00</updated>
    <id>http://philippe.bourgau.net/ruby-regex-captures-oneliner</id>
    <category term="regex" /><category term="ruby" />
    <content type="html"><![CDATA[<p>Surely this post is nothing new for experienced ruby developpers, but I found it so handy, that I thought it deserved a post of its own though. The problem is :</p>

<blockquote><p>How do I match and assign captures from a regex in a single line of code ?</p></blockquote>

<p>Here is the idea :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">brand</span><span class="p">,</span> <span class="n">item</span> <span class="o">=</span> <span class="sr">/([^,]*), (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brand</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;APPLE&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">item</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ipad&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few variations around this, like grouping some catpures in an array :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">brand</span><span class="p">,</span> <span class="o">*</span><span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brand</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;APPLE&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or to ignore some capture, we could shorten skip some captures :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">item</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">item</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ipad&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;iOs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this only works for first or last captures, when this is not the case, one can also use the functional programming &lsquo;_&rsquo; sink convention :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">brand</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">brand</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;APPLE&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;iOs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One can even use &lsquo;_&rsquo; multiple times on the same match</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">details</span> <span class="o">=</span> <span class="sr">/([^,]*), ([^:]*): (.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;APPLE, ipad: iOs&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;APPLE&quot;</span><span class="p">,</span> <span class="s2">&quot;ipad&quot;</span><span class="p">,</span> <span class="s2">&quot;iOs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">details</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;iOs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spork alternative compatible with cucumber]]></title>
    <link href="http://philippe.bourgau.net/spork-alternative-compatible-with-cucumber/"/>
    <updated>2013-08-03T08:51:00+02:00</updated>
    <id>http://philippe.bourgau.net/spork-alternative-compatible-with-cucumber</id>
    <category term="cucumber" /><category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>Version 1.3.0 of <a href="http://cukes.info/">Cucumber</a> droped spork support, so I had to find something else. I am using <a href="https://github.com/guard/guard">Guard</a> setup with <a href="http://rspec.info/">rspec</a> and Cucumber for my <a href="http://rubyonrails.org/">Rails</a> app.</p>

<p>I first tried <a href="https://github.com/burke/zeus">Zeus</a> with <a href="https://github.com/qnm/guard-zeus">guard-zeus</a>, it kind of worked, but it ruined my Guard console with the Zeus server status, and it left zombie processes on guard exit &hellip;</p>

<p>Eventually, I tried <a href="https://github.com/jonleighton/spring">Spring</a>, and once I made sure <a href="http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/">rspec and cucumber both ran on the test environment</a>, it worked fine with minimal configuration. Here is what I had to do to get it working</p>

<ul>
<li>remove spork from your Gemfile</li>
<li>remove require &lsquo;spork&rsquo;, Spork.prefork and Spork.each_run calls from spec/spec_helper.rb and features/support/env.rb</li>
<li>install spring</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install spring</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add spring to your Gemfile ! Also <a href="https://github.com/jonleighton/spring/blob/master/README.md">they say it is not required</a> I later had an error complaining it wasn&rsquo;t.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;spring&#39;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">group</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>update your Guardfile example :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="ss">:rspec</span><span class="p">,</span> <span class="ss">cli</span><span class="p">:</span> <span class="s2">&quot;--tag ~@slow&quot;</span><span class="p">,</span> <span class="n">all_after_pass</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">all_on_start</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">keep_failed</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">spring</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">bundler</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;cucumber&#39;</span><span class="p">,</span> <span class="n">all_on_start</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">cli</span><span class="p">:</span> <span class="s1">&#39;--format progress --no-profile&#39;</span><span class="p">,</span> <span class="n">command_prefix</span><span class="p">:</span> <span class="s1">&#39;spring&#39;</span><span class="p">,</span> <span class="ss">bundler</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add a .spring.rb file to automaticaly restart Spring on main file changes. I think I&rsquo;ll have to update this file when I discover that a test failed because spring needs to be restarted</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch</span> <span class="s2">&quot;.spring.rb&quot;</span>
</span><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch</span> <span class="s2">&quot;spec/factories&quot;</span>
</span><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch</span> <span class="s2">&quot;features/env.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Spring</span><span class="o">.</span><span class="n">watch_method</span> <span class="o">=</span> <span class="ss">:listen</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplest way to speed up rspec with in memory sqlite db]]></title>
    <link href="http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/"/>
    <updated>2013-08-02T09:16:00+02:00</updated>
    <id>http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db</id>
    <category term="cucumber" /><category term="rails" /><category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>There are already a lot of articles explaining how to setup an in memory <a href="http://www.sqlite.org/">SQLite</a> database to speed up <a href="http://rubyonrails.org/">Rails</a> specs or unit tests. Most of them explain how to change your database.yml and to run setup your schema before running the tests. It works fine.</p>

<p>There&rsquo;s a catch though : suppose you are using <a href="http://cukes.info/">cucumber</a>, it&rsquo;s likely you&rsquo;d rather run cucumber on a real database (<a href="http://www.postgresql.org/">PostgreSQL</a>, <a href="http://www.mysql.com/">MySQL</a> or whatever). Most gems expect cucumber and <a href="http://rspec.info/">rspec</a> to both run in the test environment &hellip; Every time I updated my bundle or that I wanted to use a new test gem, I would hit an issue about cucumber being run in its own &lsquo;cucumber&rsquo; environment : unexpected warnings and things not working out of the box.</p>

<p>Eventually, I ditched the cucumber env, setup a PostgreSQL db on the test env, and injected the in memory sqlite database right inside spec_helper.rb :</p>

<p>In database.yml :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mes_courses_test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mes_courses</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">secret</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5433</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the bottom of spec_helper.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">setup_sqlite_db</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="ss">adapter</span><span class="p">:</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="ss">database</span><span class="p">:</span> <span class="s1">&#39;:memory:&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">load</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">/db/schema.rb&quot;</span> <span class="c1"># use db agnostic schema by default</span>
</span><span class='line'>  <span class="c1"># ActiveRecord::Migrator.up(&#39;db/migrate&#39;) # use migrations</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">silence_stream</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">setup_sqlite_db</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My own side project best practices after reading the 'Side Project Book']]></title>
    <link href="http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book/"/>
    <updated>2013-07-25T07:26:00+02:00</updated>
    <id>http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book</id>
    <category term="boostrapping" /><category term="side project" /><category term="startup" />
    <content type="html"><![CDATA[<p>First, i recommend <a href="http://sideprojectbook.com/">this book</a> to any side project infected person : it&rsquo;s a great motivation boost !</p>

<p>After reading it, it seems that there are no absolute rules to side projects success. Some did no marketting and just did what they loved, others did à carefull market study before building anything, some did the whole things, others outsourced the code or the design, or even both &hellip; That said, as I read somewhere, it seems that one is more likely to achieve commercial success if he first focusses on the market, then marketting, then the design, and eventually on the features.</p>

<p>Common advices from the interviewees are :</p>

<ul>
<li>ship early</li>
<li>iterate</li>
<li>don&rsquo;t give up</li>
</ul>


<p>Why not apply these principle to &ldquo;building a side project&rdquo; instead of &ldquo;building XXX in my free time&rdquo; ?</p>

<p>From now on, I am going to set up project target duration and revenue. For example, if I don&rsquo;t make at least 100€ / month after one year, I&rsquo;ll stop working on it and start a new one.</p>

<p>I hope that by iterating more quickly through projects I&rsquo;ll learn more and increase my chances of successes as the time goes. Keeping the same target duration and revenue for all projects should make me better at filtering ideas that are a good fit to my resources. As I tend to get bored quickly, it should also allow me to keep my motivation high.</p>

<p>Let&rsquo;s see what happens !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[www.agileavatars.com : order customized avatar magnets]]></title>
    <link href="http://philippe.bourgau.net/www-dot-agileavatars-dot-com-order-customized-avatar-magnets/"/>
    <updated>2013-07-18T07:56:00+02:00</updated>
    <id>http://philippe.bourgau.net/www-dot-agileavatars-dot-com-order-customized-avatar-magnets</id>
    <category term="agile" /><category term="agileavatars.com" /><category term="side-project" /><category term="startup" />
    <content type="html"><![CDATA[<p>As agile and lean methodologies are gaining some place inside the workplace, especially in large corporations, I heard and saw quite a few teams struggling with their whiteboard because of :</p>

<ul>
<li>falling post-its</li>
<li>too few magnets</li>
<li>looking alike customized magnets</li>
</ul>


<p>The best practice seemed to order magnetic paper, and loose half a day to create individual avatars, print them and stick them to small pieces of magnetic paper.</p>

<p>This is the main idea behind <a href="http://www.agileavatars.com">AgileAvatars.com</a>. The main feature would be :</p>

<ul>
<li>create the avatars for your whole team</li>
<li>pass a group order, and receive the whole package directly at work</li>
</ul>


<p>For the moment, I am just testing the idea, so please enter your email in <a href="http://www.agileavatars.com">the contact form</a> to push the product. Tweet about it and it will be even better !</p>

<p>If it turns out people are interested, I&rsquo;ll start defining the MVP with the interested users :</p>

<ul>
<li>How much should I charge to burn the magnets ?</li>
<li>Should it be a web or phone app ?</li>
<li>How to create the avatars ?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine and coffeescript setup for rails]]></title>
    <link href="http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails/"/>
    <updated>2013-07-04T07:44:00+02:00</updated>
    <id>http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails</id>
    <category term="coffeescript" /><category term="jasmine" /><category term="javascript" /><category term="rails" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>As I started to write more javascript code in my <a href="https://www.mes-courses.fr">rails app</a>, it became obvious that I should be testing it ! I wanted to use <a href="http://pivotal.github.io/jasmine/">jasmine</a> and <a href="http://coffeescript.org">coffeescript</a>. I searched a long time to find out what was the most common and supported setup for a rails app, so now I recommand</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;jasmine&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jasminerice&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-jasmine&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <a href="https://github.com/pivotal/jasmine-gem">jasmine gem</a> is by far the most common jasmine gem, it is supported by <a href="http://pivotallabs.com">Pivotal Labs</a> so there is no fear of it being droped soon.</li>
<li>The <a href="https://github.com/netzpirat/guard-jasmine">guard-jasmin gem</a> is supported by <a href="https://mksoft.ch">MKSoft</a>, and is not only handling continuous <a href="http://phantomjs.org/">phantomjs</a> headless jasmine testing through guard, but it also provides command line and rake tools to run your jasmine specs during continuous integration.</li>
<li>Eventually, the <a href="https://github.com/bradphelan/jasminerice">jasminerice gem</a> makes it easy to write your jasmine specs with coffeescript. It also wraps a version of <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a> to assist client javascript testing. Although there is a &ldquo;looking for maintainer&rdquo; message on the README page, there are some recent commits, so it seems that pull requests are still being merged even if the project is not actively developpped anymore &hellip; I belive volunteers are welcome.</li>
</ul>


<p>All 3 have detailed and up to date setup and usage instructions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ditching autotest for guard]]></title>
    <link href="http://philippe.bourgau.net/ditching-autotest-for-guard/"/>
    <updated>2013-07-03T06:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/ditching-autotest-for-guard</id>
    <category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>I have been using <a href="https://github.com/grosser/autotest">autotest</a> for 2 years, and it&rsquo;s been great ! The first time I ran it I thought &ldquo;This rocks !&rdquo; and I have always been using it since &hellip;</p>

<p>A little later I read the book <a href="http://pragprog.com/book/rcctr/continuous-testing">Continuous Testing: with Ruby, Rails and JavaScript</a> and it suggested to use <a href="https://github.com/mynyml/watchr">watchr</a> instead. I never switched, partly because I did not take the time, and partly because watchr seemed to need quite a bit of manual configuration. Then, while contributing to other gems, I stumbled upon <a href="https://github.com/guard/guard">guard</a> and this one seemed great.</p>

<p>Switching to guard was in fact very simple, It took about 15 minutes, a lot less than the time I had spent configuring or tweaking autotest. I simply added these to my Gemfile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-cucumber&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran the install steps, and everything was working ! It&rsquo;s a shame I did not do the change earlier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be careful not to bundle FakeWeb in production]]></title>
    <link href="http://philippe.bourgau.net/be-careful-not-to-bundle-fakeweb-in-production/"/>
    <updated>2013-07-03T06:31:00+02:00</updated>
    <id>http://philippe.bourgau.net/be-careful-not-to-bundle-fakeweb-in-production</id>
    <category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>For testing purpose, I added <a href="https://github.com/chrisk/fakeweb">FakeWeb</a> to my app. Later, I deployed it to a staging env on heroku to find out that my scrapper started to fail with some strange Net::HTTPForbidden were occuring after about 90 minutes of scrapping, with no clear reason. It turned that I had mistakenly added FakeWeb to all environments, and that just removing it fixed the issue !</p>

<p>As it is working now, I didn&rsquo;t take the time to dig deeper into it &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matching meta tags with Capybara 2]]></title>
    <link href="http://philippe.bourgau.net/matching-meta-tags-with-capybara-2/"/>
    <updated>2013-07-01T20:20:00+02:00</updated>
    <id>http://philippe.bourgau.net/matching-meta-tags-with-capybara-2</id>
    <category term="ruby" /><category term="testing" /><category term="web" />
    <content type="html"><![CDATA[<p>As I updated my bundle, some capybara have_selector(&hellip;) matches started to fail. Here was the message :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expected to find xpath "//meta[@http-equiv='refresh']" but there were no matches. Also found "", which matched the selector but not all filters. (Capybara::ExpectationNotMet)</span></code></pre></td></tr></table></div></figure>


<p>After some searching, I eventually understood that it was a modification in the behaviour of Capybara 2 that only matches elements in the html body, and not in the head anymore. If trying to match the title, <a href="http://stackoverflow.com/questions/13573525/rspec-capybara-2-0-tripping-up-my-have-selector-tests">stackoverflow suggests</a> to use :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_title</span><span class="p">(</span><span class="s1">&#39;My page&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To match meta tags, I had to resort to the following :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">meta_refresh_tags</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="n">page</span><span class="o">.</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&quot;//meta[@http-equiv=&#39;refresh&#39;]&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">meta_refresh_tags</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span><span class="p">(</span><span class="n">be_empty</span><span class="p">,</span> <span class="s1">&#39;could not find a meta refresh tag&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could do with something nicer, but it&rsquo;s ok for the moment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitting the middle ground between classicist and mockist TDD]]></title>
    <link href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/"/>
    <updated>2013-06-18T08:55:00+02:00</updated>
    <id>http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd</id>
    <category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>From <a href="http://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&rsquo;s point of view</a>, I must have been a mockist. With using mocks extensively comes quite a few advantages :</p>

<ul>
<li>test failures often pinpoint the falsy code</li>
<li>easier test organisation mimicking that of the code</li>
<li>faster tests</li>
<li>simpler test initialization</li>
</ul>


<p>Mocks also have their own problems, but mostly :</p>

<ul>
<li>especialy with dynamicaly typed languages, a mock for class A might not implement the same methods than the real class A, but the test might be passing though ! This ampers refactoring with a longer feedback loop and mock setup rewriting</li>
</ul>


<p>That&rsquo;s what always bothered me. Eventually I tried a combinaison of techniques that seem to work well together and provides most of the best of both worlds.</p>

<ul>
<li>extensive use of factories (with <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a>) to simplify setup</li>
<li>use of an <a href="http://www.sqlite.org/inmemorydb.html">in memory sqlite database</a> to get a fast full working db</li>
<li>implement fully functional fakes for some parts of the system</li>
<li>carefull use of mocks, inspired from <a href="http://blog.rubybestpractices.com/posts/gregory/052-issue-20-thoughts-on-mocking.html">Gregory Brown&rsquo;s thoughts on mocks</a>

<ul>
<li>when a test is too slow</li>
<li>to cut off a dependency to a subsystem that is not available in a unit test</li>
<li>to simplify overly long test data setup</li>
</ul>
</li>
<li>use of test proxies (as in <a href="https://github.com/rr/rr">rr</a>) to inject specific behaviour or to perform specific checks without modifying the rest of the program.</li>
</ul>


<p>Here is how I implemented this with rspec :</p>

<script src="https://gist.github.com/philou/5894144.js"></script>


<p>With all this in place, it is most of the time possible to write straightforward tests. For example here, only real objects are used. @order gets its value when Order.create! is called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;should create an order with the cart&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">capture_result_from</span><span class="p">(</span><span class="no">Order</span><span class="p">,</span> <span class="ss">:create!</span><span class="p">,</span> <span class="ss">into</span><span class="p">:</span> <span class="ss">:order</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">check_in_cart</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@order</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="vi">@order</span><span class="o">.</span><span class="n">cart</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@cart</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maybe I should swith to rr &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Display full backtraces in rspec]]></title>
    <link href="http://philippe.bourgau.net/display-full-backtraces-in-rspec/"/>
    <updated>2013-06-07T06:51:00+02:00</updated>
    <id>http://philippe.bourgau.net/display-full-backtraces-in-rspec</id>
    <category term="rspec" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>I use <a href="http://rspec.info/">rspec</a> a lot. I thinks it&rsquo;s a great testing framework.</p>

<p>In order to get shorter error output, rspec cleans backtraces from outside code. Here are all the patterns that are removed from the full backtrace :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DEFAULT_BACKTRACE_PATTERNS</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="sr">/\/lib\d*\/ruby\//</span><span class="p">,</span>
</span><span class='line'>  <span class="sr">/org\/jruby\//</span><span class="p">,</span>
</span><span class='line'>  <span class="sr">/bin\//</span><span class="p">,</span>
</span><span class='line'>  <span class="sr">%r|/gems/|</span><span class="p">,</span>
</span><span class='line'>  <span class="sr">/spec\/spec_helper\.rb/</span><span class="p">,</span>
</span><span class='line'>  <span class="sr">/lib\/rspec\/(core|expectations|matchers|mocks)/</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of the time, that&rsquo;s great. Sometimes though, we get messages that seem completly unrelated to the code. Even worse, we might get misleading messages, such as &ldquo;method called with unexpected number of arguments&rdquo; that does not refer to the code in the backtrace, but to some other library code &hellip;</p>

<p>I thought it would be nice if we could switch this cleaning off sometimes. Here is how I did this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># RSpec automatically cleans stuff out of backtraces;</span>
</span><span class='line'>  <span class="c1"># sometimes this is annoying when trying to debug something e.g. a gem</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FULLBACKTRACES&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">backtrace_clean_patterns</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># some other configuration here</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, it is still possible to call rspec as before to get the standard behaviour, but it is now possible to specify the FULLBACKTRACES variable to get full backtraces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FULLBACKTRACES</span><span class="o">=</span><span class="kp">true</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rspec</span> <span class="n">spec</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't repeat names in cucumber scenarios]]></title>
    <link href="http://philippe.bourgau.net/dont-repeat-names-in-cucumber-scenarios/"/>
    <updated>2013-05-09T08:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/dont-repeat-names-in-cucumber-scenarios</id>
    <category term="BDD" /><category term="cucumber" /><category term="ruby" /><category term="testing" />
    <content type="html"><![CDATA[<p>When the same name is repeated all over the place in a cucumber scenario, it can be difficult to read.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Scenario:</span><span class="nf"> Withdrawing some cash</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">a deposit account with </span><span class="s">1000</span><span class="nf">€</span>
</span><span class='line'><span class="nf">  </span><span class="k">When </span><span class="nf">I withdraw </span><span class="s">100</span><span class="nf">€ from the deposit account</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">there should be </span><span class="s">900</span><span class="nf">€ on the deposit account</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be better if we could write it like that</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Scenario:</span><span class="nf"> Withdrawing some cash</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">a deposit account with </span><span class="s">1000</span><span class="nf">€</span>
</span><span class='line'><span class="nf">  </span><span class="k">When </span><span class="nf">I withdraw </span><span class="s">100</span><span class="nf">€ from the account</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">there should be </span><span class="s">900</span><span class="nf">€ on the account</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes we actually want to repeat the names though, either for clarity, or if we are dealing with many accounts within the same scenario.</p>

<p>To make both my scenarios more readable and my steps more versatile, I created special main_account_name accessors and a custom transform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">main_account_name</span>
</span><span class='line'>  <span class="vi">@main_account_name</span> <span class="o">||=</span> <span class="s2">&quot;credit&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">main_account_name</span><span class="o">=</span><span class="p">(</span><span class="n">account_name</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@main_account_name</span> <span class="o">||=</span> <span class="n">account_name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">CAPTURE_ACCOUNT_NAME</span> <span class="o">=</span> <span class="no">Tranform</span><span class="p">(</span><span class="sr">/^(a|an|the) *(.*) account$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">_prefix</span><span class="p">,</span> <span class="n">account_name</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">account_name</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">main_account_name</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">account_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When creating the account, I added some code to set the main_account_name</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span><span class="p">(</span><span class="sr">/^(</span><span class="si">#{</span><span class="no">CAPTURE_ACCOUNT_NAME</span><span class="si">}</span><span class="sr">) with (\d+)€$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">account_name</span><span class="p">,</span> <span class="n">amount</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">main_account_name</span><span class="o">=</span> <span class="n">account_name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is then possible to write steps like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span><span class="p">(</span><span class="sr">/^I withdraw (\d+)€ from (</span><span class="si">#{</span><span class="no">CAPTURE_ACCOUNT_NAME</span><span class="si">}</span><span class="sr">)$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">amount</span><span class="p">,</span> <span class="n">account_name</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>that will match both &ldquo;the deposit account&rdquo; and &ldquo;the account&rdquo; depending on context.</p>

<p>It would be really nice to be able to write things like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">there should be </span><span class="s">900</span><span class="nf">€ on it</span>
</span></code></pre></td></tr></table></div></figure>


<p>but because of the <a href="http://philippe.bourgau.net/if-new-cucumber-transform-breaks-everyhing-dot-dot-dot/">way cucumber handles transforms</a>, the only way I know to do that is to write a new step definition.</p>
]]></content>
  </entry>
  
</feed>
