<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-05-25T08:06:03+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[20 Bad Excuses For Not Writing Unit Tests]]></title>
    <link href="http://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/"/>
    <updated>2017-05-23T06:08:00+02:00</updated>
    <id>http://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests</id>
    <category term="joke" /><category term="software" /><category term="testing" />
    <content type="html"><![CDATA[<blockquote><p>I guess we always find excuses to keep on with our bad habits, don&rsquo;t we ? <em><a href="http://www.goodreads.com/quotes/797048-i-guess-we-always-find-excuses-to-keep-on-with">Stephen King</a></em></p></blockquote>

<ol>
<li>I don&rsquo;t have the time. <em>But you&rsquo;ll have the time to fix the bugs &hellip;</em></li>
<li>I don&rsquo;t know how to write tests. <em>No problem, anyone can <a href="http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">learn</a>.</em></li>
<li>I&rsquo;m sure the code is working now. <em><a href="https://www.brainyquote.com/quotes/quotes/e/edsgerdijk204340.html">The competent programmer is fully aware of the limited size of his own skull &hellip;</a></em></li>
<li>This code is not testable. <em>Learn or refactor.</em></li>
<li>It&rsquo;s (UI|DB) code, we don&rsquo;t test it. <em>Because it never crashes ?</em></li>
<li>Because I need to refactor first &hellip; and I need tests to refactor ! <em>Damn, you&rsquo;ve fallen into the test deadlock !</em></li>
<li>It&rsquo;s multithreaded code, it&rsquo;s impossible to test. <em>Because it&rsquo;s fully tederministic ?</em></li>
<li>The QA department is already testing the code. <em>Is that working well ?</em></li>
<li>I should not test my own code, I&rsquo;ll be biased. <em>Start testing other people&rsquo;s code right now then !</em></li>
<li>I&rsquo;m a programmer, not a tester. <em><a href="https://softwareengineering.stackexchange.com/questions/159572/as-a-professional-developer-is-it-acceptable-to-not-write-unit-tests">Professional programmers write tests</a>.</em></li>
</ol>


<p><img src="../imgs/2017-05-23-20-bad-excuses-for-not-writing-unit-tests/stronger_than_excuses_quote.jpg" alt="A quote 'Be Stronger Than Your Excuses'" /><div class="image-credits">From <a href="https://todayiwillbefit.com/2013/10/30/excuses-suck-top-10-bad-excuses-to-not-exercise/">todayiwillbefit.com</a></div></p>

<ol>
<li>I&rsquo;m using a REPL, it replaces unit tests. <em>Sure, and you&rsquo;re running your REPL buffers on the CI ? and keeping your them for the next time someone modifies your code.</em></li>
<li>My type system is strong enough to replace tests. <em>Does it detect when you use &lsquo;+&rsquo; instead of &lsquo;*&rsquo; ?</em></li>
<li>We don&rsquo;t have the tooling to write unit tests. <em><a href="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks">Get one</a>.</em></li>
<li>Tests aren&rsquo;t run automatically anyway. <em><a href="https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software">Install a Continuous Integration Server</a>.</em></li>
<li>I&rsquo;m domain expert developer, writing tests is not my job. <em>Creating bugs isn&rsquo;t either !</em></li>
<li>We&rsquo;d rather switch to the <a href="http://www.paulgraham.com/avg.html">Blub language</a> first ! <em>You&rsquo;re right, let&rsquo;s do neither then !</em></li>
<li>We don&rsquo;t test legacy code. <em>Specifically because it is <a href="https://en.wikipedia.org/wiki/Legacy_code">legacy code</a>.</em></li>
<li>Adding tests for every production code we write is insane ! <em>As shipping untested code is unprofessional.</em></li>
<li>I find more issues doing manual testing. <em><a href="http://philippe.bourgau.net/how-we-started-exploratory-testing/">Exploratory Testing</a> is a valuable testing, even more so on top of automated tests.</em></li>
<li>Because my teammates don&rsquo;t run them. <em>Time for a <a href="http://philippe.bourgau.net/most-scrum-teams-are-not-agile/">retrospective</a>.</em></li>
</ol>


<p><img src="../imgs/2017-05-23-20-bad-excuses-for-not-writing-unit-tests/just-do-it.jpg" alt="'Just Do It' written on a board" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From apprentice to master, how to learn TDD (Test Driven Development)]]></title>
    <link href="http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/"/>
    <updated>2017-05-15T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development</id>
    <category term="learning" /><category term="software" /><category term="tdd" /><category term="testing" />
    <content type="html"><![CDATA[<p>I started to learn <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> a long time ago. Since then, even though I&rsquo;m still not a master, it&rsquo;s been my most useful programming skill, by far. TDD is the first trick every new programmer should learn. It made my whole career as a developer easier.</p>

<p>I&rsquo;ve been working as a professional software engineer for more than 15 years, including around 10 years in the trading industry. Only once did I need to work on week ends or late into the night to fix emergency issues. I believe I largely owe this work-life balance to the high test coverage that TDD ensures by design.</p>

<p>TDD also enables safe refactoring. Refactoring enables <a href="http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/">incremental design</a> which lets you decide late. Deciding late is how you make your customers happy by accepting late changes. Deciding late is how take up-front design easy, and improve your code as you go. Deciding late is how you build trustful and harmonious relationships with the stakeholders of your project.</p>

<p>Finally, writing tests before the code is both easier and more fun. Among compilation errors and never ending customer demands, the recurring green barre tastes like pure candy to the poor programmer !</p>

<p><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/road.jpg" alt="A long winding road" /><div class="image-credits">From <a href="https://fr.pinterest.com/explore/winding-road/">Pinterest winding road catalog</a></div></p>

<h2>The TDD Road</h2>

<p>Here are the steps I took to learn TDD.</p>

<h3>Learn the principles</h3>

<p>The principles of Test Driven Development are fairly basic. 5 minutes is enough to know them forever :</p>

<ol>
<li>Write a failing test</li>
<li>Make it pass by doing the simplest thing possible</li>
<li>Refactor your code while keeping the tests passing</li>
<li>Repeat until your acceptance test is green</li>
</ol>


<p>TDD newbies might ask a few questions like :</p>

<ul>
<li>Is making the code compile in step 1 or 2 ? Honestly, that does not matter. Write the test as if you had the code, then make it compile, make sure it fails, and continue.</li>
<li>How much should I refactor ? It often takes a good amount of experimentation to find your good balance. If you don&rsquo;t refactor enough, you going to drown in dirty code. If you refactor too much, you&rsquo;re going to waste your time (<a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a>). As a rule of thumb, <a href="https://martinfowler.com/bliki/BeckDesignRules.html">Kent Beck&rsquo;s</a> rules on simple design are a very good starting point :</li>
</ul>


<p><a href="https://martinfowler.com/bliki/BeckDesignRules.html"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/beck-rules.jpg" alt="A visual graph of Kent Beck's rules of simple design" /></a><div class="image-credits"><a href="https://martinfowler.com/bliki/BeckDesignRules.html">From Martin Fowler : Beck Design Rules</a></div></p>

<h3>Find your tools</h3>

<p>Back in 2003, after reading <a href="TODO">Martin Fowler</a>&rsquo;s <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080119&amp;sr=1-1&amp;keywords=martin+fowler+refactoring">Refactoring: Improving the Design of Existing Code</a> book, I decided to give TDD a serious try. I was using C++ at work but we did not even have a nightly build. I had to download and setup <a href="https://en.wikipedia.org/wiki/CppUnit">CppUnit</a> on my own. As solo endeavor, this was a required step to get into TDD.</p>

<p>Find and setup a tool. Which one should be rather obvious, if your team already uses a unit test framework, stick to it, otherwise, pick the most standard for your language, ex : <a href="http://junit.org/">JUnit</a> for <a href="https://www.java.com">Java</a> (you might as well start searching for a new job where they use a unit testing tool).</p>

<h3>Train at a TDD coding dojo</h3>

<p><a href="http://codingdojo.org/">Coding dojos</a> were first invented as a tool to <a href="http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/">learn TDD</a>. They were started by two french eXtreme Programmers <a href="https://ut7.fr/">Emmanuel Gaillot</a> and <a href="http://institut-agile.fr/">Laurent Bossavit</a>. It happens that I live in Paris, and that Emmanuel came to work as a contractor at the same company I was. I learned that he was organizing a weekly coding dojo open to any developer. That&rsquo;s how I started attending coding dojos. Looking back, the TDD skills I learned at the coding dojo are just enormous !</p>

<p>If you are serious about learning TDD, attend coding dojos. Whether you find one in your city (ask <a href="https://www.meetup.com/">meetup.com</a>) or in your company does not really matter. If you cannot find any, just start one at work ! Send a public call for interested people (use wiki, mail, posters or whatever), book a room and start hacking ! <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo">Emily Bache&rsquo;s Coding Dojo Handbook</a> seems a very good reference about how to start a coding dojo (Disclaimer : I did not read the book, I only know it by reputation.)</p>

<p><a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/coding-dojo.jpg" alt="Cover of The Coding Dojo Handbook" /></a></p>

<h3>Use it</h3>

<p>If you&rsquo;re a professional programmer, you must be spending most of your time writing code. Take this opportunity to use TDD. You&rsquo;ll be slowed down a bit at the beginning, but as both your code and your skills improve, you&rsquo;ll get your time back manyfold.</p>

<p>I remember one of my first professional use of TDD was to write a small parser. A few weeks later I was asked to make it faster. Having tests around it made it easy to optimize it without breaking it.</p>

<h3>Deliberate practice</h3>

<p>In <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1494910468&amp;sr=1-1&amp;keywords=the+first+20+hours">The first 20 hours</a>, Josh Kaufman explains that deliberately practicing specific topics is a more time effective way of learning than simply crunching hours of practice.</p>

<p>My friend <a href="https://twitter.com/tpierrain">Thomas Pierrain</a> is used to regularly practice short 30 minutes katas to sharpen his programming skills. Katas can be found at <a href="http://codingdojo.org/KataCatalogue/">codingdojo.org</a>, at <a href="http://cyber-dojo.org/">cyber-dojo.org</a> or in <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo">The Coding Dojo Handbook</a>.</p>

<h3>Read</h3>

<p>Meanwhile I was doing all this, I also spent a lot of time reading on the subject. At the time, there was a lot of things about TDD in the <a href="http://wiki.c2.com/">C2 Wiki</a>, so I spent a lot of time there. Since then, I stumbled upon a few books that helped me to understand some aspects of TDD :</p>

<ul>
<li>Kent Beck&rsquo;s classic <a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080564&amp;sr=1-1&amp;keywords=tdd+by+example">TDD by example</a> remains a great reference for beginners</li>
<li>I got very useful advices from <a href="https://www.amazon.com/Test-Driven-Development-Practical-Guide/dp/0131016490/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1494911486&amp;sr=1-3&amp;keywords=test+driven+practical+guide">TDD, a practical guide</a> especially the section about UI testing, which really saved me at some point</li>
<li>Finally, <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests">Growing Object Oriented Software Guided By Tests</a> is now a classic about what is called &ldquo;The London school of testing&rdquo;, which uses mocks as a design tool. Definitely a must read.</li>
</ul>


<p><a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/growing.jpg" alt="Cover of GOOSGT" /></a></p>

<h3>Practice advanced topics</h3>

<p>The TDD road goes on forever, testing has a lot of tricky topics. Once you&rsquo;ve mastered the basics, it&rsquo;s quite interesting to explore and practice more complex subjects. Here are a few things worth trying out :</p>

<ul>
<li>Use automated IDE refactorings to keep the code compiling all the way through a kata</li>
<li>Do the same kata twice, using <a href="http://philippe.bourgau.net/flavours-of-tdd/">top-down and bottom-up</a> styles</li>
<li>Do refactoring katas to learn how to work with legacy code</li>
<li>Do UI katas, to learn how to test the UI</li>
<li>Learn how to deal with DB</li>
<li>Learn how to handle remote services</li>
</ul>


<p>If needed, invent your own katas to deliberately practice these topics and others.</p>

<h2>The pitfalls</h2>

<p>As any road worth walking, the TDD path is not linear and smooth. Before fully mastering TDD, you&rsquo;ll regularly wonder if you&rsquo;re on the right track. As any practice, TDD has pitfalls. I&rsquo;ve fell into some quite a few times. I guess that&rsquo;s part of the learning process.</p>

<h3>Emerging Design</h3>

<p>There&rsquo;s always been a lot of misunderstanding around this topic.</p>

<p>Bad smells in your code make your tests harder to write. If adding a test is painful, that&rsquo;s an indication that something could be improved in your design. It&rsquo;s then up to you to know what. Once you&rsquo;ve figured out what you want to change, use your existing tests to refactor your design first. Only then, add this new test.</p>

<p>As you can see, the tests will give you more feedback about the design of your code, but they won&rsquo;t tell you what to do. That&rsquo;s where your coding skills will help. This is particularly true about algorithms. Don&rsquo;t expect a good algorithm to magically appear as you do the simplest-thing-that-could-possibly-work &hellip;</p>

<p>As with any rules, there are exceptions. At times, you&rsquo;ll walk into a problem which emerging design is great. For example, I&rsquo;ve done the <a href="http://agilekatas.co.uk/katas/RomanNumerals-Kata">Arab to Romans</a> kata many times, and that repeatedly doing the simplest-thing-that-could-possibly-work yields a good solution.</p>

<h3>Mocks</h3>

<p><a href="https://en.wikipedia.org/wiki/Mock_object">Mocks</a> are useful at times, but be careful not to overuse them. I already <a href="http://localhost:4000/blog/categories/mocking/">wrote about mocks</a>. Too much mocking makes your test suite brittle, ineffective and difficult to maintain ! I&rsquo;ve been bitten hard by this one on a personal <a href="https://github.com/philou/mes-courses">side project</a>, the day I decided to get rid of all the mocks, I shrank the test code size by 25%. Since then I learned about alternate techniques such as :</p>

<ul>
<li><a href="http://www.natpryce.com/articles/000714.html">Test data builders</a> which allow to easily build test data</li>
<li><a href="https://martinfowler.com/bliki/ValueObject.html">Value objects</a> that are immutable and don&rsquo;t need mocking</li>
<li><a href="http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies/">test spies and proxies</a> as a way to mock and track calls while still calling the real code</li>
<li><a href="http://localhost:4000/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">in-memory fake implementations</a> which make the tests independent and fast without unmaintainable proliferation of mock setup</li>
</ul>


<p>As an indicator, less than 5% of my tests use mocks.</p>

<h3>Metrics</h3>

<p>In his <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">keynote at RailsConf 2014</a> DHH explains the danger of testing metrics.</p>

<p><a href="https://www.youtube.com/watch?v=9LfmrkyP81M"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/dhh.jpg" alt="DHH's keynote at RailsConf 2014" /></a></p>

<p>By using TDD correctly, you should get a high code coverage as a side effect. If you get below 80%, you must be doing something wrong. The other metric you should keep an eye on is the total build time. Original <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> had the <a href="http://www.jamesshore.com/Agile-Book/ten_minute_build.html">10 minutes build rule</a> which states that if your build + tests takes more than 10 minutes, you should refactor it.</p>

<p>That&rsquo;s it ! Things like 100% test coverage or test ratio are complete nonsense.</p>

<h2>Pushing it even further</h2>

<p>My promise, at the beginning of this post, was that Test Driven Development would make your life as a developer easier. Now let&rsquo;s imagine that your whole team or company was using TDD. It&rsquo;s a foundation on which to build a sustainable agile organization.</p>

<p>The mastery of automated testing at organization scale is a key element to continuous delivery, making releasing software a non-event, and as stress-free as possible.</p>

<p>Full adoption of TDD can yield to <a href="http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/">incremental architecture</a> which delivers features faster, by skipping the conflictual arguments about supposed future needs.</p>

<p>Finally, TDD can simplify your processes and tooling. Team-wide TDD results in a steady flow of features on top of which it is easier to create simple and effective processes and tools.</p>

<p>The road is long, sinuous and at times rocky, but so are the rewards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Most Scrum teams are not agile]]></title>
    <link href="http://philippe.bourgau.net/most-scrum-teams-are-not-agile/"/>
    <updated>2017-05-09T06:36:00+02:00</updated>
    <id>http://philippe.bourgau.net/most-scrum-teams-are-not-agile</id>
    <category term="agile" /><category term="continuous improvement" /><category term="retrospectives" /><category term="scrum" />
    <content type="html"><![CDATA[<p>Being agile is about adapting to change and continuously improving. I&rsquo;ve seen (and been) in too many teams blindly following Scrum (<a href="http://philippe.bourgau.net/how-to-kill-scrum-zombies/">Scrum Zombies</a>) without figuring out how to continuous improve. The most obvious symptom is a boring (or no) retrospective.</p>

<p>Usually, it did not start that way, people had good intentions, and tried to follow the Scrum cookbook. Unfortunately, without any guidance or extreme perseverance, it is plain too easy to mess up the retrospective. If no concrete actions are scheduled at the end of the retro, if the same problems keep coming up at every retro, or if no problems at all are raised during the retro : your Scrum is somehow broken !</p>

<p>One of the promises of Scrum is to keep code quality high, in order to be able to adapt to late changes. Without a good retro to update the coding standards, the working agreements, or to spot and organize large scale refactoring, this will not happen.</p>

<p>One of the agile principle <a href="http://agilemanifesto.org/principles.html">explicitly states</a> the need for motivated team members. In <a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1494561757&amp;sr=8-1&amp;keywords=pink+drive">Drive</a> Daniel Pink explains that one of the ingredient for motivation is autonomy. As a way to fix recurring problems, effective retrospectives will create autonomy, and enable motivation. Dysfunctional retros will slowly kill both &hellip;</p>

<p>Although continuous improvement at all levels is one of the most important element in your process, it needs a bit of practice to setup right. After trying different approach in different teams, I compiled a list of the things that worked for me :</p>

<p><a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1494561757&amp;sr=8-1&amp;keywords=pink+drive"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/drive.jpg" alt="The cover of the Daniel Pink's &quot;Drive&quot; book" /></a></p>

<h2>How to do successful retrospectives</h2>

<h3>Start !</h3>

<p>Sounds obvious ! The first step is to schedule a recurring meeting and invite all the team. Someone should take care of facilitating. If you want to improve things, do this yourself at the beginning ! Once the practice is in place and everyone sees the benefits, you&rsquo;ll be able to get some help.</p>

<p><a href="http://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives/">Here</a> is a crash-course about how to organize and drive your first retrospective. If your team is distributed, you&rsquo;ll need a slightly different setup. In my previous team, we had success using <a href="https://trello.com">Trello</a>, you can read more about it <a href="http://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello/">here</a>.</p>

<p><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/just-do-it.jpg" alt="Just Do It picture" /></p>

<h3>Make sure everyone talks</h3>

<p>Retros should not be &ldquo;just-another-boring-meeting&rdquo; ! People should be excited to be there and to solve their recurring problems. I&rsquo;ve seen retros where no one would speak, as if there was absolutely nothing to improve ! I&rsquo;ve also been in retros where people raised collaboration issues, and came up with drastic improvements to the way they work, like adopting pair-programming for example.</p>

<p>There can be many reason why people don&rsquo;t speak : habit, organizational culture &hellip; Whatever the cause, if you show them the path, if you demonstrate that retro work and that it is safe to speak, you&rsquo;ll get them to participate.</p>

<p>Here are a few tricks to guide a team there :</p>

<ul>
<li>It is said that if someone does not speak in the first 5 minutes of a meeting, he&rsquo;ll remain silent for the rest. That&rsquo;s why <a href="www.funretrospectives.com/category/energizer/">energizers</a> work. They force everyone to participate to a Fun activity right from the start. <a href="http://www.funretrospectives.com/">Fun Retrospective</a> contains a lot of engaging energizers.</li>
<li>Bring food ! Having food at work was one of Kent Beck&rsquo;s main advises in <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1494561932&amp;sr=1-2&amp;keywords=extreme+programming+explained+embrace+change">eXtreme Programming, Embrace Change</a>. Food is social and create a more relaxed and safer atmosphere.</li>
<li>Before you start the meeting, it might be useful to repeat the <a href="http://www.retrospectives.com/pages/retroPrimeDirective.html">Retrospective&rsquo;s Prime Directive</a>.</li>
</ul>


<blockquote><p>Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.</p></blockquote>

<ul>
<li>As the animator, you should make sure the discussions don&rsquo;t degenerate into some kind of trolling or blaming. If it&rsquo;s the case, remind that this is not the way the retro is meant to work. In worst case, give a 5 minutes break to everyone to calm down.</li>
<li>If needed, have a private discussion with people outside the retro to make sure that they understand the &ldquo;Blame the process, not the people&rdquo; principle of the retro well enough.</li>
</ul>


<p>Dealing with &ldquo;bad&rdquo; behavior in retros is a wide topic which I am only scratching the surface here. I guess I could write a full post about it.</p>

<p><a href="http://www.funretrospectives.com/"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/fun-retro.jpeg" alt="The cover of the &quot;Fun Retrospectives&quot; book" /></a></p>

<h3>Get out of with actionable tasks</h3>

<p>If you want a sure way to screw up your retros here it is : end the first one with no actionable things to do ! People will learn that it&rsquo;s a useless pscho-blabla meeting for agile softies.</p>

<p>This should be the absolute priority during the first retros. There are various kind of actionable tasks. Teams can adopt new conventions, decide to tackle some specific refactoring, or build a small new tool &hellip;</p>

<p>Actionable items should be small enough to be completed in one sprint. This is fine for refactoring a class, adding a <a href="https://www.sonarqube.org/">SonarQube</a> rule or asking for something from another team. What about larger tasks ? Suppose you just identified a large refactoring to do, how do you get started ? I know 2 strategies for that :</p>

<ul>
<li>Only identify the first step of what you want to start. At least, that&rsquo;s enough to get started and learn what to do later.</li>
<li>Agree on a <a href="https://mikadomethod.wordpress.com/">Mikado</a> discovery task to understand what needs to be done. Code is not the only thing that can be refactored with the Mikado method ! People have used it to transform <a href="http://nomad8.com/organisational-change-with-mikado/">organizations</a> !</li>
</ul>


<p>It&rsquo;s also a good habit to book the rooms for extra time after the official retro time. Nothing is as frustrating as being interrupted while investigating a promising improvement !</p>

<p>Finally, I think it&rsquo;s a good practice to review what happened of the improvements that were selected during last retro. It stresses the importance of doing what was scheduled in retrospective. It also gives a chance to investigate the reason why they were not done !</p>

<p><a href="https://www.amazon.com/Mikado-Method-Ola-Ellnestam/dp/1617291218/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1494562230&amp;sr=1-1&amp;keywords=mikado+method"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/mikado-method.jpg" alt="The cover of the &quot;Mikado Method&quot; book" /></a></p>

<h3>Put them in the sprint</h3>

<p>When actions are selected in the retro, you should add them to the coming sprint before it starts. Obviously, you&rsquo;ll add non business related items in your sprint backlog. Whatever you might have hear from agile zealots, do it ! Process improvements are fist class backlog citizens, just don&rsquo;t discuss them with your <a href="https://www.scrum.org/resources/blog/who-professional-scrum-product-owner">product owner</a>.</p>

<p>If you want a chance to deliver what you committed to in your sprint backlog, you&rsquo;ll need bandwidth for that ! They are many ways to do get that. Some teams use <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a>, others reserve an &lsquo;improvement day&rsquo; every sprint. My personal favorite (and the one we&rsquo;ve been doing at work) is to estimate the improvements in story points and reserve a fraction (ex 20%) of your story points for improvements.</p>

<p>You can try to negotiate your improvement ratio with your product owner &hellip; or you might also just set it yourself ! The team is responsible for the quality of its work. Better be sorry than ineffective. If you stick to your ratio and only work on the most important improvements, it&rsquo;s usually pretty easy to justify working on them. Plus if you manage to go under the radar for a few sprints, the results of the improvements should speak by themselves.</p>

<h3>Do them as soon as the sprint starts</h3>

<p>One last thing. Start to work on your improvements as soon as the sprint starts.</p>

<p>Improvements are similar to investments : you invest in process, tools or code in exchange for more value creation downstream. Once you&rsquo;ve decided to invest in something, what&rsquo;s the point of waiting 1 week ? Plus if you wait for later in the sprint, you run the risk of having unfinished improvements at the next retro, which might interfere when prioritizing new ones.</p>

<h2>Continuously improving teams</h2>

<p>Being part of a continuously improving team is easier to live than to describe. It feels like the future is bright. Once a team has mastered continuous improvement, people can be optimistic that they&rsquo;ll manage to adapt to change later down the road :</p>

<ul>
<li>They could switch gears and go full speed on a particular re-architecture</li>
<li>They could change their working agreements to adapt to new constraints</li>
<li>They could re-focus their efforts to handle a maintenance pike</li>
</ul>


<p>At the end of the day, bottom-up continuous improvement makes everyone&rsquo;s lives easier. Developers experience more autonomy while improving their productivity, they can do good work (which also means spending less time bug-fixing). Product owners learn that they can trust the team to do their best. Sponsors get more value for their money.</p>

<blockquote><p>Agile teams bend so they don&rsquo;t break !</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Straightforward Way to Scale to More Than 1 Scrum Team]]></title>
    <link href="http://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team/"/>
    <updated>2017-05-02T06:11:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team</id>
    <category term="agile" /><category term="scrum" />
    <content type="html"><![CDATA[<p>How come the &ldquo;agile scaling&rdquo; landscape seems so daunting and bloated ?</p>

<p>Being agile should be about taking baby steps, doing things incrementally, starting with the simplest thing that could possibly work, slowly but continuously improving and trying out experiments.</p>

<p>Here&rsquo;s a real-life 2 hours change that kicks-off a very efficient organization for a few scrum teams.</p>

<p><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/dive-jump.jpg" alt="A guy jumping from a cliff into the sea" /><div class="image-credits">&ldquo;SafeLess&rdquo; : everything will go fine as long as you follow the principles</div></p>

<h2>A classic story</h2>

<p>Without doing anything about it, there are a lot of situations in where <a href="https://www.scrum.org/">Scrum</a> teams will collaborate inefficiently. For example if you are a developer within a medium or large company, suffering from communication loss between your team and others. Or you could be the owner of a software startup, needing to dramatically grow your dev team.</p>

<p>Whatever your situation, without good collaboration, the output of two Scrum teams is bound to be a fraction of the sum of their individual outputs.</p>

<h3>Our own situation</h3>

<p>We are a group of 4 teams that spun out of the R&amp;D division. We are working to build a highly reusable component for the future versions of <a href="http://www.murex.com">Murex</a>&rsquo;s main product.</p>

<p>While in R&amp;D, teams were aligned with technologies. Now shifting to a product focus, this layered team structure makes it hard for us to organize efficiently. To make things even more tricky, the component we are building is something huge by itself, and we really need to find a way to deliver it incrementally.</p>

<p>This tech-oriented, low synchronization organization of team backlog was really underdelivering. It was not rare to see stories jump from one team to another, as dependencies were discovered, taking one full sprint every time. Integrating end to end features often took a few sprints instead of a few hours &hellip;</p>

<p>Clearly, we needed to do something.</p>

<h3>The simplest things that could possibly work</h3>

<p>Hopefully, all teams were following Scrum. We first had a look at scaling frameworks, especially since other parts of the company are moving to <a href="http://www.scaledagileframework.com/">SAFe</a> but we found that they required too much budget and re-organization for our means (remember, we are just a few motivated developers).</p>

<p>While we were discussing what to do, someone had an idea that was simple, cheap and easy : &ldquo;Let&rsquo;s start by doing all our scrum ceremonies together&rdquo;.</p>

<p>We took the opportunity to add a &lsquo;product&rsquo; retro after the teams retros, and a &lsquo;product&rsquo; planning just before the teams plannings. We were hoping that regular higher level retros would bring continuous improvement at the product scale and bring in all the other practices required to make it work.</p>

<h3>The situation now</h3>

<p>It&rsquo;s now been 2 sprints that we have set this up. Every 2 weeks, Friday is what we call Demo-Day. It&rsquo;s a meeting heavy day where all the teams have their scrum ceremonies together</p>

<ul>
<li>Product demo</li>
<li>Team retros</li>
<li>Product retro</li>
<li>Product planning</li>
<li>Team planning</li>
</ul>


<p>Sure as hell, 1 day of meetings is exhausting, but unfortunately, it is not possible to efficiently grow a team without increasing the communication overhead. The good side of the coin is that it allows the teams to focus on building valuable stuff during the 9 other days.</p>

<p>Here are the first effects we have seen.</p>

<h4>Improved team spirit &amp; product focus</h4>

<p>The first noticeable effect was on team spirit. Having a demo and planning for the whole team showed to everyone that we are all pulling towards the same goal. It helped everyone to understand what his current role is in this greater scheme, but also ways to tweak our individual roles to bring more value.</p>

<h4>Visible problems</h4>

<p>The second good effect is that problems are now visible. If teams are not working in the same direction, it&rsquo;s visible at the demo and plannings. If a team delivers a story too late for another one to integrated it, it&rsquo;s again visible at demo and planning.</p>

<p>Another example : after the product planning, Product Managers had to admit that they had not managed to feed high value stories to all teams. They asked to do a pre-planning preparation meeting (which is a standard practice in <a href="https://less.works">LeSS</a> for example)</p>

<h4>Better continuous improvement</h4>

<p>During our first team retro in this setting, we directly stumbled upon on a recurring systemic issue that we never managed to do anything about. Instead of going around in circle on the topic again, we pushed it to the product retro. We worked on another team related problem, for which we scheduled improvement actions.</p>

<p>During the product retro, we raised our recurring unsolved issue. With everyone in place, people higher in the organization had the chance to understand its consequences. Eventually, we managed to come up with concrete actions.</p>

<h2>How to do it</h2>

<h3>Pre-requisites</h3>

<p>There&rsquo;s only one thing required : that the teams are already following Scrum. All the rest is easy stuff.</p>

<p>This technique is a bottom-up agile adoption. If you want to switch your whole company from waterfall to something more agile, take a look at <a href="http://www.scaledagileframework.com/">SAFe</a>.</p>

<h3>Organizing the Demo-Day</h3>

<p>Here is our planning for our demo day</p>

<table>
<thead>
<tr>
<th></th>
<th> Time </th>
<th> Meeting </th>
<th> Who </th>
<th> Details </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 10h &ndash; 12h </td>
<td> Demo </td>
<td> Everyone </td>
<td> 30m per team |</td>
</tr>
<tr>
<td></td>
<td> 12h30 &ndash; 14h </td>
<td> Team Retro </td>
<td> Teams </td>
<td> Every team has a different retro in a different room |</td>
</tr>
<tr>
<td></td>
<td> 14h30 &ndash; 15h30 </td>
<td> Product Retro </td>
<td> Scrum master, volunteers, and decision makers </td>
<td> Decision makers are important to be able to take actions |</td>
</tr>
<tr>
<td></td>
<td> 16h &ndash; 17h </td>
<td> Product Planning </td>
<td> Product managers or owners, volunteers </td>
<td> Product people present what they would like to see in the product in one sprint |</td>
</tr>
<tr>
<td></td>
<td> 17h &ndash; 18h </td>
<td> Team Planning </td>
<td> Teams </td>
<td> Every team has a different planning in a different room |</td>
</tr>
</tbody>
</table>


<p>We had to negotiate a bit with other people in the company to get enough rooms for all these meetings at the same time, but all in all, it did not take more than 2 hours.</p>

<p>All meetings are open to anyone, everyone should have the right to come to any of them !</p>

<p>Obviously, that&rsquo;s a long day ! It&rsquo;s also full of team energy. In 2 sprints, we found the following improvements :</p>

<h4>Food</h4>

<p>We pre-order food to be delivered at work, so that we can all eat together. Did you know that food makes retros more efficient ?</p>

<h4>Product Retro</h4>

<p>You might have noticed that the product retro is only 1 hour long. To make it all fit in one day, we had to cut some time here and there &hellip; In order to gain some time on the product retro, we decided to pre-fill its &lsquo;gather data&rsquo; phase.</p>

<p>During team retros, if people find product scale issues, they can directly save them for the product retro items (As we are distributed, we use <a href="http://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello/">Trello for retrospectives</a>). This way, when the product retro starts, the gather data phase is almost done, pre-filled with genuine points.</p>

<h4>Keep the energy high</h4>

<p>One full day of meetings is long. People get tired. In order to keep the energy high and the overall experience fun, we deliberately added some fun throughout the day :</p>

<ul>
<li><a href="http://www.funretrospectives.com/category/energizer/">Energizers</a> at beginning of meetings</li>
<li>Board games during breaks</li>
<li>End of day celebration outside the office. You could go out and have a drink all together for exemple.</li>
</ul>


<p><a href="https://www.amazon.com/Asmodee-TIM01USASM-Timeline/dp/B005N57CNU/ref=sr_1_1?ie=UTF8&amp;qid=1493870547&amp;sr=8-1&amp;keywords=timeline"><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/timeline.jpg" alt="The Timeline board game box" /></a><div class="image-credits">We had fun playing this game between the meetings</div></p>

<h3>Preparing the product Backlog</h3>

<p>Depending on your situation, you might (or not) have a prioritized product backlog. My advice is to start with what you have.</p>

<p>If you are scaling your single team to 2, keep a unique backlog for both teams and create 2 feature teams. You&rsquo;ll be heading to the <a href="https://less.works">LeSS</a> organization, which you&rsquo;ll be able to refer to.</p>

<p>If you are applying this on existing scrum teams with their own backlogs, it might be easier to create a product backlog for the product managers. This is more akin to what <a href="http://www.scaledagileframework.com/">SAFe</a> suggests. It&rsquo;s not as straightforward as having a single backlog for everyone, you&rsquo;ll need to add some links between team and product stories to be able to track progress. Nevertheless, it provides visibility to everyone. As a side note, this is what we actually did.</p>

<p>Keep in mind that it&rsquo;s only a starting point anyway, product retrospectives might transform all this down the road any way.</p>

<h3>Start where you are now !</h3>

<p>The most important thing to do is to start ! There are always a ton of reasons why things are not ready and need more preparation. Remember the agile principles : integrate early and often, adapt, experiment &hellip; Here are few examples of bad reasons  not to start</p>

<ul>
<li>You cannot get all the good people in the room : start, invite them anyway, and send them a report of what has been decided without them. I cannot promise that&rsquo;s it&rsquo;s going to work at the end, but at least, it will create some discussions</li>
<li>The product backlog is not ready : start, and see what happens ! It will make it clear to everyone that product backlog is super important. People will organize to provide enough product features next sprint.</li>
<li>You need some other regular meetings for X, Y or Z. For example, <a href="https://www.agilealliance.org/glossary/scrum-of-scrums/">Scrum of Scrum</a> has daily SoS Meetings. Start anyway, if there&rsquo;s a need, people will ask for these extra meetings, which will save you some goodwill. You might also discover that you don&rsquo;t need these meetings at all and save some time !</li>
</ul>


<p>With a product retrospective every sprint, important issues will get addressed !</p>

<p><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/just-do-it.jpg" alt="Just Do It" /></p>

<h2>Does &lsquo;Agile Scaling&rsquo; even exist ?</h2>

<p>We did this on 4 teams. I have no ideas how it would work with more teams. We did not use any framework, even though we took ideas here and there. What we really did is to follow the agile principles, for example :</p>

<ul>
<li>KISS</li>
<li>Do the simplest thing that could work</li>
<li>Baby steps</li>
<li>Continuous improvement</li>
<li>Experiment</li>
</ul>


<p>Others have noticed similar things :</p>

<ul>
<li>LeSS : <a href="https://less.works/less/framework/introduction.html">&ldquo;Truly scaled scrum is Scrum scaled.&rdquo;</a></li>
<li>In the <a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?ie=UTF8&amp;qid=1493870372&amp;sr=8-1&amp;keywords=the+nature+of+software+development">Nature of Software</a> <a href="http://ronjeffries.com/">Ron Jeffries</a> explains that for a company is agile if it just focuses on delivering software &ldquo;feature by feature&rdquo;</li>
<li>In <a href="https://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1493870423&amp;sr=1-1&amp;keywords=large+scale+hp">A Practical Approach to Large-Scale Agile Development [&hellip;]</a>, the authors explain that they did not use any frameworks at HP, but just followed the agile principles</li>
</ul>


<p>Agile scaling frameworks might be a good starting point (the Shu in <a href="https://fr.wikipedia.org/wiki/Shuhari">Shu-Ha-Ri</a>), but only as long as the agile principles and values have not been understood by the organization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental architecture, a cure against architecture astronauts]]></title>
    <link href="http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/"/>
    <updated>2017-04-24T06:52:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts</id>
    <category term="agile" /><category term="architecture" /><category term="extreme programming" /><category term="software" />
    <content type="html"><![CDATA[<p>Back in 2001, when I started to code for a living, fresh out of school, I was mainly doing a form of <a href="https://en.wikipedia.org/wiki/Cowboy_coding">cowboy coding</a>. After a few months of maintaining my own mess, I started to recall my university lessons : we should be doing design before coding &hellip;</p>

<p>When I was asked to re-engineer the &lsquo;wizards UI&rsquo;, I paused my coding to design something clean from scratch. It worked quite well at first : the overall code was a lot simpler and contained a lot less duplication than before. Seeing this new shiny UI, product people asked for new features. Unfortunately, I hadn&rsquo;t thought of them when designing this little framework. I was almost back at my initial situation.</p>

<p>That&rsquo;s how I started to look for another way to design software. At about the same time the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_3?ie=UTF8&amp;qid=1493096057&amp;sr=8-3&amp;keywords=extreme+programming">eXtreme Programming book</a> fell into my hands. That&rsquo;s where I discovered the idea of incremental design and architecture.</p>

<p><a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_3?ie=UTF8&amp;qid=1493096057&amp;sr=8-3&amp;keywords=extreme+programming"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/xp-1ed.jpg" alt="Front cover of the first edition of the XP book" /></a></p>

<h2>What is Incremental Archi</h2>

<p>Let&rsquo;s start with the antithesis of incremental architecture :</p>

<h3>Astronaut Architecture</h3>

<p>The term &ldquo;Architecture Astronaut&rdquo; was coined by <a href="https://www.joelonsoftware.com">Joel Spolsky</a> back in 2001. If you haven&rsquo;t read this <a href="https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/">classic post</a> yet, I strongly encourage you to do so. Basically, he explains that we should not be impressed by architects going over their heads talking about too abstract stuff.</p>

<p>Incremental is the exact opposite of astronaut architecture</p>

<h3>Two Schools to Software Architecture</h3>

<p>Traditional architecture is about taking up-front choices that will be difficult to change. Incremental architecture is about preparing for non-stop change and taking decisions as late as possible.</p>

<p>The idea in incremental architecture is really simple : keep your code simple, clean and automatically tested in order to be able to simply adapt your code and architecture when definitely needed.</p>

<h3>Pros and Cons of incremental architecture</h3>

<p>The first reaction of most software engineers (me included, remember how my story started) is that it can only work on trivial stuff. After practicing it for about a decade, I am now convinced it works most of the time. I&rsquo;m not alone, <a href="http://www.jamesshore.com/Agile-Book/incremental_design.html">James Shore</a> (who wrote the more on the subject) also shares my view:</p>

<blockquote><p>Common thought is that distributed processing, persistence, internationalization, security, and transaction structure are so complex that you must consider them from the start of your project. I disagree; I&rsquo;ve dealt with all of them incrementally.</p>

<p>Two issues that remain difficult to change are choice of programming language and platform. I wouldn&rsquo;t want to make those decisions incrementally!</p></blockquote>

<p>I would add published APIs to this list.</p>

<p>Granted, there are situations that incremental architecture alone cannot handle, what about its good points then ?</p>

<p>In all the other cases (and that means most of the time), here is what you get :</p>

<ul>
<li>As you won&rsquo;t need to deal with future use cases, you&rsquo;ll do less work</li>
<li>That in turn, will keep your code simpler, decreasing time to release new features</li>
<li>As change is built-in, you&rsquo;ll be able to improve your architecture in ways you could not have imagined from the start !</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1493096137&amp;sr=1-1&amp;keywords=the+art+of+agile+development"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/art-of-agile.jpg" alt="Front cover of the Art of Agile Software Development book" /></a></p>

<p>If you cannot see how this could possibly work ? Read on !</p>

<h2>How to do it</h2>

<h3>eXtreme Programming</h3>

<p>As I said earlier, incremental architecture emerged from eXtreme Programming. It won&rsquo;t come as a surprise that in order to work well incremental architecture requires the XP practices to be in place. In particular, the code base should be automatically tested, the continuous integration cycle should take less than 10 minutes, the design should be simple. The team should be good at doing refactoring.</p>

<p>Don&rsquo;t expect to be able to do incremental architecture without these practices in place. But this alone might be enough already !</p>

<p><a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1493096197&amp;sr=1-1&amp;keywords=fowler+refactoring"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/refactoring.jpg" alt="Front cover of the Martin Fowler's refactoring book" /></a></p>

<h3>Architecture Vision</h3>

<p>At work, where our team consists of 9 developers, it&rsquo;s not always that simple to coordinate and all pull in the same direction. That&rsquo;s why we find it useful to share a very long term architecture vision (<a href="https://www.thoughtworks.com/insights/blog/enabling-incremental-design-and-evolutionary-architecture">Enabling Incremental Design and Evolutionary Architecture</a>). This will help people to make coherent decisions when hesitating between 2 alternate designs.</p>

<p>The vision can be the result of the work of a pair, or a mob brainstorming or whatever. Building this vision is typically an activity where experienced programmers can contribute a lot of value.</p>

<p>Once this vision is shared and understood by the team, every time a pair has to work on a story, they can orient the design towards it. But always as little as possible to finish the work at hand, remember the XP motos <a href="https://en.wikipedia.org/wiki/KISS_principle">KISS (Keep It Simple &amp; Stupid)</a> &amp; <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI (You Ain&rsquo;t Gonna Need It</a>.</p>

<p>One final word &hellip; a vision is just that : a vision ! It might turn out true, or false, be ready to change it as circumstances change.</p>

<h3>Spikes</h3>

<p>At times, even with a story in your hands and a long term architecture sketch on the whiteboard, you might have difficulties to know how to change your design to fulfill both.</p>

<p>As always in XP, in case of uncertainty, use <a href="http://agiledictionary.com/209/spike/">Spikes</a> ! Spikes are short time-boxed experiments of throwaway code, which goal is to answer a specific design question.</p>

<h3>How to mitigate the risks</h3>

<p>What about these topics that don&rsquo;t yield to incremental architecture ? What if you discover late that you need to change your platform ? Or your API ?</p>

<p>Obviously, you should think about these questions up-front. Hopefully, there are usually not that difficult to answer. But, over time, Non-Functional-Requirements and technologies change. Large and long living systems are particularly likely to need to change to a new platform someday.</p>

<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix had the answer</a> : build your system out of small tools, that do only one thing well, and that communicate through a standard protocol. Systems built that way can be re-written one piece at a time.</p>

<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/Ken_n_dennis.jpg" alt="Ken Thompson and Dennis Ritchie, the creators of Unix" /></a><div class="image-credits">Photo from <a href="https://commons.wikimedia.org/wiki/File:Ken_n_dennis.jpg">WikiMedia</a></div></p>

<p>The modern version of this is the micro-services architecture. Incremental architecture allows you to start with a monolith, split it when you need to, and replace micro-services as needed.   With the safety of simple code and a great automated test harness. Interestingly, successful software systems that were architectured up-front also take this road &hellip; without the safety !</p>

<h3>The Architect</h3>

<p>Good news : no more PowerPoints and a lot more coding with the team ! Here is what&rsquo;s expected from an incremental architect :</p>

<ul>
<li>To code with the team. As Bertrand Meyer once said &ldquo;<a href="http://stal.blogspot.fr/2008/08/architect-always-implements.html">Bubbles (aka. diagrams) don&rsquo;t crash</a>&rdquo;, it&rsquo;s plain too easy, and wrong, to mandate architecture without living with the consequences</li>
<li>To come up with more ideas when drafting the long term vision</li>
<li>To keep an eye on the &lsquo;long term&rsquo; while being the navigator in pair programming</li>
<li>In the second edition of the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1493096057&amp;sr=8-1&amp;keywords=extreme+programming">XP book</a> Kent Beck suggests that the architect should write large scale tests to stress the system and demonstrate architecture issues to the team</li>
<li>To delegate as much as possible to the team. However smart the architect, the team as a whole is smarter ! Delegating architecture increases motivation and the quality of the outcome.</li>
</ul>


<h2>End of the story</h2>

<p>I&rsquo;ve been practicing incremental architecture and design for a long time now. It made my life a lot simpler ! Most architecture questions become backlog items to prioritize.</p>

<p>One last advice : be prepared to re-read <a href="https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/">Joel Spolsky&rsquo;s article</a> whenever you get caught up in architecture meetings &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get your team to do code reviews]]></title>
    <link href="http://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/"/>
    <updated>2017-04-19T09:18:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews</id>
    <category term="best practices" /><category term="code reviews" /><category term="continuous improvement" /><category term="programming" />
    <content type="html"><![CDATA[<p>As software developers, we very <del>always</del> often get to work in code bases that are not perfect. In this situation we have 3 choices : leave, grumble, or make some changes ! Team wide code reviews are a recognized way to increase the quality of the code.</p>

<p>Unfortunately, installing code reviews as part of the daily work habits of a team can be very challenging. When I joined my team 3 years ago, no one was doing any kind of code reviews. With a small push here and there, I managed to get the team to adhere to a strict 4 eyes principle (full story <a href="http://philippe.bourgau.net/from-zero-to-pair-programming-hero/">here</a>).</p>

<p>Here are a few strategies that I have either used or seen that should get your team mates to do code reviews.</p>

<h2>Overall principle</h2>

<p>Even if you are at the bottom of the org chart, you have far more influence than you would first think. My favorite way of bringing change is to demonstrate a valuable practice :</p>

<ul>
<li>First, you need to be trustworthy</li>
<li>Then, do the practice you want to introduce</li>
<li>Make sure it is seen as valuable</li>
<li>Be ready to forgo the credits of the introduction of the practice</li>
<li>Keep on until people start to copy what you are doing</li>
</ul>


<p>As <a href="http://quoteinvestigator.com/2010/12/21/doing-good-selfless/">someone famous</a> said</p>

<blockquote><p>A man may do an immense deal of good, if he does not care who gets the credit</p></blockquote>

<p>I won&rsquo;t go in the details about how to be trustworthy, which could be a post of its own. Basically, putting our customers interests first, speaking the truth and avoiding to appear dogmatic can get us a long way already. <a href="https://www.amazon.fr/dp/B0050JLC9Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">The Clean Coder</a> is an excellent read on the subject.</p>

<p><a href="https://www.amazon.fr/dp/B0050JLC9Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1"><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/clean-coder.jpg" alt="Front cover of the Clean Coder book" /></a></p>

<h2>Strategies</h2>

<h3>If you have retrospectives in place</h3>

<p>In this case, you already have a place and time dedicated to discussing changes to your working agreements. Expressing your concerns about code quality (or another problem related to code reviews) and suggesting code reviews as a way to fix that problem might get a quick team buy-in.</p>

<p>If you don&rsquo;t manage to get a definitive buy-in, try to get the team to &lsquo;beta-test&rsquo; code reviews for a while. If the experiment demonstrates value, it will convert into a full fledged working agreement.</p>

<h3>If you practice collective code ownership</h3>

<p>Unfortunately, if you don&rsquo;t have retrospectives in place, or if you did not manage to get your team to discuss code reviews in retrospectives, yo&rsquo;ll need to find another way to introduce them.</p>

<p>If you have collective code ownership, it should be ok to comment on your team mates code (if not, jump directly to the next strategy). In this setting, just start to do some code reviews for others ! Make sure your reviews are helpful and &lsquo;nice&rsquo;.</p>

<p>You&rsquo;ll need to stick to doing code reviews long enough before people actually start to mimic you. Reserve some time in your daily agenda for code reviews. Your goal is to win over people, so it might be a good idea to start with a selected few at the beginning, preferably people who are more likely to jump in. If asynchronous (tool based) reviews don&rsquo;t get answered, be ready to fallback to face to face discussions : review on your own, then just ask the author for a few minutes so that you can discuss his change. When you feel someone is interested by your reviews, ask him to review your own code in return.</p>

<p>Remember to always try to get some feedback : ask people what they think of the exercise, keep note of the good points, and adapt to smooth out the rest.</p>

<p><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/collective.jpg" alt="Illustration of a team working collectively" /><div class="image-credits">Photo from <a href="https://www.emotuit.com/blog">emotuit</a></div></p>

<p>Once you won over your first team mate, involve him in your grand plan to spread the practice, explaining how much you think this could make a difference. As more and more people get convinced, the practice will eventually tacitly become part of your working conventions.</p>

<p>Depending on your context, this might take more or less time. I said it was possible, I never said it would be easy ! Grit, patience and adaptation are key here.</p>

<h3>Otherwise</h3>

<p>This is the worst starting point, basically, you have nothing yet. The strategy is very similar to the one with collective code ownership, with a different first move.</p>

<p>Instead of providing code reviews to your team mates, start by walking over to them to ask for a face to face code review of your own commits. Use the same tactic as stated before : stick to the same people at first. Once the practice starts to stick within this group, bring in a basic tool to ease up the process.</p>

<p>At some point, you should be asked to review others code, that&rsquo;s a good sign ! If not, try again with other people.</p>

<p>Continue using the same strategy as with collective code ownership and you should eventually get there !</p>

<h3>When it does not seem to stick</h3>

<p>There could be many reason why the practice is not adopted. The key for you is to understand why and to adapt your strategy. The reason is often that the perceived value is not big enough, for example :</p>

<ul>
<li>the team is not aware of its problems that reviews would fix : try to make them more visible</li>
<li>reviews are seen as too expensive or painful : try better tools or taking more on yourself</li>
<li>the team has bigger problems to fix first : spend your energy on these first !</li>
<li>reviews just don&rsquo;t work in your context (ex: your job is to write one time, throw away code) : it&rsquo;s up to you to stay or leave !</li>
</ul>


<h2>Tools</h2>

<p>There are a ton of tools and best practices to run code reviews. It&rsquo;s important that you know them, so that you know where you are going.</p>

<p>Don&rsquo;t expect to use the best tools from the start though. At the beginning, your goal is to win over your team mates. In this context, only 2 things matter :</p>

<ul>
<li>It should have almost no adoption curve, so that others start using it</li>
<li>It should have almost no maintenance cost, as you don&rsquo;t want to spend your time doing that</li>
</ul>


<p>That&rsquo;s why at the beginning, low tech tools are so great. Spending a month setting up a top notch code review system before the first review won&rsquo;t work. If your VCS has code reviews built-in, by all means use it ! Otherwise, diff in mails and face to face conversations are a good starting point. You&rsquo;ll later hook something in your VCS to automatically send mails with commit diffs &hellip;</p>

<p>As people gradually get convinced of the value of code reviews, regularly meet and discuss a better setup. This is how you&rsquo;ll introduce state of the art tools and agree on refinements such as pre or post commit reviews.</p>

<h3>Best practices</h3>

<p>As a code review champion, it&rsquo;s very important that you provide great reviews to your team mates. You must become the local expert on the subject ! You don&rsquo;t want all your efforts to be ruined because one of your reviews has been perceived as aggressive.</p>

<p><a href="https://static.rainfocus.com/oracle/oow16/sess/1473264722807001CoS2/ppt/code-reviews-vs-pull-requests.pdf"><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/atlassian.jpg" alt="A slide from Atlassian presentation about styles of code reviews" /></a></p>

<p>There is a ton of resources on the internet about how to perform good code reviews, here are a few :</p>

<ul>
<li><a href="https://twitter.com/mariakhalusova">Maria Khalusova</a>&rsquo;s talk at Devoxx 2016 <a href="https://www.youtube.com/watch?v=-tcy4z0hszg">How to stop wasting your time and start performing useful code reviews</a></li>
<li><a href="https://medium.com/@kannonboy/">Tim Pettersen</a> from <a href="https://www.atlassian.com">Atlassian</a> talked about <a href="https://static.rainfocus.com/oracle/oow16/sess/1473264722807001CoS2/ppt/code-reviews-vs-pull-requests.pdf">Code Reviews vs Pull Request</a> at JavaOne 2016</li>
<li><a href="http://marcotroisi.com/">Marco Troisi</a> wrote an extensive blog post about <a href="http://marcotroisi.com/how-run-code-reviews-in-your-workflow/">How to run code reviews in your dev team&rsquo;s workflow</a></li>
<li><a href="https://medium.com/@mrjoelkemp">Joel Kemp</a>&rsquo;s post <a href="https://medium.com/@mrjoelkemp/giving-better-code-reviews-16109e0fdd36">Giving better code reviews</a></li>
<li>Gareth Wilson&rsquo;s post <a href="https://blog.fogcreek.com/effective-code-reviews-9-tips-from-a-converted-skeptic/">Effective Code Reviews – 9 Tips from a Converted Skeptic</a></li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p>Congratulations ! Your team will start to reap the benefits of code reviews. Keep on improving the practice !</p>

<p>To end the story, after a few months of code reviews, during a retrospective, my team (<a href="http://www.murex.com/">at work</a>) decided to take it one step further and started to do almost full time pair programming ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A seamless way to keep track of technical debt in your source code]]></title>
    <link href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"/>
    <updated>2017-04-12T08:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code</id>
    <category term="lean" /><category term="programming" /><category term="technical debt" />
    <content type="html"><![CDATA[<p>I eventually stumbled upon a way to keep track of technical debt in source code that is both straightforward and already built-in most tools : simple <code>TODO</code> comments !</p>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/todo-comment.jpg" alt="Photo of a screen displaying source code with #TODO comments" /></p>

<h2>How it happened ?</h2>

<p>Some time ago, we tried to add <a href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/"><code>@TechnicalDebt</code></a> annotations in our source code. Unfortunately, after a few month, we came to the logical conclusion that it was too complex to be effective :</p>

<ul>
<li>It involved too much ceremony, which frightened people</li>
<li>It made people uneasy to change anything around the annotation instead of sending a call to action</li>
<li>As a result, it was always out of date</li>
</ul>


<p>After a bit of discussion with my colleagues, we decided to replace all these annotations with simple <code>TODO</code> comments.</p>

<p>When the refactoring to do seems fairly obvious (but also premature) we&rsquo;ll use a straightforward <code>//TODO (example) introduce a factory</code> message. Next time a pairs gets to work on this part of the code, they get the silent opinion of their peers to help them decide what to do about this piece of the code. Other times, the code might be smelly, yet without us knowing what to do about it yet, in this case, we agreed to use <code>//TODO SMELL (example) responsibilities are not clear in this class</code> which is still a <code>TODO</code> comment, but not a clear call to action.</p>

<p>When I started my <a href="https://github.com/philou/planning-poker">current side project</a>, I naturally started to use them. They display nicely in <a href="https://codeclimate.com/github/philou/planning-poker/issues">CodeClimate</a>.</p>

<h3>The pros</h3>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/codeclimate.jpg" alt="Screenshot of the CodeClimate issue dashboard displaying TODO comments" /></p>

<p>The great thing about <code>TODO</code> comments is that, as a very old programming trick, they are already supported out of the box by most tools <a href="https://www.jetbrains.com/">IntelliJ</a>, <a href="https://www.sonarqube.org/">SonarQube</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="https://codeclimate.com">CodeClimate</a> and I guess many others. Only one day after I refactored to <code>TODO</code> comments, a team mate fixed one that had appeared in his IDE&rsquo;s TODO tab !</p>

<h3>The cons</h3>

<p>Some tools, IDEs in particular, tend to assume that you should fix all your <code>TODOs</code> before you commit anything. That&rsquo;s not exactly how we are using them to track lasting technical debt. So that&rsquo;s one thing you need to keep in mind.</p>

<p>Tools like Sonar on the other hand, assign a fixed remediation cost to any <code>TODO</code> you have in the code, which is usually not the case at all !</p>

<h2>How to set it up in your project</h2>

<p>As you might guess, this is pretty easy. Just start adding <code>TODO</code> comments in your code &hellip;</p>

<h3>Teamwise</h3>

<p>It is worth first validating the practice with your colleagues though. There are many ways to do that, depending on your team&rsquo;s work habits :</p>

<ul>
<li>Use your team <a href="https://slack.com/">Slack</a> (or whatever chat room you use) to share a link to this post (for example) and create a yes/no poll</li>
<li>Or if you think you need it, create some wiki page explaining the practice and detailing its rationals in your context, add a yes/no poll, and finally share this page with your team</li>
<li>Eventually, if you think that this topic deserves it, setup a meeting with everyone and discuss the point. It might be worth sharing information about the practice beforehand to make the meeting more efficient. You can end the vote with a <a href="http://www.plays-in-business.com/thumb-voting/">thumb vote</a> (up : yes, down : no, side : whatever)</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/thumb-vote.jpg" alt="Thumbs voting positions" /><div class="image-credits">Photo from <a href="http://www.plays-in-business.com/thumb-voting/">Plays in Business</a></div></p>

<p>Don&rsquo;t wait for unanimity to start the practice, majority is enough ! Make sure that people who voted the other way will follow the team practice in the end though. Remember that whatever the answer, discussing team practices is good.</p>

<p>Once all the team agreed on using (or not) <code>TODO</code> comments, mention the practice in your team&rsquo;s coding conventions or working agreements (which I strongly recommend to have written somewhere). If you don&rsquo;t have any yet, create some !</p>

<h3>Toolswise</h3>

<p>Most tools will handle <code>TODO</code> out of the box.</p>

<ul>
<li>Rails comes with a <code>rake notes</code> task to list <code>TODO</code> comments.</li>
<li>CodeClimate and SonarQube both lists <code>TODOs</code> as issues in their default config</li>
<li>Most IDEs have a &lsquo;TODO&rsquo; tab which will display the <code>TODO</code> comments in the project</li>
<li>Otherwise, good old grep will very happily find <code>TODO</code> comments in your code</li>
</ul>


<p>Some tools might require small tweaks to improve the experience :</p>

<ul>
<li>In IntelliJ, in the commit window, uncheck the &lsquo;Check TODO&rsquo; checkbox to avoid getting a warning at every commit</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/intellij-commit.jpg" alt="IntelliJ's commit window, with its 'Check TODO' check box" /></p>

<ul>
<li>SonarQube uses the same fixed remediation cost for every TODO comment. It&rsquo;s up to you to adapt this remediation cost to your context.</li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p><code>TODO</code> comments are a good starting point to track technical debt. Once you start using them, there are a few things you can do :</p>

<p>First, remember to fix some regularly. Very old <code>TODO</code> comments are technical debt of their own ! Using code quality dashboards like SonarQube or CodeClimate help to continuously improve your code.</p>

<p>If your tools allow it, you might consider setting up a simpler <code>//SMELL ...</code> instead of <code>//TODO SMELL ...</code> or whatever other special comment that might be useful in your context.</p>

<p>Finally, there is a lean continuous improvement practice which consists of logging problems as they occur. Doing this could help your team to decide which technical debt hotspots are the most important to fix. When appropriate, link the problems with the <code>TODO</code> comments. After a few weeks of this, walking through all the problems during a retrospective should shed light on what parts of the code are causing the most troubles.</p>

<h2>Edit 2017-04-19</h2>

<p>Thanks a lot for your comments ! People have suggested a ton of great improvements over my basic setup :</p>

<ul>
<li>plugins to other tools that also support <code>TODO</code> comments</li>
<li>activating automatic sync between issues in CodeClimate and your issue tracking system</li>
<li>using custom comments markers</li>
<li>adding an &lsquo;X&rsquo; to your comment every time you are bothered by the technical debt, tools can configured to assign a higher severity to issues with a lot of &lsquo;X&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to mock your browser's timezone with Jasmine and MomentJS]]></title>
    <link href="http://philippe.bourgau.net/how-to-mock-your-browsers-timezone-with-jasmine-and-momentjs/"/>
    <updated>2017-03-30T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-mock-your-browsers-timezone-with-jasmine-and-momentjs</id>
    <category term="jasmine" /><category term="javascript" /><category term="testing" />
    <content type="html"><![CDATA[<p>Last week, I&rsquo;ve been working at adding a distributed countdown to my <a href="https://github.com/philou/planning-poker">Online Planning Poker App</a>. As our team works from Paris and Beirut, I wanted to unit test that it would work well through different timezones. I found a surprisingly simple solution.</p>

<h2>What Google told me</h2>

<p>I first searched Google to see how to do it. I found 2 answers that looked promising :</p>

<ul>
<li><a href="https://balanceiskey.github.io/2016/01/27/mocking-timezones.html">You can use moment-timezone to mock timezones in Jasmine</a> which I unfortunately did not manage to use</li>
<li><a href="http://stackoverflow.com/questions/12220717/how-to-mock-the-browsers-timezone">How to mock the browser&rsquo;s timezone?</a> which seemed a bit of hack</li>
</ul>


<p>Known results for such a simple situation were disappointing !</p>

<h2>What I ended up with</h2>

<p>After a good deal of dabbling around, I eventually found a pretty simple solution using <a href="https://jasmine.github.io/">Jasmine</a> and <a href="https://momentjs.com/timezone/">Moment Timezone</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jasmine</span><span class="p">.</span><span class="nx">clock</span><span class="p">().</span><span class="nx">install</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">jasmine</span><span class="p">.</span><span class="nx">clock</span><span class="p">().</span><span class="nx">mockDate</span><span class="p">(</span><span class="nx">moment</span><span class="p">.</span><span class="nx">tz</span><span class="p">(</span><span class="s2">&quot;2017-03-23 10:00:00&quot;</span><span class="p">,</span> <span class="s2">&quot;Europe/Paris&quot;</span><span class="p">).</span><span class="nx">toDate</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, the drawback is that it implies setting both the timezone <em>and the time</em>. This should be ok in most of unit tests though, but might be an issue in some cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Almost 15 years of using Design By Contract]]></title>
    <link href="http://philippe.bourgau.net/almost-15-years-of-using-design-by-contract/"/>
    <updated>2017-03-14T18:57:00+01:00</updated>
    <id>http://philippe.bourgau.net/almost-15-years-of-using-design-by-contract</id>
    <category term="contracts" /><category term="ddd" /><category term="functional-programming" /><category term="programming" />
    <content type="html"><![CDATA[<p>I first read about Design By Contract in 2002, in <a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_2?ie=UTF8&amp;qid=1490073815&amp;sr=8-2&amp;keywords=object+oriented+software+construction+meyer">Object Oriented Software Construction 2</a>. As soon as I read it, I was convinced, today, I still believe it&rsquo;s a great and fundamental technique. That&rsquo;s why, I almost never write a contract ! Let me explain.</p>

<h2>Phase 1 : DbC ignorance</h2>

<p>I started to code professionally in 2001. This was a time where design and quality software meant <a href="https://en.wikipedia.org/wiki/IBM_Rational_Rose_XDE">Rational Rose</a> (a UML design and code generation tool) while I, at the contrary, was just <a href="https://en.wikipedia.org/wiki/Cowboy_coding">Cow Boy Coding</a> my way out of any problem I was given.</p>

<p>I wasn&rsquo;t really doing Object Oriented programming, but rather imperative programming, using objects as structs, getters, setters, and classes as a way to organize the code &hellip; In this context, my design skills were improving slowly, and I was at the risk of falling in love with a local-optimum practice that would prevent me from growing further.</p>

<p>That&rsquo;s why I started to read books such as the <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1490074343&amp;sr=1-1&amp;keywords=design+patterns">Gang Of Four Design Patterns</a>, or <a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_2?ie=UTF8&amp;qid=1490073815&amp;sr=8-2&amp;keywords=object+oriented+software+construction+meyer">OOSC2</a>.</p>

<h2>Phase 2 : DbC enlightenment</h2>

<p><a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_2?ie=UTF8&amp;qid=1490073815&amp;sr=8-2&amp;keywords=object+oriented+software+construction+meyer"><img src="../imgs/2017-03-14-almost-15-years-of-using-design-by-contract/OOSC2.jpg" alt="The cover of the Object Oriented Software Construction 2" /></a></p>

<p>Reading this book was a profound experience to me. My programming changed fundamentally before and after reading it. The chapter about contracts, taught me what objects are.</p>

<p>One the one hand, Pre and Post conditions can be used in any kind of programming and are just a kind of C <code>assert</code> macro on steroids. Class invariant, on the other hand, is a completely different kind of beast. The invariant of a class is a predicate about an instance of this class that should always be true. For example : field X should never be null, or the value of field N should always be greater than 0.</p>

<p>In some way, grasping the concept of invariant is close to understanding what a class is.</p>

<h2>Phase 3 : DbC everywhere</h2>

<p>That&rsquo;s when I started to write contracts everywhere. I was writing C++ code at the time, and my code must have looked something like that :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">MonkeyWrench</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">_isStarted</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Part</span><span class="o">&gt;*</span> <span class="n">_movingParts</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">invariant</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="n">_isStarted</span> <span class="o">==</span> <span class="p">(</span><span class="n">_movingParts</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MonkeyWrench</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">_isStarted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">_movingParts</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">invariant</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isStarted</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">isStarted</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">isStarted</span><span class="p">());</span>
</span><span class='line'>        <span class="n">invariant</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">_movingParts</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">invariant</span><span class="p">();</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">isStarted</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Part</span><span class="o">&gt;&amp;</span> <span class="n">movingParts</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">isStarted</span><span class="p">());</span>
</span><span class='line'>        <span class="n">invariant</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_movingParts</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I definitely over-abused contracts, it made the code unreadable. Plus sometimes, I was using excessively long and intricate assertions which made the problem even worse.</p>

<p>Hopefully, overusing contracts also taught me a lot in a short time. Here are some of the lessons I learned :</p>

<ul>
<li>DbC is not very well supported, it&rsquo;s never something built in the language, and edge cases like inheriting an invariant or conditions can become messy pretty fast.</li>
<li>Checking for intricate contracts at every method call can be pretty slow.</li>
<li>Checking everything beforehand is not always the simplest thing to do, at times, throwing an exception on failure just does a better job.</li>
<li>It happened that removing the contract made the code do just what I wanted. It&rsquo;s easy to write unnecessary strict contracts.</li>
<li><a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">Command Query Separation Principle</a> is great ! Having &lsquo;const&rsquo; or &lsquo;pure&rsquo; queries that don&rsquo;t change anything make writing contracts a lot simpler.</li>
<li>Preconditions on queries are painful. When possible, returning a sensible &lsquo;null value&rsquo; works better, nothing is worse than getting an error when trying to call a const query from the interactive debugger.</li>
<li>Finally, the more immutable a class is, the simpler the invariant. With a lot of mutable fields, you might resort to have the invariant check that fields are synchronized as expected. If fields are immutable, this simply vanishes.</li>
</ul>


<h2>Phase 4 : DbC hangover</h2>

<p>At the same time I discovered all these small subtleties about contracts, I fell upon Martin Fowler&rsquo;s book <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1490074424&amp;sr=1-1&amp;keywords=refactoring+improving+the+design+of+existing+code">Refactoring, improving the design of existing code</a> and started to use Unit Tests extensively. This lead me to the following conclusions :</p>

<ul>
<li>Tests are more efficient at producing quality software</li>
<li>Contracts can be an hindrance when trying to do baby steps refactorings as described in Martin Fowler&rsquo;s book</li>
</ul>


<p>On top of that, as DbC is not natively supported by languages, no documentation is generated, meaning that most of the time, the callers still have to look into the code. As a result, I was using contracts less and less often.</p>

<h2>Phase 5 : DbC Zen</h2>

<p>Looking back, I might not be writing a lot of <code>asserts</code> in my code, but I am still thinking in terms of contracts all the time. In fact, there are a ton of ways to use DbC without writing assertions :</p>

<ul>
<li>Use as much immutability as possible. An immutable class does not need to check its invariant all the time, just throwing from the constructor if arguments are not valid is enough.</li>
<li>Use conventions as much as possible, for example, constructor arguments should be set for all the life of the object (cf <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1490074450&amp;sr=1-1&amp;keywords=growing+object+oriented+software+guided+by+tests">Growing Object Oriented Software Guided by Tests</a> which describes the different ways to inject something in an object)</li>
<li>Looking back at my DbC assertions, most relate to null values. Again conventions work better ! At work, we simply forbid passing null values around. If something can be null, it means it&rsquo;s optional, Java has an <code>Optional&lt;T&gt;</code> class for just that (I&rsquo;m pretty sure it is possible to do something even better with C++ templates). In this case, if the contract is broken, NullReferenceException will eventually be our assertion.</li>
<li>Replace as many pre &amp; post conditions with invariants on the callee, the arguments or the return objects as possible. It makes sense as it&rsquo;s just making sure we are using &lsquo;valid&rsquo; objects everywhere. Again, if these objects are immutable, it makes the whole thing even simpler !</li>
<li>To take further benefit of the invariant of immutable objects, introduce new types. For example, instead of changing an object&rsquo;s state through a command with associated involved contracts, split the class in 2 and make the method a query returning an immutable object, potentially making the initial class immutable as well. Remember, immutable classes mean almost no assertions !</li>
<li>Use your language. Ex, instead of asserting that 2 lists remain of the same length, refactor to a list of pairs ! (I know that&rsquo;s an obvious example, but you get the point)</li>
<li>If you are using a statically typed language, use types ! For example, I remember at one project I worked on, we had an bug involving a duration : somewhere in the code milliseconds got mistaken for seconds &hellip; We fixed that by replacing the <code>integer</code> by <code>TimeSpan</code> all over the place. Again, that&rsquo;s so obvious !</li>
<li>Eventually, when all else fails, or when it&rsquo;s just too much overhead, use the simple asserts provided by your language or common libraries.</li>
</ul>


<p>To come back at the previous code section, this how it could be written without assertions :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">MovingMonkeyWrench</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Part</span><span class="o">&gt;</span> <span class="n">_parts</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">MovingMonkeyWrench</span><span class="p">()</span> <span class="o">:</span> <span class="n">_parts</span><span class="p">(...)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Part</span><span class="o">&gt;&amp;</span> <span class="n">parts</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_parts</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MonkeyWrench</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">MovingMonkeyWrench</span> <span class="n">start</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">MovingMonkeyWrench</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Details are omitted, but it&rsquo;s easy to see how shorter the code is.</p>

<h2>Conclusion</h2>

<p>When applying all the techniques above, you&rsquo;ll see that cases for explicit assertions are rare. Less assertions also workarounds the issues coming from the poor support for DbC : no documentation and intricate cases.</p>

<p>In the end, assertions made my code more &lsquo;functional&rsquo;. I&rsquo;m not alone to have done the same journey, and if you are interested you should read Eric Evans&#8217; <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1490082811&amp;sr=1-1&amp;keywords=domain+driven+design">DDD</a> book where he presents things like immutable value objects and specification objects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ultimate Jira Personal Kanban]]></title>
    <link href="http://philippe.bourgau.net/my-ultimate-jira-personal-kanban/"/>
    <updated>2017-03-03T06:46:00+01:00</updated>
    <id>http://philippe.bourgau.net/my-ultimate-jira-personal-kanban</id>
    <category term="jira" /><category term="kanban" /><category term="personal-productivity" />
    <content type="html"><![CDATA[<p>A few years ago, I <a href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">wrote</a> about how I started to use <a href="https://www.atlassian.com/software/jira">Jira</a> as my <a href="http://www.personalkanban.com/pk/">personal Kanban</a> board <a href="https://twitter.com/work_at_murex">at work</a>. A lot of things have changed since then, which brought me to update my board and make it even more productive !</p>

<h2>The context</h2>

<p>During the almost 18 months since I wrote this first post, a lot of things have changed in my daily work (hopefully : I&rsquo;m not doing the same thing again and again !). Essentially, I got involved in more projects, some of which involve people from all around the company and some of which don&rsquo;t require any code to be written. For example, I&rsquo;m now engaged in our Agile Community of Practice, where I sometimes contribute content.</p>

<p>Here are the consequences on my work :</p>

<ul>
<li>I have more tasks to deal with, not necessarily more work, but still more tasks</li>
<li>I have more sources of tasks : tasks can come from any of the projects I am involved in</li>
<li>I have more tasks depending on other people, and that are in a <code>WAITING</code> state meanwhile</li>
</ul>


<p>I had to adapt my personal Kanban to this new workload.</p>

<h2>The changes</h2>

<p>As I explained in <a href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">the previous description of my Jira Personal Kanban</a>, I am using a custom project and Kanban board to aggregate all my tasks from various projects, in order to see everything in a single unique place. Here are the changes I&rsquo;ve made since, so if you haven&rsquo;t yet, it might be a good idea to read <a href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">that previous version</a> first.</p>

<h3>Quick filters</h3>

<p>In his post <a href="http://paulgraham.com/makersschedule.html">Maker&rsquo;s Schedule, Manager&rsquo;s Schedule</a> Paul Graham explained the challenge of having a lot of non-programming work to do everyday for programmers. He then advises to use slots for different activities during the day, in order to keep uninterrupted chunks of time to do creative work. To apply this technique, I reserved &lsquo;Unbookable except for X&rsquo; slots in my calendar everyday.</p>

<p>I had previously been using Swim-lanes to track work from different projects. This turned out not to scale very well to more projects : it made the board messy, and I kept being distracted by all these other tasks. I ditched all the Swim-lanes (not exactly, I kept one for urgent issues only). Instead of Swim-lanes for tracking projects, I now use Quick Filters. I created such filters as <code>With Project X</code> and <code>Without Project X</code>. During the day, when I want to focus on Project X, I use quick filters to only show tasks related to it.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/quick-filters.jpg" alt="Quick filters screen capture" /></p>

<h3>Day markers</h3>

<p>I have a daily routine of checking what&rsquo;s on my plate and deciding what I&rsquo;d like to achieve during the day (picking the right time to do this is an art in itself). In order to keep track of this, I use special day marker tasks : as <code>^^^ TODAY ^^^</code>, <code>^^^ TOMORROW ^^^</code> and <code>^^^ THIS WEEK ^^^</code>. This tasks are always in my <code>TODO</code> column, and will never be completed. I move them around to mark what I expect to finish at different time horizon. Ex : everything above <code>^^^ TODAY ^^^</code> should be finished before the end of the day.</p>

<p>Again, this helps me to focus on today&rsquo;s activities, and to do just enough prioritization.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/day-markers.jpg" alt="Day marker tasks screen capture" /></p>

<p>One last thing here, you&rsquo;ll have noticed the Epic for these special tasks. It&rsquo;s a way to identify them in JQL queries.</p>

<h3>WAITING flag</h3>

<p>Quite often, you have tasks waiting for someone else. That&rsquo;s surely not the most efficient situation, but once you leave the comfort of your focused dev team, handoffs are often the norm (at least until the lean principles spread in every part of the business). Status of waiting tasks is worth checking regularly, but very certainly not many times per day !</p>

<p>Again, leaving them in my board created useless distraction. I have now taken the habit of renaming the tasks I&rsquo;m waiting for with a <code>[WAITING] ...</code> prefix. On top of that, I created 2 quick filters <code>WAITING</code> and <code>Without WAITING</code> to quickly check and then forget about waiting tasks.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/waiting-tasks.jpg" alt="Waiting tasks screen capture" /></p>

<h3>Watching tasks I&rsquo;m not the assignee of</h3>

<p>On some occasions, we might be two of us working on the same task, or I might want to keep an eye on a task to know if something is needed from me. As there is only a single possible assignee in Jira, I changed my global filters to also include tasks with a custom label <code>pbourgau-watch</code>. Any time I want to add a task in my board, I just add this label to it.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/pbourgau-watch.jpg" alt="Screen capture of a task description I'm not the assignee of" /></p>

<h3>Getting the Lean reports back</h3>

<p>In order not to have too many old tasks in my board, I used to filter out old items in the global filter. This did the job, but at the cost of invalidating the lean reports (cumulative flow and control charts). In order to get these back, I removed this constraint from the global filter, and created yet another quick filter <code>Without Old</code> which I almost always keep on.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/control-chart.jpg" alt="Control chart screen capture" /></p>

<h2>Scripts</h2>

<h4>Global Filter</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">project</span> <span class="k">in</span> <span class="p">(</span><span class="n">POP</span><span class="p">,</span> <span class="n">POPABTODO</span><span class="p">,</span> <span class="ss">&quot;Development Engineering Program&quot;</span><span class="p">,</span> <span class="n">COPA</span><span class="p">)</span>
</span><span class='line'><span class="k">AND</span> <span class="k">type</span> <span class="o">!=</span> <span class="n">Epic</span>
</span><span class='line'><span class="k">AND</span> <span class="p">(</span><span class="n">Assignee</span> <span class="o">=</span> <span class="n">pbourgau</span> <span class="k">OR</span>
</span><span class='line'>    <span class="n">Co</span><span class="o">-</span><span class="n">Assignees</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="p">)</span> <span class="k">OR</span>
</span><span class='line'>    <span class="n">mentors</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="p">)</span> <span class="k">OR</span>
</span><span class='line'>    <span class="n">labels</span> <span class="k">in</span> <span class="p">(</span><span class="n">pbourgau</span><span class="o">-</span><span class="n">watch</span><span class="p">))</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Rank</span> <span class="k">ASC</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Quick Filters</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- With &quot;Project X&quot; + Day marker tasks (Epic link ...) + tasks containing &quot;BRANDING&quot;</span>
</span><span class='line'><span class="n">project</span> <span class="o">=</span> <span class="ss">&quot;Project X&quot;</span> <span class="k">or</span> <span class="ss">&quot;Epic Link&quot;</span> <span class="o">=</span> <span class="n">POPABTODO</span><span class="o">-</span><span class="mi">410</span> <span class="k">or</span> <span class="n">summary</span> <span class="o">~</span> <span class="ss">&quot;BRANDING&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Without &quot;Project X&quot;</span>
</span><span class='line'><span class="n">project</span> <span class="o">!=</span> <span class="ss">&quot;Project X&quot;</span> <span class="k">and</span> <span class="n">summary</span>  <span class="o">!~</span> <span class="ss">&quot;BRANDING&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Without Old</span>
</span><span class='line'><span class="n">status</span> <span class="k">not</span> <span class="k">in</span> <span class="p">(</span><span class="n">DONE</span><span class="p">,</span><span class="n">CLOSED</span><span class="p">)</span> <span class="k">OR</span> <span class="n">updated</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">14</span><span class="n">d</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- WAITING</span>
</span><span class='line'><span class="n">summary</span> <span class="o">~</span> <span class="s1">&#39;WAITING&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Without WAITING</span>
</span><span class='line'><span class="n">summary</span> <span class="o">!~</span> <span class="s1">&#39;WAITING&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Things that did not change</h4>

<p>I still use a WIP limit on the In Progress column, display the Epic in on the cards and special use custom color coding for tasks :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Tasks with an imminent due date become red</span>
</span><span class='line'><span class="n">duedate</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="n">d</span> <span class="k">or</span> <span class="n">priority</span> <span class="o">=</span> <span class="ss">&quot;1-Very High&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Tasks with a due date are orange</span>
</span><span class='line'><span class="n">duedate</span> <span class="k">is</span> <span class="k">not</span> <span class="n">EMPTY</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The result</h2>

<p>Overall, this is how my board looks like :</p>

<p><a href="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/full-board.jpg"><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/full-board-small.jpg" alt="Full board screen capture" /></a></p>

<p>I guess I&rsquo;m a kind of personal productivity geek &hellip; but I believe it&rsquo;s a skill of utter importance for developers, especially when they get a bit of experience and are not fed ready made tasks to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to subscribe to an ActionCable channel on a specific page with custom data ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-subscribe-to-an-actioncable-channel-on-a-specific-page-with-custom-data/"/>
    <updated>2017-02-23T05:25:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-subscribe-to-an-actioncable-channel-on-a-specific-page-with-custom-data</id>
    <category term="action-cable" /><category term="javascript" /><category term="rails" />
    <content type="html"><![CDATA[<p>In my spare time, I&rsquo;m writing a <a href="https://github.com/philou/planning-poker">Planning Poker App</a>. As a reminder, planning poker is a group estimation technique designed to eliminate influence bias. Participants keeps their estimates secret until everyone unveils them at the same time (See <a href="https://en.wikipedia.org/wiki/Planning_poker">Wikipedia</a> for more details).</p>

<p>The driving idea behind my app is for team members to connect together and share a view of the current vote happening in their team. Each team has an animator, who is responsible to start new votes. This is the aspect I&rsquo;ve been working on during the last few days. I want all team members to be notified that a new vote started by displaying a countdown on their page.</p>

<p>I am building the app with <a href="http://rubyonrails.org/">Rails 5</a> but I did not have a clear idea of what technology to use to build this feature. After some googling, I found that ActionCable provides just the kind of broadcasting I am looking for (Have a look at the <a href="http://edgeguides.rubyonrails.org/action_cable_overview.html">ActionCable Rails guide</a> for more details).</p>

<h2>A Specific Page</h2>

<p>The Rails guide is pretty clear, as usual I would say, but all the examples show subscriptions at any page load. As explained above, I only want participants to subscribe to their own team&rsquo;s votes : until they have joined a team, it is not possible to subscribe to a particular channel.</p>

<p>As my app is currently behaving, once identified, participants get to a specific team page. I wanted to use this page as the starting point to my subscription. After some more googling about page specific JavaScript in Rails, I found <a href="http://brandonhilkert.com/blog/organizing-javascript-in-rails-application-with-turbolinks/">this page</a> from Brandon Hilkert that explains how to do this cleanly. The idea is to add the controller and action names to the body tag, and to filter out js code at page load. This is what I ended up doing :</p>

<p>First, I adapted the app layout to keep track of the controller and action names in the HTML body :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- app/layouts/application.html.erb --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;&lt;%= controller_name %&gt; &lt;%= action_name %&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I replaced the default channel subscription with a function :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app/assets/javascripts/channels/team.coffee</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Channels</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Channels</span><span class="p">.</span><span class="nx">Team</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.Channels.Team.subscribe = </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">cable</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">create</span> <span class="s">&quot;TeamChannel&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">received: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>      <span class="c1"># Do something with this data</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a reminder, here is what the server side channel would look like :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TeamChannel</span> <span class="o">&lt;</span> <span class="ss">ApplicationCable</span><span class="p">:</span><span class="ss">:Channel</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subscribed</span>
</span><span class='line'>    <span class="n">stream_from</span> <span class="s2">&quot;team_channel&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I called this subscribe function from some page specific Javascript :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app/assets/team_members.coffee</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span> <span class="s">&quot;turbolinks:load&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="nx">$</span><span class="p">(</span><span class="s">&quot;.team_members.show&quot;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Channels</span><span class="p">.</span><span class="nx">Team</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. By playing around in your browser&rsquo;s js console, you should be able to test it.</p>

<h2>Custom Data</h2>

<p>That&rsquo;s just half of the story. The code above subscribes on a specific page, but it does not specify any particular team channel to subscribe to. This means that all participants would receive notifications from all teams !</p>

<p>In his article about unobtrusive JavaScript in Rails, Brandon Hilkert also suggests using HTML data attributes to pass parameters to the a JavaScript button event handler. There&rsquo;s no button in our case, but we can still use the same technique. Let&rsquo;s add data specific attributes to the HTML body.</p>

<p>To subscribe to specific team channel, the plan is to add the team name to the HTML body tag through a data attribute, then to capture and use this team name when subscribing.</p>

<p>Again, let&rsquo;s enhance the layout :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- app/layouts/application.html.erb --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;&lt;%= controller_name %&gt; &lt;%= action_name %&gt;&quot;</span> <span class="err">&lt;%=</span> <span class="na">yield</span> <span class="na">:extra_body_attributes</span> <span class="err">%</span><span class="nt">&gt;</span> &gt;
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had to adapt my views. In the team members show view (the one doing the subscription), I added an extra data attribute for the team name :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- app/views/team_members/show.html.erb --&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% provide(:extra_body_attributes, raw(&quot;data-team-name=\&quot;#{@team.name}\&quot;&quot;)) %&gt;
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>With this done, it is possible to capture the team name from the page load event and feed it to the subscribe method :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app/assets/team_members.coffee</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span> <span class="s">&quot;turbolinks:load&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="nx">$</span><span class="p">(</span><span class="s">&quot;.team_members.show&quot;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Channels</span><span class="p">.</span><span class="nx">Team</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s">&#39;team-name&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then used the team name to subscribe to a specific channel :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># app/assets/javascripts/channels/team.coffee</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Channels</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Channels</span><span class="p">.</span><span class="nx">Team</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.Channels.Team.subscribe = </span><span class="nf">(teamName) -&gt;</span>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">cable</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">create</span> <span class="p">{</span><span class="nv">channel: </span><span class="s">&quot;TeamChannel&quot;</span><span class="p">,</span> <span class="nv">team_name: </span><span class="nx">teamName</span><span class="p">},</span>
</span><span class='line'>    <span class="nv">received: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>      <span class="c1"># Do something with this data</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last piece is to actually start a specific channel :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TeamChannel</span> <span class="o">&lt;</span> <span class="ss">ApplicationCable</span><span class="p">:</span><span class="ss">:Channel</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subscribed</span>
</span><span class='line'>    <span class="n">stream_from</span> <span class="s2">&quot;team_channel_</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:team_name</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same as before, hack a bit with your browser&rsquo;s console, you should be able to check that it&rsquo;s working.</p>

<h2>Last thoughts</h2>

<p>This is not exhaustive, depending on your situation, there might be other things you&rsquo;ll need to do, like unsubscriptions for example.</p>

<p>I&rsquo;d also like to give a word of feedback about ActionCable after this first look at it. Overall, it worked great both in development and production. Everything seemed to work almost out of the box &hellip; Except testing : I did not manage to write robust unit tests around it. There is <a href="https://github.com/rails/rails/pull/23211">pull request</a> for that that should be merged in Rails 5.~ sometimes soon. For the moment, I&rsquo;m sticking to large scale cucumber tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I finally use Docker on small open source side projects]]></title>
    <link href="http://philippe.bourgau.net/how-i-finally-use-docker-on-small-open-source-side-projects/"/>
    <updated>2017-02-16T19:37:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-finally-use-docker-on-small-open-source-side-projects</id>
    <category term="continuous-integration" /><category term="docker" /><category term="heroku" /><category term="open-source" /><category term="rails" /><category term="side-project" /><category term="travis" />
    <content type="html"><![CDATA[<p>A few months ago, I started <a href="https://github.com/philou/planning-poker">Philou&rsquo;s Planning Poker</a>, an open source side project to run <a href="https://en.wikipedia.org/wiki/Planning_poker">planning poker estimate sessions</a> remotely. The main technology is <a href="http://rubyonrails.org/">Rails</a>, and I&rsquo;d been planning to use <a href="https://www.docker.com/">Docker</a> as much as possible as a way to learn it. Indeed, I learned that Docker is no Silver Bullet !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2017-02-16-how-i-finally-use-docker-on-small-open-source-side-projects/docker-silver-bullet.jpg" title="The Docker logo next to a silver bullet" ></p>

<h2>The Docker love phase</h2>

<p>At first everything seemed great about Docker. I&rsquo;d used it on toy projects and it proved great to quickly setup cheap and fast virtual machines. I even created the <a href="https://github.com/philou/rubybox">Rubybox</a> project on Github to clone new ruby VMs in a matter of seconds. I also used Docker to host my <a href="http://octopress.org/">Octopress</a> environment to write this blog. As a long time Linux user, my dev machines have repeatedly been suffering from pollution : after some time, they get plagued with all the stuff I installed to do my various dev experiments, and at some point, re-install seems easier than cleaning up all the mess. If I could use containers for all my projects, Docker would be a cure for this.</p>

<p>Going through all these successes, when I started my planning poker app, I decided to go all into Docker, development, CI and deployment. You can read the log of how I did that in <a href="http://philippe.bourgau.net/blog/categories/docker/">these posts</a>. Fast forward a bit of searching, experimenting and deploying, all was setup : my dev env was in containers, my CI was running in containers in <a href="https://circleci.com/gh/philou/planning-poker/tree/master">CircleCI</a> and the app was pushed to containers on <a href="https://www.digitalocean.com/">DgitalOcean</a>.</p>

<h2>Reality strikes back</h2>

<p>At first, everything seemed to be working fine. Even if there were a few glitches that I would have to fix down the road like :</p>

<ul>
<li>Whenever I wanted to update my app&rsquo;s dependencies, I had to run <code>bundle update</code> twice, and not incrementally. Surely, I would manage to fix that with a bit of time</li>
<li>Obviously, the CI was slower, because it had to build the containers before deploying them to <a href="https://hub.docker.com/">Docker Hub</a>, but that was the price to pay in order to know exactly what was running on the server &hellip; right ?</li>
<li>And &hellip; <a href="https://github.com/guard/guard">Guard</a> notifications did not appear on my desktop. I was accessing my dev env through ssh, so I would have to fix that, just a few hours and it should be working</li>
</ul>


<p>After a while, I got used to my work environment and became almost as productive as I used to be &hellip; but you know, shit happens !</p>

<ul>
<li>I had to install <a href="http://phantomjs.org/">PhantomJS</a> on my CI, and if that comes out of the box on <a href="https://travis-ci.org/">TravisCI</a>, you&rsquo;re all alone in your own containers. Installing this on the Debian container proved unnecessarily complex, but I figured it out</li>
<li>Then all of a sudden, my CI started to break &hellip; You can read a summary of what I did to fix it <a href="http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app/">here</a>. Long story short : I had forgotten to clean up old docker images, and after enough deployments, the server ran out of space, and that corrupted the docker cache somehow. I eventually re-installed and upgraded the deployment VM. That made me lose quite some time though.</li>
<li>Finally, as I started to play with <a href="https://github.com/rails/actioncable">ActionCable</a>, I could not get the web-socket notifications through my dev host. There must be some settings and configuration to make this work, for sure, but it&rsquo;s supposed to work out of the box.</li>
</ul>


<p>Eventually, this last issue convinced me to change my setup. All these usages of Docker where definitely worth it from a learning point of view, but as my focus moved to actually building the app, it was time to take pragmatic decisions.</p>

<h2>My use of Docker now</h2>

<p>There were 2 main ideas driving my changes to my dev env for this open source side project :</p>

<ol>
<li>Use the thing most people do</li>
<li>Use commercially supported services &amp; tools</li>
</ol>


<p>These should avoid losing my time instead of being productive. My setup is now almost boring ! To summarize I now use <a href="https://travis-ci.org/philou/planning-poker">TravisCI</a>, <a href="https://philous-planning-poker.herokuapp.com/">Heroku</a>, and <a href="https://github.com/rbenv/rbenv">rbenv</a> on my physical machine. I kept Docker where it really shines : all the local servers required for development are managed by <a href="https://docs.docker.com/compose/">Docker Compose</a>. Here is my <a href="https://github.com/philou/planning-poker/blob/master/docker-compose.yml"><code>docker-compose.yml</code></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres:9.4.5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">planning-poker-postgres:/var/lib/postgresql/data</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&quot;5432:5432&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">redis</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">redis:3.2-alpine</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">planning-poker-redis:/var/lib/redis/data</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&quot;6379:6379&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This saves me from installing <a href="https://www.postgresql.org/">Postgresql</a> or <a href="https://redis.io/">Redis</a> on my dev machine, and I can start all the services required for app with a single <code>docker-compose up</code> command !</p>

<h2>My future uses of Docker</h2>

<p>More generally, in the near future, here is when I&rsquo;ll use docker</p>

<ul>
<li>As I just said, to manage local servers</li>
<li>To boot quick and cheap VMs (check <a href="https://github.com/philou/rubybox">rubybox</a>)</li>
<li>To handle CI and deployment of large or non-standard systems, where Docker can provide a lot of benefits in terms of price, scaling or configurability</li>
</ul>


<p>Docker came from the deployment world, and this is where it is so great. As of today though, even if it is usable as dev VM, it is still not up to a standard dev machine. Despite that, all the issues I ran into could be fixed, and I&rsquo;m pretty sure they&rsquo;ll be some day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer ! Are you losing your rat race ?]]></title>
    <link href="http://philippe.bourgau.net/developer-are-you-losing-your-rat-race/"/>
    <updated>2017-02-09T05:37:00+01:00</updated>
    <id>http://philippe.bourgau.net/developer-are-you-losing-your-rat-race</id>
    <category term="career" /><category term="programming" /><category term="software" />
    <content type="html"><![CDATA[<blockquote><p>A rat race is an endless, self-defeating, or pointless pursuit. It conjures up the image of the futile efforts of a lab rat trying to escape while running around a maze or in a wheel.</p></blockquote>

<p>Are we building our own <del>maze</del> self defeating landscape by our exacerbated focus on technology ? Let me explain.</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2017-02-09-developer-are-you-losing-your-rat-race/rat-maze.jpg" title="A rat in a maze" ></p>

<h2>The context</h2>

<p>As <a href="https://en.wikipedia.org/wiki/Marc_Andreessen">Marc Andreessen</a> famously said &ldquo;Software is eating the world&rdquo;, which means that there is more and more demand for software. At the same time, giant countries like China, India, Russia or Brazil are producing more and more master&rsquo;s degrees every year. This also means more and more software engineers. The consequence is that there has never been so many new technologies emerging than these days. The software landscape his huge, growing and complex.</p>

<p>That&rsquo;s great for progress, but it&rsquo;s a puzzle for hiring. In this chaotic environment, years of experience with a particular technology is something that remains easy to measure, that&rsquo;s why employers (and developers) tend to use keywords to cast for a job.</p>

<h2>The effects</h2>

<p>As a result, developers tend to pick a few technologies to become masters at, to put them on their CV and get job offers. There&rsquo;s a danger with specializing on a particular technology : eventually, it will become deprecated, in this keyword driven world, it&rsquo;s almost like if you&rsquo;ll have to start from zero again. Even if a specialization is wide enough now, as time goes on and more and more technologies are created, any area of expertise will become a tiny spot in all the landscape. One might think this is only an issue for old guys that did not stay up to date &hellip; I strongly believe this is wrong, it happened to all past technologies, I don&rsquo;t see why today&rsquo;s latest .js framework wouldn&rsquo;t be legacy stuff one day.</p>

<p>One could think that sticking to a good employer is a good fix against that. It is &hellip; for some time ! Sticking to an company actually means <em>betting</em> on this company. What would happen if it went out of business, or through difficult times and you&rsquo;re asked to leave ? When you reach the job market after so long with a single employer, you&rsquo;ll be a de-facto specialist, on proprietary stuff that no one is interested about.</p>

<p>Finally, you might work hard not to specialize, but it&rsquo;s going to be a lot more difficult to get a job as a generalist, only a few shops actually hire this way.</p>

<p>To summarize, we are forced into specialization, which is great in the short term, but risky in the long run.</p>

<h2>1€ advice</h2>

<p>So what can we do about this ? Obviously, we cannot change the world &hellip; The only ones we can act on are ourselves !</p>

<h3>Learning</h3>

<p>In our fast moving tech world, learning remains key ! But instead of trying to keep up with all the cool new techs that are invented every day, we should study fundamental skills, and only learn just enough specific skills to get the job done. To me fundamental skills are all the things you&rsquo;ll apply whatever the language and technology you are using, for example :</p>

<ul>
<li>design</li>
<li>architecture (whatever that is &hellip;)</li>
<li>clean code</li>
<li>refactoring</li>
<li>legacy code</li>
<li>testing</li>
<li>tooling</li>
<li>mentoring &amp; coaching</li>
<li>programming paradigms (functional, dynamic, static, imperative, OO, concurrent &hellip;)</li>
<li>process flow</li>
<li>communication</li>
<li>product definition</li>
<li>concurrency</li>
<li>performance</li>
</ul>


<p>I wrote <a href="http://philippe.bourgau.net/how-to-keep-up-with-software-technologies/">this post</a> that explains how I did learn some of these skills (by no mean would I say that this is the only way). Good mastery of these skills should be enough to quickly get up to speed in any project you are involved. This other article <a href="https://blog.bradfieldcs.com/in-2017-learn-every-language-59b11f68eee#.l2n6kouuz">In 2017, learn <em>every</em> language</a>, which I found through the excellent <a href="http://www.hackernewsletter.com/">hackernewsletter</a>, explains how this is possible.</p>

<p>Unfortunately, knowing is not enough &hellip;</p>

<h3>Selling</h3>

<p>How do you convince others that you are up to the job in a particular technology ? Unfortunately, I don&rsquo;t have a definitive answer yet &hellip;</p>

<p>Regularly, people try to coin a word to describe the competent generalist developer : polyglot, full stack, craftsman &hellip; If it&rsquo;s good enough, it usually gets taken over quite fast by the industry and just becomes yet another buzzword (the only exception being eXtreme Programming, but who would like to hire and eXtreme Programmer ?).</p>

<p>In <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?ie=UTF8&amp;qid=1473135683&amp;sr=8-1&amp;keywords=soft+skills">Soft Skills</a>, John Somnez says the trick is to explain to people that you might not have experience in a technology &lsquo;yet&rsquo;. This might work, if your resume gets through, which is not sure.</p>

<p>Here&rsquo;s my try : the next time I&rsquo;ll polish my resume, I&rsquo;ll try to put forward my fundamental skills first, for example with 5 stars self-assessments. Only after will I add something like &ldquo;By the way, I could work with tech X Y Z &hellip;&rdquo;.</p>

<h3>Independence</h3>

<p><a href="https://www.amazon.com/End-Jobs-Meaning-9-5/dp/1619613352/ref=sr_1_1?ie=UTF8&amp;qid=1486713381&amp;sr=8-1&amp;keywords=the+end+of+jobs"><img class="center" src="http://philippe.bourgau.net/imgs/2017-02-09-developer-are-you-losing-your-rat-race/the-end-of-jobs.jpg" title="Cover of the book 'The End of Jobs'" ></a></p>

<p>Being your own boss could be a solution in the long term. I recently listened to <a href="https://www.amazon.com/End-Jobs-Meaning-9-5/dp/1619613352/ref=sr_1_1?ie=UTF8&amp;qid=1486713381&amp;sr=8-1&amp;keywords=the+end+of+jobs">The End of Jobs</a> in which the author explains that entrepreneurship is an accessible alternative these days, and that like any skill, it&rsquo;s learnable. The catch is that there are no schools, no diplomas, and that it seems a lot riskier in the short run. Despite that, he makes the point that the skills you&rsquo;ll learn makes it quite safe in the long run !</p>

<h2>Questions</h2>

<p>I feel like my post asks more questions than it provides answers :&ndash;). Honestly, I&rsquo;d really love to read other people&rsquo;s opinions and ideas. What are your tricks to market yourself on new technologies ? As a community, what could we do to fight our planned obsolescence ? Do you think I&rsquo;m totally wrong and that the problem does not exist ? What do you think ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I fixed 'devicemapper' error when deploying my Docker app]]></title>
    <link href="http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app/"/>
    <updated>2017-02-01T17:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app</id>
    <category term="docker" /><category term="exploitation" />
    <content type="html"><![CDATA[<p>A few months ago, I started continuously deploying my <a href="https://github.com/philou/planning-poker">latest side project</a> to a <a href="https://cloud.digitalocean.com">Digital Ocean</a> box. If you are interested, <a href="http://philippe.bourgau.net/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/">here</a> is the full story of how I did it. All was going pretty well until last week, when the builds unexpectedly started to fail. I wasn&rsquo;t getting the same error at every build, but it was always the <a href="https://www.docker.com/">Docker</a> deployment that failed. Here are the kind of errors I got :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># At first, it could not connect to the db container</span>
</span><span class='line'>PG::ConnectionBad: could not translate host name <span class="s2">&quot;db&quot;</span> to address: Name or service not known
</span><span class='line'>
</span><span class='line'><span class="c"># Then I started to have weird EOF errors</span>
</span><span class='line'>docker stderr: failed to register layer: ApplyLayer <span class="nb">exit </span>status 1 stdout:  stderr: unexpected EOF
</span><span class='line'>
</span><span class='line'><span class="c"># Eventually, I got some devicemapper errors</span>
</span><span class='line'>docker stderr: failed to register layer: devicemapper: Error running deviceCreate <span class="o">(</span>createSnapDevice<span class="o">)</span> dm_task_run failed
</span></code></pre></td></tr></table></div></figure>


<p>You can read the full error logs <a href="https://circleci.com/gh/philou/planning-poker/tree/master">here</a>.</p>

<h2>That&rsquo;s what happens when you go cheap !</h2>

<p>After searching the internet a bit, I found <a href="https://github.com/docker/docker/issues/6325">this issue</a> which made me understand that my server had ran out of disk space because of old versions of my docker images. I tried to remove them, but the commands were failing. After some more search, I found <a href="https://github.com/docker/docker/issues/26015">this other issue</a> and came to the conclusion that there was no solution except resetting docker completely. Hopefully, Digital Ocean has a button for rebuilding the VM.</p>

<p><a href="http://philippe.bourgau.net/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/reset-digitalocean.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/reset-digitalocean-small.jpg" title="A screenshot of the rebuild screen on digitalocean" ></a></p>

<p>Once the VM was rebuilt, the first thing that I did was to try to connect from my shell on my local machine. I had to clean up my known host file, but that was simple enough.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nano ~/.ssh/known_hosts
</span></code></pre></td></tr></table></div></figure>


<p>Once this was done, I just followed the steps I had documented in my <a href="http://philippe.bourgau.net/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/">previous blog post</a></p>

<p>Was I all done ?</p>

<p>Almost &hellip; I ran into another kind of errors this time. Processes kept getting killed on my VM.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO <span class="o">[</span>cc536697<span class="o">]</span> Running /usr/bin/env docker-compose -f docker-compose.production.yml run app bundle <span class="nb">exec </span>rake db:migrate as root@104.131.47.10
</span><span class='line'>rake aborted!
</span><span class='line'>SSHKit::Runner::ExecuteError: Exception <span class="k">while </span>executing as root@104.131.47.10: docker-compose <span class="nb">exit </span>status: 137
</span><span class='line'>docker-compose stdout: Nothing written
</span><span class='line'>docker-compose stderr: Starting root_db_1
</span><span class='line'>bash: line 1: 18576 Killed
</span></code></pre></td></tr></table></div></figure>


<p>After some more Google searching, I discovered that this time, the VM was running out of memory ! The fast fix was to upgrade the VM (at the extra cost of 5$ / month).</p>

<p><a href="http://philippe.bourgau.net/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/resize-digitalocean.jpg"><img class="center" src="http://philippe.bourgau.net/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/resize-digitalocean-small.jpg" title="A screenshot of the resize screen on digitalocean" ></a></p>

<p>After increasing the memory (and disk space) of the VM, deployment went like a charm. Others have fixed the same issue for free by <a href="https://www.digitalocean.com/community/questions/npm-gets-killed-no-matter-what">adding a swap partition to the VM</a>.</p>

<h2>The end of the story</h2>

<p>I wasted quite some time on this, but it taught me some lessons :</p>

<ol>
<li>I should have taken care of cleaning up the old images and containers, at least manually, at best automatically</li>
<li>I should write a script to provision a new server</li>
<li>The cheap options always come at a cost</li>
<li>For an open source side project like this one, it might be a better strategy to only use Docker to setup my dev env, and use free services like <a href="https://travis-ci.org/">Travis-ci</a> and <a href="https://www.heroku.com/">Heroku</a> for production</li>
<li>Doing everything myself is not a good recipe to getting things done &hellip; I well past time I leave my developer hat for an entrepreneur cap</li>
<li>In order to keep learning and experimenting, focused <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20h sessions</a> of deliberate practice might be the most time effective solution</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 minutes hack to speed up RSpec in Rails 5 using in-memory SQLite]]></title>
    <link href="http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite/"/>
    <updated>2017-01-25T07:53:00+01:00</updated>
    <id>http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite</id>
    <category term="cucumber" /><category term="rails" /><category term="rspec" /><category term="ruby" /><category term="sqlite" /><category term="testing" />
    <content type="html"><![CDATA[<p>Here is the story : you have a <a href="http://rubyonrails.org/">Rails 5</a> app that uses <a href="http://rspec.info/">RSpec</a>, but your RSpec suite is getting slower and slower to run. You&rsquo;ve already considered some solutions :</p>

<ul>
<li>Use <a href="https://sqlite.org/">SQLite</a> in memory for your test env.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sqlite3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;:memory:&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s the most straightforward thing to do, but unfortunately, if you are sharing your test env with <a href="https://cucumber.io/">Cucumber</a>, you might want to use a production like DB with Cucumber (<a href="https://www.postgresql.org/">PostgreSQL</a> or whatever). So unless you are ready to setup a new env for cucumber (which I tried and don&rsquo;t recommend) you&rsquo;re stuck.</p>

<ul>
<li>Use mocks. That&rsquo;s surely going to work, it&rsquo;s going to make your test hell of a lot faster ! It will also make your tests a lot more fragile and more expensive to maintain &hellip; If you want to read more about why I think mocks are a bad idea, just have a look at <a href="http://philippe.bourgau.net/blog/categories/mocking/">these posts</a>.</li>
</ul>


<h2>The hack</h2>

<p>Here is a third alternative, I&rsquo;ve <a href="http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/">already written about it</a>, but here it comes updated and tested for Rails 5 :</p>

<ol>
<li>Don&rsquo;t change anything to your <code>config/database.yml</code></li>
<li>Obviously, you&rsquo;ll need to add <code>sqlite3</code> to your <code>Gemfile</code></li>
<li>At the beginning of your <code>spec/rails_helper.rb</code>, replace</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Checks for pending migration and applies them before tests are run.</span>
</span><span class='line'><span class="c1"># If you are not using ActiveRecord, you can remove this line.</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span><span class="o">.</span><span class="n">maintain_test_schema!</span>
</span></code></pre></td></tr></table></div></figure>


<p>with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In order to keep the same RAILS_ENV for rspec and cucumber, and to make rspec</span>
</span><span class='line'><span class="c1"># faster, patch the connection to use sqlite in memory when running rspec</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="ss">adapter</span><span class="p">:</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="ss">database</span><span class="p">:</span> <span class="s1">&#39;:memory:&#39;</span><span class="p">)</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="nb">load</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">/db/schema.rb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it ! Run your specs &hellip; not bad for a 5 minutes investment !</p>

<h4>Rails 5.1 (2017-03-29 Edit)</h4>

<p>My fresh hack started to fail on Rails 5.1 ! If <code>schema.rb</code> is generated with the Postgres adapter, it is now incompatible with this injected Sqlite adapter. Here is a patch that removes the glitches :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In order to keep the same RAILS_ENV for rspec and cucumber, and to make rspec</span>
</span><span class='line'><span class="c1"># faster, patch the connection to use sqlite in memory when running rspec</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="ss">adapter</span><span class="p">:</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="ss">database</span><span class="p">:</span> <span class="s1">&#39;:memory:&#39;</span><span class="p">)</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="c1"># load db agnostic schema by default. Needed to remove the &quot;, id: :serial&quot; from</span>
</span><span class='line'><span class="c1"># the table definitions to make it load on sqlite</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="sb">`cat </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="sb">/db/schema.rb | sed &#39;s/,[^:]*: :serial\//g&#39;`</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I admit this is getting a bit crappy, and I don&rsquo;t know how long it is going to work &hellip;</p>

<h2>One more thing &hellip;</h2>

<p>If you need even more speed, you can now run your specs in parallel in different processes ! Each in-memory SQLite DB is bound to its process, so unlike a real PostgreSQL dev DB, you won&rsquo;t get any conflicts between your tests ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Plain English Introduction To Paxos Protocol]]></title>
    <link href="http://philippe.bourgau.net/a-plain-english-introduction-to-paxos-protocol/"/>
    <updated>2017-01-16T08:20:00+01:00</updated>
    <id>http://philippe.bourgau.net/a-plain-english-introduction-to-paxos-protocol</id>
    <category term="distributed systems" /><category term="software" />
    <content type="html"><![CDATA[<p>A few weeks ago, I had to have a look at the distributed consensus protocol <a href="https://en.wikipedia.org/wiki/Paxos_%28computer_science%29">Paxos</a>. Even though I know its purpose and I&rsquo;ve built and used distributed systems and databases in the past, Paxos remains mind boggling at first !</p>

<h2>The hard way</h2>

<p>The best overall description I found is <a href="https://www.quora.com/Distributed-Systems-What-is-a-simple-explanation-of-the-Paxos-algorithm">this answer by Vineet Gupta on Quora</a>. After turning my head around it for a while, I finally gained the instinctive understanding which comes when you &lsquo;get&rsquo; something.</p>

<p>As a way to both help others to understand Paxos faster and to burn all this in my own memory, I though it would he a good idea to illustrate it as a story (I was inspired by <a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem/">A plain English introduction to CAP Theorem</a> which I found really instructive; I also later discovered that the <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/The-Part-Time-Parliament.pdf">original Paxos paper</a> itself related the protocol using the metaphor of a parliament).</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2017-01-16-a-plain-english-introduction-to-paxos-protocol/greek.jpg" title="A drawing of an ancient Greek hero typing at a computer" ></p>

<h2>Once upon a time &hellip;</h2>

<p>&hellip; there were 3 brothers and sisters, Kath, Joe &amp; Tom, living happily. They lived far away, and it was not easy for them to meet and spend some time together. Neither did they have phone or internet, for this was a long time ago. All they had to discuss and share news was good old mail &hellip;</p>

<p>Unfortunately, one day, the worst happened : their parents die. All 3 are informed by a letter from the notary, telling them that they need to sell the family house in order to pay for their inherited debts. It also advises to use Paxos to agree on a price (Note : I never said the story was going to be chronologically sound !).</p>

<h2>The happy end</h2>

<p>As the oldest in the family, Kath decides to take things in hand, and starts the whole thing. She knows Paxos consists of 2 phases : &lsquo;prepare&rsquo; and &lsquo;accept&rsquo;.</p>

<h3>Prepare Phase</h3>

<p>Kath sends a signed and dated price value proposal to her brothers, by mail.</p>

<p>Joe and Tom both receive the letter from Kath, they think the price is fair. In order to send their agreements back to Kath, they make a copy of the proposition, mark it as agreed, date it, sign it, and send it back.</p>

<h3>Accept Phase</h3>

<p>Joe lives a bit further away from Kath than Tom does, so correspondence between Kath and Tom is usually faster. Kath indeed receives the agreement from Tom first, she knows she can go on with the protocol straight away, because Paxos relies on majority, and not unanimity. In his letter, Tom agreed to the same price she proposed, so she just picks this one as the final price to agree on.</p>

<p>She sends new letters, called accept letters this time, to her brothers to finalize the agreement. In these letters, she specifies the price that they are agreeing on, plus the date at which it was first suggested (see Prepare Phase). When Tom and Joe receive the accept letter, they simply need to check that the time and price of the proposal to make sure it is what they agreed on, before sending back their final accept letter.</p>

<p>At the time when Kath receives the accept letters from her brothers, everyone knows that the price has been agreed.</p>

<p><a href="https://www.taschen.com/pages/en/catalogue/children/all/06787/facts.the_fairy_tales_of_the_brothers_grimm.htm"><img class="center" src="http://philippe.bourgau.net/imgs/2017-01-16-a-plain-english-introduction-to-paxos-protocol/grimm-brothers.jpg" title="Cover of the book &#34;The Fairy Tales of the Grimm Brothers&#34;" alt="Cover of the book &#34;The Fairy Tales of the Grimm Brothers&#34;"></a></p>

<h3>After</h3>

<p>She then informs the notary on the agreed price. This one sends an information letter to the Kath, Tom &amp; Joe. The house is sold pretty quickly, leaving the family out of financial problems for the rest of their lives &hellip;</p>

<h2>Shit happens</h2>

<p>That story went unexpectedly well ! Let&rsquo;s see different variations about what would happen in real life.</p>

<h3>Joe is particularly slow to answer</h3>

<p>Joe has never been good at paperwork &hellip; he&rsquo;s always out partying and having fun, and he does not want to bother answering letters. When Joe receives the prepare letter from Kath, he does not reply straightaway but leaves it on his desk to handle later. Meanwhile, Tom answers as soon as he got the letter. As mentioned before, Paxos relies on majority, as soon as Kath gets Tom&rsquo;s answer, she can continue to the next phase. In fact, the accept phase also relies on majority, so she can continue to the end of the protocol if Tom continues to answer.</p>

<p>In this case, Joe would receive the accept letter before he sent his answer to the prepare letter, and would know that the consensus is moving on without him. He can try to catch up or not, but the consensus can be reach without him.</p>

<h3>Tom wants to speed things up by becoming the master</h3>

<p>Tom has always been the hurried brother. He does not like when things linger forever but prefers things to be done quickly. As soon as he receives the letter from the notary, he starts waiting impatiently for the prepare letter from his sister. Kath, on her part, takes a lot of time to settle on a price. Not knowing what is going on, Tom decides to take action, and to takes on the master role : he sends his own copies of the prepare letters. While these letters are in the mail, Kath finally settles on a price, and sends hers.</p>

<p>Joe gets Tom&rsquo;s proposal first. Thinking that it&rsquo;s a change in the plan, he responds straight away by signing the proposal and taking a copy for himself. The following day, he receives Kath&rsquo;s proposal ! He&rsquo;s a bit surprised, but hopefully, Paxos tells him exactly what to do in this situation. By agreeing to Tom&rsquo;s proposal, he made a promise to stick to it whatever happens later. Here the date on Kath&rsquo;s proposal is later than on Tom&rsquo;s, so Joe is going to answer to Kath that he agrees but to to Tom&rsquo;s proposal, of which he&rsquo;ll join a copy.</p>

<p>After receiving the Joe&rsquo;s agreement on his proposal, Tom has the majority, and should be able to end the protocol.</p>

<p>What about Kath ?</p>

<p>She should have received Tom&rsquo;s proposal, and rejected it, because she had already proposed a later value. That will not prevent Tom to reach a consensus.</p>

<p>She should have received Joe&rsquo;s agreement to Tom&rsquo;s proposal. The same way, she might as well have received Tom&rsquo;s agreement to his own proposal as an answer to hers. She&rsquo;d get the majority of agreements, so she might then want to push on. For the accept letter, she must pick a value that has been accepted, in this case, it&rsquo;s Tom&rsquo;s proposed value ! Everything ends as expected as she&rsquo;ll reach the same price as Tom.</p>

<h3>Tom wants a higher price an becomes the master</h3>

<p>Imagine Tom is obsessed about money ! When he receives Kath&rsquo;s proposal, he&rsquo;s outraged ! Believing the house has a lot more value than the proposed price, he sets on to act as a master in Paxos and sends his own proposal letters to his brother and sister.</p>

<p>Unfortunately, when they receive his proposal, they have already agreed to Kath&rsquo;s older proposal, so they send him back a copy of it as an agreement. Having received agreements to Kath&rsquo;s value only, he cannot push forward his value. Whether he continues his Paxos or not does not really matter, as he would reach the same value as Kath would.</p>

<h3>River flood split between brothers and Kath</h3>

<p><a href="http://riniwuzhere.deviantart.com/art/Fairytale-Map-of-Wurzburg-393850325"><img class="center" src="http://philippe.bourgau.net/imgs/2017-01-16-a-plain-english-introduction-to-paxos-protocol/fairytale-map.jpg" title="A drawing of a fairy tale map with a wide river in the middle" ></a></p>

<p>There&rsquo;s a wide river that separates Kath from Joe and Tom. While they were trying to reach consensus, the river flood, cutting all communication between the brothers and their sister. Kath might abort the consensus as she won&rsquo;t be able to get answers from the majority. On their side, Joe or Tom can takeover the consensus, take on the master role, and still reach a price, as they form a majority. As soon as the river would settle, the messages would arrive to both parties, eventually informing Kath that a price was accepted.</p>

<h3>Lots of others</h3>

<p>You can imagine zillions of ways in which the consensus between Kath, Joe and Tom could go wrong. For example :</p>

<ul>
<li>Mail is so slow that Kath sends new proposals</li>
<li>One letter gets lost and arrives after Kath made a new proposal</li>
<li>Kath is struck by a lightning</li>
</ul>


<p>Go ahead and execute Paxos step by step on all of them, you&rsquo;ll see that whatever happens, Kath, Joe and Tom will reach a price.</p>

<h2>More Formally</h2>

<p>Now that you have an instinctive understanding of Paxos, I encourage you to read out <a href="https://www.quora.com/Distributed-Systems-What-is-a-simple-explanation-of-the-Paxos-algorithm">the full explanation I found on Quora</a>. Here is a extract with the protocol part :</p>

<blockquote><h3>Protocol Steps:</h3>

<h4>1) Prepare Phase:</h4>

<ul>
<li><p>A node chooses to become the Leader and selects a sequence number x and value v to create a proposal P1(x, v). It sends this proposal to the acceptors and waits till a majority responds.</p></li>
<li><p>An Acceptor on receiving the proposal P1(x, v1) does the following:</p>

<ul>
<li>If this is the first proposal to which the Acceptor is going to agree, reply ‘agree’ – this is now a promise that the Acceptor would reject all future proposal requests &lt; x</li>
<li>If there are already proposals to which the Acceptor has agreed:
compare x to the highest seq number proposal it has already agreed to, say P2(y, v2)

<ul>
<li>If x &lt; y, reply ‘reject’ along with y</li>
<li>If x > y, reply ‘agree’ along with P2(y, v2)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>2) Accept Phase</h4>

<ul>
<li><p>If a majority of Acceptors fail to reply or reply ‘reject’, the Leader abandons the proposal and may start again.</p></li>
<li><p>If a majority of Acceptors reply ‘agree’, the Leader will also receive the values of proposals they have already accepted. The Leader picks any of these values (or if no values have been accepted yet, uses its own) and sends a ‘accept request’ message with the proposal number and value.</p></li>
<li><p>When an Acceptor receives a ‘accept request’ message, it sends an ‘accept’ only if the following two conditions are met, otherwise it sends a ‘reject’:</p>

<ul>
<li>Value is same as any of the previously accepted proposals</li>
<li>Seq number is the highest proposal number the Acceptor has agreed to</li>
</ul>
</li>
<li><p>If the Leader does not receive an ‘accept’ message from a majority, abandon the proposal and start again. However if the Leader does receive an ‘accept’ from a majority, the protocol can be considered terminated. As an optimization, the Leader may send ‘commit’ to the other nodes.</p></li>
</ul>
</blockquote>

<p>And here are the key concepts to map my story to this formal description of Paxos.</p>

<table>
<thead>
<tr>
<th></th>
<th> Story </th>
<th> Paxos</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> proposal letter (and copy of) </td>
<td> P(x,v)</td>
</tr>
<tr>
<td></td>
<td> Date (and time) </td>
<td> sequence number</td>
</tr>
</tbody>
</table>


<br/>


<p>At the time of slow mail based communication, using the date and time down to the second is enough to build up unique sequence numbers. In our current time of digital messages, it&rsquo;s another story, typical Paxos implementation assigns a different and disjoint infinite set of integers for every participant, it does not exactly follow &lsquo;time&rsquo;, but it&rsquo;s enough for the algorithm to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Happens to Non-Enthusiast Programmers in the Long Run ?]]></title>
    <link href="http://philippe.bourgau.net/what-happens-to-non-enthusiast-programmers-in-the-long-run/"/>
    <updated>2017-01-10T05:57:00+01:00</updated>
    <id>http://philippe.bourgau.net/what-happens-to-non-enthusiast-programmers-in-the-long-run</id>
    <category term="career" /><category term="programming" /><category term="software" />
    <content type="html"><![CDATA[<p>A few months ago, after receiving good feedback from my regular readers, I posted my latest article <a href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/">Is There Any Room for the Not-Passionate Developer ?</a> on <a href="https://news.ycombinator.com/">Hackernews</a> and <a href="https://www.reddit.com/r/programming/">Reddit</a>. I got a <a href="http://philippe.bourgau.net/how-to-use-hackernews-and-reddit-for-blogging/">huge number of visits</a>, a lot more than I typically get !</p>

<p>I also got a lot more comments, some nice, some tough, some agreeable and some challenging !</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2017-01-10-what-happens-to-non-enthusiast-programmers-in-the-long-run/professional.jpg" title="A logo of a guy wearing a suit" ></p>

<h2>First, a summary</h2>

<p>In this previous article, I wanted to contrast the different views about work/life balance in the software industry.</p>

<p>Some, like agile gurus and companies like Basecamp, and <a href="http://lifehacker.com/working-over-40-hours-a-week-makes-you-less-productive-1725646811">studies</a>, strongly advocate for sane work hours. They explain that it results in greater productivity and healthy life.</p>

<p>On the other hand, the software field is always bubbling with novelty, and keeping up to date with technologies is by itself a challenge that takes time. For some companies, which might already be fighting for their survival against competition, it is almost impossible to grant some extra training time to their employees. The problem becomes particularly difficult when engineers get older, become parents and cannot afford to spend some extra time learning the latest JavaScript framework.</p>

<p>As a conclusion, I said that for most of us, it&rsquo;s really difficult to remain a developer in the long run without the grit that only passion for programming brings. I encourage you to <a href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/">read it</a> for more details.</p>

<h2>What I learned from the comments</h2>

<p>First of all, thanks a lot for all these, they were very valuable, they forced me to think even more about the issue.</p>

<h3>People have been burnt !</h3>

<p>The word &lsquo;passion&rsquo; in particular, triggered engaged comments. As some pointed out, &lsquo;enthusiast&rsquo; or &lsquo;professional&rsquo; should be favored. It seems that some companies have asked their employees for unquestionable passion for their business (and not for engineering or programming) at the cost of the people&rsquo;s own lives. As a commenter said, a lot of shops do not integrate the absolute necessity for their programmers to learn continuously in their business model. It made me kind of sad to feel once more this state of our industry.</p>

<p>As a result, people are weary of any statement of &lsquo;passion&rsquo; in the workplace, and would prefer to be seen as very skilled professional, dedicated to keeping their skills up to date.</p>

<h3>The particular question of France</h3>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2017-01-10-what-happens-to-non-enthusiast-programmers-in-the-long-run/france.jpg" title="A photo of the Eiffel tower" ></p>

<p>I received some comments from all over the world, but my observations came from where I work : in France. Here, all in all, we have at least 7 weeks of paid leaves per year. It&rsquo;s a lot more than in other parts of the world. I think it&rsquo;s around 2 weeks in the US (other <a href="https://www.bloomberg.com/news/articles/2016-10-18/americans-work-25-more-than-europeans-study-finds">sources</a> point the same fact). Imagine two companies, one from France, and one from the US. The one in the US can invest 5 weeks per year in exploratory learning (which can result in good things for both the business and the employee) while still producing as much as the french one.</p>

<p>Obviously, there are other parameters to take into account for overall productivity like hours per day, the effects of holidays or long hours on creativity, or funding &hellip; but here are some facts about software engineering in France :</p>

<ul>
<li>20% time policy, hackathons and other exploratory learning are extremely rare (I&rsquo;ve seen it once in 15 years)</li>
<li>It&rsquo;s slowly getting better, but if you remain a programmer in your thirties, you&rsquo;re seen as a loser</li>
<li>France has no software powerhouse like Microsoft, Google, Apple &hellip;</li>
</ul>


<p>This lead me to this open question : What&rsquo;s the effect of the 7 weeks of paid leaves on the french software industry ?</p>

<p>By no means will I try to give an answer, I just don&rsquo;t know. Plus, for those who might be wondering : I love my 7 weeks of holidays !</p>

<h2>The conclusion I came to</h2>

<p>Yet, I can try to draw a conclusion at the individual level. In France, if you&rsquo;re not really enthusiastic about programming, you won&rsquo;t put the extra effort off-the-job to learn the latest technologies. Within a few years, you&rsquo;ll be &lsquo;deprecated&rsquo;, which will leave you with mainly 2 options :</p>

<ul>
<li>become a manager</li>
<li>stick to your current codebase (and become completely dependent of your employer)</li>
</ul>


<p>To me, the sad truth is that if you want to make a career as a professional developer in France, you&rsquo;d better be ready to spend some of your free time practicing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verify the Big O Complexity of Ruby Code in RSpec]]></title>
    <link href="http://philippe.bourgau.net/verify-the-big-o-complexity-of-ruby-code-in-rspec/"/>
    <updated>2017-01-04T17:48:00+01:00</updated>
    <id>http://philippe.bourgau.net/verify-the-big-o-complexity-of-ruby-code-in-rspec</id>
    <category term="open-source" /><category term="performance" /><category term="rspec" /><category term="ruby" />
    <content type="html"><![CDATA[<p>It might be possible to discover performance regressions before running your long and large scale benchmarks !</p>

<p><a href="https://github.com/philou/complexity-assert">complexity_assert</a> is an <a href="http://rspec.info/">RSpec</a> library that determines and checks the <a href="http://bigocheatsheet.com/">big O complexity</a> of a piece of code. Once you&rsquo;ve determined the performance critical sections of your system, you can use it to verify that they perform with the complexity you expect.</p>

<h2>How does it work ?</h2>

<p>The gem itself is the result of an experiment to learn machine learning in 20 hours (you can read more about that experiment in <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">my previous post</a> if you want).</p>

<p>Suppose you have some a method, let&rsquo;s call it <code>match_products_with_orders(products, orders)</code> which is called in in one of your processes with very large arguments. Badly written, this method could be quadratic (O(n²)), which would lead to catastrophic performances in production. When coding it, you&rsquo;ve taken particular care to make it perform in linear time. Unfortunately, it could easily slip back to a slower implementation with a bad refactoring &hellip; Using complexity_assert, you can make sure that this does not happen :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># An adapter class to fit the code to measure in complexity assert</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ProductsOrdersMatching</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Generate some arguments of a particular size</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">generate_args</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># Let&#39;s assume we have 10 times less products than orders</span>
</span><span class='line'>        <span class="o">[</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">size</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="n">build_a_product</span><span class="p">()</span> <span class="p">},</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span> <span class="n">build_an_order</span><span class="p">()</span> <span class="p">}</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Run the code on which we want to assert performance</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">products</span><span class="p">,</span> <span class="n">orders</span><span class="p">)</span>
</span><span class='line'>        <span class="n">match_products_with_orders</span><span class="p">(</span><span class="n">products</span><span class="p">,</span> <span class="n">orders</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;Products and Orders Matching&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;performs linearly&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="c1"># Verify that the code runs in time proportional to the size of its arguments</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="no">ProductOrdersMatching</span><span class="o">.</span><span class="n">new</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_linear</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it ! If ever someone changes the code of <code>match_products_with_orders</code> and makes it perform worse than linearly, the assertion will fail ! There are similar assertions to check for constant and quadratic execution times.</p>

<p>Internally, the code will be called a number of times with different (smallish) sizes of arguments and the execution times will be logged. When this is over, by doing different flavors of linear regressions, it should determine whether the algorithm performs in O(1), O(n) or O(n²). Depending on your code, this can take time to run, but should still be faster than running large scale benchmarks.</p>

<p>Just check the <a href="https://github.com/philou/complexity-assert/blob/master/README.md">README</a> for more details.</p>

<h2>Did you say experiment ?</h2>

<p>It all started like an experiment. So the gem itself, is still experimental ! It&rsquo;s all fresh, and it could receive a lot of enhancements like :</p>

<ul>
<li>Allow the assertion to specify the sizes</li>
<li>Allow the assertion to specify the warm-up and run rounds</li>
<li>Robustness against garbage collection : use GC intensive ruby methods, and see how the regression behaves</li>
<li>Find ways to make the whole thing faster</li>
<li>O(lnx) : pre-treat with exp()</li>
<li>O(?lnx) : use exp, then a search for the coefficient (aka polynomial)</li>
<li>O(xlnx) : there is no well known inverse for that, we can compute it numerically though</li>
<li>Estimate how much the assert is deterministic</li>
<li>&hellip;</li>
</ul>


<p>As you see, there&rsquo;s a lot of room for ideas and improvements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I got my feet wet with machine learning with 'The First 20 Hours']]></title>
    <link href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/"/>
    <updated>2016-12-29T21:09:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours</id>
    <category term="learning" /><category term="software" />
    <content type="html"><![CDATA[<p>I&rsquo;m currently wrapping up an alpha of a unit testing <a href="https://github.com/philou/complexity-assert">ruby gem</a> that allows to assert the complexity of a piece of code. It&rsquo;s the result of an experiment to learn some <a href="https://en.wikipedia.org/wiki/Machine_learning">Machine Learning</a> skills in 20 hours &hellip; not bad for a first a try at Data Science ! This is the story of this experiment.</p>

<h2>How it all started ?</h2>

<p><a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?ie=UTF8&amp;qid=1483258282&amp;sr=8-1&amp;keywords=the+first+20+hours"><img class="center" src="http://philippe.bourgau.net/imgs/2016-12-29-how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/book-cover.jpg" title="The cover of the book 'The First 20 Hours'" ></a></p>

<p>A few months ago, I read <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?ie=UTF8&amp;qid=1483258282&amp;sr=8-1&amp;keywords=the+first+20+hours">The First 20 Hours</a>. The book describes a technique to get up to speed and learn some practical skills on any particular subject in only 20 hours. As examples, the author details how he managed to teach himself a pretty decent level of Yoga, Ukulele, Wind Surfing, Programming, Go and touch typing.</p>

<p>I decided to give it a try. In order to get a boost, I found a few motivated people at work to do it with me. I started by presenting them the technique described in the book, and asked everyone what they wanted to learn. After a quick vote, we set out to learn more about Machine Learning.</p>

<h2>The technique</h2>

<p>The method is meant to allow anyone to learn necessary skills to accomplish a specific task in about 20 hours. I my case, I could expect to get a basic understanding of the Machine Learning concepts, as well as some practical skills to do something involving Machine Learning. Here are the details of the technique :</p>

<ol>
<li>H0 : Deep dive in the main concepts and theory of machine learning</li>
<li>H6 : Define an ambitious and practical goal or skill level to achieve by the end, and an outline of how to get there</li>
<li>H6 to H20 : Learn by doing</li>
</ol>


<p>As you see, the technique is pretty simple !</p>

<h2>How did it work ?</h2>

<h3>For the group</h3>

<p>The plan for the group was :</p>

<ul>
<li>to meet weekly for 2 hours</li>
<li>to share what we learned at the end of every session</li>
<li>to bound by similar goals</li>
</ul>


<p>At first, people were enthusiastic about learning something like machine learning. After a while, I started to get the following remarks :</p>

<ul>
<li>&ldquo;I don&rsquo;t really see the point of doing this together rather than independently&rdquo;</li>
<li>&ldquo;I&rsquo;m feeling a bit lost by not having a concrete goal and a plan from H0&rdquo;</li>
<li>&ldquo;I picked up a target that&rsquo;s too large for me&rdquo;</li>
</ul>


<p>The learning curve must have proven too steep, because as time went by, a lot of people droped out, and we ended up being only 2 !</p>

<h3>For me</h3>

<p>The first phase was the toughest. As the author had warned in his book, &ldquo;You&rsquo;ll get deep above your head in theory and concepts you don&rsquo;t know&rdquo;, &ldquo;You&rsquo;ll feel lost&rdquo;. He had some reassuring words though : &ldquo;The steeper the learning curve, the more you&rsquo;ll be learning !&rdquo; I actually like this feeling of unknown things to learn, and that&rsquo;s why I stuck to it.</p>

<p>I took me 8 hours, and not 6 to get a good overall grasp of Machine Learning techniques. The theory was just too wide and interesting and I could not cut the learning after just 6 hours :&ndash;). I studied <a href="https://xyclade.github.io/MachineLearning/#cross-validation">Machine Learning for developers</a> plus a few other pages for details on specific points. I took and kept notes about what I learned. I chose my subject &ldquo;unit testing algorithm complexity&rdquo; for the following reasons :</p>

<ul>
<li>I could imagine some utility</li>
<li>I had been writing benchmarks at work for 3 years, and I knew the practice well enough</li>
<li>It&rsquo;s pretty easy to generate data for this subject : just run your algorithm !</li>
<li>It seems a good first step, doable with basic Machine Learning techniques like linear regression</li>
<li>It seems small enough to get something working in 12 hours</li>
<li>I could use ruby, which I find both fast and pleasant to program</li>
</ul>


<p>This is the plan I set out :</p>

<ol>
<li>Generate data with a linear algorithm (O(n))</li>
<li>Run linear regression on the data</li>
<li>Compute the the <a href="https://xyclade.github.io/MachineLearning/#root-mean-squared-error-rmse">RMSE</a> of the model</li>
<li>Deal with Garbage Collection in order to make reduce its noise</li>
<li>Deal with interpreter warm-up for the same reason</li>
<li>Generate data for a constant (O(1)) algorithm and build a model for it</li>
<li>Find a way to identify if an algorithm is constant or linear from it&rsquo;s execution timings</li>
<li>Generate data for a quadratic (O(2)) algorithm and build a model for it</li>
<li>Identify if an algorithm is constant, linear or quadratic</li>
<li>Package all this in an <a href="http://rspec.info/">RSpec</a> library</li>
</ol>


<p>It started well, and I made good progress. Unfortunately, as people dropped out of the group and I got more urgent things to do at work, I had to pause my project for a while. It&rsquo;s only been since last week that I got some time during my holidays to finish this off. I&rsquo;m currently at H18, and I&rsquo;ve completed all steps from 1 to 9.</p>

<p>As I said the project is still in early alpha. They is a lot of points in which it could be improved (more complexities, faster, more reliable &hellip;). Even though I did not tackle the more advanced machine learning techniques, I now understand the overall process of ML : explore to get an intuitive grasp of the data, try out a model, see what happens, and repeat &hellip; I feel that learning these more advanced techniques would be easier now.</p>

<h2>My opinion on the method</h2>

<p>Overall, I found the experiment really effective, it&rsquo;s possible to learn quite a lot by focusing on it for 20 hours. A word of warning though : you need to be really motivated and ready to stick through difficulties.</p>

<p>It&rsquo;s also been very pleasant. I&rsquo;ve always loved to learn new things, so I might be a little biased on that aspect. I liked the first part when I felt that there was a lot to learn in a large subject I knew almost nothing about. I loved the second part too, although this might be more related to machine learning, because I felt like exploring an unknown (data set) and trying to understand it.</p>

<p>I&rsquo;ve never been afraid to learn something, doing this experiment taught me I can learn anything fast ! I&rsquo;ll definitely re-use it again.</p>

<p>One last word about doing this in group. My own experiment did not work very well. Most people were not comfortable with the first &lsquo;explore&rsquo; phase. I guess one could make it work better by starting 6 or 8 hours before the rest of the group, enough to grasp the basic concepts and come up with a few end goals. Having concrete targets from day 1 should help people to stick through and to collaborate. The &lsquo;guide&rsquo; could also help the others through the first phase.</p>

<p>Stay tuned, I&rsquo;ll present my gem in <a href="http://philippe.bourgau.net/verify-the-big-o-complexity-of-ruby-code-in-rspec/">a following post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overclocking a Scrum Team to 12]]></title>
    <link href="http://philippe.bourgau.net/overclocking-a-scrum-team-to-12/"/>
    <updated>2016-12-21T04:57:00+01:00</updated>
    <id>http://philippe.bourgau.net/overclocking-a-scrum-team-to-12</id>
    <category term="agile" /><category term="software" />
    <content type="html"><![CDATA[<p><em>From <a href="https://en.wikipedia.org/wiki/Overclocking">Wikipedia</a> :</em></p>

<blockquote><p>Overclocking is configuration of computer hardware components to operate faster than certified by the original manufacturer &hellip;</p></blockquote>

<p>It is said that Scrum teams work best at 7 people, and that they break at about 10. The trouble is that sometimes there is just too much work for 7 people, but no enough for a full Scrum of Scrums. What if there was a simple way to hack this number up to 12 ?</p>

<p><img class="center" src="http://philippe.bourgau.net/imgs/2016-12-21-overclocking-a-scrum-team-to-12/overclocking.jpg" title="An overclocked motherboard working with extra fans and cellar tape" ></p>

<h2>An Idea</h2>

<h3>The Surgical Team</h3>

<p>In his classic <a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1482298579&amp;sr=1-1&amp;keywords=the+mythical+man+month">The Mythical Man Month</a> Fred Brooks presents an idea to organize software development the way surgeons work. The master performs the surgery while the rest of his team (intern or junior surgeon and the nurses) are there to support him. Fred Brook imagined an organization where master developers could be the only ones with access to the production code, while other more junior developers would have the task to provide them with tools and technical libraries.</p>

<p>I admit that this idea sounds out-of-fashion in contrast with modern agile teams of generalists &hellip; Still &hellip;</p>

<h3>Tools</h3>

<p>At work, we are working on a pretty technical and complex product which requires some time getting into both the code and the domain. We took a few interns during the past years, and a bit like Fred Brooks, we came to the conclusion that internships yield more results when focused on building supporting tools rather than joining the team and working on production code.</p>

<p>We&rsquo;ve also been doing <a href="http://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives/">retrospectives</a> for 3 years now, we&rsquo;ve stolen a lot of best practices from the industry and the team is working a lot better than it used to. The pending side of this is that nowadays, the opportunities for improvement that we discover are a lot more specific, and they often need us to take some time to build new tools to support our work.</p>

<h3>The Agile Surgical Team</h3>

<p>Agile method such as Scrum or XP are all about creating real teams instead of a collection of individual. That means that if we wanted to adopt the surgical team idea, we could use teams instead of individuals : a team of experts, and a tooling team of apprentice developers !</p>

<p>Why not, there&rsquo;s not nothing really new here, but the challenge is to run such a tooling team efficiently !</p>

<ul>
<li>3 people or less : there&rsquo;s <a href="http://pm.stackexchange.com/a/10075">evidence in the industry</a> that micro teams can self organize in an ad-hoc manner</li>
<li>Mandate ScrumBan, Continuous Delivery and Devops : on site customer makes this possible, it should reduce project management overhead to almost nothing, and enforce quality</li>
<li>A sandbox for junior developers : there&rsquo;s no risk of messing up production code here, the domain (tools for software developers) is straightforward and the fast feedback provides a great environment for learning</li>
</ul>


<p>Obviously, for this to work, you&rsquo;ll also need to have enough tooling work to do for a 3 people team. That&rsquo;s usually the case, the CI alone can take quite some time (see Jez Humble&rsquo;s talk <a href="https://www.youtube.com/watch?v=2zYxWEZ0gYg">Why Agile Doesn&rsquo;t Work</a>) and any team will have its own custom tools to do. For example, in our team, we built our own benchmark framework and we could benefit a lot from <a href="http://www.saros-project.org/">Saros</a> on IntelliJ.</p>

<p><a href="https://www.youtube.com/watch?v=2zYxWEZ0gYg"><img class="center" src="http://philippe.bourgau.net/imgs/2016-12-21-overclocking-a-scrum-team-to-12/why-agile-doesnt-work.jpg" title="The slide in Jez Humble's Why Agile Doesn't Work about the time taken for CI" ></a></p>

<h2>Not quite there yet</h2>

<p>I promised to scale up to 12. Let&rsquo;s do the maths :</p>

<ul>
<li>3 people in the tooling team</li>
<li>8 people in the product team if we push Scrum a bit</li>
</ul>


<p>That&rsquo;s only 11, 1 is missing. This one is more specific to each team&rsquo;s context.</p>

<p>As I said earlier, the product we are building is pretty technical and complex. Sometimes, we simply don&rsquo;t know how we are going to do something. We need to try different ways before finding out the good one. The typical agile way of doing that is by conducting time-boxed <a href="http://agiledictionary.com/209/spike/">spikes</a>. Spikes are fine for code and design related issues but way too short to deal with hard R&amp;D problems. These need a lot of uninterrupted time for research and experiments, so it&rsquo;s not really possible to split them in backlog stories that any one can work on either &hellip;</p>

<h3>The R&amp;D Role</h3>

<p>Here is what you want : some uninterrupted time to learn and experiment different ways to do something difficult.</p>

<p>Here is what you don&rsquo;t want :</p>

<ul>
<li>specialists in the team</li>
<li>people out of sync with the daily production constraints</li>
<li>a never ending &lsquo;research&rsquo; topic</li>
</ul>


<p>Here is a simple solution in the context I describe : add someone in the product team, and do some 2 month round robin on hard subjects. This should leave plenty of time to study something different, but not so much time that one looses connection with the rest of the team. Plus it brings a bit of diversity in every one&rsquo;s daily work. One issue I can think of is that working on isolation might leave someone on a bad track, regularly presenting what was done to the rest of the team might alleviate this concern.</p>

<h2>A final word</h2>

<p>Obviously, this has a smell of specialization, we&rsquo;re bending Scrum principles a bit. So take it for what it is : just like overclocking, it&rsquo;s a hack to get a bit of extra juice before investing in something a lot more expensive (<a href="https://www.agilealliance.org/glossary/scrum-of-scrums/">Scrum of Scrums</a>, <a href="http://less.works/">Less</a> or whatever).</p>
]]></content>
  </entry>
  
</feed>
