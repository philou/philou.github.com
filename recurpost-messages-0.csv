Message,Post URL
@paulg's famous Hackers and Painters ... in French ! ,https://philippe.bourgau.net/hackers-et-peintres/
Struggling to set a #team practice in place ? Try this #motivation hack. All you need is a A3 printed comic and post-its ... https://bit.ly/2KVIF9d #gamification ,https://philippe.bourgau.net/motivation-game-53790/
Tell me how to #sprint while going at a #SustainablePace ? #Scrum got the wording completely wrong ... https://bit.ly/2Wo4weZ,https://philippe.bourgau.net/sprints-are-not-sprints/
"Starting #ContinousImprovement is easy. Here is ""How we introduced efficient #agile #retrospectives"" https://bit.ly/2zXk5ml",https://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives/
"""Yes, we know this code is crap ... but it was written by X, so we cannot touch it !"" Does this ring a bell ? I call this the Holy #Code #Antipattern https://bit.ly/2VZ9MGY",https://philippe.bourgau.net/the-holy-code-antipattern/
@KentBeck used to mention food a lot in his #eXtremeProgramming book. Here is how we setup a fresh fruit basket for the team without waiting for a company wide action! https://bit.ly/3de8xJB,https://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time/
"Here's an oldie : The story of how my previous team went from nothing to #CodeReviews, to #PairProgramming to #remote pair programming !",https://philippe.bourgau.net/from-zero-to-pair-programming-hero/
Use #pomodoro to switch control when doing #remote #PairProgramming. It avoids your pair to fall asleep on the other side of the line. https://bit.ly/2z7I1mu,https://philippe.bourgau.net/from-zero-to-pair-programming-hero/
Trellospectives : How we used #Trello to improve our #remote #Retrospectives.,https://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello/
"#ContinuousImprovement might be the most important to do at work during this crisis. Get your remote retrospectives working with ""Trellospectives: Remote #Retrospectives with #Trello"" https://bit.ly/2z6Qqqs #remotework ",https://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello/
Did you know that a fast build is (almost) free ?,https://philippe.bourgau.net/www-dot-agileavatars-dot-com-order-customized-avatar-magnets/
"It's pretty straightforward to build a #DecentralizedDecisionRule to speed up the build. Anyone who sees an opportunity for build speed up will know it should, without asking for permission! https://bit.ly/3c3IDbs ",https://philippe.bourgau.net/www-dot-agileavatars-dot-com-order-customized-avatar-magnets/
We tried to all-in #360Feedback team sessions ! Here is how it went. ,https://philippe.bourgau.net/feedback-on-360-degrees-feedback-session/
Revise your binary with Binary Planning Poker,https://philippe.bourgau.net/binary-hand-planning-poker/
Tired of Fibonacci for your poker estimates ? Try Binary Hand Poker ... https://bit.ly/3dhY0xk #geeky #agile #planningPoker,https://philippe.bourgau.net/binary-hand-planning-poker/
"When managing #TechnicalDebt, we should keep the life expectancy of the product in mind to estimate the interests we'll have to payback. https://bit.ly/2YyvCD0 #Refactoring",https://philippe.bourgau.net/the-technical-debt-ponzi-scheme/
Great #developers are free! #Hiring is too important to be left to HR. https://bit.ly/2WrVPQC,https://philippe.bourgau.net/great-developers-are-free/
"Great developers are free, but only for those who are willing to pay for them",https://philippe.bourgau.net/great-developers-are-free/
Creating user focused *and* estimable performance #stories is a challenge ... here is how we did it.,https://philippe.bourgau.net/how-to-write-good-performance-stories/
Start #ExploratoryTesting to improve both your product and your process ! ,https://philippe.bourgau.net/how-we-started-exploratory-testing/
Want to make a better product? Here is how we gamified #ExploratoryTesting and transformed developers in berserk testers! #SoftwareTesting #gamification https://bit.ly/3aZjMnF,https://philippe.bourgau.net/how-we-started-exploratory-testing/
4 tips that will solve 95% of your slow code issues !,https://philippe.bourgau.net/most-common-ways-to-speed-up-an-algorithm/
"Although companies have gone crazy with #algorithm interviews, they've never been the critical part of my job in 15 years of programming. Here are tricks to solve 95% of real-world algorithm challenges. https://bit.ly/3b6fACB",https://philippe.bourgau.net/most-common-ways-to-speed-up-an-algorithm/
Despite #developers love for #algorithms. 90% of my real world algorithmic performance issues have been fixed by adding a form of cache. https://bit.ly/3b6fACB #performance #programming,https://philippe.bourgau.net/most-common-ways-to-speed-up-an-algorithm/
How to use self organization to keep on programming when you are managing a software team.,https://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job/
"3 Tips to continue #programming when becoming #manager : master #PersonalProductivity, know about Manager's Time vs Maker's time, make the team #SelfOrganize https://bit.ly/2W0ZQN1",https://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job/
Let's build #agile workplaces out of #lego like #office blocks ! https://bit.ly/35sEQ57,https://philippe.bourgau.net/recipes-for-an-agile-workspace/
Did anyone try Lego like offices that teams could adapt to their needs and wishes ? ,https://philippe.bourgau.net/recipes-for-an-agile-workspace/
I'm happy to see that I'm not the only one thinking #Lego offices are the best for #agile teams. https://bit.ly/35sEQ57 @Google built their garage this way. https://bit.ly/35sEQ57,https://philippe.bourgau.net/recipes-for-an-agile-workspace/
When you discover you are in a Duke Nukem Forever project ... Leave !,https://philippe.bourgau.net/how-long-can-your-inner-drive-last/
"Before you decide to stick on a project just for learning, know how long you can maintain your motivation",https://philippe.bourgau.net/how-long-can-your-inner-drive-last/
Duke Nukem Forever took 15 years of development! When you discover your project is taking the same path ... Leave ! https://bit.ly/2WlbLEq https://bit.ly/2WlbLEq #Software,https://philippe.bourgau.net/how-long-can-your-inner-drive-last/
Do yourself a #gift today. Don't stick at a project you don't feel a drive for! https://bit.ly/2WlbLEq #Software #motivation,https://philippe.bourgau.net/how-long-can-your-inner-drive-last/
A few lean insights from ‘Little #lean management guide at the usage of #agile teams’ ,https://philippe.bourgau.net/are-most-agile-teams-doing-continuous-improvement-the-silly-way/
"For unlucky non-french readers who cannot read this great book ""The little #lean management book for #agile teams"", here are a few stories summary in english. https://bit.ly/2W0z9rH https://bit.ly/2W0z9rH #ImprovementKata",https://philippe.bourgau.net/are-most-agile-teams-doing-continuous-improvement-the-silly-way/
Every #ScrumMaster should end up creating a round robin Scrum Master roll and become a Meta Scrum Master. #SelfOrganization sometimes needs a nudge. #Scrum #Agile  https://bit.ly/2VYCEiq https://bit.ly/2VYCEiq,https://philippe.bourgau.net/scrum-teams-do-not-need-a-scrum-master/
Here is a public trello team with many ready-made boards for remote retrospectives activities,https://philippe.bourgau.net/trello-templates-to-boost-your-remote-retrospectives/
" Need help and ideas to organize #remote #retrospectives? Here is a public #Trello team full of activity templates (Glad-Sad-Mad, Hot Air Balloon ...) https://bit.ly/3b1INi7",https://philippe.bourgau.net/trello-templates-to-boost-your-remote-retrospectives/
#PairProgramming is not only about mentoring. 4 flavors of pairing,https://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/
"Prepare to switch your #pairProgramming style as you gain experience. Read about 4 flavors of pairing in ""Pair Programming, From Pain Zone To Skill Zone"" https://bit.ly/2RfNNbS",https://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/
"Depending on the skills of the buddies and how they approach #PairProgramming, it can be great or awful. Here are 4 common examples. https://bit.ly/2RfNNbS",https://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/
"Senior devs must switch to mentors mode when pairing with juniors "" #PairProgramming, from pain zone to skill zone"" https://bit.ly/2RfNNbS @NewRelic says the same thing holds true for #MobProgramming https://bit.ly/2RfNNbS #softwaredeveloper ",https://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/
Real developers know how to deal with people,https://philippe.bourgau.net/real-developers-ship/
"To explain my #softwareEngineer job to people, I tell them that it's like writing a giant book as a team. ""Software is like writing and revising a giant book"" https://bit.ly/2xwBHEG #WritingSoftware",https://philippe.bourgau.net/software-is-like-writing-and-revising-a-giant-book/
The best metaphore I found to explain software to non-developers : group writing a giant novel,https://philippe.bourgau.net/software-is-like-writing-and-revising-a-giant-book/
"Studying the theory behind #programming makes it 10 times easier to keep up with latest technologies. ""How To Keep Up With #Software Technologies"" https://bit.ly/3aOxQkC #ComputerScience #learning",https://philippe.bourgau.net/how-to-keep-up-with-software-technologies/
"I'm currently helping #CPP teams with #TDD and #Refactoring. Martin Fowler's ""Refactoring: Improving the Design of Existing Code"" book is still of tremendous value when there is no automated refactoring available ! https://bit.ly/3aOxQkC",https://philippe.bourgau.net/how-to-keep-up-with-software-technologies/
"@venkat_s said ""The [...] time we need to learn a new concept is inversely proportional to the number of diverse ideas we've been exposed to"" (https://bit.ly/3aOxQkC) Stop wasting your time, and learn the classics of our field https://bit.ly/3aOxQkC @Devoxx #software",https://philippe.bourgau.net/how-to-keep-up-with-software-technologies/
"This confinement time might be the best occasion to study #softwareEngineering theory. Here is a list of classic books in ""How To Keep Up With Software Technologies"" ",https://philippe.bourgau.net/how-to-keep-up-with-software-technologies/
Daily printout and other silly ideas to materialize the state of a codebase,https://philippe.bourgau.net/the-size-of-code/
"Ever wondered how to communicate to non-programmers how messy your code base is ? Read a few wacky ways in ""The Size Of Code"" https://bit.ly/2YvkjLx (inflatable scultpure by @JimmyKuehnle) #Programming #LegacyCode",https://philippe.bourgau.net/the-size-of-code/
What's the weirdest #hacktivist performance we could do to highlight the ugly state most codebases are in? https://bit.ly/2YvkjLx #programming #LegacyCode,https://philippe.bourgau.net/the-size-of-code/
"Just read @daedtech's great post ""Human Cost of #TechnicalDebt"". As 90% of the projects are tech debt Ponzi schemes, I still unfortunately wonder ""Is there room for non-passionate devs ?""",https://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/
"2 years since I wrote ""Is There Any Room for the Non-Passionate Developer ?"" #WorkLifeBalance is still a big topic to me in the #software industry. https://bit.ly/3fgGKdq",https://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/
An economical framework would be a great way to convince product managers to invest in large refactorings when the boy scout rule is not enough,https://philippe.bourgau.net/when-the-boy-scout-rule-fails/
"Unfortunately, the boy scout rule is not a silver bullet ...",https://philippe.bourgau.net/when-the-boy-scout-rule-fails/
Ever heard of Team Culture Book ? It tells newcomers what to expect around here !,https://philippe.bourgau.net/how-to-grow-a-culture-book/
Agregate your team working's culture in a book,https://philippe.bourgau.net/how-to-grow-a-culture-book/
A #CultureBook is #LivingDocumentation for #teamAgreements. Here is how we built our own https://bit.ly/2SAXIJN #Management30,https://philippe.bourgau.net/how-to-grow-a-culture-book/
Get your kids to contribute to house chores with Kudo Boxes ,https://philippe.bourgau.net/kudo-boxes-for-kids/
"We managed to get our kids to contribute to house chores with #Kudos. Like all #gamification schemes though, it requires regular game updates and animation to keep the momentum going ! https://bit.ly/3bXXEeO",https://philippe.bourgau.net/kudo-boxes-for-kids/
"Slides of my talk ""How not to use mocks"" at Paris #ruby meetup. Tricks for any #programming #language",https://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb/
Would your rather #TDD Top-Down or Bottom-up ? #TestDrivenDevelopment #SoftwareCraftsmanship https://bit.ly/2W2zSbS,https://philippe.bourgau.net/flavours-of-tdd/
Bottom-up or Top-down ? Most #TDD practitionners use a blend of both !,https://philippe.bourgau.net/flavours-of-tdd/
"I now explicitly train teams to Top-Down and Bottom-Up #TDD styles. Both can be useful in different situations. Read more in ""Flavors of TDD"" https://bit.ly/2W2zSbS",https://philippe.bourgau.net/flavours-of-tdd/
"#Remote #PairProgramming brings satellite workers back in the team! This is how we did ""ReXP: Remote #eXtremeProgramming"" https://bit.ly/3d6zuz0",https://philippe.bourgau.net/rexp-remote-extreme-programming/
"Depending on your team's #remote configuration, different working agreements will work best. Remote #eXtremeProgramming works well with satellite workers.",https://philippe.bourgau.net/rexp-remote-extreme-programming/
"Thanks to #remote #PairProgramming, I've seen remote #eXtremeProgramming teams work better than traditional co located teams! https://bit.ly/3d6zuz0",https://philippe.bourgau.net/rexp-remote-extreme-programming/
Use #SlackTime to against #scrum zombies,https://philippe.bourgau.net/how-to-kill-scrum-zombies/
"Without #ContinuousImprovement, #Scrum is not #agile. Enough scrum zombies! Here is my take at ""How to kill Scrum Zombies ?"" https://bit.ly/2xxMVZz",https://philippe.bourgau.net/how-to-kill-scrum-zombies/
"Could we hack the #MythicalManMonth's concept of the Surgical Team into an #XP team to grow it beyond 10 people? ""Overclocking a Scrum Team to 12"" https://bit.ly/3c3Jf0C",https://philippe.bourgau.net/overclocking-a-scrum-team-to-12/
Hack a #SoftwareDevelopement team to make it work at 12 ! https://bit.ly/3c3Jf0C #Scrum #MythicalManMonth #SurgicalTeam,https://philippe.bourgau.net/overclocking-a-scrum-team-to-12/
"If I managed to go from zero to building a simple #MachineLearning test library in about 20 hours, everyone can! Red the full story in ""How I got my feet wet with machine learning with ‘The First 20 Hours’"" https://bit.ly/2SyTJgU #softwaretesting @joshkaufman",https://philippe.bourgau.net/how-i-fixed-the-unknown-language-pygments-error-in-octopress/
"I tried ""The first 20 hours"" technique. Turns out that with a bit of grit, we can learn a lot in 20 focused hours !",https://philippe.bourgau.net/how-i-fixed-the-unknown-language-pygments-error-in-octopress/
This machine learning experiment to test the complexity of algorithms is now actually used by someone !,https://philippe.bourgau.net/verify-the-big-o-complexity-of-ruby-code-in-rspec/
"Assert whether your ruby is O(1), O(n) or O(n2) with this experimental complexity_assert gem",https://philippe.bourgau.net/verify-the-big-o-complexity-of-ruby-code-in-rspec/
"Read fairy tales, and understand the Paxos protocol !",https://philippe.bourgau.net/a-plain-english-introduction-to-paxos-protocol/
"How Kath, Joe & Tom used the #Paxos protocol to fix an inheritance problem in the land of fairytales !",https://philippe.bourgau.net/a-plain-english-introduction-to-paxos-protocol/
"Although ""#Software is eating the world"", #developers #hiring is still keyword driven ! What should we do about it ?",https://philippe.bourgau.net/developer-are-you-losing-your-rat-race/
Would like to use #Jira as a #Programmer's #PersonalKanban or #ToDoList ? Read my guide,https://philippe.bourgau.net/my-ultimate-jira-personal-kanban/
Developer's productivity tip : hack a #PersonalKanban on top of your company's ticket tracking software,https://philippe.bourgau.net/my-ultimate-jira-personal-kanban/
Immutable #functionalprogramming style makes design by contract straightforward,https://philippe.bourgau.net/almost-15-years-of-using-design-by-contract/
"""Almost 15 years of #DesignByContracts"" My long road from ignorance to zen ! Why I still use them along with #UnitTests. https://bit.ly/2KX70f9",https://philippe.bourgau.net/almost-15-years-of-using-design-by-contract/
Class invariants are trivial to enforce in immutable data! We can get almost all of the benefits of #designByContracts by using immutable types. https://bit.ly/2KX70f9 #programming,https://philippe.bourgau.net/almost-15-years-of-using-design-by-contract/
"I'm reading @cyriux's book Living Documentation, which makes me re-think this technique to track #TechnicalDebt Updated post to come soon !",https://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/
"Leave a mark in the code of every time a piece of #TechnicalDebt hits you to prioritize #refactorings ""A seamless way to keep track of technical debt in your source code"" https://bit.ly/2yiuY1I",https://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/
Team stigmergy through code to the rescue of technical debt,https://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/
"Just read From Payback to Prevention: 5 Ways to Tame #TechnicalDebt in Your Codebase https://bit.ly/2yiuY1I. If you are not using Java and don't have access to Papercut annotations, you can always use good old TODO comments. https://bit.ly/2yiuY1I @kevinrcasey",https://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/
"@s_watts_seo: read #TechnicalDebt Explained https://bit.ly/2yiuY1I. Check @martinfowler's tech debt quadrant https://bit.ly/2yiuY1I, @DocOnDev's 4 metrics https://bit.ly/2yiuY1I. Can also use //TODO XXX comments to capture code smells https://bit.ly/2yiuY1I",https://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/
"A man may do an immense deal of good, if he does not care who gets the credit Get your team to do #codereview",https://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/
"Become a #CodeReview champion to trick your teammates into doing code reviews! Read more in ""How to get your team to do code reviews"" https://bit.ly/35tgS9P",https://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/
"Here are some tactics to get your team to do #CodeReview https://bit.ly/35tgS9P. If this does not work, @daedtech suggests building a business case https://bit.ly/35tgS9P #programming",https://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/
@lgtm Great insight as to how low hierarchy organization creates to more effective #CodeReviews https://bit.ly/35tgS9P. Being a low-ego review champion can go a long way to get your team to do code reviews https://bit.ly/35tgS9P,https://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/
"Vision + incremental #refactorings = #agile #architecture. Read more in ""Incremental architecture, a cure against architecture astronauts"" https://bit.ly/3fkWnQY",https://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/
"Except language and platform, incremental architecture works for almost anything !",https://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/
Bring food and fast board games at work to make days with #Scrum ceremonies more fun ! ,https://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team/
"Synchronizing the sprints and sharing the ceremonies is all it takes to scale #Scrum to a few teams. Read our story in ""A Straightforward Way to Scale to More Than 1 Scrum Team"" https://bit.ly/2xxiiUd #Agile ",https://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team/
#Scaling starts by splitting a #scrum team in 2 https://bit.ly/2xxiiUd #Agile ,https://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team/
"Improvements you decide in your #retrospective should be started right away ""Most #Scrum teams are not #agile"" https://bit.ly/2WtzYZa",https://philippe.bourgau.net/most-scrum-teams-are-not-agile/
Don't accept bad #teamwork. Start doing effective #retrospectives today.,https://philippe.bourgau.net/most-scrum-teams-are-not-agile/
#IntrinsicMotivation is Achille's heel of #agile software development. Great #retrospectives are a way to increase it.,https://philippe.bourgau.net/most-scrum-teams-are-not-agile/
"#ContinuousImprovement actions are like investment. Personal finance advisors say we should ""Pay ourselves first"". Teams should do improvement actions first. https://bit.ly/2WtzYZa #scrum",https://philippe.bourgau.net/most-scrum-teams-are-not-agile/
Start a #CodingDojo at work to practice and learn #TDD  https://bit.ly/3c1Le5P (Photo: https://bit.ly/3c1Le5P via @pinterest) #softwareCraftsmanship,https://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/
Read the full 15 years long story of how I learned #TDD https://bit.ly/3c1Le5P #unitTesting #SoftwareCraftsmanship,https://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/
I don’t have the time !. More bad excuses for not writing #UnitTests,https://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/
"""I guess we always find excuses to keep on with our bad habits, don’t we ?"" Stephen King. 20 Bad Excuses for Not Writing Unit Tests",https://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/
"The #UnitTesting Deadlock : ""I need to refactor first … and I need tests to refactor !"" ",https://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/
"""It’s multithreaded code, it’s impossible to test. Because it’s fully tederministic ?""  20 Bad Excuses for Not Writing #UnitTests https://bit.ly/2WDL26n",https://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/
"The main reason to write #UnitTests before the code is that it's too painful to write them after! More fun in ""20 Bad Excuses For Not Writing Unit Tests"" https://bit.ly/2WDL26n #TDD",https://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/
"Let's add a 4th step in #tdd: Fail, Fail with better error message, Pass, Refactor.",https://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/
Custom assertion matchers make TDD faster,https://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/
"#TDD tip: before passing the test, make it fail with a better error message. Diagnostic will be faster down the road. https://bit.ly/2xuUyjk #UnitTesting",https://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/
#SlackTime is a great way to start a #SideProject,https://philippe.bourgau.net/side-projects-matter/
Why banning #SideProject won't make employees more productive,https://philippe.bourgau.net/side-projects-matter/
Why companies should encourage #SideProjects,https://philippe.bourgau.net/side-projects-matter/
"Waking up 1 hour earlier is a great way to find the time for a #sideProject. Find more in ""13 Tricks for Successful Side Projects"" https://bit.ly/2L0dcmx",https://philippe.bourgau.net/13-tricks-for-successful-side-projects/
#SideProject best practice no.3 : Setup a routine,https://philippe.bourgau.net/13-tricks-for-successful-side-projects/
#SideProject best practice no.10 : Take technical debt !,https://philippe.bourgau.net/13-tricks-for-successful-side-projects/
"@daedtech : ""Technical debt is technical leverage"". https://daedtech.com/how-to-write-software-lessons/ Reminded me of best practices for side projects",https://philippe.bourgau.net/13-tricks-for-successful-side-projects/
#Motivation is the main fuel for successful #sideProjects! Do everything you can to keep it high. https://bit.ly/2L0dcmx,https://philippe.bourgau.net/13-tricks-for-successful-side-projects/
"[Red – Better Red – Green – Refactor] Explore different loops in ""Don’t stick to #TDD’s Red-Green-Refactor loop to the letter"" https://bit.ly/2zcXNfN #UnitTesting",https://philippe.bourgau.net/dont-stick-to-tdds-red-green-refactor-loop-to-the-letter/
"Experienced #tdd practitioners know when to switch gears and use other loop patterns. ""Don’t stick to TDD’s Red-Green-Refactor loop to the letter"" https://bit.ly/2zcXNfN #SoftwareTesting #eXtremeProgramming #UnitTesting",https://philippe.bourgau.net/dont-stick-to-tdds-red-green-refactor-loop-to-the-letter/
"Among many other things, I learned about code connascences and #pairprogramming best practices at last year's @spaconference. I guess this year's sessions will be even better ! ",https://philippe.bourgau.net/5-spa-conference-takeaways-that-could-make-us-better-software-professionals/
"""Incremental #refactoring prevents getting lost in programming tasks"" Discover ""7 reasons why learning refactoring techniques will improve your life as a #software engineer"" https://bit.ly/35wrULe ",https://philippe.bourgau.net/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/
"By unlocking baby step commits, incremental #Refactoring techniques will simplify #CodeReviews, and #RemoteWork. Read more in ""7 reasons why learning refactoring techniques will improve your life as a software engineer"" https://bit.ly/35wrULe #softwaredevelopment ",https://philippe.bourgau.net/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/
Invent #refactoring challenges from your daily work to get great at refactoring. ,https://philippe.bourgau.net/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/
"#CodingDojos are #deliberatepractice for #programmers. ""How to start learning the tao of incremental code #refactoring today"" https://bit.ly/2YAUr0T",https://philippe.bourgau.net/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/
Divide and Conquer remains one of the best techniques when #refactoring with #LegacyCode,https://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/
#PairProgramming and #MobProgramming are pretty effective for #LegacyCode #refactoring! This is 1 of 10 things to know that will make you great at refactoring legacy code. https://bit.ly/2WrqeP8,https://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/
"Linus Law: ""Given enough eyeballs, all bugs are shallow"". Mob and #pairprogramming help #refactoring #LegacyCode",https://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/
"I gave a coaching kata about #MikadoMethod at work this week. The more I use it, the more I found this technique powerful. #refactoring #TDD #CodingDojo https://bit.ly/2WrqeP8",https://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/
I've prepared a #MikadoMethod #Refactoring #CodingDojo on top of @jbrains's trivia codebase. Feedbacks are great https://bit.ly/2WrqeP8 https://bit.ly/2WrqeP8 @Work_at_Murex,https://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/
"Can you continuously run your tests while coding and stay in the flow ? Forget #UnitTest, only fast tests matter.",https://philippe.bourgau.net/forget-unit-tests/
Good assertion messages make your tests faster ! ,https://philippe.bourgau.net/forget-unit-tests/
"Can you continuously run your tests while coding and stay in the flow ? It does not matter if they are #UnitTest, #IntegrationTests, #EndToEndTest... as long as they are fast enough! https://bit.ly/2KZAau0",https://philippe.bourgau.net/forget-unit-tests/
The YELL #retrospective energizer : present yourself yelling ! Straightforward and #remote compliant.,https://philippe.bourgau.net/5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/
The YELL #retrospective #remote #energizer : just answer a question standing and shouting ! https://bit.ly/3c2RqKx,https://philippe.bourgau.net/5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/
"Icebreaker questions like ""What was your first job?"" are great #remote #retrospective #energizers",https://philippe.bourgau.net/5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/
Feeling gloomy as you start your remote meetings in these difficult times? Here are 5 (+1 in comments) Remote energizer tips. https://bit.ly/3c2RqKx #RemoteWork,https://philippe.bourgau.net/5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/
Let's imagine what #ExtremeProgramming would look like if it was invented in 2017,https://philippe.bourgau.net/extreme-extreme-programming-2017/
"20 years later, #eXtremeProgramming is unfortunately still extreme for a lot of teams ! https",https://philippe.bourgau.net/extreme-extreme-programming-2017/
Are #erlang and #Elixir #Microservice ready? Is this an advantage if we are trying to #SpikeAndStabilize? https://bit.ly/2WqEfwE #eXtremeProgramming,https://philippe.bourgau.net/extreme-extreme-programming-2017/
"2 years ago, I thought of what #XP would look like if it was re-invented. Things are slowly moving in this direction... ""eXtreme #eXtremeProgramming (2017)"" https://bit.ly/2WqEfwE",https://philippe.bourgau.net/extreme-extreme-programming-2017/
Some teams successfully throw their code away frequently instead of doing #refactoring !,https://philippe.bourgau.net/throwing-code-away-frequently/
"Could ""Throw away code frequently"" replace #tdd and #refactoring ?",https://philippe.bourgau.net/throwing-code-away-frequently/
"What's the point of using state of the art #software development practices for features you don't know if your users will use? Learn more about ""Throwing code away frequently""  https://bit.ly/2WqEfNa #tdd #refactoring #agile",https://philippe.bourgau.net/throwing-code-away-frequently/
"If you feel that #continuousimprovement is broken and #retrospectives don't work anymore, try the #improvementkata. ""How we used the improvement kata to gain 25% of productivity"" https://bit.ly/3fDyxQO",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/
"#Retrospectives are great to pick all the low hanging improvements. The #improvementKata is for the rest. Read the full story of ""How we used the improvement kata to gain 25% of productivity"" https://bit.ly/3fDyxQO #ContinuousImprovement #lean ",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/
"Here is an old post explaining how we replaced the #retrospective meeting with the asynchronous #improvementKata. Hopefully, this can help #Scrummaster who now need to #RemoteWork ""How we used the improvement kata to gain 25% of productivity"" https://bit.ly/3fDyxQO",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/
If you feel lost when doing something for the first time. Push through !,https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/
"Cheap #Retrospective trick: Keep Photos and Trello boards of Retrospectives as a log of your working agreements changes. Read the full story of ""How we used the #improvementKata to gain 25% of productivity"" https://bit.ly/2LfTDqv",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/
"#NoEstimates works! Read the full story in ""How we used the #improvementKata to gain 25% of productivity"" https://bit.ly/3boSjMo #continuousImprovement",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/
#Gamification transforms nice developers into berserk testers ! https://bit.ly/3boSjMo #exploratoryTesting #SoftwareDevelopment #SoftwareTesting ,https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/
"@jamesshore ""Don't measure #unitTest coverage"" #TDD yields around 90% #CodeCoverage anyway. I also have used #exploratoryTesting to improve the process. We used it as a measure of the process quality in an #ImprovementKata https://bit.ly/3boSjMo https://bit.ly/3boSjMo",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/
"Saving time by not fixing bugs might not be a great idea! Learn more in ""How we used the #improvementKata to gain 25% of productivity"" https://bit.ly/3fBnl77 #zeroBugs #continuousImprovement #lean",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/
A hole in a test suite is a bug to fix,https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/
Saving time by not fixing #bugs is not a winning strategy https://bit.ly/3fBnl77 #zeroBugs #lean,https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/
"From Peopleware: "" #Quality is Free, but only for those willing to pay for it!"" We reached the same conclusion ""How we used the #improvementkata to gain 25% of productivity - Part 5"" https://bit.ly/2WPeWoh #LeanManagement #softwaredevelopment",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/
"The #improvementKata not only brings improvement it also teaches you why they work! Read our story in ""How we used the improvement kata to gain 25% of productivity"" https://bit.ly/2WPeWoh #ContinuousImprovement #Lean #Agile",https://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/
"We can reduce meeting time by mixing #retrospective & #improvementKata. This is one of the ""Lessons learned from running our first improvement kata"" https://bit.ly/3a6rTP1 #LeanManagement #Agile #Scrum",https://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata/
What are we waiting to apply data science to the development process ?,https://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata/
"The improvement kata is 100% scientific, it uses data and deduction, not gut feeling and best practices",https://philippe.bourgau.net/how-to-run-your-first-improvement-kata/
"We can learn anything on our own by just doing it! This is one of our takeaways from ""How to run your first #improvementKata"" https://bit.ly/3dzmr9p #Lean #Learning",https://philippe.bourgau.net/how-to-run-your-first-improvement-kata/
"Once you have paying customers, you've got money to fuel further work.",https://philippe.bourgau.net/what-rails-teaches-us-about-building-platforms-and-frameworks/
"Thanks to agile practices, the cheapest way to build a framework is to extract it from a specific app.",https://philippe.bourgau.net/what-rails-teaches-us-about-building-platforms-and-frameworks/
"#Rails started as part of a successful commercial app, only later was it made ""generic"" and #opensource. ""What Rails teaches us about building platforms and frameworks"" https://bit.ly/2WFLO2A #Software #IncrementalDesign",https://philippe.bourgau.net/what-rails-teaches-us-about-building-platforms-and-frameworks/
Mob programming reduces WIP and cycle time,https://philippe.bourgau.net/mobbing-around-the-world-for-48h-dot-dot-dot-whos-in/
Stupid ideas that work become great ideas.,https://philippe.bourgau.net/mobbing-around-the-world-for-48h-dot-dot-dot-whos-in/
"""Principles​ ​of​ ​Product​ ​Development​ ​Flow"" by @DReinertsen should be a mandatory read for anyone involved with writing #software  #lean #agile https://bit.ly/2yLYHAc",https://philippe.bourgau.net/are-software-developers-overworked-or-undecided/
"@Godin_Quotes: ""You don't need more time, you just need to decide!"" The question is: Are #Software Developers Overworked or Undecided? https://bit.ly/2yLYHAc #lean",https://philippe.bourgau.net/are-software-developers-overworked-or-undecided/
Stop starting and start finishing,https://philippe.bourgau.net/are-software-developers-overworked-or-undecided/
"A simple #planningGame will give room for #slack. ""Sustainable productivity in #eXtremeProgramming"" https://bit.ly/2LhUkiZ #SustainablePace #Scrum",https://philippe.bourgau.net/sustainable-productivity-in-extreme-programming/
"With time and efforts, developers can become domain experts !",https://philippe.bourgau.net/sustainable-productivity-in-extreme-programming/
Exploratory testing goes hand in hand with #ZeroBugs policy,https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1/
"Some #eXtremeProgramming teams reported bug rates as low as 1.5 per month! Learn ""Why and how to start a #ZeroBugs policy"" https://bit.ly/3fDzKHE",https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1/
"If you liked my series about #zerobugs, here is another complementary article about the topic https://bit.ly/3fDzKHE",https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1/
#ZeroBugs policy makes developers happier,https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-2/
#ZeroBugs policy reduces technical debt,https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-2/
"""Agreeing on rules for categorizing bugs with users streamlines flow"". Read more in ""Why and how to start a #ZeroBugs policy"" https://bit.ly/3anSpDE #softwaredevelopment ",https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-3/
"#ExploratoryTesting gives you a quantifiable measure of your workflow. Read how we used it to reach a #ZeroBugs policy https://bit.ly/3anSpDE
",https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-3/
#ZeroBugs policy makes work more sustainable,https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4/
"Change agent's advice # 1 : be nice with people #changeManagement. Full story in ""Why and how to start a #ZeroBugs policy"" https://bit.ly/2SVNoMK",https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4/
#ZeroBugs policy makes #developers happy by losing less time and spending more time doing valuable stuff https://bit.ly/2SVNoMK,https://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4/
"#Agile can easily slip into micro-management... Unfortunately, Agile transformations usually don’t work! Read why here https://bit.ly/2LgaR72",https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-1-the-situation/
"Competitors managed to copy Toyota's practices, but not their results !",https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-1-the-situation/
"People buy-in values, but they measure them through actions. Full story in ""Why #Agile transformations usually don’t work""  https://bit.ly/2WJMAM1 #AgileTranformation",https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-2-the-problem/
Maria Montessori said “Never help a child with a task at which he feels he can succeed.” The same applies to teams of adults in an #agile transformation ... https://bit.ly/2WJMAM1,https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-2-the-problem/
An organization cannot be agile if all decisions have to go up and down the management ladder.,https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-3-what-to-do/
"Encouraging #experimentation while sticking to compensation by objectives is schizophrenic. Read more in ""Why #Agile transformations usually don’t work"" https://bit.ly/3co5gHP",https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-3-what-to-do/
OKRs have nothing to do with compensation !,https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-4-transparency/
"#SelfOrganization cannot work without a clear and compelling mission. Read more about #Transparency in ""Why #Agile transformations usually don’t work - part 4"" https://bit.ly/2WKmzfv",https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-4-transparency/
#OKRs are what #ManagementByObjectives was meant to be https://bit.ly/2WKmzfv #agile #lean ,https://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-4-transparency/
"By never changing the code, programmers make it even harder to change",https://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/
Large scale #Agile transformations are too often stressful for everyone ...  It turns out we can reduce the risks of large organization changes with the #MikadoMethod https://bit.ly/3boJlia #lean #ImprovementKata,https://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/
Developers can pause a Mikado Method refactoring for a while if needed.,https://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/
"The #MikadoMethod and the #ImprovementKata are more than similar. They are both system change techniques. Read more in ""Reducing the risks of large organization changes with the Mikado Method"" https://bit.ly/3fCIiyA #Systems ",https://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/
"Transforming large organization with the Mikado Method shows a ""right to fail"" mindset.",https://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/
Transforming large organization with the Mikado Method helps to parallelize work.,https://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/
Team Coding Dojo Randori are great at defining coding conventions.,https://philippe.bourgau.net/why-you-should-start-a-team-coding-dojo-randori-right-now/
"#CodingDojo Randoris are a great lesson in #EgolessProgramming. Read ""Why you should start a team coding dojo Randori right now"" https://bit.ly/2WPxiVW #unitTesting #TDD #MobProgramming",https://philippe.bourgau.net/why-you-should-start-a-team-coding-dojo-randori-right-now/
"I'm currently writing a post about how to define #codingStandards and conventions. Meanwhile, you can read ""Why you should start a team #codingDojo Randori right now"" and start defining yours right now! https://bit.ly/2WPxiVW",https://philippe.bourgau.net/why-you-should-start-a-team-coding-dojo-randori-right-now/
"As a first team Randori #codingdojo problem, I like Roman Numerals kata. Wondering ""How to start a team coding dojo Randori today"" https://bit.ly/2SWN3cB #TDD",https://philippe.bourgau.net/how-to-start-a-team-coding-dojo-randori-today/
"Team Randori coding dojo demonstrates agile principles in practice (focus on outcome, incremental delivery, YAGNI ...)",https://philippe.bourgau.net/how-to-start-a-team-coding-dojo-randori-today/
"If you cannot get people to adopt a new practice, get them to try it once. You'll be more than halfway there. Read more tricks in ""Coding Dojo Troubleshooting"" #CodingDojo #ChangeManagement https://bit.ly/2xVTm96",https://philippe.bourgau.net/coding-dojo-troubleshooting/
"Reframe the #CodingDojo as a learning exercise relying on #TDD to go beyond skepticism. Find more tricks in ""Coding Dojo Troubleshooting"" https://bit.ly/2xVTm96 #IncrementalDesign #Refactoring",https://philippe.bourgau.net/coding-dojo-troubleshooting/
"Be a champion of #EgolessProgramming in #CodingDojo to bring this practice in your team. Learn more tricks in ""How to get the max out of your Team Coding Dojo ?"" https://bit.ly/2LiC6Of",https://philippe.bourgau.net/how-to-get-the-max-out-of-your-team-coding-dojo/
"Linus' Law ""Given enough eyeballs, all bugs are shallow."" also applies in randori #CodingDojo or #MobProgramming https://bit.ly/2LiC6Of",https://philippe.bourgau.net/how-to-get-the-max-out-of-your-team-coding-dojo/
"I learned a lot of Haskell by just going to #CodingDojos ! Learn how to learn a new programming language in 20 hours. https://bit.ly/2zg5guN
",https://philippe.bourgau.net/how-to-learn-a-programming-language-in-just-20-hours/
"Thanks to its short feedback loop, #TDD plays a key role in fast #learning. ""How to learn a #programming language in just 20 hours"" https://bit.ly/2zg5guN #DeliberatePractice",https://philippe.bourgau.net/how-to-learn-a-programming-language-in-just-20-hours/
Time-boxing creates focus,https://philippe.bourgau.net/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/
"The more you know about software, the easier it will be to learn your next #programming language https://bit.ly/35RJMQV #DeliberatePractice #CodingDojo",https://philippe.bourgau.net/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/
The #CodingDojo was invented to teach and spread #TDD https://bit.ly/2SWUjoK,https://philippe.bourgau.net/frequently-asked-questions-about-the-20-hours-of-code-katas/
"For efficient learning, find a way to do #DeliberatePractice within a fast feedback loop. More tricks in ""Frequently asked questions about the 20 hours of Code Katas"" https://bit.ly/2SWUjoK #Software #tdd ",https://philippe.bourgau.net/frequently-asked-questions-about-the-20-hours-of-code-katas/
"Mock hell : when excessive use of test mocks makes #refactoring extremely slow or difficult. Learn more in ""Careless #Mocking Considered Harmful"" https://bit.ly/2WlgqHx #testing #tdd",https://philippe.bourgau.net/careless-mocking-considered-harmful/
Excessive use of #mocks leads to #LegacyCode https://bit.ly/2WlgqHx #UnitTesting #tdd ,https://philippe.bourgau.net/careless-mocking-considered-harmful/
"It looks like I'm not the only one who did the trip from heavy #mocking to almost no mocking at all! This path leads to super fast, maintainable and high coverage tests. https://bit.ly/2WlgqHx https://bit.ly/2WlgqHx #TDD #UnitTesting",https://philippe.bourgau.net/careless-mocking-considered-harmful/
Intricate #test state initialization is what encourage people to use #mocks. https://bit.ly/35MUkRB #unitTesting,https://philippe.bourgau.net/how-immutable-value-objects-fight-mocks/
"Mutable state and side effects make #unitTesting less effective. Read ""How Immutable Value Objects fight Mocks"" https://bit.ly/35MUkRB",https://philippe.bourgau.net/how-immutable-value-objects-fight-mocks/
"#Immutable Value Objects simplify #testing in many ways. Let's explore ""Immutable Value Objects vs Mocks: Fizz Buzz"" #SoftwareTesting #Software https://bit.ly/3bozucr",https://philippe.bourgau.net/immutable-value-objects-vs-mocks-fizz-buzz/
"Why is it so hard to persuade other developers to use #immutable data structures ? Open question in ""Immutable #ValueObjects vs #Mocks : Fizz Buzz"" https://bit.ly/3bozucr #ddd #software #unitTesting",https://philippe.bourgau.net/immutable-value-objects-vs-mocks-fizz-buzz/
"If you are not careful, messy test initialization code will trick you into using #mocks. Read more in ""How to use #TestDataBuilders to avoid mocks and keep your tests clear"" https://bit.ly/2zpAG1Z #unitTesting #tdd #mocking",https://philippe.bourgau.net/how-to-use-test-data-builders-to-avoid-mocks-and-keep-your-tests-clear/
"By simplifying the creation of new tests with different data, Test Data Builders increase code coverage in the long term!",https://philippe.bourgau.net/how-to-use-test-data-builders-to-avoid-mocks-and-keep-your-tests-clear/
@ThomasCountz Essential & Relevant: A Unit Test Balancing Act https://bit.ly/2zpAG1Z. Extreme #DRY #UnitTests hurts readability. #TestDataBuilders makes things even simpler than parametrized creation methods. Easy setup test also avoids excessive #mocking https://bit.ly/2zpAG1Z,https://philippe.bourgau.net/how-to-use-test-data-builders-to-avoid-mocks-and-keep-your-tests-clear/
"When many different mocks are in place to isolate an external dependency, we end up with zillions versions of the code! Learn how to ""Avoid mocks and test your core domain faster with #HexagonalArchitecture"" https://bit.ly/2WMhIdJ #mocking #UnitTesting",https://philippe.bourgau.net/how-custom-assertion-matchers-will-keep-mocks-away/
"Custom assertion matchers make #refactoring easier by factorizing test assertions. More in ""How Custom Assertion Matchers will keep #mocks away"" https://bit.ly/2WMhIdJ #softwaretesting #tdd ",https://philippe.bourgau.net/how-custom-assertion-matchers-will-keep-mocks-away/
"When many different #mocks are in place to isolate an external dependency, we end up with 'n' versions of the code! Read more in ""Avoid mocks and test your core domain faster with #HexagonalArchitecture"" https://bit.ly/2Wkym56 #TDD #unitTesting",https://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/
"By keeping your tests around your core domain fast, Hexagonal Architecture increases your competitive advantage.",https://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/
Mocking is the unfortunate quick fix to slow tests. You can get rid of mocking maintenance with full fledged in-memory fakes. https://bit.ly/2yt3gPk #UnitTesting #Mocks #TDD,https://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/
Merciless mock hunting will improve the design of your system !,https://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/
"By making #mocking so easy, mocking frameworks often do more harm than good. cf ""When is testing using mocks still a good idea ?"" https://bit.ly/2WJMDHH #UnitTesting #SoftwareTesting ",https://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea/
When is testing using mocks still a good idea? Proxy mocks are as un-intrusive as mocks can be https://bit.ly/2WJMDHH #mocking #tdd #UnitTesting,https://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea/
"Test-Driven Development also teaches you what testable code looks like. See how we use it in ""A #codingDojo exercises plan towards #refactoring #legacyCode"" https://bit.ly/2yLtZHr #tdd #unitTesting",https://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/
A mix of Coding Dojos in pairs and Mob Programming sessions is a good way to teach TDD in a Legacy Code context.,https://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/
"Even if you don't work remotely, avoiding unnecessary meetings is always a great thing! Here's a recipe for asynchronous #decisionMaking. https://bit.ly/2Wngk29 @bdelacretaz #remote #meeting ",https://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/
#OpenSource asynchronous and #remotework #DecisionMaking using git pull requests is a perfect match for #ArchitectureDecisionRecords and #LivingDocumentation https://bit.ly/2Wngk29,https://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/
Wondering how to make decisions in #remoteWork without spending your life with a headset on? Have a look at this Takeaway from @DevoxxFR where @bdelacretaz explains how to make decision asynchronously https://bit.ly/2Wngk29,https://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/
"Is Diogenes syndrome for source code a recognized pathology? Let's see ""How to convince your business of sponsoring a large scale #refactoring"" #LegacyCode #CleanCode https://bit.ly/3fEdrBJ",https://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/
"How to convince your business to sponsor a large scale #refactoring? Stating @DocOnDev ""We should never ask the permission to do a good job"" https://bit.ly/3fEdrBJ Read more: https://bit.ly/3fEdrBJ",https://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/
"Badass developers are first of all people who are credible to the business. This is ""Why we need Badass developers to perform large scale #refactorings"" https://bit.ly/35PU1Fr #LegacyCode",https://philippe.bourgau.net/why-we-need-badass-developers-to-perform-large-scale-refactorings/
"On my first job, I tried to make the point for TDD with by giving a good live coding demo. But it was this respected developer's opinion that won the point.",https://philippe.bourgau.net/why-we-need-badass-developers-to-perform-large-scale-refactorings/
"A badass developer will not add a funky new tech in the production code. This is one of ""5 mistakes #badassdevelopers never do"" https://bit.ly/2WntjkI #SoftwareDeveloper ",https://philippe.bourgau.net/5-mistakes-badass-developers-never-do/
"At @DDDesignFR @ericevans0 said ""Some of my biggest mistakes were not backtracking soon enough a few times as I was drifting in quagmire"". Find other advices in ""5 mistakes #BadassDeveloper never do"" https://bit.ly/2WntjkI",https://philippe.bourgau.net/5-mistakes-badass-developers-never-do/
"Candor is a way to get our opinions and questions through, without sounding rude or pushy. More tactics in ""Principles that will make you become a #badassDeveloper"" https://bit.ly/3bhRJjC #refactoring #SoftwareEngineer ",https://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/
"In the end, #BadassDevelopers are ready to leave a FUBARed situation https://bit.ly/3bhRJjC",https://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/
"Incremental #software development fixes the business people's fear of #refactoring tunnel. Read more in ""Incremental Software Development for Large Scale Refactorings"" https://bit.ly/3dEWMMJ",https://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/
"Mastering incremental #softwareDevelopment builds self-confidence for developers. Read more in ""Incremental Software Development for Large Scale #Refactorings""  https://bit.ly/3dEWMMJ #eXtremeProgramming",https://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/
"The easiest #refactorings to negotiate are the ones we don't have to talk about ! ""Incremental #Software Development Strategies for Large Scale Refactoring #1 : Constant #MercilessRefactoring"" https://bit.ly/2LhClZQ #eXtremeProgramming #IncrementalDesign",https://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/
"""Disguise"" #refactoring as the first technical sub-task of a feature to get it prioritized. https://bit.ly/2LhClZQ #softwaredevelopment ",https://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/
TDD has a baby steps rythm baked in.,https://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/
"The #MikadoMethod is at the heart of making baby steps work in real life ""Incremental #SoftwareDevelopment Strategies for Large Scale #Refactoring part 2 : Baby Steps"" https://bit.ly/2YTYgOQ",https://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/
