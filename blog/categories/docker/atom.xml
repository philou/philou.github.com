<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-07-05T03:51:34+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Compose trick : How to have an overridable environment variable in development mode ?]]></title>
    <link href="http://philippe.bourgau.net/docker-compose-trick-how-to-have-an-overridable-environment-variable-in-development-mode/"/>
    <updated>2016-07-04T03:55:00+00:00</updated>
    <id>http://philippe.bourgau.net/docker-compose-trick-how-to-have-an-overridable-environment-variable-in-development-mode</id>
    <content type="html"><![CDATA[<p>I have recently been playing with <a href="https://www.docker.com/">Docker</a> and <a href="https://docs.docker.com/compose/">Docker Compose</a> while starting <a href="https://github.com/philou/planning-poker">my new side project</a>. I&rsquo;ve fallen into a situation where my production container uses a value for an environment variable, but while developing, I&rsquo;ll need both a different default and the ability to override this value.</p>

<p>I&rsquo;m using <a href="http://rubyonrails.org/">Rails</a> and found various references about how to deploy Rails app using Docker, but in the end, I decided to use <a href="http://www.heroku.com">Heroku</a> which handles a lot of ops for me. Rails uses the RAILS_ENV environment variable to know if it&rsquo;s going to run in development, test or production mode. The <a href="https://hub.docker.com/r/heroku/ruby/">heroku/ruby</a> image sets <code>RAILS_ENV=production</code>, but we usually want to use <code>RAILS_ENV=development</code> locally. I could have overridden RAILS_ENV in a docker-compose.override.yml file, but that would prevent me from running my app in production locally.</p>

<h2>The trick</h2>

<p>I eventually fixed my issue with combination of 2 files.</p>

<h3>docker-compose.override.yml</h3>

<p>```yaml
web:
  &hellip;
  environment:</p>

<pre><code>RAILS_ENV: "${RAILS_ENV}"
</code></pre>

<p>&hellip;
```</p>

<h3>.env</h3>

<p><code>bash
RAILS_ENV=development
</code></p>

<h3>The logs</h3>

<p>My app starts in development mode by default :</p>

<p><code>bash
philou@philou-UX31E:~/code/planning-poker$ docker-compose up web
Starting planningpoker_herokuPostgresql_1
Recreating planningpoker_web_1
Attaching to planningpoker_web_1
web_1               | Puma starting in single mode...
web_1               | * Version 3.4.0 (ruby 2.2.3-p173), codename: Owl Bowl Brawl
web_1               | * Min threads: 5, max threads: 5
web_1               | * Environment: development
web_1               | * Listening on tcp://0.0.0.0:8080
web_1               | Use Ctrl-C to stop
</code></p>

<p>But I can still override RAILS_ENV to test for example :</p>

<p><code>bash
philou@philou-UX31E:~/code/planning-poker$ RAILS_ENV=test docker-compose up web
planningpoker_herokuPostgresql_1 is up-to-date
Recreating planningpoker_web_1
Attaching to planningpoker_web_1
web_1               | Puma starting in single mode...
web_1               | * Version 3.4.0 (ruby 2.2.3-p173), codename: Owl Bowl Brawl
web_1               | * Min threads: 5, max threads: 5
web_1               | * Environment: test
web_1               | * Listening on tcp://0.0.0.0:8080
web_1               | Use Ctrl-C to stop
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the 'TLS-enabled daemon' docker error on Ubuntu]]></title>
    <link href="http://philippe.bourgau.net/fixing-the-tls-enabled-daemon-docker-error-on-ubuntu/"/>
    <updated>2015-12-04T04:29:00+00:00</updated>
    <id>http://philippe.bourgau.net/fixing-the-tls-enabled-daemon-docker-error-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/2015-12-04-fixing-the-tls-enabled-daemon-docker-error-on-ubuntu/docker-vagrant-ubuntu.jpg" title="&ldquo;The 3 logos of Docker, Vagrant and Docker&rdquo;" ></p>

<p>I am using <a href="http://www.ubuntu.com/">Ubuntu</a>, <a href="https://www.vagrantup.com/">Vagrant</a> and <a href="https://www.docker.com/">Docker</a> together to handle my various development environments. It usually works just fine : it&rsquo;s fast, low weight, it keeps my machine clean and it&rsquo;s quite simple once you&rsquo;ve setup your first VM. Until last time &hellip; read on !</p>

<p>When I tried to start my docker session through Vagrant as usuall, here is the error I suddenly got :</p>

<p>```
philou@philou-UX31E:~/code/concurrency-kata$ vagrant up
/home/philou/.ssh/known_hosts updated.
Original contents retained as /home/philou/.ssh/known_hosts.old
A Docker command executed by Vagrant didn&rsquo;t complete successfully!
The command run along with the output from the command is shown
below.</p>

<p>Command: [&ldquo;docker&rdquo;, &ldquo;ps&rdquo;, &ldquo;-a&rdquo;, &ldquo;-q&rdquo;, &ldquo;&mdash;no-trunc&rdquo;, {:notify=>[:stdout, :stderr]}]</p>

<p>Stderr: time=&ldquo;2015-10-19T06:16:27+02:00&rdquo; level=&ldquo;fatal&rdquo; msg=&ldquo;Get <a href="http:///var/run/docker.sock/v1.17/containers/json?all=1:">http:///var/run/docker.sock/v1.17/containers/json?all=1:</a> dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?&rdquo;</p>

<p>Stdout:
ssh: connect to host localhost port 2222: Connection refused
```</p>

<p>After a bit of Google searching, I found that the docker service needed to be started. <code>service docker start</code> did the trick &hellip; until next reboot !</p>

<p>With still some more Googling, I found a <a href="http://askubuntu.com/questions/19320/how-to-enable-or-disable-services">page</a> explaining how to manage Ubuntu services. In order to make the docker service automaticaly start at every reboot, I just had to enter the following :</p>

<p><code>
systemctl enable docker.service
</code></p>

<p>That did the trick ! I thought that might be useful for others.</p>
]]></content>
  </entry>
  
</feed>
