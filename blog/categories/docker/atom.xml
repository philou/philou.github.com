<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-09-01T07:29:35+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I finally use Docker on small open source side projects]]></title>
    <link href="http://philippe.bourgau.net/how-i-finally-use-docker-on-small-open-source-side-projects/"/>
    <updated>2017-02-16T19:37:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-finally-use-docker-on-small-open-source-side-projects</id>
    <content type="html"><![CDATA[<p>A few months ago, I started <a href="https://github.com/philou/planning-poker">Philou&rsquo;s Planning Poker</a>, an open source side project to run <a href="https://en.wikipedia.org/wiki/Planning_poker">planning poker estimate sessions</a> remotely. The main technology is <a href="http://rubyonrails.org/">Rails</a>, and I&rsquo;d been planning to use <a href="https://www.docker.com/">Docker</a> as much as possible as a way to learn it. Indeed, I learned that Docker is no Silver Bullet !</p>

<p><img class="center" src="/imgs/2017-02-16-how-i-finally-use-docker-on-small-open-source-side-projects/docker-silver-bullet.jpg" title="The Docker logo next to a silver bullet" ></p>

<h2>The Docker love phase</h2>

<p>At first everything seemed great about Docker. I&rsquo;d used it on toy projects and it proved great to quickly setup cheap and fast virtual machines. I even created the <a href="https://github.com/philou/rubybox">Rubybox</a> project on Github to clone new ruby VMs in a matter of seconds. I also used Docker to host my <a href="http://octopress.org/">Octopress</a> environment to write this blog. As a long time Linux user, my dev machines have repeatedly been suffering from pollution : after some time, they get plagued with all the stuff I installed to do my various dev experiments, and at some point, re-install seems easier than cleaning up all the mess. If I could use containers for all my projects, Docker would be a cure for this.</p>

<p>Going through all these successes, when I started my planning poker app, I decided to go all into Docker, development, CI and deployment. You can read the log of how I did that in <a href="http://philippe.bourgau.net/blog/categories/docker/">these posts</a>. Fast forward a bit of searching, experimenting and deploying, all was setup : my dev env was in containers, my CI was running in containers in <a href="https://circleci.com/gh/philou/planning-poker/tree/master">CircleCI</a> and the app was pushed to containers on <a href="https://www.digitalocean.com/">DgitalOcean</a>.</p>

<h2>Reality strikes back</h2>

<p>At first, everything seemed to be working fine. Even if there were a few glitches that I would have to fix down the road like :</p>

<ul>
<li>Whenever I wanted to update my app&rsquo;s dependencies, I had to run <code>bundle update</code> twice, and not incrementally. Surely, I would manage to fix that with a bit of time</li>
<li>Obviously, the CI was slower, because it had to build the containers before deploying them to <a href="https://hub.docker.com/">Docker Hub</a>, but that was the price to pay in order to know exactly what was running on the server &hellip; right ?</li>
<li>And &hellip; <a href="https://github.com/guard/guard">Guard</a> notifications did not appear on my desktop. I was accessing my dev env through ssh, so I would have to fix that, just a few hours and it should be working</li>
</ul>


<p>After a while, I got used to my work environment and became almost as productive as I used to be &hellip; but you know, shit happens !</p>

<ul>
<li>I had to install <a href="http://phantomjs.org/">PhantomJS</a> on my CI, and if that comes out of the box on <a href="https://travis-ci.org/">TravisCI</a>, you&rsquo;re all alone in your own containers. Installing this on the Debian container proved unnecessarily complex, but I figured it out</li>
<li>Then all of a sudden, my CI started to break &hellip; You can read a summary of what I did to fix it <a href="/how-i-fixed-devicemapper-error-when-deploying-my-docker-app/">here</a>. Long story short : I had forgotten to clean up old docker images, and after enough deployments, the server ran out of space, and that corrupted the docker cache somehow. I eventually re-installed and upgraded the deployment VM. That made me lose quite some time though.</li>
<li>Finally, as I started to play with <a href="https://github.com/rails/actioncable">ActionCable</a>, I could not get the web-socket notifications through my dev host. There must be some settings and configuration to make this work, for sure, but it&rsquo;s supposed to work out of the box.</li>
</ul>


<p>Eventually, this last issue convinced me to change my setup. All these usages of Docker where definitely worth it from a learning point of view, but as my focus moved to actually building the app, it was time to take pragmatic decisions.</p>

<h2>My use of Docker now</h2>

<p>There were 2 main ideas driving my changes to my dev env for this open source side project :</p>

<ol>
<li>Use the thing most people do</li>
<li>Use commercially supported services &amp; tools</li>
</ol>


<p>These should avoid losing my time instead of being productive. My setup is now almost boring ! To summarize I now use <a href="https://travis-ci.org/philou/planning-poker">TravisCI</a>, <a href="https://philous-planning-poker.herokuapp.com/">Heroku</a>, and <a href="https://github.com/rbenv/rbenv">rbenv</a> on my physical machine. I kept Docker where it really shines : all the local servers required for development are managed by <a href="https://docs.docker.com/compose/">Docker Compose</a>. Here is my <a href="https://github.com/philou/planning-poker/blob/master/docker-compose.yml"><code>docker-compose.yml</code></a></p>

<p>```yaml
db:
  image: postgres:9.4.5
  volumes:</p>

<pre><code>- planning-poker-postgres:/var/lib/postgresql/data
</code></pre>

<p>  ports:</p>

<pre><code>- "5432:5432"
</code></pre>

<p>redis:
  image: redis:3.2-alpine
  volumes:</p>

<pre><code>- planning-poker-redis:/var/lib/redis/data
</code></pre>

<p>  ports:</p>

<pre><code>- "6379:6379"
</code></pre>

<p>```</p>

<p>This saves me from installing <a href="https://www.postgresql.org/">Postgresql</a> or <a href="https://redis.io/">Redis</a> on my dev machine, and I can start all the services required for app with a single <code>docker-compose up</code> command !</p>

<h2>My future uses of Docker</h2>

<p>More generally, in the near future, here is when I&rsquo;ll use docker</p>

<ul>
<li>As I just said, to manage local servers</li>
<li>To boot quick and cheap VMs (check <a href="https://github.com/philou/rubybox">rubybox</a>)</li>
<li>To handle CI and deployment of large or non-standard systems, where Docker can provide a lot of benefits in terms of price, scaling or configurability</li>
</ul>


<p>Docker came from the deployment world, and this is where it is so great. As of today though, even if it is usable as dev VM, it is still not up to a standard dev machine. Despite that, all the issues I ran into could be fixed, and I&rsquo;m pretty sure they&rsquo;ll be some day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I fixed 'devicemapper' error when deploying my Docker app]]></title>
    <link href="http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app/"/>
    <updated>2017-02-01T17:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app</id>
    <content type="html"><![CDATA[<p>A few months ago, I started continuously deploying my <a href="https://github.com/philou/planning-poker">latest side project</a> to a <a href="https://cloud.digitalocean.com">Digital Ocean</a> box. If you are interested, <a href="/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/">here</a> is the full story of how I did it. All was going pretty well until last week, when the builds unexpectedly started to fail. I wasn&rsquo;t getting the same error at every build, but it was always the <a href="https://www.docker.com/">Docker</a> deployment that failed. Here are the kind of errors I got :</p>

<p>```bash</p>

<h1>At first, it could not connect to the db container</h1>

<p>PG::ConnectionBad: could not translate host name &ldquo;db&rdquo; to address: Name or service not known</p>

<h1>Then I started to have weird EOF errors</h1>

<p>docker stderr: failed to register layer: ApplyLayer exit status 1 stdout:  stderr: unexpected EOF</p>

<h1>Eventually, I got some devicemapper errors</h1>

<p>docker stderr: failed to register layer: devicemapper: Error running deviceCreate (createSnapDevice) dm_task_run failed
```</p>

<p>You can read the full error logs <a href="https://circleci.com/gh/philou/planning-poker/tree/master">here</a>.</p>

<h2>That&rsquo;s what happens when you go cheap !</h2>

<p>After searching the internet a bit, I found <a href="https://github.com/docker/docker/issues/6325">this issue</a> which made me understand that my server had ran out of disk space because of old versions of my docker images. I tried to remove them, but the commands were failing. After some more search, I found <a href="https://github.com/docker/docker/issues/26015">this other issue</a> and came to the conclusion that there was no solution except resetting docker completely. Hopefully, Digital Ocean has a button for rebuilding the VM.</p>

<p><a href="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/reset-digitalocean.jpg"><img class="center" src="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/reset-digitalocean-small.jpg" title="A screenshot of the rebuild screen on digitalocean" ></a></p>

<p>Once the VM was rebuilt, the first thing that I did was to try to connect from my shell on my local machine. I had to clean up my known host file, but that was simple enough.</p>

<p><code>
nano ~/.ssh/known_hosts
</code></p>

<p>Once this was done, I just followed the steps I had documented in my <a href="/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/">previous blog post</a></p>

<p>Was I all done ?</p>

<p>Almost &hellip; I ran into another kind of errors this time. Processes kept getting killed on my VM.</p>

<p><code>bash
INFO [cc536697] Running /usr/bin/env docker-compose -f docker-compose.production.yml run app bundle exec rake db:migrate as root@104.131.47.10
rake aborted!
SSHKit::Runner::ExecuteError: Exception while executing as root@104.131.47.10: docker-compose exit status: 137
docker-compose stdout: Nothing written
docker-compose stderr: Starting root_db_1
bash: line 1: 18576 Killed
</code></p>

<p>After some more Google searching, I discovered that this time, the VM was running out of memory ! The fast fix was to upgrade the VM (at the extra cost of 5$ / month).</p>

<p><a href="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/resize-digitalocean.jpg"><img class="center" src="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/resize-digitalocean-small.jpg" title="A screenshot of the resize screen on digitalocean" ></a></p>

<p>After increasing the memory (and disk space) of the VM, deployment went like a charm. Others have fixed the same issue for free by <a href="https://www.digitalocean.com/community/questions/npm-gets-killed-no-matter-what">adding a swap partition to the VM</a>.</p>

<h2>The end of the story</h2>

<p>I wasted quite some time on this, but it taught me some lessons :</p>

<ol>
<li>I should have taken care of cleaning up the old images and containers, at least manually, at best automatically</li>
<li>I should write a script to provision a new server</li>
<li>The cheap options always come at a cost</li>
<li>For an open source side project like this one, it might be a better strategy to only use Docker to setup my dev env, and use free services like <a href="https://travis-ci.org/">Travis-ci</a> and <a href="https://www.heroku.com/">Heroku</a> for production</li>
<li>Doing everything myself is not a good recipe to getting things done &hellip; I well past time I leave my developer hat for an entrepreneur cap</li>
<li>In order to keep learning and experimenting, focused <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20h sessions</a> of deliberate practice might be the most time effective solution</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuously Deliver a Rails App to your DigitalOcean Box using Docker]]></title>
    <link href="http://philippe.bourgau.net/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/"/>
    <updated>2016-10-25T20:39:00+02:00</updated>
    <id>http://philippe.bourgau.net/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker</id>
    <content type="html"><![CDATA[<p>I decided to use <a href="https://github.com/philou/planning-poker">my latest side project</a> as an occasion to learn <a href="https://www.docker.com/">Docker</a>. I first used <a href="https://www.heroku.com/">Heroku</a> as a platform for deployment (see <a href="/how-to-boot-a-new-rails-project-with-docker-and-heroku/">previous post</a>). It works fine but I discovered the following shortcomings :</p>

<ul>
<li>Heroku does not deploy with Docker, which means that I&rsquo;d get quite different configurations between dev and prod, which is one of the promises of Docker :(</li>
<li>The dockerfile provided by docker runs bundle install in a directory outside of the docker main shared volume, this forces to do bundle update twice (once to update Gemfile.lock and a second time to update the actual gems &hellip;)</li>
</ul>


<p>None of these issues could be fixed without moving away from Heroku.</p>

<h2>A great Tutorial / Guide</h2>

<p>I followed <a href="http://chrisstump.online/">Chris Stump</a>&rsquo;s great tutorials to <a href="http://chrisstump.online/2016/02/20/docker-existing-rails-application/">setup Docker for my app</a>, to <a href="http://chrisstump.online/2016/03/03/continuous-integration-docker-rails/">continuously integrate</a> on <a href="https://circleci.com/">CircleCI</a> and to <a href="http://chrisstump.online/2016/03/17/continuous-deployment-docker-rails/">continuously deploy</a> on a private virtual server on <a href="https://www.digitalocean.com/">DigitalOcean</a>.</p>

<p>The first 2 steps (Docker &amp; CI) worked really out of the box after following the tutorial. Dealing with step 3 (CD) was a bit more complicated, because of :</p>

<ol>
<li>the specificities of DigitalOcean</li>
<li>the fact that I&rsquo;m a no deployment expert &hellip;</li>
</ol>


<p><img class="center" src="/imgs/2016-10-25-continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/docker-circleci-digitalocean.jpg" title="The logos of Docker, CircleCI and DigitalOcean" ></p>

<h2>What did I need to do to make it work</h2>

<h3>Setup SSH on the DigitalOcean box</h3>

<p>I started by creating a <a href="https://cloud.digitalocean.com/droplets/new?size=2gb&amp;region=nyc3&amp;appId=20423249&amp;type=applications">one-click DigitalOcean box</a> with Docker pre-installed. That&rsquo;s the moment where I had to setup SSH in order to make CircleCI deploy to my box. DigitalOcean has a <a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets">guide for this</a>, but here is how I did it :</p>

<ol>
<li>Create a special user on my dev machine <code>adduser digitaloceanssh</code></li>
<li>Log as this user <code>su digitaloceanssh</code>, and generated ssh keys for it <code>ssh-keygen</code></li>
<li>Print the public key <code>cat ~/.ssh/id_rsa.pub</code> and copy paste it in your DigitalOcean box setup</li>
<li>Print the private key <code>cat ~/.ssh/id_rsa</code> and copy past it in your circle-ci job ssh keys</li>
</ol>


<p>The benefit of this is that you should now be able to ssh in your DigitalOcean box from your digitaloceanssh user <code>ssh root@&lt;ip.to.digital.ocean&gt;</code></p>

<h3>Optional : update the box</h3>

<p>The first time I logged into my box, I noted that packages were out of date. If you need it, updating the packages is a simple matter of <code>apt-get update &amp;&amp; apt-get upgrade</code></p>

<h3>Fix deployment directory</h3>

<p>By default, the home dir of the root user on the DigitalOcean box is <code>/root/</code>. Unfortunately, Chris Stump&rsquo;s tutorial assumes it to be <code>/home/root/</code>. In order to fix that, I ssh-ed in the box and created a symbolic link : <code>ln -s /root /home/root</code>.</p>

<h3>Install docker-compose on the box</h3>

<p>Chris Stump&rsquo;s tutorial expects docker-compose on the deployment box, but DigitalOcean only installs Docker on its boxes &hellip; Install instructions for docker-compose can be found <a href="https://docs.docker.com/compose/install/">here</a>. Don&rsquo;t use the container option, it does not inherit environment variables, and will fail the deployment, just use the first curl based alternative.</p>

<h3>Warning : replace ALL dockerexample</h3>

<p>This comes as an evidence, but be sure to replace all the references to &lsquo;dockerexample&rsquo; to your own app name in all of Chris Stump&rsquo;s templates (I forgot some and lost a few rebuilds for that)</p>

<h3>Create the production DB</h3>

<p>Chris Stump&rsquo;s deployment script works with an existing production DB. The first migration will fail. To fix this, just do the following :</p>

<ol>
<li>ssh into the DigitalOcean server</li>
<li>run <code>DEPLOY_TAG=&lt;latest_deploy_tag&gt; RAILS_ENV=production docker-compose -f docker-compose.production.yml run app bundle exec rake db:create</code></li>
</ol>


<p>You can find the latest DEPLOY_TAG from the CircleCi step <code>bundle exec rake docker:deploy</code></p>

<h3>How to access the logs</h3>

<p>It might come handy to check the logs of your production server ! Here is how to do this :</p>

<ol>
<li>ssh in your production server</li>
<li>run the following to tail on the logs <code>DEPLOY_TAG=`cat deploy.tag` RAILS_ENV=production docker-compose -f docker-compose.production.yml run app tail -f log/production.log</code></li>
</ol>


<p>Obviously, tail is just an example, use anything else at your convenience.</p>

<h3>Generate a secret token</h3>

<p>Eventually, the build and deployment job succeeded &hellip; I had still one last error when I tried to access the web site : <code>An unhandled lowlevel error occurred. The application logs may have details.</code>. After some googling, I understood that this error occurs when you did not set a secret key base for your rails app (<a href="http://stackoverflow.com/questions/37112804/an-unhandled-lowlevel-error-occurred-the-application-logs-may-have-details">details</a>). There is a <a href="http://www.jamesbadger.ca/2012/12/18/generate-new-secret-token/">rails task to generate a token</a>, all that was needed was to create a .env file on the server with the following :</p>

<p><code>SECRET_KEY_BASE=&lt;GENERATED_SECRET...&gt;</code></p>

<h2>What&rsquo;s next ?</h2>

<p>Obviously, I learned quite a lot with this Docker exploration. I am still in the discovery phase, but my planning poker side project is now continuously built on <a href="https://circleci.com/gh/philou/planning-poker">circleci</a>, and deployed to a <a href="http://104.131.47.10/">DigitalOcean box</a>.</p>

<p>The next steps (first, find a better subdomain, second, speed up the build job) will tell me if this kind of deployment is what I need for my pet projects. If it turns out too complicated or too difficult to maintain, <a href="http://dokku.viewdocs.io/dokku/">Dokku</a> is on my radar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to prepare a new Ruby env in 3 minutes using Docker]]></title>
    <link href="http://philippe.bourgau.net/how-to-prepare-a-new-ruby-env-in-3-minutes-using-docker/"/>
    <updated>2016-08-17T05:21:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-prepare-a-new-ruby-env-in-3-minutes-using-docker</id>
    <content type="html"><![CDATA[<p>One or two weeks ago, I registered to the <a href="http://www.meetup.com/fr-FR/Paris-Ruby-Workshop/">Paris Ruby Workshop Meetup</a> and needed a Ruby env. I have been using <a href="https://www.vagrantup.com/">Vagrant</a> quite a lot to isolate my different dev envs from each other and from my main machine. As I&rsquo;ve been digging more into <a href="http://www.docker.com">Docker</a> lately, I thought I&rsquo;d simply use Docker and Docker Compose instead.</p>

<p>I turned out to be dead simple. All that is needed is a <code>docker-compose.yml</code> file to define the container, record the shared volume and set a bundle path inside it :</p>

<p>```yaml
rubybox:
  image: ruby:2.3
  command: bash
  working_dir: /usr/src/app
  environment:</p>

<pre><code>BUNDLE_PATH: 'vendor/bundle'
</code></pre>

<p>  volumes:</p>

<pre><code>- '.:/usr/src/app'
</code></pre>

<p>```</p>

<p>Without the custom bundle path, bundled gems would be installed elsewhere in the container, and lost at every restart.</p>

<p>To use the Rubybox, just type <code>docker-compose run rubybox</code> and you&rsquo;ll get a shell from within your ruby machine, where you can do everything you want.</p>

<p>In fact, I found the thing so useful, that I created the <a href="https://github.com/philou/rubybox">Rubybox</a> git repo to simplify cloning and reusing. I&rsquo;ve already cloned it at least 3 times since then !</p>

<p><code>bash
git clone git@github.com:philou/rubybox.git
cd rubybox
docker-compose run rubybox
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup Rails, Docker, PostgreSQL (and Heroku) for local development ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-setup-rails-docker-postgresql-and-heroku-for-local-development/"/>
    <updated>2016-07-20T06:12:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-setup-rails-docker-postgresql-and-heroku-for-local-development</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/philou/planning_poker">My current side project</a> is an online tool to do remote planning pokers. I followed my <a href="/how-to-boot-a-new-rails-project-with-docker-and-heroku/">previous tutorial</a> to setup Rails, Docker and Heroku.</p>

<p>Naturally, as a BDD proponent, I tried to install <a href="https://cucumber.io">cucumber</a> to write my first scenario.</p>

<p>Here is the result of my first cucumber run :</p>

<p><code>bash
$ docker-compose run shell bundle exec cucumber
rails aborted!
PG::ConnectionBad: could not translate host name "postgres://postgres:@herokuPostgresql:5432/postgres" to address: Name or service not known
...
</code></p>

<p>It turned out that I had taken instructions from a <a href="https://blog.codeship.com/deploying-docker-rails-app/">blog article on codeship</a> that mistakenly used <code>host:</code> instead of <code>url:</code> in their <code>config/database.yml</code></p>

<p>After fixing that in my database.yml file, things where only slightly working better :</p>

<p><code>bash
$ docker-compose run shell bundle exec cucumber
rails aborted!
ActiveRecord::StatementInvalid: PG::ObjectInUse: ERROR:  cannot drop the currently open database
: DROP DATABASE IF EXISTS "postgres"
</code></p>

<p>The thing is the config was still using the same database for all environments. That&rsquo;s not exactly what I wanted. I updated my <code>config/database.yml</code> :</p>

<p>```yaml
default: &amp;default
  adapter: postgresql
  encoding: unicode
  pool: 5
  timeout: 5000
  username: postgres
  port: 5432
  host: herokuPostgresql</p>

<p>development:
  &lt;&lt;: *default
  database: planning_poker_development</p>

<p>test: &amp;test
  &lt;&lt;: *default
  database: planning_poker_test</p>

<p>production:
  &lt;&lt;: *default
  url: &lt;%= ENV[&lsquo;DATABASE_URL&rsquo;] %>
```</p>

<p>Victory ! Cucumber is running</p>

<p>```bash
$ docker-compose run shell bundle exec cucumber
Using the default profile&hellip;
0 scenarios
0 steps
0m0.000s
Run options: &mdash;seed 45959</p>

<h1>Running:</h1>

<p>Finished in 0.002395s, 0.0000 runs/s, 0.0000 assertions/s.</p>

<p>0 runs, 0 assertions, 0 failures, 0 errors, 0 skips
```</p>

<h2>Fixing rake db:create</h2>

<p>By searching through the web, I found that people were having similar issues with rake db:create. I tried to run it and here is what I got :</p>

<p><code>bash
$ docker-compose run shell bundle exec rake db:create
Database 'postgres' already exists
Database 'planning_poker_test' already exists
</code></p>

<p>Why is it trying to create the postgres database ? It turns out that the DATABASE_URL takes precedence over what is defined in my <code>config/database.yml</code>. I need to unset this variable locally. I already have the <code>docker-compose.override.yml</code> for that :</p>

<p>```yaml
web:
  environment:</p>

<pre><code>DATABASE_URL:
</code></pre>

<p>  &hellip;</p>

<p>shell:
  environment:</p>

<pre><code>DATABASE_URL:
</code></pre>

<p>  &hellip;
```</p>

<p>Rake db:create works just fine now :</p>

<p><code>bash
$ docker-compose run shell bundle exec rake db:create
Database 'planning_poker_development' already exists
Database 'planning_poker_test' already exists
</code></p>

<h2>Starting a psql session</h2>

<p>During all my trouble-shootings, I tried to connect to the Postgresql server to make sure that the databases where created and ready. Here is how I managed to do that :</p>

<h3>1. Install psql client</h3>

<p>On my Ubuntu machine, that was a simple <code>sudo apt-get install postgresql-client-9.4</code>.</p>

<h3>2. Finding the server port</h3>

<p>The port can be found through <code>config/database.yml</code> or through <code>docker ps</code>. Let&rsquo;s use the later, as we&rsquo;ll need it to find the server IP as well.</p>

<p><code>bash
$ docker ps
CONTAINER ID        IMAGE            COMMAND                  CREATED             STATUS              PORTS           NAMES
b58ce42d2b2b        postgres         "/docker-entrypoint.s"   46 hours ago        Up 46 hours         5432/tcp        planningpoker_herokuPostgresql_1
</code></p>

<p>Here the port is clearly 5432.</p>

<h3>3. Finding the server IP</h3>

<p>Using the container id we got on previous <code>docker ps</code> command, we can use <code>docker inspect</code> to get further details :</p>

<p>```bash
$ docker inspect b58ce42d2b2b | grep IPAddress</p>

<pre><code>        "SecondaryIPAddresses": null,
        "IPAddress": "172.17.0.2",
                "IPAddress": "172.17.0.2",
</code></pre>

<p>```</p>

<h3>4. Connecting to the database</h3>

<p>Connecting is now just a matter of filling the command line.</p>

<p>```sql
$ psql -U postgres -p 5432 -d planning_poker_development -h 172.17.0.2
planning_poker_development=# select * from schema_migrations;</p>

<h2> version</h2>

<p>(0 rows)
```</p>

<h3>5. Installing psql client directly in the shell</h3>

<p>It should be possible to install the psql client in the shell container automatically, but I must admit I did not try this yet. It should just a matter of adding this to the <code>Dockerfile</code></p>

<p><code>
RUN apt-get install postgresql-client-&lt;version&gt;
</code></p>
]]></content>
  </entry>
  
</feed>
