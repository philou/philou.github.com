<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: self-organization | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/self-organization/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-02-10T06:32:06+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Keep Programming When Assigned A Management Job]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job/"/>
    <updated>2016-02-03T08:45:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job</id>
    <content type="html"><![CDATA[<p>Remaining a competent developer is a career long effort, if you stop programming, you&rsquo;ll loose it ! As time goes, we are regularly <del>offered</del> pushed into management positions, sometimes by cluelessness, other times by cheer necessity ! Be it temporary or long term, here are some techniques to remain a relevant developer.</p>

<h2>How Joe became a manager</h2>

<p>```
def work
  if manager?</p>

<pre><code>go_to_meetings
</code></pre>

<p>  else</p>

<pre><code>program
</code></pre>

<p>  end
end
```</p>

<p>Imagine you&rsquo;re Joe, an expert developer in a small software company. Everything is going fine, he&rsquo;s working on interesting subjects with 4 other, rather junior, team mates. Management is OK, at least good enough not to cause too many troubles.</p>

<p>Suddenly, the team manager leaves for a better position in another company. Unprepared for this, the small organization has difficulties to find a suitable replacement, and, you&rsquo;ll guess it, Joe is asked to take on management responsibilities until someone gets hired. How is Joe going to continue to do a good job at both programming and management ?</p>

<h2>His first reaction</h2>

<p>Two weeks into the job, Joe takes a step back and summarizes :</p>

<ul>
<li>he feels depressed when he does not program for a long time</li>
<li>he has the feeling he&rsquo;s been jumping from A to B to C to Z to A, and so on for two weeks without actually getting a lot done</li>
<li>he feels everyone is waiting for him to do things before they move</li>
<li>his mailbox is starting to make him nervous</li>
<li>it&rsquo;s difficult to program anything if you are interrupted by meetings throughout the day</li>
</ul>


<p>Joe figures out that he needs to reduce his management work if he wants to get back to programming.  After setting up an efficient <a href="bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">TODO list</a>. He has already read some personnal effectiveness books, so he knows how one can reduce his amount of work :</p>

<ul>
<li>say no : he&rsquo;ll have to keep this in mind all the time, especially when accepting meetings or when asked for some new work</li>
<li>automate : some tasks can be automated, others can be partly automated by a good process. He&rsquo;ll have to regularly stop and think to improve how he works</li>
<li>delegate : he&rsquo;d like to push more work to the team, but it will take some time. He decides to read things on self-organized team to know how to do</li>
</ul>


<h2>Joe&rsquo;s measure of programming time</h2>

<p>In order to get some continuous time for programming, Joe books &lsquo;programming days&rsquo; in his calendar. This is also a way to say no to other meetings during this period. He starts with all Mondays, he hopes he&rsquo;ll be able to book others days as he manages to do more programming. His ideal would be to book all week for programming (while still having the management job get done !)</p>

<p>This works well, and gives Joe a motivation boost since he has the opportunity to program again :&ndash;). There are still a few glitches though :</p>

<ul>
<li>Joe often doesn&rsquo;t program &lsquo;on his own&rsquo; on Mondays because he is spending is time with junior programmers who are really appreciating his help</li>
<li>Joe once made the mistake of committing to a critical programming task that he did not manage to finish in 1 day and had to hand it over to another developer, losing more time</li>
</ul>


<p>Joe is realizing that he is more of a programming coach than a direct developer now, and that he should not commit on critical tasks but rather help others to do so. Pair programming is becoming the norm for him.</p>

<h2>Communication time</h2>

<p>While doing his full programming days, Joe realized that emails can wait. If people want an immediate answer, let them use the phone ! He now reads and answers his emails in the morning when he arrives at work, at noon just after lunch and on evenings, just before leaving. That&rsquo;s good enough for a day !</p>

<p>Joe also had to interrupt his programming day once for an urgent meeting &hellip; he now reserves 1 hour at the end of his programming days to handle such urgent meetings without interrupting his programming time.</p>

<h2>Self organized teams</h2>

<p>Meanwhile, Joe read some books about self organized teams, such as <a href="http://www.amazon.com/Workout-Practices-Improve-Delight-Clients/dp/9492032023/ref=sr_1_1?ie=UTF8&amp;qid=1454480226&amp;sr=8-1&amp;keywords=management+3.0+workout">Management 3.0 Workout</a> by Jurgen Appelo.</p>

<p><a href="https://management30.com/product/workouts/"><img class="center" src="/imgs/2016-02-03-how-to-keep-programming-when-assigned-a-management-job/management-workout.jpg" title="Management 3.0 Workout Book Cover" ></a></p>

<p>Self organization is some kind of aggressive delegation. Joe sees management as described in these books as a way to increase purpose and motivation throughout the team, while getting him more time for programming.</p>

<p>This kind of management perfectly suits agile teams. His team is already using some agile practices, such as automated testing, some kind of continuous integration, and quite a few others, to varying degrees. Joe decides to embark his team on a road to self organization, and to start by applying all the standard Scrum and eXtreme Programming practices. In parallel, he introduces the rolling Scrum Master role, where sprint after sprint, a different team member is responsible for :</p>

<ul>
<li>organizing the recurring team meetings</li>
<li>representing the team in outside meetings</li>
<li>grooming the backlog before the demo and planning</li>
</ul>


<p>This alone frees Joe 1 or 2 days of programming every week. He now helps his team mates to master all the technical agile practices they are not used to.</p>

<h2>More self organization</h2>

<p>A few months later, the team is doing well, Joe has some time for programming, but he still has some pure management job to do. From what he read from self organized teams, even these subjects can be delegated ! He decides to start workshops with the team :</p>

<ul>
<li>How can we handle vacations in a self organized way ?</li>
<li>How can we handle the hiring in a self organized way ?</li>
<li>How can we handle performance feedback and pay raises in a self organized way ?</li>
</ul>


<p>The journey is long and rough : one team member left as they were going seriously into agile. Nevertheless the team is already more motivated than it ever was, and delivers more value than it ever did.</p>

<h2>The end result for Joe</h2>

<p>Joe is now programming nearly as much as his team mates ! Most of his programming time is coaching time though. He does not sit and hack his way into a feature as he used to do. He&rsquo;s missing that a bit, he&rsquo;s also missing learning new technologies.</p>

<p>That&rsquo;s why he started working on <a href="/my-own-side-project-best-practices-after-reading-the-side-project-book">side projects</a> at home, using the latest hype JavaScript framework. He&rsquo;s reading generalist programming books also, such as the <a href="http://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&amp;field-keywords=%22in+seven+weeks%22&amp;rh=i%3Aaps%2Ck%3A%22in+seven+weeks%22">7 XXX in 7 weeks</a> series which allow him to learn without loosing time on technical quirks he&rsquo;s not interested in at the moment &hellip;</p>

<p><a href="http://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X/ref=sr_1_1?ie=UTF8&amp;qid=1454739459&amp;sr=8-1&amp;keywords=7+languages+in+7+weeks"><img class="center" src="/imgs/2016-02-03-how-to-keep-programming-when-assigned-a-management-job/7-languages.jpg" title="Seven Languages In Seven Weeks Book Cover" ></a></p>

<p>Good luck Joe !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Developers Are Free]]></title>
    <link href="http://philippe.bourgau.net/great-developers-are-free/"/>
    <updated>2015-12-31T12:24:00+00:00</updated>
    <id>http://philippe.bourgau.net/great-developers-are-free</id>
    <content type="html"><![CDATA[<p>For many reasons. But mostly because they are key to efficiently growing a software organization.</p>

<p><img class="center" src="/imgs/2015-12-31-great-developers-are-free/cat-codes-for-food.jpg" title="A funny picture sleeping on a keyboard, with the mention &lsquo;Will code for food&rsquo;" ></p>

<h2>A tale of 2 teams</h2>

<p>Let&rsquo;s have a look at 2 software teams in the world of corporate finance.</p>

<h3>The junior in-house team</h3>

<p><a href="http://www.lefigaro.fr/emploi/2013/12/07/09005-20131207ARTFIG00309-bruit-temperature-air8230-les-salaries-reserves-sur-l-open-space.php"><img class="center" src="/imgs/2015-12-31-great-developers-are-free/open-space.jpg" title="A big corporate open space" ></a></p>

<p>One is an in-house software development team in a large bank. The project already has a bad reputation among developers.The bank has difficulties to hire so the team is constituted of 10 rather junior developers. Unfortunately, without guidance and long term vision, the quality of the code suffers. It looks like an ad-hoc composition of various technolgies, glue code, and reinvented frameworks. The overall result is a barely good enough product that costs a small fortune in maintainance and support. The user experience is awful, which make it difficult to the the team leaders and the users to collaborate effectively. As a result of all this, the project is suffering from high turnover. Managing this project is really challenging &hellip; and kind of depressing.</p>

<h3>The experienced software team</h3>

<p><a href="http://www.personalized-software.ie/aboutus"><img class="center" src="/imgs/2015-12-31-great-developers-are-free/experienced-team.jpg" title="An experienced software team" ></a></p>

<p>Now let&rsquo;s imagine the same product developed at a software house. It&rsquo;s been on the market for a while now, but new features are regularly added to it at a good pace. The product is solid and the users are happy using it. The structure of the team is completely different : 5 developers, mainly experienced, coming from various backgrounds. As a result, the team builds on all their different expertises to build real competitive advantages. They tend to get into healthy debates about a lot of things, such as :</p>

<ul>
<li>Should we re-use or re-write ?</li>
<li>Is this gold plating or plain technical debt ?</li>
<li>Which technology should we use to build this ?</li>
</ul>


<p>In the end, that makes the product even better. The humane side of the team is also completely different. These experienced developers have all been exposed to the big picture during their careers, and they know things like :</p>

<ul>
<li>&lsquo;Business talk&rsquo; and so they can discuss product topics with the product managers</li>
<li>The best way to go through chores at work is to do them right now</li>
<li>Enough management, testing, ops to make the team self organized</li>
</ul>


<p>The single junior developer in the team tends to mimic this model, and has ease finding mentors, to teach him their trade and to give him career counsels.</p>

<p>As a result, the product and the team remain healthy, and keep providing benefits to all stakeholders.</p>

<h2>Benefits of experienced teams</h2>

<p>First, from a purely short term financial point of view, it&rsquo;s a no brainer ! Even if you pay experienced developers twice as much as juniors, the costs will still be on par. But the difference in created value is huge !</p>

<p>Let&rsquo;s then have a look at the longer term, organizational aspect of things. Obviously, managing such teams requires a lot less work ! Both because of their size and because experienced developers tends to manage themselves very well &hellip; Promoting self-organized &amp; cross-functionnal teams is a great opportunity to reduce the management cost and friction, making the organization more reactive and cost efficient in the long run.</p>

<h2>What is an experienced developer ?</h2>

<p>Obviously, I&rsquo;ve worked with people that were experienced on paper, but not in practice. I <a href="http://www.jrothman.com/htp/interview/2004/12/whats-a-year-of-experience/">read</a> that repeating 10 times the same year of work only amounts to 1 year of experience.</p>

<p>If I was asked to give a definition, I&rsquo;d say that experienced developers have worked on different kind of systems (embeded, web, client, server &hellip;) using different technologies (Java, Ruby, C, Spring, Rails, Javascript &hellip;). Their experiences need not be professional, I&rsquo;ve seen a physics teacher that hacked himself into a great hacker through side projects and open source. Speaking of the subject, good developers always spent a lot of time learning, reading, doing side projects and contributing to open source. Some can be found in local user groups and online programming communities.</p>

<h2>So How do you get them ?</h2>

<p>I can only think of 3 obvious ways :</p>

<ul>
<li>train them</li>
<li>keep them</li>
<li>hire them</li>
</ul>


<p>I&rsquo;m pretty sure training them will not be an issue if you already have enough of them. So that brings us to the 2 other points.</p>

<p><a href="https://www.prestashop.com/blog/en/guided-visit-prestashops-new-paris-headquarters/"><img class="center" src="/imgs/2015-12-31-great-developers-are-free/prestashop.jpg" title="The prestashop offices in Paris" ></a></p>

<p>Lot&rsquo;s of articles have been written about attracting and keeping the best developers. Some companies even made it <a href="http://www.joelonsoftware.com/articles/HighNotes.html">their differentiating point</a>. Here are a few links :</p>

<ul>
<li>In his post <a href="http://avc.com/2012/02/the-management-team-guest-post-from-joel-spolsky/">&ldquo;The Management Team&rdquo;</a> Joel Splosky details the inverted pyramid model</li>
<li>Joel Spolsky&rsquo;s (again) <a href="http://www.joelonsoftware.com/articles/DevelopmentAbstraction.html">Development Abstraction Layer</a> explains all the physical environment that makes programmers happy at work</li>
<li><a href="http://qz.com/169147/applications-have-doubled-to-the-company-that-discloses-its-salaries/">After disclosing employee salaries, Buffer was inundated with resumes</a> when <a href="http::/www.buffer.com">buffer.com</a> publicly disclosed <a href="https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/">their salary formula</a>, the number of applications the company received doubled</li>
<li>Spotify organizes <a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/">Hack Weeks</a> where  the company stops for a while to invent new things</li>
<li>Google summarizes it &ldquo;Do Cool Things That Matters&rdquo; in their long advertises <a href="http://www.google.com/about/careers/lifeatgoogle/">Life At Google</a></li>
</ul>


<p>These are just a few examples and are by no way the only things that motivate developers. To summarize, provide the best working conditions (careful, that not money), and communicate a lot about it.</p>

<h2>Hiring is too important to be left to HR</h2>

<p><a href="https://management30.com/product/workouts/">Jurgen Appelo</a> said</p>

<blockquote><p>Management is too important to be left to managers.</p></blockquote>

<p>I guess the same thing can be said about hiring.</p>

<p>Engineers are absolutely required to take the main role when hiring other engineers. Companies that seriously want to have the best developers on board are spending substantial engineering time on hiring. Here are some well known examples :</p>

<ul>
<li><a href="http://www.google.com/about/careers/lifeatgoogle/hiringprocess/">Google</a> is known to conduct around 9 interviews before hiring someone</li>
<li>In its <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf">Handbook for New Employee</a> Valve explicitly states that hiring is your most important role</li>
</ul>


<h2>Endword</h2>

<p>As <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> said about quality, in <a href="http://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=sr_1_1?ie=UTF8&amp;qid=1451733851&amp;sr=8-1&amp;keywords=peopleware">Peopleware</a> :</p>

<blockquote><p>Great developers are free, but only for those who are willing to pay for them</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Programmer's TODO List, Hello Personnal Kanban on Jira]]></title>
    <link href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/"/>
    <updated>2015-08-17T05:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira</id>
    <content type="html"><![CDATA[<p>Not long ago, I wrote that <a href="/real-programmers-have-todo-lists/">Real Programmers have TODO lists</a> &hellip; I was wrong, I now work without a TODO list ! So either I&rsquo;m not a real programmer anymore, or I&rsquo;m actually using TODO List v.2.0. Read on !</p>

<h2>Motivations</h2>

<p>My work has become quite varied lately. On top of programming and pairing, I am also doing quite some coaching within the team. For the whole Murex programmers community, I&rsquo;m organizing <a href="https://github.com/murex/murex-coding-dojo">Coding Dojos</a>, <a href="http://www.brownbaglunch.fr/">Brown Bag Lunches</a> and Technical Talk Video Sessions. Finaly, like all of us, I have to cope with my share of organization overhead.</p>

<p>Multitasking was starting to kill me. I was feeling exhausted at the end of the day, with the certainty that I was not getting much done &hellip;</p>

<h2>Personnal Kanban To The Rescue</h2>

<p><a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a method to organize your work relying on <a href="http://www.personalkanban.com/pk/featured/why-limit-work-in-progress/#sthash.QFI0D8l5.dpbs">Work In Progress limits</a> : it minimizes multitasking and encourages prioritization.</p>

<p>As its name suggests it, <a href="http://personalkanban.com">Personal Kanban</a> is simply applying Kanban to your own tasks. It turns out that :</p>

<ul>
<li>My team tasks are already in <a href="https://www.atlassian.com/software/jira">JIRA</a></li>
<li>Some guys have already tried to <a href="https://jira.atlassian.com/browse/JRA-13472">use JIRA as a todo list</a></li>
<li>JIRA supports Kanban boards with WIP limits and all</li>
</ul>


<h2>The Kanban Board</h2>

<p>In our team, <a href="http://bilal.eltayara.net">TAYARA Bilal</a> had already experimented the approach and asked to JIRA admins to create us a custom project for our todo lists. I piggybacked on it and created my own kanban board. Here is what it looks like.</p>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/board.png" title="Screenshot of the full JIRA board" ></p>

<h3>Mixing Project Stories And Personnal Tasks</h3>

<p>JIRA allows creating a kanban board that spans many projects ! You can simply choose multiple projects when you setup the board for the first time, or you can edit your board filter like this :</p>

<p><code>sql
project in (POPIMDB, POPABTODO) ...
</code></p>

<p>This makes it possible to see <em>all</em> of my work at a glance on the same board.</p>

<h3>Work In Progress Limit</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/wip.png" title="Zoom on the wip constraints of the JIRA column" ></p>

<p>JIRA allows WIP limits, warning me with a red background when I am multitasking or when I am getting late on my tasks</p>

<h3>Color Conventions</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/color-cards.png" title="Different colors of JIRA cards" ></p>

<p>JIRA makes it possible to assign different colors to cards, for example</p>

<ul>
<li>Red for tasks that are due soon</li>
<li>orange for cards that are due some time</li>
<li>light brown for project stories</li>
<li>green for other programming tasks</li>
<li>blue for other tasks</li>
</ul>


<h3>Swimlanes</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/swimlanes.png" title="Closup on a JIRA swimlane" ></p>

<p>JIRA has swimlanes, separating project from personal tasks</p>

<h3>Reports</h3>

<p>An extra bonus with JIRA Kanban board is that they have reports ! Here is my cumulative flow diagram for my first week of usage :</p>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/cumulative-flow.png" title="A screenshot of the JIRA cumulative flow diagram" ></p>

<h3>Configuration</h3>

<p>Here is the JQL query I used to configure it this way.</p>

<p>```sql
&mdash; board filter
project in (POPIMDB, POPABTODO) AND (Assignee = pbourgau OR Co-Assignees in (pbourgau) OR mentors in (pbourgau)) AND (status != CLOSED OR updated >= -1d) ORDER BY Rank ASC</p>

<p>&mdash; Swimlanes
priority = &ldquo;1-Very High&rdquo; &mdash; Expedite
project in (&ldquo;POP IMDB&rdquo;) and (labels not in (SLACK) OR labels is EMPTY) &mdash; IMDB Stories
&mdash; and a blank filter for Other Tasks</p>

<p>&mdash; Card Colours
duedate &lt;= 7d or priority = &ldquo;1-Very High&rdquo; &mdash; red
duedate is not EMPTY &mdash; orange
labels in (SLACK) &mdash; green
type = Task &mdash; blue
&mdash; and an empty filter for light brown
```</p>

<h2>The End Result</h2>

<p>By setting a WIP limit of 3 on the &ldquo;In Progress&rdquo; column, the following naturally happened :</p>

<ul>
<li>Once I have started a programming task, I now defer any other activity in the TODO column until I am finished. (HINT: If you get invited to meetings all the time, lock your agenda with &lsquo;Unbookable&rsquo; days when you start programming)</li>
<li>It actually pushed me into finishing the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> training I had started long ago.</li>
</ul>


<p>I also set a high WIP limit (around 10) on the TODO column, this way, I get a kind of warning that next time I finish a programming task, I should take some time off to prune the column.</p>

<p>The overall result is that I do lot less multitasking. I get the feeling of doing steadier, more efficient work.</p>

<p>If you are suffering from multitasking and decide to give it a try, I&rsquo;d love to read about your experience !</p>
]]></content>
  </entry>
  
</feed>
