<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lean | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/lean/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-09-07T08:55:47+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 1]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/"/>
    <updated>2017-09-07T06:39:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1</id>
    <content type="html"><![CDATA[<p>If you are serious about continuous improvement, you should learn the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>.</p>

<p><a href="/blog/categories/retrospectives/">Retrospectives</a> are great to pick all the low hanging improvements. Once you&rsquo;ve caught up with the industry&rsquo;s best practices, retrospectives risk drying up. Untapped improvement opportunities likely still exist in your specific context. The improvement kata can find those.</p>

<p><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/low-hanging-fruits.jpeg" alt="Low and high hangling fruits on a tree" /></p>

<p>Here is how we applied the improvement kata to gain 25% of productivity in my previous team.</p>

<h2>The Situation</h2>

<p>Thanks to repeated retrospectives, the team had been improving for 2 years. Retrospectives seemed like a silver bullet. We would discuss the current problems, grasp an underlying cause and pick a best practice. Most of the time, that fixed the problem.</p>

<p>Sometimes it did not work though. Even if the issue came back in a later retrospective, it would not survive a second scrutiny. In the previous two years, the team had transformed the way it worked. It adopted TDD, incremental refactoring, pair programming, remote work, automated performance testing and many others.</p>

<p>Lately though, things did not work so well. The team was struggling with productivity issues. The team was not slowing down, but the scope and complexity of the product had grown. Features were not getting out of the door as fast as they used to. We had the habit of prioritizing improvements and bug fixes over features. That used to improve the flow enough to get more and more feature done. It did not seem to work anymore.</p>

<p>We tried to tackle the issue in retrospectives. We would change the way we prioritized features &hellip; To be later bogged down by bugs, technical debt or bad tools. We would discuss that in retrospective, and decide to change the priorities again &hellip; The loop went on and on a few times.</p>

<p>We were getting nowhere.</p>

<h2>The improvement kata </h2>

<p>That&rsquo;s why I started to look for other ways to do continuous improvement. I stumbled upon a book called <a href="http://leanagilecamp.fr/">Small Lean Management Guide for Agile Teams</a>. The book is in french, but I wrote an <a href="/are-most-agile-teams-doing-continuous-improvement-the-silly-way/">english review</a>. I fell in love with the way the authors dug into the hard data of how they worked to understand and fix their problems.</p>

<p>To learn more about this technique, I read <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1504758735&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a>. It details two management tools used at Toyota : the improvement and coaching katas. Some say these are Toyota&rsquo;s special weapon. <em>The</em> thing that grew them from a small shop to the <a href="https://en.wikipedia.org/wiki/Automotive_industry">largest car manufacturer in the world</a>.</p>

<p>They are katas because they are routines. They must be re-execute many times. The <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> should improve the flow of work. The <a href="http://www-personal.umich.edu/~mrother/The_Coaching_Kata.html">coaching kata</a> helps someone (or yourself) to learn the improvement kata. Every time we go through the kata, we also understand it better.</p>

<p>Here is how the improvement kata goes :</p>

<ol>
<li>Describe your end goal</li>
<li>Understand where you stand about this goal by measuring facts and data</li>
<li>Based on your end goal and the current situation, define where you&rsquo;d like to be in 3 months or less</li>
<li>Use <a href="https://en.wikipedia.org/wiki/PDCA">Plan-Do-Check-Act</a> to experiment your way to this new situation

<ol>
<li>Plan an experiment</li>
<li>Do this experiment</li>
<li>Check the results of this experiment</li>
<li>Act on these results. 

<ul>
<li>Either drop the experiment and plan a new one (go back to &lsquo;Plan&rsquo;).</li>
<li>Or spread the change at a larger scale.</li>
</ul>
</li>
</ol>
</li>
</ol>


<p><a href="http://www-personal.umich.edu/~mrother/Homepage.html"><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/katapattern.jpg" alt="The Improvement Kata Pattern" /></a><div class="image-credits">Image from Mike Rother on <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata Website</a></div></p>

<p>The coaching kata is a way to coach someone into applying the improvement kata. The fun thing is that you can coach yourself ! The idea is to ask questions to the coachee to remind him of where he stands in his improvement kata.</p>

<p><a href="https://traccsolution.com/resources/coaching-infographic/"><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/The-coaching-Kata-questions.jpg" alt="The Coaching Kata Questions" /></a></p>

<p>You&rsquo;ll find tons of details and material about these katas on the <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata website</a>.</p>

<h2>Our end goal</h2>

<p>That&rsquo;s how I started to apply the improvement kata in my team. I already had an idea of our end goal : to be more productive. To be more precise :</p>

<blockquote><p>Generating enough profit for the business while sticking to a sustainable pace.</p></blockquote>

<p>Retrospectives could not get us there. Would the improvement kata would succeed ?</p>

<p>This is the first part of a series of 4 posts relating our first use of the improvement kata. In the next post, I&rsquo;ll explain what we did to understand the current situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A seamless way to keep track of technical debt in your source code]]></title>
    <link href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"/>
    <updated>2017-04-12T08:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code</id>
    <content type="html"><![CDATA[<p>I eventually stumbled upon a way to keep track of technical debt in source code that is both straightforward and already built-in most tools : simple <code>TODO</code> comments !</p>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/todo-comment.jpg" alt="Photo of a screen displaying source code with #TODO comments" /></p>

<h2>How it happened ?</h2>

<p>Some time ago, we tried to add <a href="/a-plan-for-technical-debt-lean-software-development-part-7/"><code>@TechnicalDebt</code></a> annotations in our source code. Unfortunately, after a few month, we came to the logical conclusion that it was too complex to be effective :</p>

<ul>
<li>It involved too much ceremony, which frightened people</li>
<li>It made people uneasy to change anything around the annotation instead of sending a call to action</li>
<li>As a result, it was always out of date</li>
</ul>


<p>After a bit of discussion with my colleagues, we decided to replace all these annotations with simple <code>TODO</code> comments.</p>

<p>When the refactoring to do seems fairly obvious (but also premature) we&rsquo;ll use a straightforward <code>//TODO (example) introduce a factory</code> message. Next time a pairs gets to work on this part of the code, they get the silent opinion of their peers to help them decide what to do about this piece of the code. Other times, the code might be smelly, yet without us knowing what to do about it yet, in this case, we agreed to use <code>//TODO SMELL (example) responsibilities are not clear in this class</code> which is still a <code>TODO</code> comment, but not a clear call to action.</p>

<p>When I started my <a href="https://github.com/philou/planning-poker">current side project</a>, I naturally started to use them. They display nicely in <a href="https://codeclimate.com/github/philou/planning-poker/issues">CodeClimate</a>.</p>

<h3>The pros</h3>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/codeclimate.jpg" alt="Screenshot of the CodeClimate issue dashboard displaying TODO comments" /></p>

<p>The great thing about <code>TODO</code> comments is that, as a very old programming trick, they are already supported out of the box by most tools <a href="https://www.jetbrains.com/">IntelliJ</a>, <a href="https://www.sonarqube.org/">SonarQube</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="https://codeclimate.com">CodeClimate</a> and I guess many others. Only one day after I refactored to <code>TODO</code> comments, a team mate fixed one that had appeared in his IDE&rsquo;s TODO tab !</p>

<h3>The cons</h3>

<p>Some tools, IDEs in particular, tend to assume that you should fix all your <code>TODOs</code> before you commit anything. That&rsquo;s not exactly how we are using them to track lasting technical debt. So that&rsquo;s one thing you need to keep in mind.</p>

<p>Tools like Sonar on the other hand, assign a fixed remediation cost to any <code>TODO</code> you have in the code, which is usually not the case at all !</p>

<h2>How to set it up in your project</h2>

<p>As you might guess, this is pretty easy. Just start adding <code>TODO</code> comments in your code &hellip;</p>

<h3>Teamwise</h3>

<p>It is worth first validating the practice with your colleagues though. There are many ways to do that, depending on your team&rsquo;s work habits :</p>

<ul>
<li>Use your team <a href="https://slack.com/">Slack</a> (or whatever chat room you use) to share a link to this post (for example) and create a yes/no poll</li>
<li>Or if you think you need it, create some wiki page explaining the practice and detailing its rationals in your context, add a yes/no poll, and finally share this page with your team</li>
<li>Eventually, if you think that this topic deserves it, setup a meeting with everyone and discuss the point. It might be worth sharing information about the practice beforehand to make the meeting more efficient. You can end the vote with a <a href="http://www.plays-in-business.com/thumb-voting/">thumb vote</a> (up : yes, down : no, side : whatever)</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/thumb-vote.jpg" alt="Thumbs voting positions" /><div class="image-credits">Photo from <a href="http://www.plays-in-business.com/thumb-voting/">Plays in Business</a></div></p>

<p>Don&rsquo;t wait for unanimity to start the practice, majority is enough ! Make sure that people who voted the other way will follow the team practice in the end though. Remember that whatever the answer, discussing team practices is good.</p>

<p>Once all the team agreed on using (or not) <code>TODO</code> comments, mention the practice in your team&rsquo;s coding conventions or working agreements (which I strongly recommend to have written somewhere). If you don&rsquo;t have any yet, create some !</p>

<h3>Toolswise</h3>

<p>Most tools will handle <code>TODO</code> out of the box.</p>

<ul>
<li>Rails comes with a <code>rake notes</code> task to list <code>TODO</code> comments.</li>
<li>CodeClimate and SonarQube both lists <code>TODOs</code> as issues in their default config</li>
<li>Most IDEs have a &lsquo;TODO&rsquo; tab which will display the <code>TODO</code> comments in the project</li>
<li>Otherwise, good old grep will very happily find <code>TODO</code> comments in your code</li>
</ul>


<p>Some tools might require small tweaks to improve the experience :</p>

<ul>
<li>In IntelliJ, in the commit window, uncheck the &lsquo;Check TODO&rsquo; checkbox to avoid getting a warning at every commit</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/intellij-commit.jpg" alt="IntelliJ's commit window, with its 'Check TODO' check box" /></p>

<ul>
<li>SonarQube uses the same fixed remediation cost for every TODO comment. It&rsquo;s up to you to adapt this remediation cost to your context.</li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p><code>TODO</code> comments are a good starting point to track technical debt. Once you start using them, there are a few things you can do :</p>

<p>First, remember to fix some regularly. Very old <code>TODO</code> comments are technical debt of their own ! Using code quality dashboards like SonarQube or CodeClimate help to continuously improve your code.</p>

<p>If your tools allow it, you might consider setting up a simpler <code>//SMELL ...</code> instead of <code>//TODO SMELL ...</code> or whatever other special comment that might be useful in your context.</p>

<p>Finally, there is a lean continuous improvement practice which consists of logging problems as they occur. Doing this could help your team to decide which technical debt hotspots are the most important to fix. When appropriate, link the problems with the <code>TODO</code> comments. After a few weeks of this, walking through all the problems during a retrospective should shed light on what parts of the code are causing the most troubles.</p>

<h2>Edit 2017-04-19</h2>

<p>Thanks a lot for your comments ! People have suggested a ton of great improvements over my basic setup :</p>

<ul>
<li>plugins to other tools that also support <code>TODO</code> comments</li>
<li>activating automatic sync between issues in CodeClimate and your issue tracking system</li>
<li>using custom comments markers</li>
<li>adding an &lsquo;X&rsquo; to your comment every time you are bothered by the technical debt, tools can configured to assign a higher severity to issues with a lot of &lsquo;X&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Books About Data Driven Lean Software Development]]></title>
    <link href="http://philippe.bourgau.net/5-books-about-data-driven-lean-software-development/"/>
    <updated>2016-04-29T05:25:00+02:00</updated>
    <id>http://philippe.bourgau.net/5-books-about-data-driven-lean-software-development</id>
    <content type="html"><![CDATA[<p>In french, we say &ldquo;Le cordonnier est toujours le plus mal chaussé&rdquo; which I found an English equivalent in &ldquo;the shoemaker’s son always goes barefoot&rdquo;. I believe this is nowhere more true than in the software industry !</p>

<p>&ldquo;Software is eating the world&rdquo; they say. Software is now able to do things that only humans used to be. So why the hell are we driving our projects as if we were a horde of amateur hitch hikers ?</p>

<h2>What does it mean to be data driven ?</h2>

<p>Being data driven would allow us to answer questions such as :</p>

<ul>
<li>How much is the feature we delivered last week contributing to the bottom line ?</li>
<li>How much is the feature we are currently developing expected to contribute to the bottom line ?</li>
<li>What are the estimated cost <em>and value</em> of increasing our test coverage of 1% ?</li>
<li>What are the estimated interests and nominal amounts of our current technical debt ?</li>
<li>Which is the most valuable : improving our build system or building this new feature ?</li>
</ul>


<p>Most projects I&rsquo;ve worked in have absolutely no clue about the answers to these questions. The decision is left to experts, to the one with most influence, or simply to the developer, who can do how he thinks is best &hellip;</p>

<h2>The books</h2>

<p>Hopefully, some people are thinking differently, they believe it is possible to quantify all this, they even explain how !</p>

<h3><a href="http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906957&amp;sr=8-1&amp;keywords=running+lean">Running Lean: Iterate from Plan A to a Plan That Works</a> by <a href="https://ashmaurya.com/">Ash Maurya</a></h3>

<p><a href="http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906957&amp;sr=8-1&amp;keywords=running+lean"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/running_lean.jpg" title="The cover of the Running Lean book" ></a></p>

<p>Details a very practical guide about the lean startup process, which is a very good starting point to any kind of lean software development.</p>

<h3><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906998&amp;sr=8-1&amp;keywords=kanban+anderson">Kanban: Successful Evolutionary Change for Your Technology Business</a> by <a href="http://www.djaa.com/">David J. Anderson</a></h3>

<p><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906998&amp;sr=8-1&amp;keywords=kanban+anderson"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/kanban.jpg" title="The cover of the Kanban book" ></a></p>

<p>This book explains with real world examples how to use Kanban board to control your work queues and improve your flow of work, a real basic for any lean product development.</p>

<h3><a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461907905&amp;sr=8-1&amp;keywords=principles+of+product+development+flow">The Principles of Product Development Flow: Second Generation Lean Product Development</a> by <a href="http://reinertsenassociates.com/">Donald G. Reinertsen</a></h3>

<p><a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461907905&amp;sr=8-1&amp;keywords=principles+of+product+development+flow"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/flow.jpg" title="The cover of the Flow book" ></a></p>

<p>This book is rather theoretical, but it links all subjects together : lean startup, risk management, Kanban, and economics. I guess it&rsquo;s a must read on the subject.</p>

<h3><a href="http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908177&amp;sr=8-1&amp;keywords=how+to+measure+anything">How to Measure Anything: Finding the Value of Intangibles in Business</a> by <a href="http://www.hubbardresearch.com/">Douglas W. Hubbard</a></h3>

<p><a href="http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908177&amp;sr=8-1&amp;keywords=how+to+measure+anything"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/how_to_measure_anything.jpg" title="The cover of How to measure anything" ></a></p>

<p>If the flow book gives a big picture view of what you want, this one explains how you can actually measure all the aspects of your product development in $ value.</p>

<h3><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_sc_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908398&amp;sr=8-1-spell&amp;keywords=walzting+with+bears">Waltzing With Bears: Managing Risk on Software Projects</a> by <a href="http://www.systemsguild.com/">Tom DeMarco and Timothy Lister</a></h3>

<p><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_sc_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908398&amp;sr=8-1-spell&amp;keywords=walzting+with+bears"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/waltzing_with_bears.jpg" title="The cover of Waltzing with bears" ></a></p>

<p>Although this book is getting old, and is a bit outdated when compared to agile development practices, it provides real world examples of how scientific measurement can be applied to software product development.</p>

<h2>An opportunity</h2>

<p>Reading these books was a real eye opener for me. The software development world is plagued with cargo cult and supposed best practices. We follow advises, but most often without verifying if they actually work ! I believe that by applying the techniques in these books, we could create standard ways to measure the values of productivity, technical debt, quality, testing &hellip;</p>

<p>I see real opportunities to avoid a lot of useless argument between proponents of A and B, but also to communicate better with all stakeholders and finally, to reduce stress for all of us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are Most Agile Teams Doing Continuous Improvement The Silly Way ?]]></title>
    <link href="http://philippe.bourgau.net/are-most-agile-teams-doing-continuous-improvement-the-silly-way/"/>
    <updated>2016-03-06T07:33:00+01:00</updated>
    <id>http://philippe.bourgau.net/are-most-agile-teams-doing-continuous-improvement-the-silly-way</id>
    <content type="html"><![CDATA[<p>A few weeks ago, as I was looking the internet for Lean principles to improve our way of working, I fell upon this book <a href="leanagilecamp.fr">Petit guide de management lean a l'usage des équipes agiles</a> (NB: the book is in French, the title means &lsquo;Little lean management guide at the usage of agile teams&rsquo;). It made me think and I thought it deserved a blog post.</p>

<p><a href="http://leanagilecamp.fr"><img class="center" src="/imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/cover.svg" title="The book cover" ></a></p>

<p>It explains that agility can be though of as a set of practices and principles, shared through a huge community. This makes it a great production system, where improvement are mostly brought by gut feeling retrospectives and trial of other teams practices. At the contrary, Lean is very light framework for continuous improvement, relying on a more systematic waste elimination.</p>

<p>After this introduction, the bulk of the book is composed of a set of 9 detailed real life stories demonstrating the lean way of bringing improvements. Are is a summary of 3 of these :</p>

<h2><a href="http://leanagilecamp.fr/guide.html#sc%C3%A8ne-de-crime-la-cat%C3%A9gorie-myst%C3%A8re-du-projet-condor">Unknown Category at Project Condor</a></h2>

<p><img class="center" src="/imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/condor.jpg" title="Issue indicators" ></p>

<p>The team maintains a virtual call center of poor quality, resulting in lots of incidents in production. Here is how they deal with the situation :</p>

<ol>
<li>They start by showing the issues, by categorizing them from the logs, they discover that they are mainly related to training, network, but surprisingly, the majority (30%) cannot be categorized and fall in the &lsquo;unknown&rsquo; category.</li>
<li>By improving logging, the unknown category falls to 5% ! Fixing network timeout issues then makes the client a lot happier.</li>
<li><p>Eventually, they go to client&rsquo;s site while monitoring the logs at the same time. They discover that remaining issues are explained by</p>

<ul>
<li>some users are using a double click to hack the system and jump ahead of the queue</li>
<li>the hang up and hang off buttons being too close, which results in operator misleadingly ending their communication</li>
<li>calls to wrong numbers being logged as incidents</li>
</ul>
</li>
</ol>


<p>The authors conclude that while uncomfortable, going to the clients increased motivation for everyone, fixed issues and made the client happier.</p>

<h2><a href="http://leanagilecamp.fr/guide.html#sc%C3%A8ne-de-crime-tous-coupables">All Guilty !</a></h2>

<p>An author is called to help a team which is working on unifying reimbursement systems after a merge. The project is late and the product is unreliable.</p>

<p>The first step he takes is to visualize a target (next batch in 3 months) and the flow</p>

<p><img class="center" src="/imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/target.jpg" title="Details of the 3 months target" ></p>

<p>The flow whiteboard shows that tasks get stuck when in need of clarifications from business analysts. Tension between people is already increasing. They Team decides to visualize this with &lsquo;blocker&rsquo; post-its.</p>

<p>After an inquire with the BAs, it turns out that they don&rsquo;t see the waiting tasks the issue management software.</p>

<p>The final step is to agree all together (developers and BAs) on an uniform way of defining and following blocking issues</p>

<p><img class="center" src="/imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/blockers.jpg" title="The shared blocked issues follow up wall board" ></p>

<p>Tickets are discussed at the stand-up, and unblocked issues are also visualized. As a result in only 2 weeks, the process fluidifies, and the tensions decrease.</p>

<p>The authors conclude that cross functional teams work better</p>

<h2><a href="http://leanagilecamp.fr/guide.html#sc%C3%A8ne-de-crime-joue-la-courte-et-pr%C3%A9cise">PDCA</a></h2>

<p>This story starts in a rather typical way : the client would like the team to go faster.</p>

<p>The team engages into a series of <a href="https://en.wikipedia.org/wiki/PDCA">Plan Do Check Act</a> cycles.</p>

<h3>Hypothesis 1 : There must be some obvious waste</h3>

<p>The team decides to log any waste occurring for 2 weeks. Even with discipline, only 2 hours are spotted during the 60 man.days of the sprint</p>

<h3>Hypothesis 2 : Too much refactoring or too much test writing</h3>

<p>For a few weeks, the authors keeps a daily log of the team activities during after every stand-up meeting.</p>

<p>It turns out that writing tests accounts for 5,5% of the time, refactoring for only 2% but programming for 40% !</p>

<h3>Hypothesis 3 : if there is something to improve, it must be in programming.</h3>

<p>For 20 half days, the author embarks on the tedious task of keeping a very detailed log of activities while taking the role of <a href="https://en.wikipedia.org/wiki/Pair_programming#Remote_pair_programming">navigator</a> in pair programming sessions.</p>

<p><img class="center" src="/imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/log.jpg" title="The detailed log of programming activities" >
<img class="center" src="/imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/activities.jpg" title="Ratio of different programming activities" ></p>

<p>They clearly understand that most time is taken not in writing tests, doing refactoring or writing complicated code, but in understanding existing code, third-parties and APIs</p>

<h3>Aftermath</h3>

<p>First, they avoided loosing time on improving the wrong thing
The team also agreed on the practice of asking for help at the good person when starting stories. Doing that, they got a nearly 100% speed boost !</p>

<h2>The rest of the book</h2>

<p>The book highlights a lot of other continuous improvement practices. For example :</p>

<ul>
<li>The &lsquo;problem box&rsquo; where team members can log any waste they are going through during their work. This made me think of my <a href="/a-plan-for-technical-debt-lean-software-development-part-7/">Plan For Technical Debt</a></li>
<li>Individual improvement follow up : a single team member is responsible to drive an improvement to its conclusion, in order to make sure that it is not forgotten</li>
</ul>


<p>I personally found this book to be just great ! It&rsquo;s short and focused, pragmatic, and a pretty easy read. If you liked <a href="http://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2">Scrum and XP from the trenches</a> I think you should read it. More generally, I think it&rsquo;s very useful for anyone involved in the development process who would like to push agility a little further.</p>

<p>There&rsquo;s a catch though, it&rsquo;s in french ! I guess I could take the time to translate it, tell me if you are interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recipes For An Agile Workspace]]></title>
    <link href="http://philippe.bourgau.net/recipes-for-an-agile-workspace/"/>
    <updated>2016-02-17T06:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/recipes-for-an-agile-workspace</id>
    <content type="html"><![CDATA[<p>Nowadays, start-ups and tech companies seem to be competing for the most beautiful offices in order to attract top talents.</p>

<p><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/open-space.jpg" title="A nice modern and beautiful co-working space" ></p>

<p>Unfortunately, sometimes, it&rsquo;s just the good old office in disguise. At the opposite, some teams or companies actually think and decide how to organize their offices. For example, here is what <a href="https://twitter.com/kentbeck">Kent Beck</a> says about office setup in <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_2?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1456177035&amp;sr=8-2&amp;keywords=extreme+programming+embrace+change">XP embrace change</a></p>

<blockquote><p>If you don&rsquo;t have a reasonable place to work, your project won&rsquo;t be successful. The difference
between a good space for the team and a bad space for the team is immediate and dramatic.</p></blockquote>

<p>Joel Spolsky has been blogging a lot about the office setups at <a href="http://www.joelonsoftware.com/articles/BionicOffice.html">FogBugz</a></p>

<p><a href="http://www.joelonsoftware.com/articles/BionicOffice.html"><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/fog-bugz.jpg" title="The beautiful FogBugz office" ></a></p>

<p>While defining its agile culture, <a href="http://fr.slideshare.net/JoakimSunden/agile-at-spotify">Spotify too designed custom offices</a></p>

<p><a href="http://fr.slideshare.net/JoakimSunden/agile-at-spotify"><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/spotify.jpg" title="Spotify offices" ></a></p>

<h2>How does it work ?</h2>

<p>Let&rsquo;s review a few office design practices to understand how they work :</p>

<h3>The team room or space</h3>

<p>Having a delimited room helps to build a real team. First, by isolating from noises, it helps the team to focus on its work and current topics. Second, by providing a visual barrier to cross before anyone can disturb the team. Finally, it allows the team to organize its own visual management.</p>

<p><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/spotify-team-room.jpg" title="Team private work place at spotify" ></p>

<h3>Private team gathering area</h3>

<p>An area where the team (and only the team) can meet at any time is great to do on the spot meetings (without the hassle of finding a room). This area should be comfortable and provide a relaxed and creative atmosphere (which is very important to conduct efficient retrospectives). It can also be used to take breaks and lunches, fostering team spirit again.</p>

<p><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/spotify-gathering-area.jpg" title="Team gathering area with writable walls and a wall screen at spotify" ></p>

<h3>Writable walls</h3>

<p>It&rsquo;s pretty easy to cover the walls with whiteboard stickers so that there is plenty of room for discussing design and otherwise keeping important things visible for everyone.</p>

<h3>Laptops, Wifi and movable desks</h3>

<p>Lean manufacturing favors simple, versatile and configurable machines over powerful specialised ones, which are often pretty long to setup. In software, we don&rsquo;t rely on machines as much as factories do, but there might be something to take here. Using laptops, a good Wifi and movable desks, it is pretty easy to reconfigure your office as it best fits the team at a particular moment. This way a team can easily adapt to personal preferences and turnover.</p>

<h3>Wall screens</h3>

<p>Agile and Lean thinkings both heavily use visual management. Having a lot of wall screens dedicated to displaying team relevant information in the team space brings a lot of value. To get the maximum benefit, these wall screens should be fully configurable and movable by the team.</p>

<p><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/wall-screens.jpg" title="Our own wall screens at work" ></p>

<h3>Team budget</h3>

<p>Eventually, in order to make sure the team can always work as efficiently as possible, it should have some money to spend for its workspace. It could be used to buy any of the upper, but also anything else that might help the team at a particular point in time. Without such a budget, teams have to make a request to the office department to get anything, often to no avail, or with extra long delays.</p>

<h2>Distributed teams</h2>

<p>Distributed teams bring their own challenges &hellip; and workplaces needs.</p>

<h3>Remote team space</h3>

<p>If your team is split between 2 places (as our team is at <a href="http://www.murex.com">Murex</a>) then obviously, each site should have its own delimited space, with its own gathering area.</p>

<h3>Constant visio connection</h3>

<p>Connecting gathering areas through visio is a great way to build the distributed team. It prevents loosing time when a meeting is required. It also builds the team by showing what&rsquo;s happening on the other side and by making it possible to take distributed lunches and breaks !</p>

<p><a href="http://www.infoq.com/presentations/distributed-team-agile"><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/distributed-lunch.jpg" title="A team sharing food remotely between offices" ></a></p>

<h3>Distributed whiteboards</h3>

<p>I never had the chance to work with one of these, but I often missed a whiteboard when working remotely &hellip; Any input on this subject would be welcome !</p>

<h2>Lego offices</h2>

<p>Here is another extract from Kent Beck&rsquo;s &ldquo;XP Embrace Change&rdquo;</p>

<blockquote><p>The courage value finds its expression in the XP attitude toward facilities. If the corporate attitude
toward facilities is at odds with the team&rsquo;s attitude, the team wins. If the computers are in the
wrong place, they are moved. If the partitions are in the way, they are taken down. If the lights are
too bright, they are taken out. If the phones are too loud, one day, mysteriously, they are all found
to have cotton stuffed in the bells.</p></blockquote>

<p>Improving the office is a cheap way to make a software organization more efficient. For another reference, here is what Tom DeMarco &amp; Tim Lister wrote in <a href="http://www.amazon.com/gp/product/0321934113/ref=s9_simh_gw_g14_i3_r?tag=pbourgau-20&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=desktop-1&amp;pf_rd_r=1K2KEWBRQK6F1R26D5D2&amp;pf_rd_t=36701&amp;pf_rd_p=2079475242&amp;pf_rd_i=desktop">Peopleware</a></p>

<blockquote><p>Police-mentality planners design workplaces the way they would design prisons: optimized for containment at minimal cost. We have unthinkingly yielded to them on the subject of workplace
design, yet for most organizations with productivity problems, there is no more fruitful area for improvement than the workplace. As long as workers are crowded into noisy, sterile, disruptive space, it&rsquo;s not worth improving anything but the <strong>workplace</strong>.</p></blockquote>

<p>Instead of designing offices, furniture departments in companies could provide a constant stock of building blocks for office building. Teams could use a workplace budget to build the workspace that suits them most. A good Wifi, laptops, enough floor power plugs, extra screens, movable tables, movable walls and easy to fix wall monitors are all things that would make this possible.</p>

<p><img class="center" src="/imgs/2016-02-17-recipes-for-an-agile-workspace/lego-office.jpg" title="A miniature office in Legos" ></p>
]]></content>
  </entry>
  
</feed>
