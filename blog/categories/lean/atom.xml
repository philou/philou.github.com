<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lean | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/lean/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-09-28T06:25:06+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 3]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/"/>
    <updated>2017-09-13T09:12:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3</id>
    <content type="html"><![CDATA[<p>This is the third post on a <a href="/blog/categories/first-improvement-kata-series/">series of 5 about the improvement kata</a>. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/">previous post</a>, I explained how we started to understand what was going on. We were now questioning our way of handling bugs.</p>

<blockquote><p>Are we spending too much time on bugs ?</p></blockquote>

<p><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/code-and-bugs.jpg" alt="Bugs drawn on top of code" /></p>

<h2>More understanding</h2>

<h3>Types of tasks</h3>

<p>To answer this question, we decided to plot the different types of tasks we had completed per sprint.</p>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/types-of-tasks.jpg"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/types-of-tasks-small.jpg" alt="Bar chart with the types of tasks over sprints" /></a></p>

<p>Think again of the velocity curve we started with. We see an almost exact correlation between story count (green bars above) and story points (blue curve below).</p>

<blockquote><p>ðŸ’¡#NoEstimates works</p></blockquote>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/velocity.jpg"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/velocity-small.jpg" alt="Velocity graph" /></a></p>

<p>We can also see that after sprint 56, we were spending more time on bugs and improvements. Improvements are supposed to improve productivity, so we decided to focus on bugs first. Here is what we get if we compute the average number of bugs per sprint :</p>

<table>
<thead>
<tr>
<th>Periods </th>
<th> Sprints </th>
<th> Bugs </th>
<th> Average bugs fixed per sprint</th>
</tr>
</thead>
<tbody>
<tr>
<td>2015, Before sprint 56  </td>
<td> 15 </td>
<td>  21 </td>
<td>    1.4</td>
</tr>
<tr>
<td>After sprint 56 </td>
<td> 34 </td>
<td>  210 </td>
<td>   6.1</td>
</tr>
</tbody>
</table>


<br>


<p>Starting sprint 56, we were fixing 4 times as many bugs as we used to do before !</p>

<h3>What is going on with bugs ?</h3>

<p>At this point, we felt we&rsquo;d made a great step forward in our understanding. We almost thought we were done with it &hellip;</p>

<p>After a bit of thinking though, it was clear that we were not ! We still needed to understand why we were in this situation.</p>

<p>We started by listing more questions :</p>

<ul>
<li>Could it be that we just got a lot better at testing ? Since sprint 56, we had been doing <a href="/how-we-started-exploratory-testing/">regular exploratory testing</a>. Exploratory testing sessions were very effective at finding bugs.</li>
<li>Were we paying back a bug debt ? The created versus resolved trend seemed to show so. But it could also be that we weren&rsquo;t testing as well as we used to !</li>
</ul>


<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/created-vs-resolved.png"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/created-vs-resolved-small.png" alt="Created vs Resolved Bugs graph" /></a></p>

<ul>
<li>If we were paying back a bug debt, how close were we to the end of the payback ?</li>
<li>Were we creating too many flaws in the software ?</li>
<li>Are we fixing too many bugs ? If so, what should we do to fix less ?</li>
<li>Are the bugs coming from other teams using our component or from our own testing ?</li>
<li>Are bugs on new or old code ?</li>
</ul>


<p>A lot of questions, all difficult to answer. We decided to first see if we were paying back a bug debt. If this was the case, most other questions would become more or less irrelevant. With a bit of thinking, we came up with a measure to get the answer.</p>

<h3>Are we paying back a bug debt ?</h3>

<p>We first started to do exploratory testing at sprint 56. To do this, we would run a 1 hour session, where the pair finding the more bugs would win fruits. (Later on, we streamlined exploratory testing as part of the workflow for every story) At that time, we used to find more than 10 bugs in 1 hour.</p>

<blockquote><p>ðŸ’¡Gamification transforms nice developers into berserk testers !</p></blockquote>

<table>
<thead>
<tr>
<th>Explo Test Sesssion </th>
<th> 61 </th>
<th> 62 </th>
<th> 63 </th>
<th> 64 </th>
<th> 66 </th>
<th> 16.01</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bugs found  </td>
<td> 16 </td>
<td>  6 </td>
<td> 16 </td>
<td>    10 </td>
<td>    11 </td>
<td> 11</td>
</tr>
</tbody>
</table>


<br>


<p>We would do another such a session. If we found significantly less than 10 bugs, let&rsquo;s say less than 6, it would mean that :</p>

<ul>
<li>we improved the quality of our software</li>
<li>our streamlining of exploratory testing works</li>
<li>if we continue to search and fix bugs as we do currently, we&rsquo;ll reach a point where we won&rsquo;t find any more bugs</li>
</ul>


<p>Otherwise, none of these stand, and we&rsquo;ll have to continue our investigations.</p>

<p>So we did a 1 hour, fruit-powered, exploratory testing session. And we found only 3 bugs ! Indeed, we were paying back a bug debt. The question became</p>

<blockquote><p>When should payback be over ?</p></blockquote>

<p>A linear regression on the created vs resolved bug trend showed that we still had 15 more months to go !</p>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/bug-trend.png"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/bug-trend-small.png" alt="Bug trend graph" /></a></p>

<h2>Target condition</h2>

<p>At that point, the target condition became obvious :</p>

<blockquote><p>We&rsquo;d like to be done with bugs within 3 months.</p></blockquote>

<p>Currently, around 1 pair (25% of the team) was busy fixing bugs. If we&rsquo;d manage to bring this down, we&rsquo;d have a 25% productivity boost.</p>

<p>This was post 3 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/">Next post</a> will be about PDCA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 2]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/"/>
    <updated>2017-09-12T09:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2</id>
    <content type="html"><![CDATA[<p>In my <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">previous post</a>, I described the productivity issue our team was facing. How retrospectives did not work, and how I started looking at the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>.</p>

<p>We had gone through the first phase of the improvement kata : set the end goal.</p>

<blockquote><p>Generating enough profit for the business while sticking to a sustainable pace.</p></blockquote>

<p>Time to start the second phase : Understand.</p>

<p><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/question-light.jpeg" alt="Drawing of a question mark transforming into a light bulb" /></p>

<h2>Understand</h2>

<p>Where we really slower ? Or was it an illusion ?</p>

<p>When trying to understand, you have to start with the data you have. You continue digging until you get a deeper understanding of the situation.</p>

<h3>Velocity</h3>

<p>We started with available data : story points and velocity. For sure this is a pretty bad measure of productivity. (Note : we should never use velocity for performance appraisal) In our case though, it felt like a good starting proxy measure.</p>

<p>Here is our velocity curve over 2 years.</p>

<p><a href="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity.jpg"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-small.jpg" alt="Velocity graph" /></a></p>

<p>It&rsquo;s obvious that something changed. There are 2 parts to this graph. The velocity dropped between sprint 54 and 16.01. That&rsquo;s a clue that our gut feeling was not completely wrong. Our productivity did change.</p>

<h3>Man days</h3>

<p>Our first hypothesis was that team members turnover was the cause. As with any team, some people came, and some people left. Let&rsquo;s superpose the man days and velocity curves.</p>

<p><a href="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-vs-manpower.jpg"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-vs-manpower-small.jpg" alt="Velocity vs Manpower graph" /></a></p>

<p>That could only explain <em>part</em> of the problem !</p>

<p>We tried to fine tune the man days curve. We took people&rsquo;s involvement in tasks outside of programming into account. We used coefficients depending on the developers' experience. That did not provide a better explanation.</p>

<p>We had to find another explanation.</p>

<h3>Velocity computation</h3>

<p>As I said earlier, velocity is not a measure of productivity. Any change in the way we were computing velocity would impact this curve.</p>

<p>We had kept photos and Trello boards of our <a href="/trellospectives-remote-retrospectives-with-trello/">retrospectives meetings</a>. We searched them through for anything that could impact velocity. Here is what we found :</p>

<ul>
<li>At sprint 55, we decided to ditch the <a href="https://www.scrum.org/resources/deadly-disease-focus-factor">focus-factor</a></li>
<li>At sprint 61, we started to do regular <a href="/how-we-started-exploratory-testing/">exploratory-testing</a>. Exploratory testing discovers more bugs on top of user reported bugs. This made us spend more time on fixing bugs.</li>
<li>At sprint 62, as we opted for a <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">No Bug policy</a> we decided not to count story points for bugs</li>
</ul>


<blockquote><p>ðŸ’¡Keep Photos and Trello boards of Retrospectives as a log of your working agreements changes</p></blockquote>

<p>The timings almost perfectly matched what we had observed in the first place. The question that came to our minds was :</p>

<blockquote><p>Are we spending too much time on bugs ?</p></blockquote>

<h2>Halfway through understanding</h2>

<p>This is how we started to dig into our situation. It&rsquo;s a good time to give you a bit of feedback about how we felt at that point.</p>

<p>It was the first time we tried the improvement kata. More than that, we did not find any tutorial or guides about how to run it. The only instructions we had were theoretical descriptions or super concrete examples. We had to bridge the gap and come up with our own way.</p>

<p>To summarize, we felt a bit lost, we had gathered data from here and there, and we did not know what to look at next. On top of that, the quality of the data we were collecting was not great. We were wondering if we would get anything out of these investigations.</p>

<p><a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1483258282&amp;sr=8-1&amp;keywords=the+first+20+hours"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/the-first-20-hours.jpg" alt="The cover of the book 'The First 20 Hours'" /></a></p>

<p>It felt a bit like when I did the <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20 hours experiment to learn anything</a>. We did exactly what had worked with the learning experiment : we pushed through !</p>

<blockquote><p>ðŸ’¡If you feel lost when doing something for the first time. Push through !</p></blockquote>

<p>In <a href="http://0.0.0.0:4000/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">next week&rsquo;s post</a>, I&rsquo;ll continue to detail the &lsquo;understand&rsquo; phase. <a href="/blog/categories/first-improvement-kata-series/">The series</a> also gained an extra post, and will now be 5 posts long.</p>

<p>More to read next week.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 1]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/"/>
    <updated>2017-09-07T06:39:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1</id>
    <content type="html"><![CDATA[<p>If you are serious about continuous improvement, you should learn the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>.</p>

<p><a href="/blog/categories/retrospectives/">Retrospectives</a> are great to pick all the low hanging improvements. Once you&rsquo;ve caught up with the industry&rsquo;s best practices, retrospectives risk drying up. Untapped improvement opportunities likely still exist in your specific context. The improvement kata can find those.</p>

<p><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/low-hanging-fruits.jpeg" alt="Low and high hangling fruits on a tree" /></p>

<p>Here is how we applied the improvement kata to gain 25% of productivity in my previous team.</p>

<h2>The Situation</h2>

<p>Thanks to repeated retrospectives, the team had been improving for 2 years. Retrospectives seemed like a silver bullet. We would discuss the current problems, grasp an underlying cause and pick a best practice. Most of the time, that fixed the problem.</p>

<p>Sometimes it did not work though. Even if the issue came back in a later retrospective, it would not survive a second scrutiny. In the previous two years, the team had transformed the way it worked. It adopted TDD, incremental refactoring, pair programming, remote work, automated performance testing and many others.</p>

<p>Lately though, things did not work so well. The team was struggling with productivity issues. The team was not slowing down, but the scope and complexity of the product had grown. Features were not getting out of the door as fast as they used to. We had the habit of prioritizing improvements and bug fixes over features. That used to improve the flow enough to get more and more feature done. It did not seem to work anymore.</p>

<p>We tried to tackle the issue in retrospectives. We would change the way we prioritized features &hellip; To be later bogged down by bugs, technical debt or bad tools. We would discuss that in retrospective, and decide to change the priorities again &hellip; The loop went on and on a few times.</p>

<p>We were getting nowhere.</p>

<h2>The improvement kataÂ </h2>

<p>That&rsquo;s why I started to look for other ways to do continuous improvement. I stumbled upon a book called <a href="http://leanagilecamp.fr/">Small Lean Management Guide for Agile Teams</a>. The book is in french, but I wrote an <a href="/are-most-agile-teams-doing-continuous-improvement-the-silly-way/">english review</a>. I fell in love with the way the authors dug into the hard data of how they worked to understand and fix their problems.</p>

<p>To learn more about this technique, I read <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1504758735&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a>. It details two management tools used at Toyota : the improvement and coaching katas. Some say these are Toyota&rsquo;s special weapon. <em>The</em> thing that grew them from a small shop to the <a href="https://en.wikipedia.org/wiki/Automotive_industry">largest car manufacturer in the world</a>.</p>

<p>They are katas because they are routines. They must be re-execute many times. The <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> should improve the flow of work. The <a href="http://www-personal.umich.edu/~mrother/The_Coaching_Kata.html">coaching kata</a> helps someone (or yourself) to learn the improvement kata. Every time we go through the kata, we also understand it better.</p>

<p>Here is how the improvement kata goes :</p>

<ol>
<li>Describe your end goal</li>
<li>Understand where you stand about this goal by measuring facts and data</li>
<li>Based on your end goal and the current situation, define where you&rsquo;d like to be in 3 months or less</li>
<li>Use <a href="https://en.wikipedia.org/wiki/PDCA">Plan-Do-Check-Act</a> to experiment your way to this new situation

<ol>
<li>Plan an experiment</li>
<li>Do this experiment</li>
<li>Check the results of this experiment</li>
<li>Act on these results.Â 

<ul>
<li>Either drop the experiment and plan a new one (go back to &lsquo;Plan&rsquo;).</li>
<li>Or spread the change at a larger scale.</li>
</ul>
</li>
</ol>
</li>
</ol>


<p><a href="http://www-personal.umich.edu/~mrother/Homepage.html"><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/katapattern.jpg" alt="The Improvement Kata Pattern" /></a><div class="image-credits">Image from Mike Rother on <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata Website</a></div></p>

<p>The coaching kata is a way to coach someone into applying the improvement kata. The fun thing is that you can coach yourself ! The idea is to ask questions to the coachee to remind him of where he stands in his improvement kata.</p>

<p><a href="https://traccsolution.com/resources/coaching-infographic/"><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/The-coaching-Kata-questions.jpg" alt="The Coaching Kata Questions" /></a></p>

<p>You&rsquo;ll find tons of details and material about these katas on the <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata website</a>.</p>

<h2>Our end goal</h2>

<p>That&rsquo;s how I started to apply the improvement kata in my team. I already had an idea of our end goal : to be more productive. To be more precise :</p>

<blockquote><p>Generating enough profit for the business while sticking to a sustainable pace.</p></blockquote>

<p>Retrospectives could not get us there. Would the improvement kata would succeed ?</p>

<p>This is the first part of a <a href="/blog/categories/first-improvement-kata-series/">series of 4 posts</a> relating our first use of the improvement kata. In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/">next post</a>, I&rsquo;ll explain what we did to understand the current situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A seamless way to keep track of technical debt in your source code]]></title>
    <link href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"/>
    <updated>2017-04-12T08:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code</id>
    <content type="html"><![CDATA[<p>I eventually stumbled upon a way to keep track of technical debt in source code that is both straightforward and already built-in most tools : simple <code>TODO</code> comments !</p>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/todo-comment.jpg" alt="Photo of a screen displaying source code with #TODO comments" /></p>

<h2>How it happened ?</h2>

<p>Some time ago, we tried to add <a href="/a-plan-for-technical-debt-lean-software-development-part-7/"><code>@TechnicalDebt</code></a> annotations in our source code. Unfortunately, after a few month, we came to the logical conclusion that it was too complex to be effective :</p>

<ul>
<li>It involved too much ceremony, which frightened people</li>
<li>It made people uneasy to change anything around the annotation instead of sending a call to action</li>
<li>As a result, it was always out of date</li>
</ul>


<p>After a bit of discussion with my colleagues, we decided to replace all these annotations with simple <code>TODO</code> comments.</p>

<p>When the refactoring to do seems fairly obvious (but also premature) we&rsquo;ll use a straightforward <code>//TODO (example) introduce a factory</code> message. Next time a pairs gets to work on this part of the code, they get the silent opinion of their peers to help them decide what to do about this piece of the code. Other times, the code might be smelly, yet without us knowing what to do about it yet, in this case, we agreed to use <code>//TODO SMELL (example) responsibilities are not clear in this class</code> which is still a <code>TODO</code> comment, but not a clear call to action.</p>

<p>When I started my <a href="https://github.com/philou/planning-poker">current side project</a>, I naturally started to use them. They display nicely in <a href="https://codeclimate.com/github/philou/planning-poker/issues">CodeClimate</a>.</p>

<h3>The pros</h3>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/codeclimate.jpg" alt="Screenshot of the CodeClimate issue dashboard displaying TODO comments" /></p>

<p>The great thing about <code>TODO</code> comments is that, as a very old programming trick, they are already supported out of the box by most tools <a href="https://www.jetbrains.com/">IntelliJ</a>, <a href="https://www.sonarqube.org/">SonarQube</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="https://codeclimate.com">CodeClimate</a> and I guess many others. Only one day after I refactored to <code>TODO</code> comments, a team mate fixed one that had appeared in his IDE&rsquo;s TODO tab !</p>

<h3>The cons</h3>

<p>Some tools, IDEs in particular, tend to assume that you should fix all your <code>TODOs</code> before you commit anything. That&rsquo;s not exactly how we are using them to track lasting technical debt. So that&rsquo;s one thing you need to keep in mind.</p>

<p>Tools like Sonar on the other hand, assign a fixed remediation cost to any <code>TODO</code> you have in the code, which is usually not the case at all !</p>

<h2>How to set it up in your project</h2>

<p>As you might guess, this is pretty easy. Just start adding <code>TODO</code> comments in your code &hellip;</p>

<h3>Teamwise</h3>

<p>It is worth first validating the practice with your colleagues though. There are many ways to do that, depending on your team&rsquo;s work habits :</p>

<ul>
<li>Use your team <a href="https://slack.com/">Slack</a> (or whatever chat room you use) to share a link to this post (for example) and create a yes/no poll</li>
<li>Or if you think you need it, create some wiki page explaining the practice and detailing its rationals in your context, add a yes/no poll, and finally share this page with your team</li>
<li>Eventually, if you think that this topic deserves it, setup a meeting with everyone and discuss the point. It might be worth sharing information about the practice beforehand to make the meeting more efficient. You can end the vote with a <a href="http://www.plays-in-business.com/thumb-voting/">thumb vote</a> (up : yes, down : no, side : whatever)</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/thumb-vote.jpg" alt="Thumbs voting positions" /><div class="image-credits">Photo from <a href="http://www.plays-in-business.com/thumb-voting/">Plays in Business</a></div></p>

<p>Don&rsquo;t wait for unanimity to start the practice, majority is enough ! Make sure that people who voted the other way will follow the team practice in the end though. Remember that whatever the answer, discussing team practices is good.</p>

<p>Once all the team agreed on using (or not) <code>TODO</code> comments, mention the practice in your team&rsquo;s coding conventions or working agreements (which I strongly recommend to have written somewhere). If you don&rsquo;t have any yet, create some !</p>

<h3>Toolswise</h3>

<p>Most tools will handle <code>TODO</code> out of the box.</p>

<ul>
<li>Rails comes with a <code>rake notes</code> task to list <code>TODO</code> comments.</li>
<li>CodeClimate and SonarQube both lists <code>TODOs</code> as issues in their default config</li>
<li>Most IDEs have a &lsquo;TODO&rsquo; tab which will display the <code>TODO</code> comments in the project</li>
<li>Otherwise, good old grep will very happily find <code>TODO</code> comments in your code</li>
</ul>


<p>Some tools might require small tweaks to improve the experience :</p>

<ul>
<li>In IntelliJ, in the commit window, uncheck the &lsquo;Check TODO&rsquo; checkbox to avoid getting a warning at every commit</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/intellij-commit.jpg" alt="IntelliJ's commit window, with its 'Check TODO' check box" /></p>

<ul>
<li>SonarQube uses the same fixed remediation cost for every TODO comment. It&rsquo;s up to you to adapt this remediation cost to your context.</li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p><code>TODO</code> comments are a good starting point to track technical debt. Once you start using them, there are a few things you can do :</p>

<p>First, remember to fix some regularly. Very old <code>TODO</code> comments are technical debt of their own ! Using code quality dashboards like SonarQube or CodeClimate help to continuously improve your code.</p>

<p>If your tools allow it, you might consider setting up a simpler <code>//SMELL ...</code> instead of <code>//TODO SMELL ...</code> or whatever other special comment that might be useful in your context.</p>

<p>Finally, there is a lean continuous improvement practice which consists of logging problems as they occur. Doing this could help your team to decide which technical debt hotspots are the most important to fix. When appropriate, link the problems with the <code>TODO</code> comments. After a few weeks of this, walking through all the problems during a retrospective should shed light on what parts of the code are causing the most troubles.</p>

<h2>Edit 2017-04-19</h2>

<p>Thanks a lot for your comments ! People have suggested a ton of great improvements over my basic setup :</p>

<ul>
<li>plugins to other tools that also support <code>TODO</code> comments</li>
<li>activating automatic sync between issues in CodeClimate and your issue tracking system</li>
<li>using custom comments markers</li>
<li>adding an &lsquo;X&rsquo; to your comment every time you are bothered by the technical debt, tools can configured to assign a higher severity to issues with a lot of &lsquo;X&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Books About Data Driven Lean Software Development]]></title>
    <link href="http://philippe.bourgau.net/5-books-about-data-driven-lean-software-development/"/>
    <updated>2016-04-29T05:25:00+02:00</updated>
    <id>http://philippe.bourgau.net/5-books-about-data-driven-lean-software-development</id>
    <content type="html"><![CDATA[<p>In french, we say &ldquo;Le cordonnier est toujours le plus mal chaussÃ©&rdquo; which I found an English equivalent in &ldquo;the shoemakerâ€™s son always goes barefoot&rdquo;. I believe this is nowhere more true than in the software industry !</p>

<p>&ldquo;Software is eating the world&rdquo; they say. Software is now able to do things that only humans used to be. So why the hell are we driving our projects as if we were a horde of amateur hitch hikers ?</p>

<h2>What does it mean to be data driven ?</h2>

<p>Being data driven would allow us to answer questions such as :</p>

<ul>
<li>How much is the feature we delivered last week contributing to the bottom line ?</li>
<li>How much is the feature we are currently developing expected to contribute to the bottom line ?</li>
<li>What are the estimated cost <em>and value</em> of increasing our test coverage of 1% ?</li>
<li>What are the estimated interests and nominal amounts of our current technical debt ?</li>
<li>Which is the most valuable : improving our build system or building this new feature ?</li>
</ul>


<p>Most projects I&rsquo;ve worked in have absolutely no clue about the answers to these questions. The decision is left to experts, to the one with most influence, or simply to the developer, who can do how he thinks is best &hellip;</p>

<h2>The books</h2>

<p>Hopefully, some people are thinking differently, they believe it is possible to quantify all this, they even explain how !</p>

<h3><a href="http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906957&amp;sr=8-1&amp;keywords=running+lean">Running Lean: Iterate from Plan A to a Plan That Works</a> by <a href="https://ashmaurya.com/">Ash Maurya</a></h3>

<p><a href="http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906957&amp;sr=8-1&amp;keywords=running+lean"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/running_lean.jpg" title="The cover of the Running Lean book" ></a></p>

<p>Details a very practical guide about the lean startup process, which is a very good starting point to any kind of lean software development.</p>

<h3><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906998&amp;sr=8-1&amp;keywords=kanban+anderson">Kanban: Successful Evolutionary Change for Your Technology Business</a> by <a href="http://www.djaa.com/">David J. Anderson</a></h3>

<p><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461906998&amp;sr=8-1&amp;keywords=kanban+anderson"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/kanban.jpg" title="The cover of the Kanban book" ></a></p>

<p>This book explains with real world examples how to use Kanban board to control your work queues and improve your flow of work, a real basic for any lean product development.</p>

<h3><a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461907905&amp;sr=8-1&amp;keywords=principles+of+product+development+flow">The Principles of Product Development Flow: Second Generation Lean Product Development</a> by <a href="http://reinertsenassociates.com/">Donald G. Reinertsen</a></h3>

<p><a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461907905&amp;sr=8-1&amp;keywords=principles+of+product+development+flow"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/flow.jpg" title="The cover of the Flow book" ></a></p>

<p>This book is rather theoretical, but it links all subjects together : lean startup, risk management, Kanban, and economics. I guess it&rsquo;s a must read on the subject.</p>

<h3><a href="http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908177&amp;sr=8-1&amp;keywords=how+to+measure+anything">How to Measure Anything: Finding the Value of Intangibles in Business</a> by <a href="http://www.hubbardresearch.com/">Douglas W. Hubbard</a></h3>

<p><a href="http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908177&amp;sr=8-1&amp;keywords=how+to+measure+anything"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/how_to_measure_anything.jpg" title="The cover of How to measure anything" ></a></p>

<p>If the flow book gives a big picture view of what you want, this one explains how you can actually measure all the aspects of your product development in $ value.</p>

<h3><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_sc_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908398&amp;sr=8-1-spell&amp;keywords=walzting+with+bears">Waltzing With Bears: Managing Risk on Software Projects</a> by <a href="http://www.systemsguild.com/">Tom DeMarco and Timothy Lister</a></h3>

<p><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_sc_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1461908398&amp;sr=8-1-spell&amp;keywords=walzting+with+bears"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/waltzing_with_bears.jpg" title="The cover of Waltzing with bears" ></a></p>

<p>Although this book is getting old, and is a bit outdated when compared to agile development practices, it provides real world examples of how scientific measurement can be applied to software product development.</p>

<h2>An opportunity</h2>

<p>Reading these books was a real eye opener for me. The software development world is plagued with cargo cult and supposed best practices. We follow advises, but most often without verifying if they actually work ! I believe that by applying the techniques in these books, we could create standard ways to measure the values of productivity, technical debt, quality, testing &hellip;</p>

<p>I see real opportunities to avoid a lot of useless argument between proponents of A and B, but also to communicate better with all stakeholders and finally, to reduce stress for all of us.</p>
]]></content>
  </entry>
  
</feed>
