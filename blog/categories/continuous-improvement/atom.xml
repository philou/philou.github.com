<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous improvement | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/continuous-improvement/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-11-06T06:52:04+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to run your first improvement kata]]></title>
    <link href="http://philippe.bourgau.net/how-to-run-your-first-improvement-kata/"/>
    <updated>2017-10-03T06:37:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-run-your-first-improvement-kata</id>
    <content type="html"><![CDATA[<p>The <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> can solve problems that typical retrospectives fail to address. Although there is a halo of mystery around it, it&rsquo;s actually not that difficult to get started ! Here is a guide.</p>

<p>During the last few weeks, I&rsquo;ve been blogging about the improvement kata. You can read <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">the full story</a> of the first time we applied it in our team to gain 25% of productivity. If you are more interested by what it taught us, check this <a href="/lessons-learned-from-running-our-first-improvement-kata/">other post</a>.</p>

<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/cookbook.jpg" alt="Illustration of the improvement kata cookbook" /></p>

<h2>A 5 bullets summary</h2>

<p>Here is how I would explain what the improvement kata is :</p>

<ul>
<li>It&rsquo;s a continuous improvement technique. It relies on the scientific method to reach a target state.</li>
<li>It involves running experiments to know if your ideas are valid.</li>
<li>It can be long to run through, but it works on tricky situation where retrospectives don&rsquo;t.</li>
<li>It&rsquo;s 100% scientific. It uses data analysis and deduction. Not gut feeling and community best practices.</li>
<li>It can be part of the backlog, as any other item. It does not have to be a special event like retrospectives usually are.</li>
</ul>


<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/katapattern.jpg" alt="The main steps of the improvement kata" /></p>

<blockquote><p>ðŸ’¡ The improvement kata is 100% scientific, it uses data and deduction, not gut feeling and best practices</p></blockquote>

<h2>Let&rsquo;s give it a try !Â </h2>

<p>Is that enough for you to give it a try ? If so, great, read on ! If you need a bit more convincing, check the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">full story</a> of how we gained 25% of productivity with it.</p>

<p>Here is how to get started :</p>

<ol>
<li>The first thing is to read about it. If you have the time, <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1507005860&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a> is a good read. If you read French, the <a href="http://leanagilecamp.fr/index.html">&ldquo;Petit guide de management lean Ã  l'usage des Ã©quipes agiles&rdquo;</a> is a very pleasant and easy read. Finally if you want to cut it as short as possible, read the <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata website</a>.</li>
<li>Pick a topic to try it on. Best candidates are clear and important problems. They might have emerged out of a retrospective for example. The scope should be small enough not to get lost.</li>
<li>Once you&rsquo;ve identified a topic, someone or a pair should take ownership of the kata. It&rsquo;s very unlikely that you&rsquo;ll be able to do the full kata in one afternoon. Understanding happens when the brain is at rest, and experiments take time. The owners need to dedicate some time to follow up on the kata.</li>
<li><p>Repeatedly ask yourself the <a href="http://www-personal.umich.edu/~mrother/The_Coaching_Kata.html">coaching kata</a> questions. This will help you and your pair to stay on track.</p>

<ol>
<li>What&rsquo;s the target condition ? (Describe what are you trying to achieve)</li>
<li>What&rsquo;s the actual condition ? (Describe your current situation)</li>
<li>What obstacles do you think are preventing you from reaching the target condition ? Which one are you addressing now ? (Describe the first problem you are about to try to fix)</li>
<li>What is your next step ? What do you expect ? (Describe the experiment you are going to run to test a solution)</li>
<li>When can we go and see what we have learned from taking that step ? (Run the experiment and learn from the results. Decide on a process change or repeat from an earlier step)</li>
</ol>
</li>
<li><p>Going through the kata in pair is a great way to spread the practice within the team. At some point you might be able to run many improvement katas in parallel ! Just make sure not to walk on each other&rsquo;s toes &hellip;</p></li>
</ol>


<p>Expect the first time to be a bit rocky, and to feel lost from time to time &hellip;</p>

<h2>Start today !</h2>

<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/rocket-launch.jpg" alt="The main steps of the improvement kata" /></p>

<p>Many practices and techniques seem daunting at first. Remember the first time you wrote a test before the code. The first time you tried to program using only immutable data structures. Or the time you wrote your first &ldquo;hello world&rdquo; program !</p>

<blockquote><p>ðŸ’¡ We can learn anything things on our own by just doing them</p></blockquote>

<p>The improvement kata is no different. Give it a go, and you&rsquo;ll learn a powerful technique.</p>

<p><em>Whether you have already used the kata, you plan to use it or you have questions about it, I&rsquo;d like to hear from you ! Leave a comment.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons learned from running our first improvement kata]]></title>
    <link href="http://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata/"/>
    <updated>2017-09-29T06:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata</id>
    <content type="html"><![CDATA[<p>During the past few weeks, I blogged the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">story of our first improvement kata</a>.</p>

<p>Doing this first <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> taught us many lessons. We re-discovered best practices of the software industry. We also learned more general things about the improvement kata itself.</p>

<p><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/lessons.jpg" alt="Drawing of books" /></p>

<h2>Rediscovered best practices</h2>

<p>As we went through the kata, we &lsquo;proved&rsquo; many known best practices. We did not have to <em>believe</em> them, we had data explaining that they worked. For example :</p>

<ul>
<li><a href="https://twitter.com/hashtag/noestimates">#NoEstimate</a> works. Back in <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">part 3</a> we saw that the story point and story count curves were very similar, almost identical</li>
<li><a href="https://www.infoq.com/articles/0-bugs-policy">#NoBug policy</a> was part of the solution to our problem</li>
<li>Doing more exploratory testing resulted in less bug fixing and increased our productivity. This proves principles like &ldquo;<a href="http://deming14points.com/quotes/build-quality-in/">Build quality in"</a> and <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">&ldquo;Quality is free&rdquo;</a></li>
</ul>


<p>We also pushed the #NoBug policy further than it is usually done. We defined a clear definition for bugs that anyone could use. Doing so, we removed the product owner (or on-site customer) from the picture. Very often, the PO is the only one who can sort stories from bugs out. We created what <a href="http://reinertsenassociates.com/category/tips/">Donald Reinertsen</a> calls a distributed rule in the <a href="https://www.amazon.fr/Principles-Product-Development-Flow-Generation/dp/1935401009">flow book</a>. It increased empowerment, removes bottlenecks, while ensuring alignment.</p>

<p><a href="https://www.amazon.fr/Principles-Product-Development-Flow-Generation/dp/1935401009"><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/flow-book-cover.jpg" alt="The 'Flow' book cover" /></a></p>

<h2>The improvement kata</h2>

<p>The first general lesson that we learned is that the improvement kata works !</p>

<p>At the beginning, we were very uneasy not to have perfect data. Remember how we had to resort to velocity as a proxy measure for productivity. In the end, that was not a severe problem. It still allowed us to understand what was going on.</p>

<p>We also learned that <a href="http://philippe.bourgau.net/blog/categories/retrospectives/">retrospective</a> is not the only road to continuous improvement. In fact, the improvement kata and retrospectives are very different :</p>

<ul>
<li>The time frame is different. A retrospective lasts for 1 or 2 hours and yield immediate results. An improvement kata is a background task that could take months in theory !</li>
<li>But the improvement kata also digs a lot deeper in the topic and brings true understanding. In our case, it fixed a problem that retrospectives where failing to address.</li>
<li>Ownership is also different. Retrospectives are a team activity. The improvement kata needs one or a few owners. It would be very difficult to align everyone on the same path of thoughts if we did it as a group activity.</li>
<li>Being a team activity, retrospectives have built-in alignment. The conclusions of the improvement kata must explained and agreed for a team to act on them. A good practice is to have regular (short) team meetings to share the current state of an improvement kata.</li>
<li>As the improvement kata is a more individual activity, it is more remote friendly. Team members can run the kata on their side, sharing everything through a wiki, or a blog for example.</li>
</ul>


<p>Keep in mind that this was our first try at the kata. Some of our difficulties might disappear with a bit of practice !</p>

<h2>What&rsquo;s next ?</h2>

<h3>Hybrid continuous improvement</h3>

<p>I clarified the differences between the improvement kata and retrospectives. That&rsquo;s not the end of it. I&rsquo;m sure a mixed format could be very interesting ! Start with a retrospective to collect the team&rsquo;s problems, and vote on the more important. Add a corresponding improvement kata task to the backlog. Someone would then handle this improvement task, sharing with the team along the way.</p>

<p>This might be a great opportunity to reduce meeting time with shorter retrospectives.</p>

<blockquote><p>ðŸ’¡ Reduce meeting time with mixed retrospective &amp; improvement kata</p></blockquote>

<h3>Data science for software</h3>

<p>Going through this improvement kata made me realize something else. It is very difficult to get quality data to investigate. We had to resort to what was available all the way.</p>

<p>What&rsquo;s striking is that we use software tool for all our work ! These tools have logs and could record usage data somewhere. Imagine all we could learn by mining all this data ! Our IDEs, CI servers, quality monitors, test tools, version control and project management tools should store everything we do at the same place !</p>

<p>With all this data, could we improve our estimations ? Could we find creative ways to be more productive ? Could we estimate the speed up that fixing some technical debt would bring ?</p>

<blockquote><p>ðŸ’¡ What are we waiting to apply data science to the development process ?</p></blockquote>

<p>As the saying goes, &ldquo;The cobbler&rsquo;s children go barefoot&rdquo;. We are building such systems for others, but not for ourselves.</p>

<p>Hopefully, new tools like <a href="https://codescene.io/">CodeScene</a> are emerging to fill this gap. You can learn more about CodeScene on their <a href="https://codescene.io/">website</a>, or from the <a href="https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384">founder&rsquo;s book</a>. It analyses the version control history to find hot spots and other things in your code.</p>

<p><a href="https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384"><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/code-as-crime-scene.jpg" alt="The 'Code as a Crime Scene' book cover" /></a></p>

<p>While we keep dreaming of such tool, I&rsquo;ll continue to blog. Next week, I will write a short guide of <a href="/how-to-run-your-first-improvement-kata/">how to run your first improvement kata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 5]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/"/>
    <updated>2017-09-27T07:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5</id>
    <content type="html"><![CDATA[<p>This is the fifth (and last) post of a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/">previous post</a>, we decided to adjust our definition of a bug to limit the time lost on nice-to-have bug fixes.</p>

<p>It would take a while to know if adjusting the definition of a bug would help us or not. At the same time, we knew it would not help us to reduce the number of bugs we escaped to other teams.</p>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/success-banner.jpg" alt="A 'SUCCESS' banner in the wind" /></p>

<h2>Idea 3 : More exploratory testing</h2>

<p>We decided to push on this matter as well. This means that we would be running two <a href="https://en.wikipedia.org/wiki/PDCA">PDCAs (Plan-Do-Check-Act)</a> at the same time. This is not the improvement kata procedure by the book. That could have been an error from our side, as first time users of the kata. Or maybe it&rsquo;s a pragmatic habit to adapt the kata to real life &hellip; I guess we&rsquo;ll know better as we apply the kata more often. The danger is that the different experiments can conflict with each other. When measuring the results, it becomes difficult to link observations with experiments. Anyway, back to our own situation, as you&rsquo;ll see, it ended up well for us.</p>

<p>The first thing was to know a bit more about our bugs. Checking the recently closed bugs yielded suspicions about a recent features. Analyzing further proved our gut feeling.</p>

<h6>Curve of how bugs were fixed on the last 2 months</h6>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/fixed-bugs.png" alt="Curve of how bugs were fixed on last 2 months" /></p>

<h6>Curve of the origin of bugs on the last 2 months</h6>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/kind-of-bugs.png" alt="Curve of the origin of bugs on the last 2 months" /></p>

<p>Ignoring the Christmas drop at the middle of the curve, we concluded 2 things from these graphs :</p>

<ul>
<li>We were leaking bugs to the product</li>
<li>Bugs mostly came from newly added features</li>
</ul>


<blockquote><p>Despite all our automated tests and regular Â exploratory testing, we were leaking bugs.</p></blockquote>

<p>We decided to do more exploratory testing for a while ! We were already doing exploratory testing at the end of every story. We added an extra 1 hour team session of exploratory testing every sprint.</p>

<h2>Do, Check &amp; Act</h2>

<p>We used these new conventions for a few weeks. We did more exploratory testing, and would be more strict about what a bug was. We stuck to our prioritization : first improvements, then bugs and only after, stories.</p>

<p>After a few weeks of that, we were able to update our bug trend and do a linear regression on it again. Here were the results :</p>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/final-bug-trend.png" alt="Curve of the origin of bugs on the last 2 months" /></p>

<p>Hurray ! As you can see, we were to be done with bugs around April 2017, which was 3 months away at that time.</p>

<blockquote><p>ðŸ’¡ Quality is free, but only for those willing to pay for it ! [<a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> in <a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=9SX9Y3RG61NB7N9VJ6KS&amp;dpID=61lAwzXfQiL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=detail">Peopleware</a>]</p></blockquote>

<p><a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=9SX9Y3RG61NB7N9VJ6KS&amp;dpID=61lAwzXfQiL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=detail"><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/peopleware.jpg" alt="Cover of the 'Peopleware' book by Tom DeMarco &amp; Timothy Lister" /></a></p>

<p>We confidently adopted these practices as part of our working agreements. This brought our first improvement kata to its end.</p>

<blockquote><p>ðŸ’¡ The improvement kata not only brings improvements, it also teaches you why they work.</p></blockquote>

<h2>3 months later</h2>

<p>As you know, April 2017 is long gone. I can now give you a more up to date report of the actual effects on the team&rsquo;s daily work.Â </p>

<p>First, the backlog does not contain bugs anymore. We payed the bug debt back. Second, we still discover some bugs from time to time, but a lot less than we used to. To summarize, there is now a pair of developers (25%) of the team that can work on user stories instead of fixing bugs.</p>

<p>As we are still fixing bugs as they appear, the 25% productivity gain claim might be an overstatement, but 20% is not. At the same time, less bugs are now escaping. This means that the whole organization is saving on interruptions and rework. 25% might not be such a bold claim after all !</p>

<h2>This is it !</h2>

<p>This was post 5 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. I&rsquo;m not completely done writing about this improvement kata though. In the coming weeks, I&rsquo;ll post about the <a href="/lessons-learned-from-running-our-first-improvement-kata/">lessons learned</a> and <a href="/how-to-run-your-first-improvement-kata/">how to start your own improvement kata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 3]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/"/>
    <updated>2017-09-13T09:12:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3</id>
    <content type="html"><![CDATA[<p>This is the third post on a <a href="/blog/categories/first-improvement-kata-series/">series of 5 about the improvement kata</a>. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/">previous post</a>, I explained how we started to understand what was going on. We were now questioning our way of handling bugs.</p>

<blockquote><p>Are we spending too much time on bugs ?</p></blockquote>

<p><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/code-and-bugs.jpg" alt="Bugs drawn on top of code" /></p>

<h2>More understanding</h2>

<h3>Types of tasks</h3>

<p>To answer this question, we decided to plot the different types of tasks we had completed per sprint.</p>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/types-of-tasks.jpg"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/types-of-tasks-small.jpg" alt="Bar chart with the types of tasks over sprints" /></a></p>

<p>Think again of the velocity curve we started with. We see an almost exact correlation between story count (green bars above) and story points (blue curve below).</p>

<blockquote><p>ðŸ’¡#NoEstimates works</p></blockquote>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/velocity.jpg"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/velocity-small.jpg" alt="Velocity graph" /></a></p>

<p>We can also see that after sprint 56, we were spending more time on bugs and improvements. Improvements are supposed to improve productivity, so we decided to focus on bugs first. Here is what we get if we compute the average number of bugs per sprint :</p>

<table>
<thead>
<tr>
<th>Periods </th>
<th> Sprints </th>
<th> Bugs </th>
<th> Average bugs fixed per sprint</th>
</tr>
</thead>
<tbody>
<tr>
<td>2015, Before sprint 56  </td>
<td> 15 </td>
<td>  21 </td>
<td>    1.4</td>
</tr>
<tr>
<td>After sprint 56 </td>
<td> 34 </td>
<td>  210 </td>
<td>   6.1</td>
</tr>
</tbody>
</table>


<br>


<p>Starting sprint 56, we were fixing 4 times as many bugs as we used to do before !</p>

<h3>What is going on with bugs ?</h3>

<p>At this point, we felt we&rsquo;d made a great step forward in our understanding. We almost thought we were done with it &hellip;</p>

<p>After a bit of thinking though, it was clear that we were not ! We still needed to understand why we were in this situation.</p>

<p>We started by listing more questions :</p>

<ul>
<li>Could it be that we just got a lot better at testing ? Since sprint 56, we had been doing <a href="/how-we-started-exploratory-testing/">regular exploratory testing</a>. Exploratory testing sessions were very effective at finding bugs.</li>
<li>Were we paying back a bug debt ? The created versus resolved trend seemed to show so. But it could also be that we weren&rsquo;t testing as well as we used to !</li>
</ul>


<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/created-vs-resolved.png"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/created-vs-resolved-small.png" alt="Created vs Resolved Bugs graph" /></a></p>

<ul>
<li>If we were paying back a bug debt, how close were we to the end of the payback ?</li>
<li>Were we creating too many flaws in the software ?</li>
<li>Are we fixing too many bugs ? If so, what should we do to fix less ?</li>
<li>Are the bugs coming from other teams using our component or from our own testing ?</li>
<li>Are bugs on new or old code ?</li>
</ul>


<p>A lot of questions, all difficult to answer. We decided to first see if we were paying back a bug debt. If this was the case, most other questions would become more or less irrelevant. With a bit of thinking, we came up with a measure to get the answer.</p>

<h3>Are we paying back a bug debt ?</h3>

<p>We first started to do exploratory testing at sprint 56. To do this, we would run a 1 hour session, where the pair finding the more bugs would win fruits. (Later on, we streamlined exploratory testing as part of the workflow for every story) At that time, we used to find more than 10 bugs in 1 hour.</p>

<blockquote><p>ðŸ’¡Gamification transforms nice developers into berserk testers !</p></blockquote>

<table>
<thead>
<tr>
<th>Explo Test Sesssion </th>
<th> 61 </th>
<th> 62 </th>
<th> 63 </th>
<th> 64 </th>
<th> 66 </th>
<th> 16.01</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bugs found  </td>
<td> 16 </td>
<td>  6 </td>
<td> 16 </td>
<td>    10 </td>
<td>    11 </td>
<td> 11</td>
</tr>
</tbody>
</table>


<br>


<p>We would do another such a session. If we found significantly less than 10 bugs, let&rsquo;s say less than 6, it would mean that :</p>

<ul>
<li>we improved the quality of our software</li>
<li>our streamlining of exploratory testing works</li>
<li>if we continue to search and fix bugs as we do currently, we&rsquo;ll reach a point where we won&rsquo;t find any more bugs</li>
</ul>


<p>Otherwise, none of these stand, and we&rsquo;ll have to continue our investigations.</p>

<p>So we did a 1 hour, fruit-powered, exploratory testing session. And we found only 3 bugs ! Indeed, we were paying back a bug debt. The question became</p>

<blockquote><p>When should payback be over ?</p></blockquote>

<p>A linear regression on the created vs resolved bug trend showed that we still had 15 more months to go !</p>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/bug-trend.png"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/bug-trend-small.png" alt="Bug trend graph" /></a></p>

<h2>Target condition</h2>

<p>At that point, the target condition became obvious :</p>

<blockquote><p>We&rsquo;d like to be done with bugs within 3 months.</p></blockquote>

<p>Currently, around 1 pair (25% of the team) was busy fixing bugs. If we&rsquo;d manage to bring this down, we&rsquo;d have a 25% productivity boost.</p>

<p>This was post 3 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/">Next post</a> will be about PDCA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 2]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/"/>
    <updated>2017-09-12T09:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2</id>
    <content type="html"><![CDATA[<p>In my <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">previous post</a>, I described the productivity issue our team was facing. How retrospectives did not work, and how I started looking at the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>.</p>

<p>We had gone through the first phase of the improvement kata : set the end goal.</p>

<blockquote><p>Generating enough profit for the business while sticking to a sustainable pace.</p></blockquote>

<p>Time to start the second phase : Understand.</p>

<p><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/question-light.jpeg" alt="Drawing of a question mark transforming into a light bulb" /></p>

<h2>Understand</h2>

<p>Where we really slower ? Or was it an illusion ?</p>

<p>When trying to understand, you have to start with the data you have. You continue digging until you get a deeper understanding of the situation.</p>

<h3>Velocity</h3>

<p>We started with available data : story points and velocity. For sure this is a pretty bad measure of productivity. (Note : we should never use velocity for performance appraisal) In our case though, it felt like a good starting proxy measure.</p>

<p>Here is our velocity curve over 2 years.</p>

<p><a href="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity.jpg"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-small.jpg" alt="Velocity graph" /></a></p>

<p>It&rsquo;s obvious that something changed. There are 2 parts to this graph. The velocity dropped between sprint 54 and 16.01. That&rsquo;s a clue that our gut feeling was not completely wrong. Our productivity did change.</p>

<h3>Man days</h3>

<p>Our first hypothesis was that team members turnover was the cause. As with any team, some people came, and some people left. Let&rsquo;s superpose the man days and velocity curves.</p>

<p><a href="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-vs-manpower.jpg"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-vs-manpower-small.jpg" alt="Velocity vs Manpower graph" /></a></p>

<p>That could only explain <em>part</em> of the problem !</p>

<p>We tried to fine tune the man days curve. We took people&rsquo;s involvement in tasks outside of programming into account. We used coefficients depending on the developers' experience. That did not provide a better explanation.</p>

<p>We had to find another explanation.</p>

<h3>Velocity computation</h3>

<p>As I said earlier, velocity is not a measure of productivity. Any change in the way we were computing velocity would impact this curve.</p>

<p>We had kept photos and Trello boards of our <a href="/trellospectives-remote-retrospectives-with-trello/">retrospectives meetings</a>. We searched them through for anything that could impact velocity. Here is what we found :</p>

<ul>
<li>At sprint 55, we decided to ditch the <a href="https://www.scrum.org/resources/deadly-disease-focus-factor">focus-factor</a></li>
<li>At sprint 61, we started to do regular <a href="/how-we-started-exploratory-testing/">exploratory-testing</a>. Exploratory testing discovers more bugs on top of user reported bugs. This made us spend more time on fixing bugs.</li>
<li>At sprint 62, as we opted for a <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">No Bug policy</a> we decided not to count story points for bugs</li>
</ul>


<blockquote><p>ðŸ’¡Keep Photos and Trello boards of Retrospectives as a log of your working agreements changes</p></blockquote>

<p>The timings almost perfectly matched what we had observed in the first place. The question that came to our minds was :</p>

<blockquote><p>Are we spending too much time on bugs ?</p></blockquote>

<h2>Halfway through understanding</h2>

<p>This is how we started to dig into our situation. It&rsquo;s a good time to give you a bit of feedback about how we felt at that point.</p>

<p>It was the first time we tried the improvement kata. More than that, we did not find any tutorial or guides about how to run it. The only instructions we had were theoretical descriptions or super concrete examples. We had to bridge the gap and come up with our own way.</p>

<p>To summarize, we felt a bit lost, we had gathered data from here and there, and we did not know what to look at next. On top of that, the quality of the data we were collecting was not great. We were wondering if we would get anything out of these investigations.</p>

<p><a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1483258282&amp;sr=8-1&amp;keywords=the+first+20+hours"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/the-first-20-hours.jpg" alt="The cover of the book 'The First 20 Hours'" /></a></p>

<p>It felt a bit like when I did the <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20 hours experiment to learn anything</a>. We did exactly what had worked with the learning experiment : we pushed through !</p>

<blockquote><p>ðŸ’¡If you feel lost when doing something for the first time. Push through !</p></blockquote>

<p>In <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">next week&rsquo;s post</a>, I&rsquo;ll continue to detail the &lsquo;understand&rsquo; phase. <a href="/blog/categories/first-improvement-kata-series/">The series</a> also gained an extra post, and will now be 5 posts long.</p>

<p>More to read next week.</p>
]]></content>
  </entry>
  
</feed>
