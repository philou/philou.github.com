<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous improvement | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/continuous-improvement/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-12-21T06:31:20+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 3]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-3/"/>
    <updated>2017-12-21T10:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-3</id>
    <content type="html"><![CDATA[<p>This is the third post of a <a href="/blog/categories/zero-bugs-series/">series about the #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">first 2 posts</a>, I detailed how we applied it in our team, and what were the consequences.</p>

<p>I hope that by now, I have convinced you that applying a <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> policy is good for you and your team. I&rsquo;ll surprise you by arguing that it&rsquo;s a lot easier than people first think. This post will be about how to inject it in your team.</p>

<p><img src="../imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-3/zero-bug-formula.jpg" alt="A funny formula for zero bugs" /></p>

<h2>Build quality in</h2>

<p>Obviously, you need a low bug rate for this work. If your team creates too many bugs, fixing incoming bugs only will consume all your time. You won&rsquo;t be able to deliver new features and it will make everyone miserable.</p>

<p>If you are in this situation, I&rsquo;d advice you to start investing in coding best practices such as :</p>

<ul>
<li><a href="https://www.google.fr/search?q=how+to+start+Continuous+Integration&amp;oq=how+to+start+Continuous+Integration">Continuous Integration</a></li>
<li><a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">Test Driven Development</a></li>
<li><a href="/how-to-get-your-team-to-do-code-reviews/">Code reviews</a></li>
<li><a href="/from-zero-to-pair-programming-hero/">Pair programming</a></li>
<li><a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">Refactoring</a></li>
</ul>


<p>With grit and time, your bug rate will get down.</p>

<h2>New bugs</h2>

<p>Before dealing with the old bugs, you should first put in place the target policy for new bugs. Don&rsquo;t let the situation get worse !</p>

<p>The way to deal with new bugs is to setup a regular (at least weekly) routine to decide what to do about them :</p>

<ul>
<li>If it&rsquo;s causing real pain to someone and needs a fix as soon as possible, then it&rsquo;s very likely to be a bug</li>
<li>If it&rsquo;s something important you can still live without for a few sprints, change it to a story in the backlog.</li>
<li>If it&rsquo;s not that important now, delete or archive it as &ldquo;won&rsquo;t fix&rdquo;</li>
</ul>


<p>From then on, the new convention is fix all bugs before working on features. This ensures that the bugs backlog will not grow anymore. If you need more details about how to categorize issues, take a look at what <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">Sam Hatoum says about that</a>.</p>

<p>Different people will provide different perspectives on issues. Business people will know their business value. Developers will know fix&rsquo;s impact on technical debt. Finally, service desk people will know how much time they would save with the fix. Depending on your situation, involve the right people in the classification.</p>

<p>Another approach is to do as we did, and come up with clear rules that define what a bug is. This has the advantage of allowing developers to categorize issues on their own. The drawback is that it can be very tricky to come up with these rules.</p>

<blockquote><p>ðŸ’¡ Agree on rules for categorizing bugs with your users to streamline your flow</p></blockquote>

<h2>Old bugs</h2>

<p>Ok, that was the easy part. How can we deal with the zillions bugs we all have waiting in the backlog ? Depending on the size of your bug backlog, you should adopt different strategies.</p>

<p>If you have a rather small bug debt, as we did, you can get away by prioritizing X bugs every sprint.</p>

<p>Let&rsquo;s suppose you have a larger bug debt. You could do as <a href="https://medium.com/swlh/how-we-got-to-zero-bugs-and-implemented-a-zero-bug-policy-c77ee3f2e50b">ConceptShare did</a> and crank out a feature team dedicated to eliminate bugs. That should work, but it will take some time. It took the ConceptShare teams 18 months to get rid of a 350 bugs backlog !</p>

<p>It&rsquo;s a good idea to take a look at all existing bugs to re-classify some as stories and delete others. Just as you should now be doing with new bugs. This should drastically reduce the number of bugs, but it will take some time from very busy people &hellip; Again, rules to define what a bug is would make this easier.</p>

<p>Finally, there&rsquo;s a last, very effective solution : archive all the bugs ! Some bugs must be months if not years old. Deleting them should not do much harm. Users will report important bugs again anyway. One caveat though : this won&rsquo;t work if your bug rate is too high ! If quality is too low, you&rsquo;ll drawn under old bug.</p>

<h2>Going further</h2>

<p><a href="https://www.amazon.com/Explore-Increase-Confidence-Exploratory-Testing/dp/1937785025/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511346285&amp;sr=1-1&amp;keywords=explore+it"><img src="../imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-3/explore-it.jpg" alt="Cover of the book &quot;Explore It&quot;" /></a></p>

<p>It&rsquo;s great to fix the bugs very fast. It&rsquo;s even better if to fix them before the users see them ! <a href="https://en.wikipedia.org/wiki/Exploratory_testing">Exploratory testing</a> is the way to do that. It will also provide you a measure of how many bugs escape your development process. I encourage you to try this very interesting practice. I wrote <a href="/how-we-started-exploratory-testing/">a guide</a> about how to start exploratory testing.</p>

<blockquote><p>ðŸ’¡ Exploratory Testing gives you a quantifiable measure of your workflow</p></blockquote>

<h2>Next week</h2>

<p>This was part 3 of a <a href="/blog/categories/zero-bugs-series/">series of posts about the #ZeroBugs policy</a>. In next week&rsquo;s post (<a href="https://feedburner.google.com/fb/a/mailverify?uri=PhilippeBourgau&amp;loc=en_US">subscribe</a>), I&rsquo;ll provide arguments and advices to convince the people around you to give it a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 2]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-2/"/>
    <updated>2017-12-14T10:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-2</id>
    <content type="html"><![CDATA[<p>This is the second post of a <a href="/blog/categories/zero-bugs-series/">series about the #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">previous post</a>, I detailed what a <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> policy is and how we tried to apply it. I encourage you start <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">there</a>.</p>

<p>Here is a quick summary of where we stood. We had tried to apply a #ZeroBugs policy with exploratory testing. We had discovered a lot of bugs, and we had agreed to tackle them little by little. We hoped to finish in a few months.</p>

<p><img src="../imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-2/bug-panic.jpg" alt="The Bug Panic game" /></p>

<h2>The final bug rules</h2>

<p>At about the same time, we started an improvement kata to increase our productivity. I wrote in details about <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">the full story</a>, but to make it short, here is what we discovered :</p>

<ul>
<li>It would take us years, not months to fix all our bugs</li>
<li>Our definition for bugs was part of the problem</li>
</ul>


<p>After some experimentation, here is the bug definition we came up with :</p>

<ul>
<li>It corrupts data</li>
<li>It returns wrong results</li>
<li>It crashes with an unexpected error message</li>
</ul>


<p>It stopped scope creep by removing the subjective &ldquo;it used to work&rdquo; rule. This rule also sped up bug fixing a lot. We closed many bugs with descriptive error messages.</p>

<h2>Consequences</h2>

<p>Within 2 sprints, we reached a #ZeroBugs state. Backlog &lsquo;management&rsquo; was simpler as it did not contain bugs anymore. We were also spending less time fixing bugs and more building stories. Even as we resumed our intense exploratory testing sessions, our bug backlog did not grow.</p>

<p>After a while, we discovered other benefits to the #ZeroBugs policy.</p>

<p>Spending less time on bugs made our velocity more stable. Our product owner was happier to see us deliver new features more reliably. In the end, this improved our relationship with him.Â </p>

<blockquote><p>ðŸ’¡ #ZeroBugs policy makes developers happier</p></blockquote>

<p>It also made the team happier. First, because we had a lot less of stressful emergencies to answer to. Second, because programming new features is more interesting than fixing bugs.</p>

<p><img src="../imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-2/happy-developer.jpg" alt="A relaxed developer" /></p>

<p>It also made the other teams happier and more productive ! They encountered a lot less bugs when using our product. When they had problems, they usually got a clear error message. They would fix it on their side, or suggest us a new feature.</p>

<p>A #ZeroBugs policy and exploratory testing also have a side effect on technical debt ! Bugs tend to appear in the more brittle parts of the code. When fixing bugs, you took the opportunity to refactor technical debt at the same time.</p>

<blockquote><p>ðŸ’¡ #ZeroBugs policy reduces technical debt</p></blockquote>

<p>Finally, having a definition for bugs was very helpful. It allowed decentralized prioritization of bugs. The alternative to that is to have a domain expert available to sort bugs from stories. A decentralized rule prevents all sort of coordination and people issues. Our system was rather technical, which made it easy to define what a bug is. In other cases, it might be worth spending some time with the domain expert to define similar rules.</p>

<blockquote><p>&ldquo;Use decision rules to decentralize economic control.&rdquo; From <a href="https://www.amazon.com/Principles-Product-Development-Flow-Generation-ebook/dp/B007TKU0O0/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511344068&amp;sr=1-1&amp;keywords=reinertsen+flow">Principles of Product Development Flow</a> by <a href="http://reinertsenassociates.com/">Donald G. Reinertsen</a></p></blockquote>

<p>To summarize, sticking to #ZeroBugs is a win-win and sustainable situation for all.</p>

<h2>Next week</h2>

<p>This was part 2 of a <a href="/blog/categories/zero-bugs-series/">series of posts about the #ZeroBugs policy</a>. In <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-3/">next week&rsquo;s post</a>, I&rsquo;ll provide a step by step guide about how to inject a #ZeroBugs policy in your team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 1]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1/"/>
    <updated>2017-12-07T10:22:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1</id>
    <content type="html"><![CDATA[<p>Some teams spend 95% of their development time fixing bugs &hellip; An entrepreneur I worked with reported an even scarier story. He went bankrupt because bugs were taking <em>all</em> the development time. He had no time left for new features !</p>

<p>At the other end of the spectrum, some <a href="http://leanagilepartners.com/library/Vanschooenderwoert-EmbeddedNumbers.pdf">eXtreme Programming teams</a> reported bug rates as low as 1.5 per month !</p>

<blockquote><p>ðŸ’¡ Some XP teams reported bug rates as low as 1.5 per month !</p></blockquote>

<p>Wouldn&rsquo;t it be great for everyone if we had less bugs to fix ? Programmers would do more interesting work. Business people would get more valuable features. People would do less overtime. All this while users get a better product !</p>

<p><img src="../imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-1/aim-bug.jpg" alt="A bug in a viewfinder" /></p>

<p>Last year, in my team, we reached and maintained a #ZeroBugs state. Here is how we did it.</p>

<h2>What&rsquo;s the <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> policy</h2>

<p>Before we jump into our story, let&rsquo;s take a second to understand what this is all about.</p>

<p>Bugs waste time. They waste the time of users, who can&rsquo;t do what they need. They waste everyone&rsquo;s time with interruptions from unhappy user. They steal time from new features development. If you have a large number of known bugs, you&rsquo;ll also waste some time organizing them : eliminating duplicates, prioritizing them, ignoring others &hellip;</p>

<p>A #ZeroBugs policy is the convention of having no bugs in your backlog. This means that when someone finds a defect, it should be immediately :</p>

<ul>
<li>fixed before any other feature</li>
<li>prioritized as a new story</li>
<li>or ignored (for the moment)</li>
</ul>


<p>Obviously, the less bug you create the easier this will be.</p>

<h2>Our journey to a #ZeroBugs policy</h2>

<h3>Context</h3>

<p>We were an R&amp;D team, building a data management system. Our product was moving outside of pure research and development. Other teams were starting to use it and often reported bugs back to us.</p>

<p>We&rsquo;d first read about #ZeroBugs in <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1511342870&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art of Agile Software Development</a>. Given enough automated testing, XP teams could almost stop doing bug fixing !</p>

<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1511342870&amp;sr=8-1&amp;keywords=the+art+of+agile"><img src="../imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-1/art-of-agile.jpg" alt="Cover of the book &quot;The Art of Agile Software Development&quot;" /></a></p>

<p>As we had very solid automated testing in place, we decided to take the extra steps to save time on bug fixing.</p>

<h3>First attempt</h3>

<p>There is a straightforward way to install a #ZeroBugs policy. Make sure to have a customer or a Product Owner to prioritize defects as soon as they appear (check <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">this story</a> for an example).</p>

<p>Unfortunately, this would not work for us. Our Product Owner was great at providing us with a long term vision. He could not be available for day to day bug prioritization though.</p>

<p>Our first try was to propose a definition for bugs that we could use ourselves to classify them. We decided that something was a bug if either of the following was true :</p>

<ul>
<li>It corrupts data.</li>
<li>It returns wrong results. As we were building a data management system, this was rather easy to verify.</li>
<li>It used to work but is now broken</li>
</ul>


<p>Whenever we found an issue meeting any of these points, we would start working on it straightaway.</p>

<blockquote><p>ðŸ’¡ Exploratory testing goes hand in hand with #ZeroBugs policy</p></blockquote>

<p>To speed up downstream integration of our product by other teams, we also <a href="/how-we-started-exploratory-testing/">started Exploratory Testing</a>. <a href="https://en.wikipedia.org/wiki/Exploratory_testing">Exploratory testing</a> is a practice that goes hand in hand with a #ZeroBugs policy.</p>

<h3>Unearthing a bug debt</h3>

<p>During the first exploratory testing session, we found more than 10 bugs. We thought that with a bit of focus we could fix all lingering bugs in a few weeks max &hellip; After 2 other sessions and more than one sprint of intense bug fixing, we had even unearthed more bugs. We were wrong, this would take a lot more than a few weeks.</p>

<p>If we kept on our 1 hour exploratory testing sessions every sprint, we would fill our backlog with bugs. We would also be fixing bugs for a few months before we could tackle any new feature !</p>

<p>We agreed on the following strategy to fix all these bugs little by little :</p>

<ul>
<li>stop these intense exploratory testing sessions</li>
<li>do shorter exploratory testing sessions at the end of every story</li>
<li>fix 5 to 6 bugs every sprint</li>
</ul>


<p>We hoped to fix all our bugs in a few months.</p>

<h2>Next week</h2>

<p>That was the first part of <a href="/blog/categories/zero-bugs-series/">a series of posts about #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-2/">next post</a>, I&rsquo;ll explain how we dealt with this bug debt and dig into the consequences it had on our work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run your first improvement kata]]></title>
    <link href="http://philippe.bourgau.net/how-to-run-your-first-improvement-kata/"/>
    <updated>2017-10-03T06:37:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-run-your-first-improvement-kata</id>
    <content type="html"><![CDATA[<p>The <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> can solve problems that typical retrospectives fail to address. Although there is a halo of mystery around it, it&rsquo;s actually not that difficult to get started ! Here is a guide.</p>

<p>During the last few weeks, I&rsquo;ve been blogging about the improvement kata. You can read <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">the full story</a> of the first time we applied it in our team to gain 25% of productivity. If you are more interested by what it taught us, check this <a href="/lessons-learned-from-running-our-first-improvement-kata/">other post</a>.</p>

<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/cookbook.jpg" alt="Illustration of the improvement kata cookbook" /></p>

<h2>A 5 bullets summary</h2>

<p>Here is how I would explain what the improvement kata is :</p>

<ul>
<li>It&rsquo;s a continuous improvement technique. It relies on the scientific method to reach a target state.</li>
<li>It involves running experiments to know if your ideas are valid.</li>
<li>It can be long to run through, but it works on tricky situation where retrospectives don&rsquo;t.</li>
<li>It&rsquo;s 100% scientific. It uses data analysis and deduction. Not gut feeling and community best practices.</li>
<li>It can be part of the backlog, as any other item. It does not have to be a special event like retrospectives usually are.</li>
</ul>


<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/katapattern.jpg" alt="The main steps of the improvement kata" /></p>

<blockquote><p>ðŸ’¡ The improvement kata is 100% scientific, it uses data and deduction, not gut feeling and best practices</p></blockquote>

<h2>Let&rsquo;s give it a try !Â </h2>

<p>Is that enough for you to give it a try ? If so, great, read on ! If you need a bit more convincing, check the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">full story</a> of how we gained 25% of productivity with it.</p>

<p>Here is how to get started :</p>

<ol>
<li>The first thing is to read about it. If you have the time, <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1507005860&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a> is a good read. If you read French, the <a href="http://leanagilecamp.fr/index.html">&ldquo;Petit guide de management lean Ã  l'usage des Ã©quipes agiles&rdquo;</a> is a very pleasant and easy read. Finally if you want to cut it as short as possible, read the <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata website</a>.</li>
<li>Pick a topic to try it on. Best candidates are clear and important problems. They might have emerged out of a retrospective for example. The scope should be small enough not to get lost.</li>
<li>Once you&rsquo;ve identified a topic, someone or a pair should take ownership of the kata. It&rsquo;s very unlikely that you&rsquo;ll be able to do the full kata in one afternoon. Understanding happens when the brain is at rest, and experiments take time. The owners need to dedicate some time to follow up on the kata.</li>
<li><p>Repeatedly ask yourself the <a href="http://www-personal.umich.edu/~mrother/The_Coaching_Kata.html">coaching kata</a> questions. This will help you and your pair to stay on track.</p>

<ol>
<li>What&rsquo;s the target condition ? (Describe what are you trying to achieve)</li>
<li>What&rsquo;s the actual condition ? (Describe your current situation)</li>
<li>What obstacles do you think are preventing you from reaching the target condition ? Which one are you addressing now ? (Describe the first problem you are about to try to fix)</li>
<li>What is your next step ? What do you expect ? (Describe the experiment you are going to run to test a solution)</li>
<li>When can we go and see what we have learned from taking that step ? (Run the experiment and learn from the results. Decide on a process change or repeat from an earlier step)</li>
</ol>
</li>
<li><p>Going through the kata in pair is a great way to spread the practice within the team. At some point you might be able to run many improvement katas in parallel ! Just make sure not to walk on each other&rsquo;s toes &hellip;</p></li>
</ol>


<p>Expect the first time to be a bit rocky, and to feel lost from time to time &hellip;</p>

<h2>Start today !</h2>

<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/rocket-launch.jpg" alt="The main steps of the improvement kata" /></p>

<p>Many practices and techniques seem daunting at first. Remember the first time you wrote a test before the code. The first time you tried to program using only immutable data structures. Or the time you wrote your first &ldquo;hello world&rdquo; program !</p>

<blockquote><p>ðŸ’¡ We can learn anything on our own by just doing it</p></blockquote>

<p>The improvement kata is no different. Give it a go, and you&rsquo;ll learn a powerful technique.</p>

<p><em>Whether you have already used the kata, you plan to use it or you have questions about it, I&rsquo;d like to hear from you ! Leave a comment.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons learned from running our first improvement kata]]></title>
    <link href="http://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata/"/>
    <updated>2017-09-29T06:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata</id>
    <content type="html"><![CDATA[<p>During the past few weeks, I blogged the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">story of our first improvement kata</a>.</p>

<p>Doing this first <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> taught us many lessons. We re-discovered best practices of the software industry. We also learned more general things about the improvement kata itself.</p>

<p><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/lessons.jpg" alt="Drawing of books" /></p>

<h2>Rediscovered best practices</h2>

<p>As we went through the kata, we &lsquo;proved&rsquo; many known best practices. We did not have to <em>believe</em> them, we had data explaining that they worked. For example :</p>

<ul>
<li><a href="https://twitter.com/hashtag/noestimates">#NoEstimate</a> works. Back in <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">part 3</a> we saw that the story point and story count curves were very similar, almost identical</li>
<li><a href="https://www.infoq.com/articles/0-bugs-policy">#NoBug policy</a> was part of the solution to our problem</li>
<li>Doing more exploratory testing resulted in less bug fixing and increased our productivity. This proves principles like &ldquo;<a href="http://deming14points.com/quotes/build-quality-in/">Build quality in"</a> and <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">&ldquo;Quality is free&rdquo;</a></li>
</ul>


<p>We also pushed the #NoBug policy further than it is usually done. We defined a clear definition for bugs that anyone could use. Doing so, we removed the product owner (or on-site customer) from the picture. Very often, the PO is the only one who can sort stories from bugs out. We created what <a href="http://reinertsenassociates.com/category/tips/">Donald Reinertsen</a> calls a distributed rule in the <a href="https://www.amazon.fr/Principles-Product-Development-Flow-Generation/dp/1935401009">flow book</a>. It increased empowerment, removes bottlenecks, while ensuring alignment.</p>

<p><a href="https://www.amazon.fr/Principles-Product-Development-Flow-Generation/dp/1935401009"><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/flow-book-cover.jpg" alt="The 'Flow' book cover" /></a></p>

<h2>The improvement kata</h2>

<p>The first general lesson that we learned is that the improvement kata works !</p>

<p>At the beginning, we were very uneasy not to have perfect data. Remember how we had to resort to velocity as a proxy measure for productivity. In the end, that was not a severe problem. It still allowed us to understand what was going on.</p>

<p>We also learned that <a href="http://philippe.bourgau.net/blog/categories/retrospectives/">retrospective</a> is not the only road to continuous improvement. In fact, the improvement kata and retrospectives are very different :</p>

<ul>
<li>The time frame is different. A retrospective lasts for 1 or 2 hours and yield immediate results. An improvement kata is a background task that could take months in theory !</li>
<li>But the improvement kata also digs a lot deeper in the topic and brings true understanding. In our case, it fixed a problem that retrospectives where failing to address.</li>
<li>Ownership is also different. Retrospectives are a team activity. The improvement kata needs one or a few owners. It would be very difficult to align everyone on the same path of thoughts if we did it as a group activity.</li>
<li>Being a team activity, retrospectives have built-in alignment. The conclusions of the improvement kata must explained and agreed for a team to act on them. A good practice is to have regular (short) team meetings to share the current state of an improvement kata.</li>
<li>As the improvement kata is a more individual activity, it is more remote friendly. Team members can run the kata on their side, sharing everything through a wiki, or a blog for example.</li>
</ul>


<p>Keep in mind that this was our first try at the kata. Some of our difficulties might disappear with a bit of practice !</p>

<h2>What&rsquo;s next ?</h2>

<h3>Hybrid continuous improvement</h3>

<p>I clarified the differences between the improvement kata and retrospectives. That&rsquo;s not the end of it. I&rsquo;m sure a mixed format could be very interesting ! Start with a retrospective to collect the team&rsquo;s problems, and vote on the more important. Add a corresponding improvement kata task to the backlog. Someone would then handle this improvement task, sharing with the team along the way.</p>

<p>This might be a great opportunity to reduce meeting time with shorter retrospectives.</p>

<blockquote><p>ðŸ’¡ Reduce meeting time with mixed retrospective &amp; improvement kata</p></blockquote>

<h3>Data science for software</h3>

<p>Going through this improvement kata made me realize something else. It is very difficult to get quality data to investigate. We had to resort to what was available all the way.</p>

<p>What&rsquo;s striking is that we use software tool for all our work ! These tools have logs and could record usage data somewhere. Imagine all we could learn by mining all this data ! Our IDEs, CI servers, quality monitors, test tools, version control and project management tools should store everything we do at the same place !</p>

<p>With all this data, could we improve our estimations ? Could we find creative ways to be more productive ? Could we estimate the speed up that fixing some technical debt would bring ?</p>

<blockquote><p>ðŸ’¡ What are we waiting to apply data science to the development process ?</p></blockquote>

<p>As the saying goes, &ldquo;The cobbler&rsquo;s children go barefoot&rdquo;. We are building such systems for others, but not for ourselves.</p>

<p>Hopefully, new tools like <a href="https://codescene.io/">CodeScene</a> are emerging to fill this gap. You can learn more about CodeScene on their <a href="https://codescene.io/">website</a>, or from the <a href="https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384">founder&rsquo;s book</a>. It analyses the version control history to find hot spots and other things in your code.</p>

<p><a href="https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384"><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/code-as-crime-scene.jpg" alt="The 'Code as a Crime Scene' book cover" /></a></p>

<p>While we keep dreaming of such tool, I&rsquo;ll continue to blog. Next week, I will write a short guide of <a href="/how-to-run-your-first-improvement-kata/">how to run your first improvement kata</a>.</p>
]]></content>
  </entry>
  
</feed>
