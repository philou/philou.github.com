<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous improvement | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/continuous-improvement/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-06-08T07:00:43+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Most Scrum teams are not agile]]></title>
    <link href="http://philippe.bourgau.net/most-scrum-teams-are-not-agile/"/>
    <updated>2017-05-09T06:36:00+02:00</updated>
    <id>http://philippe.bourgau.net/most-scrum-teams-are-not-agile</id>
    <content type="html"><![CDATA[<p>Being agile is about adapting to change and continuously improving. I&rsquo;ve seen (and been) in too many teams blindly following Scrum (<a href="/how-to-kill-scrum-zombies/">Scrum Zombies</a>) without figuring out how to continuous improve. The most obvious symptom is a boring (or no) retrospective.</p>

<p>Usually, it did not start that way, people had good intentions, and tried to follow the Scrum cookbook. Unfortunately, without any guidance or extreme perseverance, it is plain too easy to mess up the retrospective. If no concrete actions are scheduled at the end of the retro, if the same problems keep coming up at every retro, or if no problems at all are raised during the retro : your Scrum is somehow broken !</p>

<p>One of the promises of Scrum is to keep code quality high, in order to be able to adapt to late changes. Without a good retro to update the coding standards, the working agreements, or to spot and organize large scale refactoring, this will not happen.</p>

<p>One of the agile principle <a href="http://agilemanifesto.org/principles.html">explicitly states</a> the need for motivated team members. In <a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1494561757&amp;sr=8-1&amp;keywords=pink+drive">Drive</a> Daniel Pink explains that one of the ingredient for motivation is autonomy. As a way to fix recurring problems, effective retrospectives will create autonomy, and enable motivation. Dysfunctional retros will slowly kill both &hellip;</p>

<p>Although continuous improvement at all levels is one of the most important element in your process, it needs a bit of practice to setup right. After trying different approach in different teams, I compiled a list of the things that worked for me :</p>

<p><a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1494561757&amp;sr=8-1&amp;keywords=pink+drive"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/drive.jpg" alt="The cover of the Daniel Pink's &quot;Drive&quot; book" /></a></p>

<h2>How to do successful retrospectives</h2>

<h3>Start !</h3>

<p>Sounds obvious ! The first step is to schedule a recurring meeting and invite all the team. Someone should take care of facilitating. If you want to improve things, do this yourself at the beginning ! Once the practice is in place and everyone sees the benefits, you&rsquo;ll be able to get some help.</p>

<p><a href="/how-we-introduced-efficient-agile-retrospectives/">Here</a> is a crash-course about how to organize and drive your first retrospective. If your team is distributed, you&rsquo;ll need a slightly different setup. In my previous team, we had success using <a href="https://trello.com">Trello</a>, you can read more about it <a href="/trellospectives-remote-retrospectives-with-trello/">here</a>.</p>

<p><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/just-do-it.jpg" alt="Just Do It picture" /></p>

<h3>Make sure everyone talks</h3>

<p>Retros should not be &ldquo;just-another-boring-meeting&rdquo; ! People should be excited to be there and to solve their recurring problems. I&rsquo;ve seen retros where no one would speak, as if there was absolutely nothing to improve ! I&rsquo;ve also been in retros where people raised collaboration issues, and came up with drastic improvements to the way they work, like adopting pair-programming for example.</p>

<p>There can be many reason why people don&rsquo;t speak : habit, organizational culture &hellip; Whatever the cause, if you show them the path, if you demonstrate that retro work and that it is safe to speak, you&rsquo;ll get them to participate.</p>

<p>Here are a few tricks to guide a team there :</p>

<ul>
<li>It is said that if someone does not speak in the first 5 minutes of a meeting, he&rsquo;ll remain silent for the rest. That&rsquo;s why <a href="www.funretrospectives.com/category/energizer/">energizers</a> work. They force everyone to participate to a Fun activity right from the start. <a href="http://www.funretrospectives.com/">Fun Retrospective</a> contains a lot of engaging energizers.</li>
<li>Bring food ! Having food at work was one of Kent Beck&rsquo;s main advises in <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1494561932&amp;sr=1-2&amp;keywords=extreme+programming+explained+embrace+change">eXtreme Programming, Embrace Change</a>. Food is social and create a more relaxed and safer atmosphere.</li>
<li>Before you start the meeting, it might be useful to repeat the <a href="http://www.retrospectives.com/pages/retroPrimeDirective.html">Retrospective&rsquo;s Prime Directive</a>.</li>
</ul>


<blockquote><p>Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.</p></blockquote>

<ul>
<li>As the animator, you should make sure the discussions don&rsquo;t degenerate into some kind of trolling or blaming. If it&rsquo;s the case, remind that this is not the way the retro is meant to work. In worst case, give a 5 minutes break to everyone to calm down.</li>
<li>If needed, have a private discussion with people outside the retro to make sure that they understand the &ldquo;Blame the process, not the people&rdquo; principle of the retro well enough.</li>
</ul>


<p>Dealing with &ldquo;bad&rdquo; behavior in retros is a wide topic which I am only scratching the surface here. I guess I could write a full post about it.</p>

<p><a href="http://www.funretrospectives.com/"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/fun-retro.jpeg" alt="The cover of the &quot;Fun Retrospectives&quot; book" /></a></p>

<h3>Get out of with actionable tasks</h3>

<p>If you want a sure way to screw up your retros here it is : end the first one with no actionable things to do ! People will learn that it&rsquo;s a useless pscho-blabla meeting for agile softies.</p>

<p>This should be the absolute priority during the first retros. There are various kind of actionable tasks. Teams can adopt new conventions, decide to tackle some specific refactoring, or build a small new tool &hellip;</p>

<p>Actionable items should be small enough to be completed in one sprint. This is fine for refactoring a class, adding a <a href="https://www.sonarqube.org/">SonarQube</a> rule or asking for something from another team. What about larger tasks ? Suppose you just identified a large refactoring to do, how do you get started ? I know 2 strategies for that :</p>

<ul>
<li>Only identify the first step of what you want to start. At least, that&rsquo;s enough to get started and learn what to do later.</li>
<li>Agree on a <a href="https://mikadomethod.wordpress.com/">Mikado</a> discovery task to understand what needs to be done. Code is not the only thing that can be refactored with the Mikado method ! People have used it to transform <a href="http://nomad8.com/organisational-change-with-mikado/">organizations</a> !</li>
</ul>


<p>It&rsquo;s also a good habit to book the rooms for extra time after the official retro time. Nothing is as frustrating as being interrupted while investigating a promising improvement !</p>

<p>Finally, I think it&rsquo;s a good practice to review what happened of the improvements that were selected during last retro. It stresses the importance of doing what was scheduled in retrospective. It also gives a chance to investigate the reason why they were not done !</p>

<p><a href="https://www.amazon.com/Mikado-Method-Ola-Ellnestam/dp/1617291218/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1494562230&amp;sr=1-1&amp;keywords=mikado+method"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/mikado-method.jpg" alt="The cover of the &quot;Mikado Method&quot; book" /></a></p>

<h3>Put them in the sprint</h3>

<p>When actions are selected in the retro, you should add them to the coming sprint before it starts. Obviously, you&rsquo;ll add non business related items in your sprint backlog. Whatever you might have hear from agile zealots, do it ! Process improvements are fist class backlog citizens, just don&rsquo;t discuss them with your <a href="https://www.scrum.org/resources/blog/who-professional-scrum-product-owner">product owner</a>.</p>

<p>If you want a chance to deliver what you committed to in your sprint backlog, you&rsquo;ll need bandwidth for that ! They are many ways to do get that. Some teams use <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a>, others reserve an &lsquo;improvement day&rsquo; every sprint. My personal favorite (and the one we&rsquo;ve been doing at work) is to estimate the improvements in story points and reserve a fraction (ex 20%) of your story points for improvements.</p>

<p>You can try to negotiate your improvement ratio with your product owner &hellip; or you might also just set it yourself ! The team is responsible for the quality of its work. Better be sorry than ineffective. If you stick to your ratio and only work on the most important improvements, it&rsquo;s usually pretty easy to justify working on them. Plus if you manage to go under the radar for a few sprints, the results of the improvements should speak by themselves.</p>

<h3>Do them as soon as the sprint starts</h3>

<p>One last thing. Start to work on your improvements as soon as the sprint starts.</p>

<p>Improvements are similar to investments : you invest in process, tools or code in exchange for more value creation downstream. Once you&rsquo;ve decided to invest in something, what&rsquo;s the point of waiting 1 week ? Plus if you wait for later in the sprint, you run the risk of having unfinished improvements at the next retro, which might interfere when prioritizing new ones.</p>

<h2>Continuously improving teams</h2>

<p>Being part of a continuously improving team is easier to live than to describe. It feels like the future is bright. Once a team has mastered continuous improvement, people can be optimistic that they&rsquo;ll manage to adapt to change later down the road :</p>

<ul>
<li>They could switch gears and go full speed on a particular re-architecture</li>
<li>They could change their working agreements to adapt to new constraints</li>
<li>They could re-focus their efforts to handle a maintenance pike</li>
</ul>


<p>At the end of the day, bottom-up continuous improvement makes everyone&rsquo;s lives easier. Developers experience more autonomy while improving their productivity, they can do good work (which also means spending less time bug-fixing). Product owners learn that they can trust the team to do their best. Sponsors get more value for their money.</p>

<blockquote><p>Agile teams bend so they don&rsquo;t break !</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get your team to do code reviews]]></title>
    <link href="http://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/"/>
    <updated>2017-04-19T09:18:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews</id>
    <content type="html"><![CDATA[<p>As software developers, we very <del>always</del> often get to work in code bases that are not perfect. In this situation we have 3 choices : leave, grumble, or make some changes ! Team wide code reviews are a recognized way to increase the quality of the code.</p>

<p>Unfortunately, installing code reviews as part of the daily work habits of a team can be very challenging. When I joined my team 3 years ago, no one was doing any kind of code reviews. With a small push here and there, I managed to get the team to adhere to a strict 4 eyes principle (full story <a href="/from-zero-to-pair-programming-hero/">here</a>).</p>

<p>Here are a few strategies that I have either used or seen that should get your team mates to do code reviews.</p>

<h2>Overall principle</h2>

<p>Even if you are at the bottom of the org chart, you have far more influence than you would first think. My favorite way of bringing change is to demonstrate a valuable practice :</p>

<ul>
<li>First, you need to be trustworthy</li>
<li>Then, do the practice you want to introduce</li>
<li>Make sure it is seen as valuable</li>
<li>Be ready to forgo the credits of the introduction of the practice</li>
<li>Keep on until people start to copy what you are doing</li>
</ul>


<p>As <a href="http://quoteinvestigator.com/2010/12/21/doing-good-selfless/">someone famous</a> said</p>

<blockquote><p>A man may do an immense deal of good, if he does not care who gets the credit</p></blockquote>

<p>I won&rsquo;t go in the details about how to be trustworthy, which could be a post of its own. Basically, putting our customers interests first, speaking the truth and avoiding to appear dogmatic can get us a long way already. <a href="https://www.amazon.fr/dp/B0050JLC9Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">The Clean Coder</a> is an excellent read on the subject.</p>

<p><a href="https://www.amazon.fr/dp/B0050JLC9Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1"><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/clean-coder.jpg" alt="Front cover of the Clean Coder book" /></a></p>

<h2>Strategies</h2>

<h3>If you have retrospectives in place</h3>

<p>In this case, you already have a place and time dedicated to discussing changes to your working agreements. Expressing your concerns about code quality (or another problem related to code reviews) and suggesting code reviews as a way to fix that problem might get a quick team buy-in.</p>

<p>If you don&rsquo;t manage to get a definitive buy-in, try to get the team to &lsquo;beta-test&rsquo; code reviews for a while. If the experiment demonstrates value, it will convert into a full fledged working agreement.</p>

<h3>If you practice collective code ownership</h3>

<p>Unfortunately, if you don&rsquo;t have retrospectives in place, or if you did not manage to get your team to discuss code reviews in retrospectives, yo&rsquo;ll need to find another way to introduce them.</p>

<p>If you have collective code ownership, it should be ok to comment on your team mates code (if not, jump directly to the next strategy). In this setting, just start to do some code reviews for others ! Make sure your reviews are helpful and &lsquo;nice&rsquo;.</p>

<p>You&rsquo;ll need to stick to doing code reviews long enough before people actually start to mimic you. Reserve some time in your daily agenda for code reviews. Your goal is to win over people, so it might be a good idea to start with a selected few at the beginning, preferably people who are more likely to jump in. If asynchronous (tool based) reviews don&rsquo;t get answered, be ready to fallback to face to face discussions : review on your own, then just ask the author for a few minutes so that you can discuss his change. When you feel someone is interested by your reviews, ask him to review your own code in return.</p>

<p>Remember to always try to get some feedback : ask people what they think of the exercise, keep note of the good points, and adapt to smooth out the rest.</p>

<p><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/collective.jpg" alt="Illustration of a team working collectively" /><div class="image-credits">Photo from <a href="https://www.emotuit.com/blog">emotuit</a></div></p>

<p>Once you won over your first team mate, involve him in your grand plan to spread the practice, explaining how much you think this could make a difference. As more and more people get convinced, the practice will eventually tacitly become part of your working conventions.</p>

<p>Depending on your context, this might take more or less time. I said it was possible, I never said it would be easy ! Grit, patience and adaptation are key here.</p>

<h3>Otherwise</h3>

<p>This is the worst starting point, basically, you have nothing yet. The strategy is very similar to the one with collective code ownership, with a different first move.</p>

<p>Instead of providing code reviews to your team mates, start by walking over to them to ask for a face to face code review of your own commits. Use the same tactic as stated before : stick to the same people at first. Once the practice starts to stick within this group, bring in a basic tool to ease up the process.</p>

<p>At some point, you should be asked to review others code, that&rsquo;s a good sign ! If not, try again with other people.</p>

<p>Continue using the same strategy as with collective code ownership and you should eventually get there !</p>

<h3>When it does not seem to stick</h3>

<p>There could be many reason why the practice is not adopted. The key for you is to understand why and to adapt your strategy. The reason is often that the perceived value is not big enough, for example :</p>

<ul>
<li>the team is not aware of its problems that reviews would fix : try to make them more visible</li>
<li>reviews are seen as too expensive or painful : try better tools or taking more on yourself</li>
<li>the team has bigger problems to fix first : spend your energy on these first !</li>
<li>reviews just don&rsquo;t work in your context (ex: your job is to write one time, throw away code) : it&rsquo;s up to you to stay or leave !</li>
</ul>


<h2>Tools</h2>

<p>There are a ton of tools and best practices to run code reviews. It&rsquo;s important that you know them, so that you know where you are going.</p>

<p>Don&rsquo;t expect to use the best tools from the start though. At the beginning, your goal is to win over your team mates. In this context, only 2 things matter :</p>

<ul>
<li>It should have almost no adoption curve, so that others start using it</li>
<li>It should have almost no maintenance cost, as you don&rsquo;t want to spend your time doing that</li>
</ul>


<p>That&rsquo;s why at the beginning, low tech tools are so great. Spending a month setting up a top notch code review system before the first review won&rsquo;t work. If your VCS has code reviews built-in, by all means use it ! Otherwise, diff in mails and face to face conversations are a good starting point. You&rsquo;ll later hook something in your VCS to automatically send mails with commit diffs &hellip;</p>

<p>As people gradually get convinced of the value of code reviews, regularly meet and discuss a better setup. This is how you&rsquo;ll introduce state of the art tools and agree on refinements such as pre or post commit reviews.</p>

<h3>Best practices</h3>

<p>As a code review champion, it&rsquo;s very important that you provide great reviews to your team mates. You must become the local expert on the subject ! You don&rsquo;t want all your efforts to be ruined because one of your reviews has been perceived as aggressive.</p>

<p><a href="https://static.rainfocus.com/oracle/oow16/sess/1473264722807001CoS2/ppt/code-reviews-vs-pull-requests.pdf"><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/atlassian.jpg" alt="A slide from Atlassian presentation about styles of code reviews" /></a></p>

<p>There is a ton of resources on the internet about how to perform good code reviews, here are a few :</p>

<ul>
<li><a href="https://twitter.com/mariakhalusova">Maria Khalusova</a>&rsquo;s talk at Devoxx 2016 <a href="https://www.youtube.com/watch?v=-tcy4z0hszg">How to stop wasting your time and start performing useful code reviews</a></li>
<li><a href="https://medium.com/@kannonboy/">Tim Pettersen</a> from <a href="https://www.atlassian.com">Atlassian</a> talked about <a href="https://static.rainfocus.com/oracle/oow16/sess/1473264722807001CoS2/ppt/code-reviews-vs-pull-requests.pdf">Code Reviews vs Pull Request</a> at JavaOne 2016</li>
<li><a href="http://marcotroisi.com/">Marco Troisi</a> wrote an extensive blog post about <a href="http://marcotroisi.com/how-run-code-reviews-in-your-workflow/">How to run code reviews in your dev team&rsquo;s workflow</a></li>
<li><a href="https://medium.com/@mrjoelkemp">Joel Kemp</a>&rsquo;s post <a href="https://medium.com/@mrjoelkemp/giving-better-code-reviews-16109e0fdd36">Giving better code reviews</a></li>
<li>Gareth Wilson&rsquo;s post <a href="https://blog.fogcreek.com/effective-code-reviews-9-tips-from-a-converted-skeptic/">Effective Code Reviews – 9 Tips from a Converted Skeptic</a></li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p>Congratulations ! Your team will start to reap the benefits of code reviews. Keep on improving the practice !</p>

<p>To end the story, after a few months of code reviews, during a retrospective, my team (<a href="http://www.murex.com/">at work</a>) decided to take it one step further and started to do almost full time pair programming ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trello Templates to Boost Your Remote Retrospectives]]></title>
    <link href="http://philippe.bourgau.net/trello-templates-to-boost-your-remote-retrospectives/"/>
    <updated>2016-04-11T20:31:00+02:00</updated>
    <id>http://philippe.bourgau.net/trello-templates-to-boost-your-remote-retrospectives</id>
    <content type="html"><![CDATA[<p>I already wrote how we started to use <a href="http://trello.com">Trello</a> to do our <a href="/trellospectives-remote-retrospectives-with-trello/">remote retrospectives</a>. A while ago, my team mate <a href="http://bilal.eltayara.net/blog/2015/09/20/agile-retrospectives-using-trello/">Bilal Tayara</a> started to collect our activities into <a href="https://trello.com/agileretrospectives">trello templates</a>.</p>

<p>{% img center /imgs/2016-04-11-trello-templates-to-boost-your-remote-retrospectives/retrospective_meetings.jpg &lsquo;Stop Doing&rsquo;, &lsquo;Continue Doing&rsquo; &amp; &lsquo;Start doing&rsquo; panels of a retrospective activity %}</p>

<h2>New activities</h2>

<p>I just imported new activities we have been using in the past months :</p>

<ul>
<li>SMART Goals</li>
<li>5 Whys</li>
<li>Circle of Questions</li>
<li>Communication</li>
<li>Engagement</li>
<li>ESVP</li>
<li>Fishbone</li>
<li>Focus On/Focus Off</li>
<li>Force Field Analysis</li>
<li>Gifts</li>
<li>Glad Sad Mad</li>
<li>Health Radar</li>
<li>HHH</li>
<li>Hot Air Balloon</li>
<li>How are you feeling today ?</li>
<li>Improvements Brainstorming</li>
<li>Learning Matrix</li>
<li>Note To Self</li>
<li>Plus / Delta</li>
<li>Problem &ndash;> Action</li>
<li>Punctual Paulo</li>
<li>Retrospective Planning Game</li>
<li>Risk Brainstorming</li>
<li>ROTI</li>
<li>Sail Boat</li>
<li>Satisfaction Histogram</li>
<li>Take Away</li>
<li>Team</li>
<li>Team Radar</li>
<li>Warmup Question</li>
<li>What happened since last retro ?</li>
</ul>


<h2>How to use these templates</h2>

<p>Clone the template to your organization every time you want to use it. There are instructions in the template to explain how to use it. For more detailed instructions, have a look at the original :</p>

<ul>
<li><a href="https://pragprog.com/book/dlret/agile-retrospectives">Agile Retrospectives, Making Good Teams Great</a> by Esther Derby and Diana Larsen, Foreword by Ken Schwaber</li>
</ul>


<p><a href="https://pragprog.com/book/dlret/agile-retrospectives">{% img center /imgs/2016-04-11-trello-templates-to-boost-your-remote-retrospectives/AgileRetrospectives.jpg The cover of Agile Retrospectives %}</a></p>

<ul>
<li><a href="http://www.infoq.com/minibooks/agile-retrospectives-value">Getting Value out of Agile Retrospectives, Second Edition</a> by Luis Gonçalves and Ben Linders</li>
</ul>


<p><a href="http://www.infoq.com/minibooks/agile-retrospectives-value">{% img center /imgs/2016-04-11-trello-templates-to-boost-your-remote-retrospectives/GettingAgileOutOfAgileRetrospectives.jpg The cover of Getting Agile Out Of Agile Retrospectives %}</a></p>

<ul>
<li><a href="https://leanpub.com/funretrospectives">Fun Retrospectives</a> by Taina Caetano and Paulo Caroli</li>
</ul>


<p><a href="https://leanpub.com/funretrospectives">{% img center /imgs/2016-04-11-trello-templates-to-boost-your-remote-retrospectives/FunRetrospectives.jpg The cover of Fun Retrospectives %}</a></p>

<p>One last thing : in order to improve this collection, we&rsquo;d like to have your feedback on existing activities, or your own new templates for other activities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are Most Agile Teams Doing Continuous Improvement The Silly Way ?]]></title>
    <link href="http://philippe.bourgau.net/are-most-agile-teams-doing-continuous-improvement-the-silly-way/"/>
    <updated>2016-03-06T07:33:00+01:00</updated>
    <id>http://philippe.bourgau.net/are-most-agile-teams-doing-continuous-improvement-the-silly-way</id>
    <content type="html"><![CDATA[<p>A few weeks ago, as I was looking the internet for Lean principles to improve our way of working, I fell upon this book <a href="leanagilecamp.fr">Petit guide de management lean a l'usage des équipes agiles</a> (NB: the book is in French, the title means &lsquo;Little lean management guide at the usage of agile teams&rsquo;). It made me think and I thought it deserved a blog post.</p>

<p><a href="http://leanagilecamp.fr">{% img center /imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/cover.svg The book cover %}</a></p>

<p>It explains that agility can be though of as a set of practices and principles, shared through a huge community. This makes it a great production system, where improvement are mostly brought by gut feeling retrospectives and trial of other teams practices. At the contrary, Lean is very light framework for continuous improvement, relying on a more systematic waste elimination.</p>

<p>After this introduction, the bulk of the book is composed of a set of 9 detailed real life stories demonstrating the lean way of bringing improvements. Are is a summary of 3 of these :</p>

<h2><a href="http://leanagilecamp.fr/guide.html#sc%C3%A8ne-de-crime-la-cat%C3%A9gorie-myst%C3%A8re-du-projet-condor">Unknown Category at Project Condor</a></h2>

<p>{% img center /imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/condor.jpg Issue indicators %}</p>

<p>The team maintains a virtual call center of poor quality, resulting in lots of incidents in production. Here is how they deal with the situation :</p>

<ol>
<li>They start by showing the issues, by categorizing them from the logs, they discover that they are mainly related to training, network, but surprisingly, the majority (30%) cannot be categorized and fall in the &lsquo;unknown&rsquo; category.</li>
<li>By improving logging, the unknown category falls to 5% ! Fixing network timeout issues then makes the client a lot happier.</li>
<li><p>Eventually, they go to client&rsquo;s site while monitoring the logs at the same time. They discover that remaining issues are explained by</p>

<ul>
<li>some users are using a double click to hack the system and jump ahead of the queue</li>
<li>the hang up and hang off buttons being too close, which results in operator misleadingly ending their communication</li>
<li>calls to wrong numbers being logged as incidents</li>
</ul>
</li>
</ol>


<p>The authors conclude that while uncomfortable, going to the clients increased motivation for everyone, fixed issues and made the client happier.</p>

<h2><a href="http://leanagilecamp.fr/guide.html#sc%C3%A8ne-de-crime-tous-coupables">All Guilty !</a></h2>

<p>An author is called to help a team which is working on unifying reimbursement systems after a merge. The project is late and the product is unreliable.</p>

<p>The first step he takes is to visualize a target (next batch in 3 months) and the flow</p>

<p>{% img center /imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/target.jpg Details of the 3 months target %}</p>

<p>The flow whiteboard shows that tasks get stuck when in need of clarifications from business analysts. Tension between people is already increasing. They Team decides to visualize this with &lsquo;blocker&rsquo; post-its.</p>

<p>After an inquire with the BAs, it turns out that they don&rsquo;t see the waiting tasks the issue management software.</p>

<p>The final step is to agree all together (developers and BAs) on an uniform way of defining and following blocking issues</p>

<p>{% img center /imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/blockers.jpg The shared blocked issues follow up wall board %}</p>

<p>Tickets are discussed at the stand-up, and unblocked issues are also visualized. As a result in only 2 weeks, the process fluidifies, and the tensions decrease.</p>

<p>The authors conclude that cross functional teams work better</p>

<h2><a href="http://leanagilecamp.fr/guide.html#sc%C3%A8ne-de-crime-joue-la-courte-et-pr%C3%A9cise">PDCA</a></h2>

<p>This story starts in a rather typical way : the client would like the team to go faster.</p>

<p>The team engages into a series of <a href="https://en.wikipedia.org/wiki/PDCA">Plan Do Check Act</a> cycles.</p>

<h3>Hypothesis 1 : There must be some obvious waste</h3>

<p>The team decides to log any waste occurring for 2 weeks. Even with discipline, only 2 hours are spotted during the 60 man.days of the sprint</p>

<h3>Hypothesis 2 : Too much refactoring or too much test writing</h3>

<p>For a few weeks, the authors keeps a daily log of the team activities during after every stand-up meeting.</p>

<p>It turns out that writing tests accounts for 5,5% of the time, refactoring for only 2% but programming for 40% !</p>

<h3>Hypothesis 3 : if there is something to improve, it must be in programming.</h3>

<p>For 20 half days, the author embarks on the tedious task of keeping a very detailed log of activities while taking the role of <a href="https://en.wikipedia.org/wiki/Pair_programming#Remote_pair_programming">navigator</a> in pair programming sessions.</p>

<p>{% img center /imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/log.jpg The detailed log of programming activities %}
{% img center /imgs/2016-03-06-are-most-agile-teams-doing-continuous-improvement-the-silly-way/activities.jpg Ratio of different programming activities %}</p>

<p>They clearly understand that most time is taken not in writing tests, doing refactoring or writing complicated code, but in understanding existing code, third-parties and APIs</p>

<h3>Aftermath</h3>

<p>First, they avoided loosing time on improving the wrong thing
The team also agreed on the practice of asking for help at the good person when starting stories. Doing that, they got a nearly 100% speed boost !</p>

<h2>The rest of the book</h2>

<p>The book highlights a lot of other continuous improvement practices. For example :</p>

<ul>
<li>The &lsquo;problem box&rsquo; where team members can log any waste they are going through during their work. This made me think of my <a href="/a-plan-for-technical-debt-lean-software-development-part-7/">Plan For Technical Debt</a></li>
<li>Individual improvement follow up : a single team member is responsible to drive an improvement to its conclusion, in order to make sure that it is not forgotten</li>
</ul>


<p>I personally found this book to be just great ! It&rsquo;s short and focused, pragmatic, and a pretty easy read. If you liked <a href="http://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2">Scrum and XP from the trenches</a> I think you should read it. More generally, I think it&rsquo;s very useful for anyone involved in the development process who would like to push agility a little further.</p>

<p>There&rsquo;s a catch though, it&rsquo;s in french ! I guess I could take the time to translate it, tell me if you are interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trellospectives : Remote Retrospectives with Trello]]></title>
    <link href="http://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello/"/>
    <updated>2015-04-05T06:18:00+02:00</updated>
    <id>http://philippe.bourgau.net/trellospectives-remote-retrospectives-with-trello</id>
    <content type="html"><![CDATA[<p>As a distributed team working from Paris and Beirut, after <a href="/from-zero-to-pair-programming-hero/">pair programming</a>, it was time for our retrospectives to get remote !</p>

<p><a href="/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/setup.jpg">{% img center /imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/setup-small.jpg A remote retrospective meeting with Trello setup%}</a></p>

<h2>Initial setup</h2>

<p>At first we were using the visio conference system. The retrospective facilitator would connect with the remote participants through instant chat and forward theirs post-its. We also used an extra webcam connected to the laptop in order to show the whiteboard in the other room.</p>

<h4>Pros</h4>

<ul>
<li>Anyone can do it now</li>
<li>Kind of works</li>
</ul>


<h4>Cons</h4>

<ul>
<li>We often used to loose 5 minutes setting all the infrastructure up</li>
<li>The remote room cannot see the board clearly through the webcam</li>
<li>The animator has to spend his time forwarding the other room&rsquo;s points</li>
<li>There is a &lsquo;master&rsquo; and a &lsquo;slave&rsquo; room</li>
</ul>


<h2>Sensei Tool</h2>

<p>When Mohamad joined the team in Beirut, we thought that this was not going to scale &hellip; We decided to try something else. With the availability of the new conferencing system, we had the idea to use a web tool to run the retro. We found and tried <a href="http://senseitool.com/">senseitool.com</a>. After creating accounts for every member of the team and scheduling a retrospective through the tool, we could all equally participate using our smartphones. The retrospective follows a typical workflow that is fine for teams new to the practice.</p>

<h4>Pros</h4>

<ul>
<li>Even easier to setup</li>
<li>Works fine</li>
</ul>


<h4>Cons</h4>

<ul>
<li>The website was a bit slow</li>
<li>The retrospective was too guided for an experienced team, we did not get as good outputs as we used to</li>
<li>Everyone could participate as easily</li>
</ul>


<h2>Trello</h2>

<p><a href="/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/boat.jpg">{% img center /imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/boat-small.jpg The boat activity on Trello%}</a></p>

<p><a href="https://www.google.fr/search?sourceid=chrome-psyapi2&amp;ion=1&amp;espv=2&amp;ie=UTF-8&amp;q=remote%20retrospective">Asking Google</a>, we discovered that some teams were having success using <a href="https://trello.com/">Trello</a> for their remote retrospectives. We decided to give it a try. Ahmad from Beirut got to work on our first retrospective with it. He had to prepare it beforehand (as we always have been doing). In practice :</p>

<ul>
<li>Ahmad created an organization for our team</li>
<li>We all registered to Trello and joined the organization (we like joining (smile))</li>
<li>Ahmad created a custom board for each activity</li>
<li>During the meeting, we used the video conferencing system and the instant chat to have both visio and screen sharing</li>
<li>The animator used a laptop to manage the Trello boards</li>
<li>Everyone of us could add post-its through his smartphone app</li>
</ul>


<h4>Pros</h4>

<ul>
<li>The setup is easy</li>
<li>The retrospective worked well and delivered interesting output</li>
<li>We actually all see the board</li>
<li>The smartphone app works well</li>
<li>It is possible to vote directly through Trello</li>
<li>Everyone could participate as easily</li>
<li>We can classify post-its with labels</li>
<li>We can insert pictures and photos</li>
<li>There are a lot of chrome extensions to Trello (<a href="https://chrome.google.com/webstore/detail/vertical-lists-for-trello/aldklnbenbdgfgfbflalmlddkkndgnlc?utm_source=chrome-app-launcher-info-dialog">Vertical Lists for Trello</a>), <a href="https://chrome.google.com/webstore/detail/card-color-titles-for-tre/hpmobkglehhleflhaefmfajhbdnjmgim?utm_source=chrome-app-launcher-info-dialog">Card Color Titles for Trello</a></li>
</ul>


<h4>Cons</h4>

<ul>
<li>There is nothing to &lsquo;group&rsquo; post its together</li>
<li>We need to prepare custom boards for every activity</li>
<li>We would need to pay for the gold version with custom backgrounds and stickers</li>
</ul>


<h2>Conclusion</h2>

<p><a href="/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/roti.jpg">{% img center /imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/roti-small.jpg The Return On Time Invested activity on Trello%}</a></p>

<p>While missing a few features that would make it awesome, Trello is the best tool we found for remote retrospective, and is better than our initial physical setup. We&rsquo;re continuing to use it, and we now have to figure out</p>

<ul>
<li>If we could find a way to speed up the meeting preparation</li>
<li>How to handle &lsquo;graph oriented&rsquo; activities such as the &lsquo;5 whys&rsquo;</li>
</ul>


<p><a href="/imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/5-whys.jpg">{% img center /imgs/2015-04-05-trellospectives-remote-retrospectives-with-trello/5-whys-small.jpg The 5 why activity on a physical whiteboard%}</a></p>
]]></content>
  </entry>
  
</feed>
