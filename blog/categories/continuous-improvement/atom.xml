<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous improvement | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/continuous-improvement/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-07-12T06:04:26+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to avoid unnecessary meetings (a takeaway from Devoxx France 2018)]]></title>
    <link href="http://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/"/>
    <updated>2018-06-21T12:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018</id>
    <content type="html"><![CDATA[<p>I had the chance to attend <a href="https://www.devoxx.fr/">Devoxx France</a> this year in Paris. Here is the most important lesson I learned :</p>

<blockquote><p>How to avoid unnecessary meetings with asynchronous decision making</p></blockquote>

<p><a href="https://twitter.com/bdelacretaz">Bertrand Delacretaz</a>, a member of the Apache foundation. He gave a great talk about how the open source community handles decision taking. Open source developers are often all over the world, often in different timezones. Meetings are not an option for them. Still, they manage to make great decisions !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-05-how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/decision.jpg" alt="Drawing of a decision hammer" /></p>

<p>Even if you don&rsquo;t work remotely, avoiding unnecessary meetings is always a great thing !</p>

<ol>
<li>You&rsquo;ll have more time to do productive and interesting stuff</li>
<li>You&rsquo;ll avoid interruptions and be even more productive</li>
<li>If you are an introvert, it&rsquo;s going to be easier to contribute to the decision</li>
<li>As people have more time to think through the decision, the result is usually better</li>
</ol>


<iframe width="560" height="315" src="https://www.youtube.com/embed/xkC4zjtAyRc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<p>For a full walkthrough, I encourage you to watch <a href="https://www.youtube.com/watch?v=xkC4zjtAyRc">the talk in full length</a>. If you don&rsquo;t speak french, an english version is available <a href="https://www.youtube.com/watch?v=lF-bjxB2Nrk&amp;t=217s">here</a>. Finally, slides are also available in <a href="https://fr.slideshare.net/bdelacretaz/prise-de-dcisions-asynchrone-devoxx-france-2018">french</a> and <a href="https://fr.slideshare.net/bdelacretaz/asynchronous-decision-making-foss-backstage-2017">english</a>.</p>

<blockquote><p>ðŸ’¡ Even if you don&rsquo;t work remotely, avoiding unnecessary meetings is always a great thing !</p></blockquote>

<h2>Crash course</h2>

<p>For the hasty folks among you, here is a summary. The decision making follows 4 stages :</p>

<ol>
<li>Open discussion and brainstorming. People discuss openly and suggest ideas in a free form manner.</li>
<li>Emergence of options. After enough discussion, a few options will start to make more sense than others.</li>
<li>Coming to a consensus. Someone will draft a formal proposal. People will discuss and amend this proposal until they reach consensus. <a href="http://www.dictionary.com/browse/consensus">Consensus</a> is not <a href="http://www.dictionary.com/browse/unanimous">unanimity</a> !</li>
<li>Decision. After consensus, the benevolent decision owner validates the decision once and for all.</li>
</ol>


<p>Until the decision is taken, the process can move forward but also backward.</p>

<h2>Tooling</h2>

<p>We need only two tools to make this possible :</p>

<ol>
<li>For discussion, brainstorming and emergence of options, use a very open and chatty tool. The speaker called this a &ldquo;shared asynchronous communication channel&rdquo;. This can be an online chat, a mailing list or Github issues (<a href="https://github.com/apache/cordova-discuss/issues">ex</a>). It could even be a real life whiteboard if you all had access to it.</li>
<li>From drafting the proposal to the end, prefer a structured and chronological tool. The speaker suggests using a &ldquo;shared case management tool&rdquo;. Draft the proposal in this tool, and use comments to log the latest steps of the decision taking. He had examples using Jira issues (<a href="https://issues.apache.org/jira/browse/SLING-7231">ex</a>) or Github pull requests (<a href="https://github.com/apache/cordova-discuss/pulls">ex</a>). To confirm the decision, close the case. The tool will record which version of the decision was exactly taken.</li>
</ol>


<h2>Architecture Decision Record</h2>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-05-how-to-avoid-unnecessary-meetings-a-takeaway-from-devoxx-france-2018/adr.jpg" alt="Drawing of an Architecture Decision Record which work great with asynchronous decision making" /></p>

<p><a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">ADR</a> is the practice of documenting architecture decisions. It makes sure we remember why we took a decision. This can be very useful to know how to deal with the existing software. A widespread practice for ADRs is to use simple text files in git. There are even <a href="https://github.com/npryce/adr-tools">tools for that</a>. This looks like a perfect fit for decision making using git pull requests ! I&rsquo;ll write a post about that when I get the chance to try.</p>

<blockquote><p>ðŸ’¡ Git pull requests based asynchronous decision making is a perfect fit for Architecture Decision Records.</p></blockquote>

<h2>Currently experimenting</h2>

<p>I am currently trying this whole decision making technique at work. We are still in the brainstorming phase. We are using our internal chat app for that. Options are starting to emerge, but we did not move to the consensus part yet. I&rsquo;ll write a return on experience post when we reach the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 4]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4/"/>
    <updated>2018-01-04T10:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4</id>
    <content type="html"><![CDATA[<p>This is the forth and last post of a <a href="/blog/categories/zero-bugs-series/">series about the #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">previous posts</a>, I detailed how we applied it in our team, what were the consequences and how you could do the same.</p>

<p>There&rsquo;s a catch though, even if you are sure that <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> is a good thing, people around you might not agree ! As with any kind of change, one of the trickiest thing is overcoming people&rsquo;s fear about your idea. This post will be about dealing with people&rsquo;s resistance.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-4/bug-dilemna.jpg" alt="Drawing of people arguing over the #ZeroBugs policy" /></p>

<h2>A few general change advices</h2>

<p>With time, I discovered general best practices to bring change. The first is that you are much more likely to get your ideas through if you are nice with people ! In a bit more details, this means that :</p>

<ul>
<li>Try to help people, for real !</li>
<li>Listen to their concerns instead of pushing your idea</li>
<li>Don&rsquo;t blame people if they don&rsquo;t see the value of your idea</li>
</ul>


<blockquote><p>ðŸ’¡ Change agent&rsquo;s advice #1 : be nice with people</p></blockquote>

<p>Another invaluable trick is to be patient : change takes time. Finally, if you are stuck, suggest testing your idea for a while, people are more likely to adopt it this way.</p>

<p><a href="https://www.amazon.com/Enchantment-Changing-Hearts-Minds-Actions-ebook/dp/B004S26HB2/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511346442&amp;sr=1-1&amp;keywords=the+art+of+enchantment"><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-4/enchantment.jpg" alt="Cover of the book &quot;Enchantment: The Art of Changing Hearts, Minds and Actions&quot;" /></a></p>

<h2>Winning the devs over</h2>

<p>Back to our particular #ZeroBugs issue. In this particular case, I would Â try to convince the devs first. Reason A is that without them onboard, the practice won&rsquo;t work as well as expected. Reason B is that it is more difficult for management to say &lsquo;no&rsquo; to a full team than to a single developer.</p>

<p>Developers will fear spending too much time fixing bugs. Sell them long term fixes instead of dirty quick fixes. Stress that it will be a chance to refactor important, poorly designed parts of the system. Also explain that once the bug backlog is clean, they&rsquo;ll spend more time on new developments.</p>

<p>A last argument for developers is about clarifying prioritization. Pushing bug triage to business people will save devs from feature creep. That should save them from some stress of not delivering.</p>

<h2>Winning business people over</h2>

<p>They&rsquo;ll fear that fixing bugs will reduce the delivery of valuable features. Indeed, if done without care, this is a real danger. Highlight the value of bug fixing : it improves the product and image of the company. Fixing bugs also increases feature delivery in the long run. It does so by removing some recurring support issues and fixing technical debt.</p>

<p>Also point out that they&rsquo;ll have more visibility and control over what is being worked on by the team. This is an opportunity for them to increase the value throughput.</p>

<p>They might also have concerns about the time to spend categorizing bugs. Make sure to get this as streamlined as possible. For example, if they are very busy, you could pre-categorize the issues to make it easier for them.</p>

<p>In <a href="https://medium.com/swlh/how-we-got-to-zero-bugs-and-implemented-a-zero-bug-policy-c77ee3f2e50b">this blog post</a>, Andrew Fulton explains how he convinced his boss to adopt a #ZeroBugs policy.</p>

<h2>Last words</h2>

<blockquote><p>ðŸ’¡ #ZeroBugs policy makes work more sustainable</p></blockquote>

<p>I&rsquo;m done with this <a href="/blog/categories/zero-bugs-series/">series about #ZeroBugs policy</a>. I hope I convinced you to give it a try. The developer&rsquo;s life is better without bugs ! If you do, or if you already did, I&rsquo;d love to read about it. Thanks a lot for reading me so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 3]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-3/"/>
    <updated>2017-12-21T10:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-3</id>
    <content type="html"><![CDATA[<p>This is the third post of a <a href="/blog/categories/zero-bugs-series/">series about the #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">first 2 posts</a>, I detailed how we applied it in our team, and what were the consequences.</p>

<p>I hope that by now, I have convinced you that applying a <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> policy is good for you and your team. I&rsquo;ll surprise you by arguing that it&rsquo;s a lot easier than people first think. This post will be about how to inject it in your team.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-3/zero-bug-formula.jpg" alt="A funny formula for zero bugs" /></p>

<h2>Build quality in</h2>

<p>Obviously, you need a low bug rate for this work. If your team creates too many bugs, fixing incoming bugs only will consume all your time. You won&rsquo;t be able to deliver new features and it will make everyone miserable.</p>

<p>If you are in this situation, I&rsquo;d advice you to start investing in coding best practices such as :</p>

<ul>
<li><a href="https://www.google.fr/search?q=how+to+start+Continuous+Integration&amp;oq=how+to+start+Continuous+Integration">Continuous Integration</a></li>
<li><a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">Test Driven Development</a></li>
<li><a href="/how-to-get-your-team-to-do-code-reviews/">Code reviews</a></li>
<li><a href="/from-zero-to-pair-programming-hero/">Pair programming</a></li>
<li><a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">Refactoring</a></li>
</ul>


<p>With grit and time, your bug rate will get down.</p>

<h2>New bugs</h2>

<p>Before dealing with the old bugs, you should first put in place the target policy for new bugs. Don&rsquo;t let the situation get worse !</p>

<p>The way to deal with new bugs is to setup a regular (at least weekly) routine to decide what to do about them :</p>

<ul>
<li>If it&rsquo;s causing real pain to someone and needs a fix as soon as possible, then it&rsquo;s very likely to be a bug</li>
<li>If it&rsquo;s something important you can still live without for a few sprints, change it to a story in the backlog.</li>
<li>If it&rsquo;s not that important now, delete or archive it as &ldquo;won&rsquo;t fix&rdquo;</li>
</ul>


<p>From then on, the new convention is fix all bugs before working on features. This ensures that the bugs backlog will not grow anymore. If you need more details about how to categorize issues, take a look at what <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">Sam Hatoum says about that</a>.</p>

<p>Different people will provide different perspectives on issues. Business people will know their business value. Developers will know fix&rsquo;s impact on technical debt. Finally, service desk people will know how much time they would save with the fix. Depending on your situation, involve the right people in the classification.</p>

<p>Another approach is to do as we did, and come up with clear rules that define what a bug is. This has the advantage of allowing developers to categorize issues on their own. The drawback is that it can be very tricky to come up with these rules.</p>

<blockquote><p>ðŸ’¡ Agree on rules for categorizing bugs with your users to streamline your flow</p></blockquote>

<h2>Old bugs</h2>

<p>Ok, that was the easy part. How can we deal with the zillions bugs we all have waiting in the backlog ? Depending on the size of your bug backlog, you should adopt different strategies.</p>

<p>If you have a rather small bug debt, as we did, you can get away by prioritizing X bugs every sprint.</p>

<p>Let&rsquo;s suppose you have a larger bug debt. You could do as <a href="https://medium.com/swlh/how-we-got-to-zero-bugs-and-implemented-a-zero-bug-policy-c77ee3f2e50b">ConceptShare did</a> and crank out a feature team dedicated to eliminate bugs. That should work, but it will take some time. It took the ConceptShare teams 18 months to get rid of a 350 bugs backlog !</p>

<p>It&rsquo;s a good idea to take a look at all existing bugs to re-classify some as stories and delete others. Just as you should now be doing with new bugs. This should drastically reduce the number of bugs, but it will take some time from very busy people &hellip; Again, rules to define what a bug is would make this easier.</p>

<p>Finally, there&rsquo;s a last, very effective solution : archive all the bugs ! Some bugs must be months if not years old. Deleting them should not do much harm. Users will report important bugs again anyway. One caveat though : this won&rsquo;t work if your bug rate is too high ! If quality is too low, you&rsquo;ll drawn under old bug.</p>

<h2>Going further</h2>

<p><a href="https://www.amazon.com/Explore-Increase-Confidence-Exploratory-Testing/dp/1937785025/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511346285&amp;sr=1-1&amp;keywords=explore+it"><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-3/explore-it.jpg" alt="Cover of the book &quot;Explore It&quot;" /></a></p>

<p>It&rsquo;s great to fix the bugs very fast. It&rsquo;s even better if to fix them before the users see them ! <a href="https://en.wikipedia.org/wiki/Exploratory_testing">Exploratory testing</a> is the way to do that. It will also provide you a measure of how many bugs escape your development process. I encourage you to try this very interesting practice. I wrote <a href="/how-we-started-exploratory-testing/">a guide</a> about how to start exploratory testing.</p>

<blockquote><p>ðŸ’¡ Exploratory Testing gives you a quantifiable measure of your workflow</p></blockquote>

<h2>Next week</h2>

<p>This was part 3 of a <a href="/blog/categories/zero-bugs-series/">series of posts about the #ZeroBugs policy</a>. In <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-4/">next week&rsquo;s post</a>, I&rsquo;ll provide arguments and advices to convince the people around you to give it a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 2]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-2/"/>
    <updated>2017-12-14T10:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-2</id>
    <content type="html"><![CDATA[<p>This is the second post of a <a href="/blog/categories/zero-bugs-series/">series about the #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">previous post</a>, I detailed what a <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> policy is and how we tried to apply it. I encourage you start <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">there</a>.</p>

<p>Here is a quick summary of where we stood. We had tried to apply a #ZeroBugs policy with exploratory testing. We had discovered a lot of bugs, and we had agreed to tackle them little by little. We hoped to finish in a few months.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-2/bug-panic.jpg" alt="The Bug Panic game" /></p>

<h2>The final bug rules</h2>

<p>At about the same time, we started an improvement kata to increase our productivity. I wrote in details about <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">the full story</a>, but to make it short, here is what we discovered :</p>

<ul>
<li>It would take us years, not months to fix all our bugs</li>
<li>Our definition for bugs was part of the problem</li>
</ul>


<p>After some experimentation, here is the bug definition we came up with :</p>

<ul>
<li>It corrupts data</li>
<li>It returns wrong results</li>
<li>It crashes with an unexpected error message</li>
</ul>


<p>It stopped scope creep by removing the subjective &ldquo;it used to work&rdquo; rule. This rule also sped up bug fixing a lot. We closed many bugs with descriptive error messages.</p>

<h2>Consequences</h2>

<p>Within 2 sprints, we reached a #ZeroBugs state. Backlog &lsquo;management&rsquo; was simpler as it did not contain bugs anymore. We were also spending less time fixing bugs and more building stories. Even as we resumed our intense exploratory testing sessions, our bug backlog did not grow.</p>

<p>After a while, we discovered other benefits to the #ZeroBugs policy.</p>

<p>Spending less time on bugs made our velocity more stable. Our product owner was happier to see us deliver new features more reliably. In the end, this improved our relationship with him.Â </p>

<blockquote><p>ðŸ’¡ #ZeroBugs policy makes developers happier</p></blockquote>

<p>It also made the team happier. First, because we had a lot less of stressful emergencies to answer to. Second, because programming new features is more interesting than fixing bugs.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-2/happy-developer.jpg" alt="A relaxed developer" /></p>

<p>It also made the other teams happier and more productive ! They encountered a lot less bugs when using our product. When they had problems, they usually got a clear error message. They would fix it on their side, or suggest us a new feature.</p>

<p>A #ZeroBugs policy and exploratory testing also have a side effect on technical debt ! Bugs tend to appear in the more brittle parts of the code. When fixing bugs, you took the opportunity to refactor technical debt at the same time.</p>

<blockquote><p>ðŸ’¡ #ZeroBugs policy reduces technical debt</p></blockquote>

<p>Finally, having a definition for bugs was very helpful. It allowed decentralized prioritization of bugs. The alternative to that is to have a domain expert available to sort bugs from stories. A decentralized rule prevents all sort of coordination and people issues. Our system was rather technical, which made it easy to define what a bug is. In other cases, it might be worth spending some time with the domain expert to define similar rules.</p>

<blockquote><p>&ldquo;Use decision rules to decentralize economic control.&rdquo; From <a href="https://www.amazon.com/Principles-Product-Development-Flow-Generation-ebook/dp/B007TKU0O0/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511344068&amp;sr=1-1&amp;keywords=reinertsen+flow">Principles of Product Development Flow</a> by <a href="http://reinertsenassociates.com/">Donald G. Reinertsen</a></p></blockquote>

<p>To summarize, sticking to #ZeroBugs is a win-win and sustainable situation for all.</p>

<h2>Next week</h2>

<p>This was part 2 of a <a href="/blog/categories/zero-bugs-series/">series of posts about the #ZeroBugs policy</a>. In <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-3/">next week&rsquo;s post</a>, I&rsquo;ll provide a step by step guide about how to inject a #ZeroBugs policy in your team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 1]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1/"/>
    <updated>2017-12-07T10:22:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-1</id>
    <content type="html"><![CDATA[<p>Some teams spend 95% of their development time fixing bugs &hellip; An entrepreneur I worked with reported an even scarier story. He went bankrupt because bugs were taking <em>all</em> the development time. He had no time left for new features !</p>

<p>At the other end of the spectrum, some <a href="http://leanagilepartners.com/library/Vanschooenderwoert-EmbeddedNumbers.pdf">eXtreme Programming teams</a> reported bug rates as low as 1.5 per month !</p>

<blockquote><p>ðŸ’¡ Some XP teams reported bug rates as low as 1.5 per month !</p></blockquote>

<p>Wouldn&rsquo;t it be great for everyone if we had less bugs to fix ? Programmers would do more interesting work. Business people would get more valuable features. People would do less overtime. All this while users get a better product !</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-1/aim-bug.jpg" alt="A bug in a viewfinder" /></p>

<p>Last year, in my team, we reached and maintained a #ZeroBugs state. Here is how we did it.</p>

<h2>What&rsquo;s the <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> policy</h2>

<p>Before we jump into our story, let&rsquo;s take a second to understand what this is all about.</p>

<p>Bugs waste time. They waste the time of users, who can&rsquo;t do what they need. They waste everyone&rsquo;s time with interruptions from unhappy user. They steal time from new features development. If you have a large number of known bugs, you&rsquo;ll also waste some time organizing them : eliminating duplicates, prioritizing them, ignoring others &hellip;</p>

<p>A #ZeroBugs policy is the convention of having no bugs in your backlog. This means that when someone finds a defect, it should be immediately :</p>

<ul>
<li>fixed before any other feature</li>
<li>prioritized as a new story</li>
<li>or ignored (for the moment)</li>
</ul>


<p>Obviously, the less bug you create the easier this will be.</p>

<h2>Our journey to a #ZeroBugs policy</h2>

<h3>Context</h3>

<p>We were an R&amp;D team, building a data management system. Our product was moving outside of pure research and development. Other teams were starting to use it and often reported bugs back to us.</p>

<p>We&rsquo;d first read about #ZeroBugs in <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1511342870&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art of Agile Software Development</a>. Given enough automated testing, XP teams could almost stop doing bug fixing !</p>

<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1511342870&amp;sr=8-1&amp;keywords=the+art+of+agile"><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-1/art-of-agile.jpg" alt="Cover of the book &quot;The Art of Agile Software Development&quot;" /></a></p>

<p>As we had very solid automated testing in place, we decided to take the extra steps to save time on bug fixing.</p>

<h3>First attempt</h3>

<p>There is a straightforward way to install a #ZeroBugs policy. Make sure to have a customer or a Product Owner to prioritize defects as soon as they appear (check <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">this story</a> for an example).</p>

<p>Unfortunately, this would not work for us. Our Product Owner was great at providing us with a long term vision. He could not be available for day to day bug prioritization though.</p>

<p>Our first try was to propose a definition for bugs that we could use ourselves to classify them. We decided that something was a bug if either of the following was true :</p>

<ul>
<li>It corrupts data.</li>
<li>It returns wrong results. As we were building a data management system, this was rather easy to verify.</li>
<li>It used to work but is now broken</li>
</ul>


<p>Whenever we found an issue meeting any of these points, we would start working on it straightaway.</p>

<blockquote><p>ðŸ’¡ Exploratory testing goes hand in hand with #ZeroBugs policy</p></blockquote>

<p>To speed up downstream integration of our product by other teams, we also <a href="/how-we-started-exploratory-testing/">started Exploratory Testing</a>. <a href="https://en.wikipedia.org/wiki/Exploratory_testing">Exploratory testing</a> is a practice that goes hand in hand with a #ZeroBugs policy.</p>

<h3>Unearthing a bug debt</h3>

<p>During the first exploratory testing session, we found more than 10 bugs. We thought that with a bit of focus we could fix all lingering bugs in a few weeks max &hellip; After 2 other sessions and more than one sprint of intense bug fixing, we had even unearthed more bugs. We were wrong, this would take a lot more than a few weeks.</p>

<p>If we kept on our 1 hour exploratory testing sessions every sprint, we would fill our backlog with bugs. We would also be fixing bugs for a few months before we could tackle any new feature !</p>

<p>We agreed on the following strategy to fix all these bugs little by little :</p>

<ul>
<li>stop these intense exploratory testing sessions</li>
<li>do shorter exploratory testing sessions at the end of every story</li>
<li>fix 5 to 6 bugs every sprint</li>
</ul>


<p>We hoped to fix all our bugs in a few months.</p>

<h2>Next week</h2>

<p>That was the first part of <a href="/blog/categories/zero-bugs-series/">a series of posts about #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-2/">next post</a>, I&rsquo;ll explain how we dealt with this bug debt and dig into the consequences it had on our work.</p>
]]></content>
  </entry>
  
</feed>
