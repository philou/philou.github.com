<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2014-06-04T07:07:52+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Auchandirect-ScrAPI : an unofficial API Ruby Gem]]></title>
    <link href="http://philippe.bourgau.net/auchandirect-scrapi-an-unofficial-api-ruby-gem/"/>
    <updated>2014-03-21T06:31:00+01:00</updated>
    <id>http://philippe.bourgau.net/auchandirect-scrapi-an-unofficial-api-ruby-gem</id>
    <content type="html"><![CDATA[<p><a href="http://mashable.com/2011/01/04/brand-open-api-developers/">Every brands should provide an API for developpers</a> &hellip; unfortunately, it far from the truth right now. A few years ago, when I started my mes-courses.fr side project, I would have loved to find a french online grocery providing an open API. I had to resort to scrapping <em>(that&rsquo;s how I learnt that heavily relying on scrapping for a 15hr/week side project is not a good fit &hellip; but that&rsquo;s another story)</em>.</p>

<p>As I am taking mes-courses.fr down, I have extracted the whole unofficial API I had built around <a href="http://www.auchandirect.fr">http://www.auchandirect.fr</a> (I&rsquo;m talking to you french hackers !) into an open source Ruby Gem. Briefly :</p>

<ul>
<li>It walks the whole store, from categories to items</li>
<li>Given valid credentials, it can fill and save a cart</li>
<li>It&rsquo;s <a href="http://choosealicense.com/licenses/lgpl-v3/">LGPL</a> : anyone can use it as long as they give back any improvement to the community</li>
<li>It&rsquo;s using <a href="https://github.com/philou/storexplore">Storexplore</a>, another of my mes-courses.fr rip-off open source Ruby Gem</li>
<li>It&rsquo;s tested on <a href="https://travis-ci.org/philou/auchandirect-scrAPI">Travis</a> and I&rsquo;m currently trying to make it daily tested with <a href="http://traviscron.pythonanywhere.com/">Traviscron</a></li>
</ul>


<p>There&rsquo;s mainly one thing it <em>cannot</em> do :</p>

<ul>
<li>It cannot procede to any payment or ordering</li>
</ul>


<p>It&rsquo;s available on <a href="https://github.com/philou/auchandirect-scrAPI">Github</a></p>

<p>Happy scrapping !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online store scrapping DSL gem]]></title>
    <link href="http://philippe.bourgau.net/online-store-scrapping-dsl-gem/"/>
    <updated>2014-01-21T06:50:00+01:00</updated>
    <id>http://philippe.bourgau.net/online-store-scrapping-dsl-gem</id>
    <content type="html"><![CDATA[<p>Since I decided to stop <a href="http://www.mes-courses.com">Mes Courses</a> to focus on <a href="http://www.agileavatars.com">AgileAvatars</a>, I have been extracting open source gems from the code base. The last one is <a href="https://github.com/philou/storexplore">Storexplore</a> : a declarative scrapping DSL that lets one define directory like apis to an online store.</p>

<p>As explained in the Readme, it allows one to declare a store this way :</p>

<p>```ruby
Storexplore::define_api &lsquo;dummy-store.com&rsquo; do</p>

<p>  categories &lsquo;a.category&rsquo; do</p>

<pre><code>attributes do
  { :name =&gt; page.get_one("h1").content }
end

categories 'a.category' do
  attributes do
    { :name =&gt; page.get_one("h1").content }
  end

  items 'a.item' do
    attributes do
      {
        :name =&gt; page.get_one('h1').content,
        :brand =&gt; page.get_one('#brand').content,
        :price =&gt; page.get_one('#price').content.to_f,
        :image =&gt; page.get_one('#image').content,
        :remote_id =&gt; page.get_one('#remote_id').content
      }
    end
  end
end
</code></pre>

<p>  end
end
```</p>

<p>And to use it like that :</p>

<p>```ruby
Api.browse(&lsquo;<a href="http://www.dummy-store.com">http://www.dummy-store.com</a>&rsquo;).categories.each do |category|</p>

<p>  puts &ldquo;category: #{category.title}&rdquo;
  puts &ldquo;attributes: #{category.attributes}&rdquo;</p>

<p>  category.categories.each do |sub_category|</p>

<pre><code>puts "  category: #{sub_category.title}"
puts "  attributes: #{sub_category.attributes}"

sub_category.items.each do |item|

  puts "    item: #{item.title}"
  puts "    attributes: #{item.attributes}"

end
</code></pre>

<p>  end
end
```</p>

<p>I tried my best to make this library high quality :</p>

<ul>
<li>The code evolved from a simple procedural script to a dsl through constant refactorings</li>
<li>Real world features like constant memory usage have been added to fix production bugs</li>
<li>Documented with samples and rdoc</li>
<li>Extensive automated testing</li>
</ul>


<p>Let&rsquo;s hope it will be usefull for some.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Matchers Combinators 2 : spec_combos gem]]></title>
    <link href="http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem/"/>
    <updated>2013-09-25T21:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem</id>
    <content type="html"><![CDATA[<p>I already wrote about my <a href="/rspec-matchers-combinators/">RSpec Matchers Combinators</a>, I decided to extract them into the <a href="https://github.com/philou/spec_combos">spec_combos</a> gem.</p>

<p>To use it, just add the following to your Gemfile :</p>

<p><code>ruby
gem 'spec_combos', :group =&gt; 'test'
</code></p>

<p>Compared to the first version of the matchers, I added better error messages. For example, consider the following complex nested assertion :</p>

<p><code>ruby
expect([1,2,3]).to all_{and_(be_odd, be_instance_of(Fixnum))}
</code></p>

<p>It outputs the following error :</p>

<p>```text
Failure/Error: expect([1,2,3]).to all<em>{and</em>(be_odd, be_instance_of(Fixnum))}
  expected [1, 2, 3] to all be odd and be an instance of Fixnum, but the following were not:</p>

<pre><code>[1] (2): expected 2 to be odd and be an instance of Fixnum, but:
  expected odd? to return true, got false
</code></pre>

<p>```</p>

<p>I hope this might help !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails url_helpers mixup when using rails engines]]></title>
    <link href="http://philippe.bourgau.net/rails-urlhelpers-mixup-when-using-rails-engin/"/>
    <updated>2012-08-09T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/rails-urlhelpers-mixup-when-using-rails-engin</id>
    <content type="html"><![CDATA[<p>I just tried to integrate the <a href="https://github.com/KatanaCode/blogit">blogit</a> rails engine directly inside <a href="http://www.mes-courses.fr">www.mes-courses.fr</a>. Up till now, I was using a separated <a href="http://radiantcms.org/">radiant</a> app&nbsp;to deal with the blog part. It was working fine, but I had a few problems:</p>


<ul>
<li>I had to use special (javascript heavy) google analytics code through all cross app links, and that sometimes failed (somewhere in the combinaison of&nbsp;heroku, rails, and analytics)</li>
<li>It was difficult to share the theme between the apps : on one side, templates, partials and css, on the other, rows in a database</li>
<li>It was difficult to share session state between the two apps (login for example)</li>
</ul>


<p>As my blog is very basic, and as I am the only one editing the styles, I decided to embed a blog engine inside my app. I selected and tried a few&nbsp;engines : <a href="https://github.com/jipiboily/monologue">Monologue</a>, <a href="https://github.com/KatanaCode/blogit">Blogit</a>, <a href="http://refinerycms.com/">RefineryCMS</a> and to roll my own. Refinery looks way too complex to integrate regarding my basic needs. Monologue is not&nbsp;design to integrate with <a href="https://github.com/plataformatec/devise/">devise</a> users (which I already use) and I would prefer to contribute to an existing gem rather than to write the nth rails blog engine ...</p>


<p>After a few experiments, I settled on blogit. Unfortunately, I had really strange issues with links within blogit pages : all links were prefixed with "/blog" and blogit&nbsp;links where like "/blog/blogit?controller=posts&amp;action=new". Hacking around in the rails console showed me that doing consecultively :</p>


<p>
```ruby
include Blogit::Engine.routes.url_helpers
include Rails.application.routes.url_helpers
```
</p>


<p>resulted in the same behaviour. After a long debugging session, I eventually discovered that I had a helper in my application which explicitly required&nbsp;Rails.application.routes.url_helpers. This was causing the conflict. I changed my code to avoid this inclusion, and that fixed the links ...</p>


<p>... nearly. Now rendering the application template for a blog page failed with a "message not understood" for the main app's xxx_path methods. Hopefully, I had&nbsp;found <a href="http://www.candland.net/2012/04/17/rails-routes-used-in-an-isolated-engine/">a fix</a> for this error earlier on the web. Now everything was working like a charm.</p>


<p>To conclude, I was convinced by blogit, and I am going to use it to migrate my blog. I already have a few ideas for improvements I will have to do (<a href="http://disqus.com/">disqus</a> comments&nbsp;and archive helper for example).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby thirdparties best practices]]></title>
    <link href="http://philippe.bourgau.net/ruby-thirdparties-best-practices/"/>
    <updated>2012-04-26T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/ruby-thirdparties-best-practices</id>
    <content type="html"><![CDATA[<p><p>I am just finishing migrating <a href="http://www.mes-courses.fr">www.mes-courses.fr</a> from rails 2 to rails 3, and I can assure that I learnt these lessons the hard way &hellip;<br />
<ul>
<li>use Bundler <a href="http://gembundler.com"><a href="http://gembundler.com">http://gembundler.com</a></a></li><li>keep your Gemfile simple : just the top level dependencies, and no version constraints</li><li>try to stick to popular gems : you&rsquo;ll find a lot more answers to your questions from the web. It&rsquo;s often simpler to write and maintain a little extra code than to depend on a crappy thirdparty that is supposed to meet your need</li><li>stick with the most recent versions of your dependencies. With a good test suite and with Bundler, it should be rather easy to upgrade, so do it often to avoid both the upgrade tunnel effect and struggling with bugs and incompatibility of unmaintained old versions of gems.</li></ul>
<p>Edit: I discovered <a href="http://www.ruby-toolbox.com">the ruby toolbox</a>&nbsp;that categorizes and sorts gems based on their popularity !</p>
<p>Edit 2: I discovered it is sometimes necessary to add constraints to get the latest versions of gems that would otherwise conflict (directly or not) with others.</p></p>
]]></content>
  </entry>
  
</feed>
