<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2014-01-21T06:28:08+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec Matchers Combinators 2 : spec_combos gem]]></title>
    <link href="http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem/"/>
    <updated>2013-09-25T21:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspec-matchers-combinators-2-spec-combos-gem</id>
    <content type="html"><![CDATA[<p>I already wrote about my <a href="/rspec-matchers-combinators/">RSpec Matchers Combinators</a>, I decided to extract them into the <a href="https://github.com/philou/spec_combos">spec_combos</a> gem.</p>

<p>To use it, just add the following to your Gemfile :</p>

<p><code>ruby
gem 'spec_combos', :group =&gt; 'test'
</code></p>

<p>Compared to the first version of the matchers, I added better error messages. For example, consider the following complex nested assertion :</p>

<p><code>ruby
expect([1,2,3]).to all_{and_(be_odd, be_instance_of(Fixnum))}
</code></p>

<p>It outputs the following error :</p>

<p>```text
Failure/Error: expect([1,2,3]).to all<em>{and</em>(be_odd, be_instance_of(Fixnum))}
  expected [1, 2, 3] to all be odd and be an instance of Fixnum, but the following were not:</p>

<pre><code>[1] (2): expected 2 to be odd and be an instance of Fixnum, but:
  expected odd? to return true, got false
</code></pre>

<p>```</p>

<p>I hope this might help !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails url_helpers mixup when using rails engines]]></title>
    <link href="http://philippe.bourgau.net/rails-urlhelpers-mixup-when-using-rails-engin/"/>
    <updated>2012-08-09T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/rails-urlhelpers-mixup-when-using-rails-engin</id>
    <content type="html"><![CDATA[<p>I just tried to integrate the <a href="https://github.com/KatanaCode/blogit">blogit</a> rails engine directly inside <a href="http://www.mes-courses.fr">www.mes-courses.fr</a>. Up till now, I was using a separated <a href="http://radiantcms.org/">radiant</a> app&nbsp;to deal with the blog part. It was working fine, but I had a few problems:</p>


<ul>
<li>I had to use special (javascript heavy) google analytics code through all cross app links, and that sometimes failed (somewhere in the combinaison of&nbsp;heroku, rails, and analytics)</li>
<li>It was difficult to share the theme between the apps : on one side, templates, partials and css, on the other, rows in a database</li>
<li>It was difficult to share session state between the two apps (login for example)</li>
</ul>


<p>As my blog is very basic, and as I am the only one editing the styles, I decided to embed a blog engine inside my app. I selected and tried a few&nbsp;engines : <a href="https://github.com/jipiboily/monologue">Monologue</a>, <a href="https://github.com/KatanaCode/blogit">Blogit</a>, <a href="http://refinerycms.com/">RefineryCMS</a> and to roll my own. Refinery looks way too complex to integrate regarding my basic needs. Monologue is not&nbsp;design to integrate with <a href="https://github.com/plataformatec/devise/">devise</a> users (which I already use) and I would prefer to contribute to an existing gem rather than to write the nth rails blog engine ...</p>


<p>After a few experiments, I settled on blogit. Unfortunately, I had really strange issues with links within blogit pages : all links were prefixed with "/blog" and blogit&nbsp;links where like "/blog/blogit?controller=posts&amp;action=new". Hacking around in the rails console showed me that doing consecultively :</p>


<p>
```ruby
include Blogit::Engine.routes.url_helpers
include Rails.application.routes.url_helpers
```
</p>


<p>resulted in the same behaviour. After a long debugging session, I eventually discovered that I had a helper in my application which explicitly required&nbsp;Rails.application.routes.url_helpers. This was causing the conflict. I changed my code to avoid this inclusion, and that fixed the links ...</p>


<p>... nearly. Now rendering the application template for a blog page failed with a "message not understood" for the main app's xxx_path methods. Hopefully, I had&nbsp;found <a href="http://www.candland.net/2012/04/17/rails-routes-used-in-an-isolated-engine/">a fix</a> for this error earlier on the web. Now everything was working like a charm.</p>


<p>To conclude, I was convinced by blogit, and I am going to use it to migrate my blog. I already have a few ideas for improvements I will have to do (<a href="http://disqus.com/">disqus</a> comments&nbsp;and archive helper for example).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby thirdparties best practices]]></title>
    <link href="http://philippe.bourgau.net/ruby-thirdparties-best-practices/"/>
    <updated>2012-04-26T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/ruby-thirdparties-best-practices</id>
    <content type="html"><![CDATA[<p><p>I am just finishing migrating <a href="http://www.mes-courses.fr">www.mes-courses.fr</a> from rails 2 to rails 3, and I can assure that I learnt these lessons the hard way &hellip;<br />
<ul>
<li>use Bundler <a href="http://gembundler.com"><a href="http://gembundler.com">http://gembundler.com</a></a></li><li>keep your Gemfile simple : just the top level dependencies, and no version constraints</li><li>try to stick to popular gems : you&rsquo;ll find a lot more answers to your questions from the web. It&rsquo;s often simpler to write and maintain a little extra code than to depend on a crappy thirdparty that is supposed to meet your need</li><li>stick with the most recent versions of your dependencies. With a good test suite and with Bundler, it should be rather easy to upgrade, so do it often to avoid both the upgrade tunnel effect and struggling with bugs and incompatibility of unmaintained old versions of gems.</li></ul>
<p>Edit: I discovered <a href="http://www.ruby-toolbox.com">the ruby toolbox</a>&nbsp;that categorizes and sorts gems based on their popularity !</p>
<p>Edit 2: I discovered it is sometimes necessary to add constraints to get the latest versions of gems that would otherwise conflict (directly or not) with others.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using gems instead of rails plugins on heroku]]></title>
    <link href="http://philippe.bourgau.net/using-gems-instead-of-rails-plugins-on-heroku/"/>
    <updated>2011-09-22T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/using-gems-instead-of-rails-plugins-on-heroku</id>
    <content type="html"><![CDATA[<p>Heroku is great, you can have a rails app running live in a few minutes ! There are still a few tricky points you've got to sort out a little differently. One of them is using rails plugins or extensions. The usage way is to have a submodule in your git repository, but heroku does not support submodules ... You are left with 2 choices :</p>


<ul>
<li>Expand the submodule as classical files in your main git repository</li>
<li>Use the extension or plugin as a gem (if possible)</li>
</ul>


<p><p>When I can, I&rsquo;ll go the second route. Last time, I ran into a problem. I wanted to use radiant-tags-extension gem with my radiant app, but I could not launch the install rake task<p />
<code>sh
rake radiant:extensions:tags:install
</code>
<p />I eventually found out that rake tasks from gems are not automatically available from the mail rake command. I also found <a href="http://ggr.com/how-to-include-a-gems-rake-tasks-in-your-rails-app.html">this</a> and it did the trick.</p>
<p>in &lt;railsapproot&gt;/lib/tasks/gems.rake<br />
<code>ruby
Dir["#Gem.searcher.find('radiant-tags-extension').full_gem_path}/lib/tasks/*.rake"].each { |ext| load ext }
</code>
</p></p>
]]></content>
  </entry>
  
</feed>
