<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-09-28T20:01:23+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top 5 talks I attended at JavaOne 2016 (Part 1)]]></title>
    <link href="http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1/"/>
    <updated>2016-09-28T19:20:00+00:00</updated>
    <id>http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1</id>
    <content type="html"><![CDATA[<p>With a few other colleagues, I had the chance to be sent to San Francisco last week to attend the <a href="https://www.oracle.com/javaone/index.html">JavaOne 2016</a> conferences by my <a href="http://www.murex.com">company</a>.</p>

<p><a href="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/exhibition-hall.jpg"><img class="center" src="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/exhibition-hall-small.jpg" title="Photo of the JavaOne exhibition hall" ></a></p>

<p>Here is super short list of the conferences I attended which I found really interesting</p>

<h2>Preventing errors before they happen</h2>

<p><a href="https://ece.uwaterloo.ca/~wdietl/">Werner Dietl</a> &amp; <a href="https://homes.cs.washington.edu/~mernst/">Michael Ernst</a></p>

<p>Since Java 6, it is possible to pass custom annotation processors to javac. Since Java 8, it is possible to add annotations to types. The guys behind the <a href="http://checkerframework.org">Checker Framework</a> used this to create custom pluggable type systems for your Java programs. These type systems enforce properties on your program, and will emit warnings or errors at compile time otherwise.</p>

<p>Here are a few example :</p>

<ul>
<li>declare <code>@Immutable MyObject myObject</code> to make sure that myObject won&rsquo;t be muted</li>
<li>declare <code>@NonNull MyObject myObject</code> to make sure that myObject is never null</li>
</ul>


<p><a href="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/type-systems.jpg"><img class="center" src="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/type-systems-small.jpg" title="Architecture of the type checker" ></a></p>

<p>Under the hood, the compiler behaves as if <code>@Immutable MyObject</code> and <code>MyObject</code> where completely separate types, and it knows and tracks specific ways of converting between the two. The framework provides a simple API to define your own type systems. They did a live demo showing how to quickly define things like <code>@Regex String</code>, <code>@Encrypted String</code> or <code>@Untainted String</code> (which forbids user input strings to avoid SQL injections).</p>

<p>The talk was really interesting, the framework seems lightweight and to integrate well with the typical tool stack. I definitely will give it a try the next time I have a bit of slack time.</p>

<p>Here are <a href="http://types.cs.washington.edu/checker-framework/2016-javaone/2016-09-19%20CF%20@%20JavaOne.pdf">the slides</a> and a <a href="https://www.youtube.com/watch?v=kb6nz85jbuQ">previous session of the presentation</a></p>

<h2>Keeping Your CI/CD Pipeline as Fast as It Needs to Be</h2>

<p><a href="https://twitter.com/abrahammarin?lang=fr">Abraham Marin-Perez</a></p>

<p>Continuous Delivery and Microservices are what you need to do, aren&rsquo;t they ? Well, when actually trying to setup a CI / CD pipeline for all your code, things quickly get complicated pretty fast ! The speaker presented how to deal with this complexity by using metrics from your VCS and build servers to draw an annotated graph of your build pipeline.</p>

<p><a href="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/build-pipeline.jpg"><img class="center" src="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/build-pipeline-small.jpg" title="Graph of the build pipeline" ></a></p>

<ul>
<li>He used the build time to set the size of every node : the longer, the larger</li>
<li>The color for the change rate : the more often it was built the warmer the color</li>
</ul>


<p>It was then possible to determine other metrics such as :</p>

<ul>
<li>the impact time of every node : build time + build time of all the dependencies</li>
<li>the weighted impact time : impact time * change rate</li>
<li>the overall average impact time : sum of all the weighted impact times</li>
<li>the overall max impact time : max of all the impact times</li>
</ul>


<p>Using this and your SLAs it is possible to define policies for your build times such as &ldquo;the max build time should not be more than X&rdquo;. If you want to speed up your build, you can set a target build time and analyzing the graph should help you to understand what architecture changes you need to make to your system in order to meet this build time (this sounds a lot like <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">Toyota&rsquo;s Improvement Kata</a> &hellip;)</p>

<p>I loved this talk ! I found the speaker captivating, he presented novel ideas which is not always the case.</p>

<p>Here are <a href="http://www.slideshare.net/AbrahamMarinPerez/keeping-your-cicd-pipeline-as-fast-as-it-needs-to-be">the slides</a>, and <a href="https://www.youtube.com/watch?v=8JxoKJng_eQ">the same presentation at Devoxx UK</a>.</p>

<h2>To Be Continued</h2>

<p>I promised 5, and that&rsquo;s only 2 talks ! Stay tuned, I&rsquo;ll write about the 3 others in the coming weeks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actors and Green Threads in Java Demystified]]></title>
    <link href="http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified/"/>
    <updated>2015-08-15T13:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified</id>
    <content type="html"><![CDATA[<p>After finishing my <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>, one of the things that most surprised me, is how simple it was to prototype the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model</a> in Java using <a href="https://en.wikipedia.org/wiki/Green_threads">Green Threads</a>.</p>

<h2>The Code</h2>

<p>First, here is the base class for all actors.</p>

<p>```java
public class Actor implements Runnable {</p>

<pre><code>private final ExecutorService threadPool;
private final ConcurrentLinkedQueue&lt;Runnable&gt; mailbox = new ConcurrentLinkedQueue&lt;&gt;();
private boolean stoped;

public Actor(ExecutorService threadPool) {
    this.threadPool = threadPool;
}

public void run() {
    if (stoped) {
        return;
    }

    Runnable nextMessage = mailbox.poll();
    if (nextMessage != null) {
        nextMessage.run();
    }
    submitContinuation();
}

public void start() {
    submitContinuation();
}

protected void stop() {
    stoped = true;
}

protected void send(Runnable runnable) {
    mailbox.add(runnable);
}

private void submitContinuation() {
    threadPool.submit(this);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>As you can see, I simply used Runnable as the type of the messages.</p>

<p>The Actor itself is Runnable, meaning that it can be submitted to the thread pool. When executed :</p>

<ol>
<li>it tries to handle a message from the mailbox if there is one.</li>
<li>It then re-submits the actor itself</li>
</ol>


<p>This ensures that only one thread is executing messages on an actor at a given time, and it also avoids spawning new thread for every new actor.</p>

<p>As an example, here is how I used this to make an actor of an existing InProcessChatRoom class.</p>

<p>```java
public interface ChatRoom {</p>

<pre><code>void broadcast(Output client, String message);
...
</code></pre>

<p>}
```</p>

<p>```java
public class InProcessChatRoom implements ChatRoom {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>```java
public class ChatRoomActor extends Actor implements ChatRoom {</p>

<pre><code>private final ChatRoom realChatroom;

public ChatRoomActor(ChatRoom realChatroom, ExecutorService threadPool) {
    super(threadPool);
    this.realChatroom = realChatroom;
    start();
}

@Override
public void broadcast(final Output client, final String message) {
    send(new Runnable() {
        @Override
        public void run() {
            realChatroom.broadcast(client, message);
        }
    });
}
...
</code></pre>

<p>}
```
ChatRoomActor is in fact some kind of proxy to use from other actors to send messages to the chat room.</p>

<p>As with any implementation of the Actors Model, the neet thing is the separation of threading and logic. That makes it so much simpler ! (You can get more detail about the complexity I am talking about by taking a look at the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>)</p>

<h2>Performances</h2>

<p>Here is a performance summary of this implementation compared to others on a &ldquo;throughput vs clients&rdquo; benchmark of the style &ldquo;Enter while others are talking&rdquo;</p>

<p><a href="https://github.com/philou/concurrency-kata"><img class="center" src="https://raw.githubusercontent.com/philou/concurrency-kata/master/enter-while-others-are-talking.png" title="Result graphs of benchmark enter while others are talking" ></a></p>

<p>Results can be disappointing compared to other implementations but the example itself is a bit misleading. The chatroom does exclusively message passing, there is not much computation to parallelize, in a different setting, the results would have been completely different.</p>

<h2>Limitations</h2>

<p>As you can see, this implementation is just a quick prototype, nothing production ready. Here are the main limitations I can think of right now :</p>

<ul>
<li>It uses <a href="https://en.wikipedia.org/wiki/Busy_waiting">Busy Waiting</a> for the next message, meaning that it consumes unnecessary resources, and that more important messages to other Actors might be delayed</li>
<li>Usually, actor messages are selected on their type rather than on their order of arrival, this is not the case here</li>
<li>The usage of the Runnable interface as base message type, though handy, opens the door to inter-thread calls that might violate the model altogether</li>
<li>There is absolutely no support of out of process actors until the messages are Serializable</li>
</ul>


<h2>Going Further</h2>

<p>I started this <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> as a training material about concurrency for colleagues at <a href="http://www.murex.com">work</a>. In the spirit of the coding kata, it&rsquo;s a git repo you can walk, explore and experiment with.</p>

<p>So if you want to learn more about different models of concurrency, you are welcome to have a look at the How-To section in the <a href="https://github.com/philou/concurrency-kata">README</a> file.</p>

<p>On my part, although it was a lot more work than I would have guessed at the beginning, I barely scratch the surface of the subject ! I could now :</p>

<ul>
<li>extract the <a href="https://fr.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> or Actor implementation and make them more robust</li>
<li>practice and present the whole kata as a 2 hours live coding session</li>
<li>prepare a hands-on training about concurrency</li>
</ul>


<p>So, if you are willing to do any of the above you are welcome to contribute !</p>
]]></content>
  </entry>
  
</feed>
