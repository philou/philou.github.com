<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mocking | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/mocking/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-05-03T06:12:41+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Immutable Value Objects vs Mocks : Fizz Buzz]]></title>
    <link href="http://philippe.bourgau.net/immutable-value-objects-vs-mocks-fizz-buzz/"/>
    <updated>2018-05-03T19:28:00+02:00</updated>
    <id>http://philippe.bourgau.net/immutable-value-objects-vs-mocks-fizz-buzz</id>
    <content type="html"><![CDATA[<p>In my <a href="/how-immutable-value-objects-fight-mocks/">previous post</a> I explained how <a href="https://martinfowler.com/bliki/ValueObject.html">Immutable Value Objects</a> help us to avoid mocks. In this post, I&rsquo;ll illustrate this in practice with real code.</p>

<p>This is the third post on a <a href="/blog/categories/how-to-avoid-mocks-series/">series about how to avoid mocks</a>. If you haven&rsquo;t, you can start reading the full story <a href="/careless-mocking-considered-harmful/">here</a>.</p>

<p><img src="../imgs/2018-04-17-immutable-value-objects-vs-mocks-fizz-buzz/immutable-fizz-buzz.jpg" alt="A drawing &quot;FIZZ BUZZ&quot; rock fallen and sealed in the ground" /></p>

<h2>Fizz Buzz Example</h2>

<p>As a simple example, I&rsquo;ll go through the classic <a href="http://codingdojo.org/kata/FizzBuzz/">Fizz Buzz</a>. I&rsquo;ve implemented and tested it with and without immutable value objects. Please keep in mind that this is a toy example, where problems are obvious and easily fixed. I try to highlight at small scale the same problems that get hidden by the complexity of a large scale program.</p>

<p>Let&rsquo;s start with a typical FizzBuzz implementation.</p>

<p>```ruby
1.upto(100) do |i|
  if (i%3 == 0 and i%5 == 0)</p>

<pre><code>STDOUT.puts("FizzBuzz\n")
</code></pre>

<p>  elsif (i%3 == 0)</p>

<pre><code>STDOUT.puts("Fizz\n")
</code></pre>

<p>  elsif (i%5 == 0)</p>

<pre><code>STDOUT.puts("Buzz\n")
</code></pre>

<p>  else</p>

<pre><code>STDOUT.puts("#{i}\n")
</code></pre>

<p>  end
end
```</p>

<p>Suppose you need to add some tests around the code. The most straightforward way is to mock <code>STDOUT</code> :</p>

<p>```ruby
require &lsquo;rspec&rsquo;</p>

<p>def fizzBuzz(max, out)
  1.upto(max) do |i|</p>

<pre><code>if (i%3 == 0 and i%5 == 0)
  out.puts("FizzBuzz\n")
elsif (i%3 == 0)
  out.puts("Fizz\n")
elsif (i%5 == 0)
  out.puts("Buzz\n")
else
  out.puts("#{i}\n")
end
</code></pre>

<p>  end
end</p>

<h1>main</h1>

<p>fizzBuzz(100,STDOUT)</p>

<p>describe &lsquo;Mockist Fizz Buzz&rsquo; do</p>

<p>  it &lsquo;should print numbers, fizz and buzz&rsquo; do</p>

<pre><code>out = double("out")
expect(out).to receive(:puts).with("1\n").ordered
expect(out).to receive(:puts).with("2\n").ordered
expect(out).to receive(:puts).with("Fizz\n").ordered
expect(out).to receive(:puts).with("4\n").ordered
expect(out).to receive(:puts).with("Buzz\n").ordered
expect(out).to receive(:puts).with("Fizz\n").ordered
expect(out).to receive(:puts).with("7\n").ordered
expect(out).to receive(:puts).with("8\n").ordered
expect(out).to receive(:puts).with("Fizz\n").ordered
expect(out).to receive(:puts).with("Buzz\n").ordered
expect(out).to receive(:puts).with("11\n").ordered
expect(out).to receive(:puts).with("Fizz\n").ordered
expect(out).to receive(:puts).with("13\n").ordered
expect(out).to receive(:puts).with("14\n").ordered
expect(out).to receive(:puts).with("FizzBuzz\n").ordered

fizzBuzz(15, out)
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Unfortunately, there are a few problems with this code :</p>

<ul>
<li>With nested logic and complicated mock setup, both code and tests aren&rsquo;t very readable</li>
<li>They both seem to violate the single responsibility principle as well</li>
<li>It&rsquo;s depending on a mutable output. Within a larger program, something could be messing around with this output stream. That would break FizzBuzz.</li>
</ul>


<p>Let&rsquo;s now try to use as many immutable values objects as possible, and see what happens to the mocks.</p>

<p>```ruby
require &lsquo;rspec&rsquo;</p>

<h1>We extracted a function to do the fizz buzz on a single number</h1>

<p>def fizzBuzzN(i)
  if (i%3 == 0 and i%5 == 0)</p>

<pre><code>"FizzBuzz"
</code></pre>

<p>  elsif (i%3 == 0)</p>

<pre><code>"Fizz"
</code></pre>

<p>  elsif (i%5 == 0)</p>

<pre><code>"Buzz"
</code></pre>

<p>  else</p>

<pre><code>i.to_s
</code></pre>

<p>  end
end</p>

<h1>We replaced the many calls to STDOUT.puts by building a single</h1>

<h1>large (and immutable) string</h1>

<p>def fizzBuzz(max)
  ((1..max).map {|i| fizzBuzzN(i)}).join(&ldquo;\n&rdquo;)
end</p>

<h1>main, with a single call to STDOUT.puts</h1>

<p>STDOUT.puts fizzBuzz(100)</p>

<p>describe &lsquo;Statist Fizz Buzz&rsquo; do</p>

<p>  it &lsquo;should print numbers not multiples of 3 or 5&rsquo; do</p>

<pre><code>expect(fizzBuzzN(1)).to eq("1")
expect(fizzBuzzN(2)).to eq("2")
expect(fizzBuzzN(4)).to eq("4")
</code></pre>

<p>  end</p>

<p>  it &lsquo;should print Fizz for multiples of 3&rsquo; do</p>

<pre><code>expect(fizzBuzzN(3)).to eq("Fizz")
expect(fizzBuzzN(6)).to eq("Fizz")
</code></pre>

<p>  end</p>

<p>  it &lsquo;should print Buzz for multiples of 3&rsquo; do</p>

<pre><code>expect(fizzBuzzN(5)).to eq("Buzz")
expect(fizzBuzzN(10)).to eq("Buzz")
</code></pre>

<p>  end</p>

<p>  it &lsquo;should print FizzBuzz for multiples of 3 and 5&rsquo; do</p>

<pre><code>expect(fizzBuzzN(15)).to eq("FizzBuzz")
expect(fizzBuzzN(30)).to eq("FizzBuzz")
</code></pre>

<p>  end</p>

<p>  it &lsquo;should print numbers, fizz and buzz&rsquo; do</p>

<pre><code>expect(fizzBuzz(15)).to start_with("1\n2\nFizz").and(end_with("14\nFizzBuzz"))
</code></pre>

<p>  end
end
```</p>

<p>As we can see, using immutable value objects got us rid of the mocks. Obviously, this new code will not be as efficient as the original version, but most of the time, this does not matter. As a bonus though we get finer grain and more readable tests.</p>

<h3>Other testing advantages</h3>

<p>Appart from preventing mocks, Immutable Value Objects have other advantages related to testing.</p>

<ul>
<li>We can directly assert their equality, without having to dig into their guts</li>
<li>We can call methods as many times as we want, without the risk of changing anything and breaking the tests</li>
<li>Immutable Value Objects are a lot less likely to contain invalid state. This removes the need for a whole range of validity tests.</li>
</ul>


<blockquote><p>ðŸ’¡ Immutable Value Objects simplify testing in many ways.</p></blockquote>

<h3>Convincing your teammates</h3>

<p>We&rsquo;ve seen that Immutable Value Objects have a ton of advantages when testing. People have found that they also have many other benefits :</p>

<ul>
<li><a href="https://www.linkedin.com/pulse/20140528113353-16837833-6-benefits-of-programming-with-immutable-objects-in-java/">6 Benefits of Programming with Immutable Objects in Java</a></li>
<li><a href="https://hackernoon.com/5-benefits-of-immutable-objects-worth-considering-for-your-next-project-f98e7e85b6ac">5 Benefits of Immutable Objects Worth Considering for Your NextÂ Project</a></li>
</ul>


<p>Surprisingly though, it&rsquo;s difficult to persuade programmers to use more immutability. It&rsquo;s tricky to explain why returning a modified copy is simpler than just adding a setter.</p>

<blockquote><p>ðŸ’¡ Why is it so hard to persuade other developers to use immutable data structures ?</p></blockquote>

<p>I had the most success by far when encountering a bug resulting of share mutable state. When this happens, the long term benefits and safety of the immutable design wins people over. The good thing is that as you convince more people in the team, immutability will spread like a virus !</p>

<p>Outside of this situation, you might try some of the following arguments to move people :</p>

<ul>
<li>Immutable values prevent bugs caused by different parts of the system changing the same mutable state</li>
<li>They make it easier to deal with the program in smaller parts and to reason about the system in general</li>
<li>Immutable values don&rsquo;t need any synchronization and make multithreaded programming easier</li>
<li>When tempted to add a simple setter instead of keeping a class immutable, highlight the stressful debugging time to come</li>
<li>If you&rsquo;re dealing with a Design By Contract adept, explain how <a href="/almost-15-years-of-using-design-by-contract/">immutability has it built-in</a></li>
<li>Admit that mainstream languages have bad support for Immutable Value. Point to patterns like <a href="https://dzone.com/articles/immutability-with-builder-design-pattern">Data Builders</a> that work around these limitation</li>
</ul>


<h2>Next post</h2>

<p>I&rsquo;m done with immutable value objects. It was a far longer post than I thought, but there was a lot to say. This was the third post in a <a href="/blog/categories/how-to-avoid-mocks-series/">series about avoiding mocks</a>. In next post, I&rsquo;ll dig into another small scale mock fighting pattern : <a href="http://www.natpryce.com/articles/000714.html">Test Data Builders</a>.</p>

<p><a href="https://feedburner.google.com/fb/a/mailverify?uri=PhilippeBourgau&amp;loc=en_US">Stay tuned !</a> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Immutable Value Objects fight Mocks]]></title>
    <link href="http://philippe.bourgau.net/how-immutable-value-objects-fight-mocks/"/>
    <updated>2018-04-26T08:51:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-immutable-value-objects-fight-mocks</id>
    <content type="html"><![CDATA[<p>Excessive use of mocks makes tests very painful to maintain. If we stick painful mocks for too long, we&rsquo;ll end up abandoning unit testing. Eventually, the system will degrade into legacy.Â </p>

<p>There are many techniques to avoid mocks. Some of the most effective involve architecture changes. Unfortunately, there are not the most straightforward to use. Re-architecting involves people and time that you may not dispose of right now. In the following posts, I&rsquo;ll go over techniques that any developer can use in his day to day code to avoid mocks. These battle tested techniques that I&rsquo;ve used on different projects in the past. Check <a href="/careless-mocking-considered-harmful/">the previous post</a> if you&rsquo;re interested to learn how I came to use them.</p>

<p>This is the second post <a href="/blog/categories/how-to-avoid-mocks-series/">of a series about how to avoid mocks</a> in automated tests. If you haven&rsquo;t yet, I recommend you to read my <a href="/careless-mocking-considered-harmful/">first post</a> to understand the perils of mocks in more details.</p>

<p>The first mock fighting small-scale technique I&rsquo;ll go over is <a href="https://martinfowler.com/bliki/ValueObject.html">Immutable Value Objects</a>.</p>

<p><img src="../imgs/2018-04-17-how-immutable-value-objects-fight-mocks/immutable-rock.jpg" alt="A drawing of a rock written &quot;Immutable Value Object&quot;" /></p>

<h2>What are Immutable Value Objects ?</h2>

<p>Behind this weird name is something very simple to understand. Immutable Value Objects :</p>

<ul>
<li>Cannot change their state after construction</li>
<li>Only depend on other Immutable Value Objects</li>
<li>Don&rsquo;t change the state of the whole system in any way</li>
<li>Don&rsquo;t do side effects, like inputs and outputs for example</li>
</ul>


<p>Eric Evans popularized the name in the <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_2?ie=UTF8&amp;qid=1523985269&amp;sr=8-2&amp;keywords=domain+driven+design">Domain-Driven Design Blue Book</a>. Immutable Value Objects have existed for decades in functional languages though. We say these objects are immutable (they cannot change) and pure (they cannot do side effects). Here are 2 interesting properties of Value Objects :</p>

<ul>
<li>you can call a method any number of times with no risk of changing anything to the system</li>
<li>you&rsquo;ll always get the same result every time you call the same method on the same object</li>
</ul>


<p>These by itself, can already be handy when testing.</p>

<p><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_2?ie=UTF8&amp;qid=1523985269&amp;sr=8-2&amp;keywords=domain+driven+design"><img src="../imgs/2018-04-17-how-immutable-value-objects-fight-mocks/ddd.jpg" alt="Cover of Eric Evans's DDD book" /></a></p>

<h2>How do they prevent mocks ?</h2>

<p>That was a bit theoretical, so let&rsquo;s see how this helps to reduce mocking.</p>

<h3>Simpler &ldquo;init path&rdquo;</h3>

<p>Let&rsquo;s take it the other way round and see how side effects can lead to mocking. Every test starts with setting the state in which to run the test. Side effects make this complicated, as many objects need to collaborate to set this state up. When this becomes too painful, people start hacking around with mocks. This in turn makes the tests more fragile :</p>

<ul>
<li>We are not testing a &ldquo;real&rdquo; situation</li>
<li>We need to keep this setup in line with the real code</li>
</ul>


<blockquote><p>ðŸ’¡ Intricate state initialization encourage people to use mocks.</p></blockquote>

<h3>Isolates parts of the system</h3>

<p>Unfortunately, that is not all the story ! Mutable state also, tricks us into using mocks. As soon as your test deals with mutable state, there is a chance that this state is changed in the &lsquo;real&rsquo; system. This means that some bugs might &lsquo;escape&rsquo; unit tests and appear in end to end tests or in production. That&rsquo;s where the mocks strike ! In order to detect this bug in a fast feedback loop, we&rsquo;re likely to add larger scope tests and use mocks to speed them up &hellip;</p>

<blockquote><p>ðŸ’¡ Mutable state and side effects make unit tests less effective.</p></blockquote>

<h3>Reduces code with side effects</h3>

<p>But there&rsquo;s another reason why Immutable Value Objects help us to avoid mocks. As we&rsquo;ll try to use them more and more for the previous two reasons, we&rsquo;ll need to adapt our programming style. As we&rsquo;ll push more and more code in Immutable Value Objects, the &lsquo;imperative&rsquo; part will shrink. This &lsquo;imperative&rsquo; part is where side-effect happen. This is the part where mocking out IOs makes sense. To summarize, the more Immutable Value Objects we use, the more isolated the IOs are, and the less mocking we need.</p>

<p>Javascript expert Eric Elliot also wrote about the immutability and mocks <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a">here</a>.</p>

<h2>Next week</h2>

<p>This was the second post in a <a href="/blog/categories/how-to-avoid-mocks-series/">series about how to prevent mocks</a> in your automated tests. <a href="/immutable-value-objects-vs-mocks-fizz-buzz/">Next post</a> will be an example of using immutable value objects on the <a href="http://codingdojo.org/kata/FizzBuzz/">FizzBuzz kata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Careless Mocking Considered Harmful]]></title>
    <link href="http://philippe.bourgau.net/careless-mocking-considered-harmful/"/>
    <updated>2018-04-19T13:13:00+02:00</updated>
    <id>http://philippe.bourgau.net/careless-mocking-considered-harmful</id>
    <content type="html"><![CDATA[<blockquote><p>ðŸ’¡ Mock hell : when excessive use of test mocks makes <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> extremely slow or difficult.</p></blockquote>

<p>A few years ago, I managed to get a side project out of mock hell. Since then, I&rsquo;ve been using what I learned to avoid mocks in all the projects I&rsquo;ve worked on. This is the start of a series of posts about my mock-avoiding techniques.</p>

<p><img src="../imgs/2018-04-10-careless-mocking-considered-harmful/mocks-dont-rock.jpg" alt="A tag &quot;Mocks don't rock !&quot;" /></p>

<h2>Escape from Mock Hell</h2>

<p>Between 2010 and 2014, I was working on a side project I called <a href="https://github.com/philou/mes-courses">http://mes-courses.fr</a>. Which actually means &ldquo;my house shopping&rdquo; in English. I wanted people to be able to do their house shopping in 5 minutes, by using a better UI for online groceries. I was using Ruby, and I had just read <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1523422024&amp;sr=8-1&amp;keywords=growing+object-oriented+software+guided+by+tests">Growing Object Oriented Software Guided by Tests</a>. I got a bit too excited with mocking, and was using it way too much.</p>

<p>I&rsquo;d been practicing <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> for more than 5 years and I was expecting great results with a language like Ruby. After a few months though, I could feel that something was not going as well as it should. The test initialization code was getting longer and longer, as it included a lot of mock setup. This made the tests more complex and less readable. It also made them unreliable, as it was not rare for all my unit tests to pass while the system was not working. I was taking the habit of running my end to end test more and more often. I was also losing a lot of time maintaining the mock setup code in line with the real classes. Mocks also tricked me into the bad practice of keeping a 1 to 1 mapping between code and test files. That again increased my maintenance burden when moving code from one file to another.</p>

<p>It reached a point where I could not take it anymore. All these problems were pointing at mocks, so I tried to remove them from a test file. Here are the techniques I ended up using to remove them mocks :Â </p>

<ul>
<li><a href="https://martinfowler.com/bliki/ValueObject.html">Value Objects</a></li>
<li><a href="http://www.natpryce.com/articles/000714.html">Test Data Builders</a></li>
<li><a href="https://relishapp.com/rspec/rspec-expectations/docs/custom-matchers">Test Matchers</a></li>
<li><a href="http://alistair.cockburn.us/Hexagonal+architecture">Hexagonal architecture</a></li>
<li><a href="https://www.martinfowler.com/articles/mocksArentStubs.html">In-memory fakes</a></li>
<li><a href="https://wincent.com/wiki/Proxy_(test_double">Proxy doubles</a>)</li>
</ul>


<p>The end result was beyond my hopes, as my problems almost magically disappeared. The code got simpler, I became a lot more confident about my unit tests, and they got easier to maintain. As an illustration, here is an excerpts from the diff of a rails controller test file which went through this mock diet.</p>

<p><a href="https://github.com/philou/mes-courses/commit/2c9fce17f9b59d0b3828f309015c07b17cceddf4?diff=split"><img src="../imgs/2018-04-10-careless-mocking-considered-harmful/diff.jpg" alt="A screen capture of a Github diff showing a test file going on a mock diet" /></a></p>

<h2>What&rsquo;s the long term risk ?</h2>

<p>Basically, excessive mocking arms the maintainability of the tests. Here is what would have happened if I&rsquo;d done nothing. Tests would have become so painful to maintain that I would have started to ignore or delete them. As coverage would decrease, more and more code would become untested. That&rsquo;s exactly Michael Feathers' definition of Legacy Code :</p>

<blockquote><p>Legacy Code is code without tests. <a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1523422039&amp;sr=1-1&amp;keywords=legacy+code">Michael Feathers</a></p></blockquote>

<p>To summarize, excessive use of mocks leads to legacy code ! As most of us have learned the hard way, the further a system drifts into legacy, the lower the productivity.</p>

<blockquote><p>ðŸ’¡ Excessive use of mocks leads to legacy code</p></blockquote>

<h2>Next posts</h2>

<p>Others already spoke about the dangers of mocks :</p>

<ul>
<li>Uncle Bob through <a href="http://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html">his blog</a></li>
<li>DHH in the <a href="https://www.google.fr/search?q=is+TDD+dead&amp;safe=active&amp;tbm=vid">&ldquo;Is TDD Dead&rdquo; series</a></li>
</ul>


<p>In <a href="/blog/categories/how-to-avoid-mocks-series/">this series of posts</a>, I&rsquo;ll go through the details of the different techniques I used to remove mocks. Here is my plan :</p>

<ol>
<li><a href="/careless-mocking-considered-harmful/">Careless Mocking considered Harmful</a></li>
<li><a href="/how-immutable-value-objects-fight-mocks/">How Immutable Value Objects fight mocks</a></li>
<li><a href="/immutable-value-objects-vs-mocks-fizz-buzz/">Immutable Value Objects vs Mocks : Fizz Buzz</a></li>
<li>How to use Test Data Builders to avoid mocks and keep your tests clear</li>
<li>One last small scale technique to avoid mocks : Test Matchers</li>
<li>Large scale techniques to avoid mocks</li>
<li>Mocking in special contexts like legacy and dynamically or statically typed languages</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How NOT to use mocks, my talk at Paris.rb]]></title>
    <link href="http://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb/"/>
    <updated>2016-09-13T04:03:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb</id>
    <content type="html"><![CDATA[<p>As I already <a href="/blog/categories/mocking/">wrote about</a>, mocks can be trecherous &hellip; I gave a talk about how to avoid them last tuesday at <a href="http://www.meetup.com/fr-FR/parisrb/">Paris.rb meetup</a>. Here are the <a href="https://docs.google.com/presentation/d/1OH3eBgjyMcpupUnGWsHXm7kQjkckFpnJStYYYqBL6Yk/edit?usp=sharing">slides</a>.</p>

<p>It talks about testing, mocking, but also <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a> and <a href="https://wincent.com/blog/proxies-with-rr">test proxies Ã  la RR</a> (but for rspec).</p>

<iframe src="https://docs.google.com/presentation/d/1OH3eBgjyMcpupUnGWsHXm7kQjkckFpnJStYYYqBL6Yk/embed?start=false&loop=false&delayms=3000" frameborder="0" width="790" height="470" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>




<p><p/>
Check the speaker&rsquo;s comments for all the details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecProxies now supports .to receive(xxx)... syntax]]></title>
    <link href="http://philippe.bourgau.net/rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax/"/>
    <updated>2016-08-23T04:47:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/2016-08-23-rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax/test_probes.jpg" title="Hardware test probes" ></p>

<p>Pure mocks are dangerous. They let defect go through, give a false sense of security and are difficult to maintain.</p>

<p>I&rsquo;ve already talked about it <a href="/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">before</a> but since then, <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">DHH announced that he was quitting TDD</a>, the <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead ?</a> debate took place, and the conclusion is that <a href="https://www.thoughtworks.com/insights/blog/mockists-are-dead-long-live-classicists">mockist are dead</a>.</p>

<p>They are still times when mocks feel much simpler than any other things. For example, imagine your process leaks and crashes after 10 hours, the fix is to pass an option to a thirdparty, how would you test this in a fast test ? That&rsquo;s exactly the kind of situation where using test proxies saves you from mocks. A test proxy defers everything to the real object but also features unintrusive hooks and probes that you can use in your test. If you want a code example, check <a href="https://github.com/philou/mes-courses/commit/2c9fce17f9b59d0b3828f309015c07b17cceddf4?diff=split">this commit</a>, where I refactored a rails controller test from mocks to a RSpecProxies (v0.1).</p>

<p>I created RSpecProxies <a href="/my-new-gem-for-creating-rspec-proxies/">a while ago</a>, a while ago, and it&rsquo;s syntax made it alien to the RSpec work, it needed an update. <a href="http://rspec.info">RSpec</a> now supports basic proxying with partial stubs, spies, the <code>and_call_original</code> and the <code>and_wrap_original</code> methods. <a href="https://github.com/philou/rspecproxies">RSpecProxies 1.0</a> is a collection of hooks built on top of these to make proxying easier, with a syntax that will be familiar to RSpec users.</p>

<h2>Before original hook</h2>

<p>This hook is triggered before a call a method. Suppose you want to simulate a bad connection :</p>

<p>```ruby
it &lsquo;can simulate unreliable connection&rsquo; do
  i = 0
  allow(Resource).to receive(:get).and_before_calling_original { |*args|</p>

<pre><code>i += 1
raise RuntimeError.new if i % 3 == 0
</code></pre>

<p>  }</p>

<p>  resources = Resource.get_at_least(10)</p>

<p>  expect(resources.size).to eq(10)
end
```</p>

<h2>After original hooks</h2>

<p>RSpecProxies provides the same kind of hook after the call :</p>

<p>``` ruby
it &lsquo;can check that the correct data is used (using and_after_calling_original&rsquo; do
  user = nil
  allow(User).to receive(:load).and_after_calling_original { |result| user = result }</p>

<p>  controller.login(&lsquo;joe&rsquo;, &lsquo;secret&rsquo;)</p>

<p>  expect(response).to include(user.created_at.to_s)
end
```</p>

<p>Here we are capturing the return value to use it later in the test. For this special purpose, RSpecProxies also provides 2 other helpers :</p>

<p>``` ruby</p>

<h1>Store the latest result in @user of self</h1>

<p>allow(User).to receive(:load).and_capture_result_into(self, :user)</p>

<h1>Collect all results in the users array</h1>

<p>users = []
allow(User).to receive(:load).and_collect_results_into(users)
```</p>

<h2>Proxy chains</h2>

<p>RSpec mocks provides the <code>message_chain</code> feature to do build chains of stubs. RSpecProxy provides a very similar proxy chain concept. The main difference is that it creates proxies along the way, and not pure stubs. Pure stubs assume that you are mocking everything, but as our goal is to mock as little as possible, using proxies makes more sense.</p>

<p>When using a mockist approach, the message chain is a bad smell because it makes your tests very brittle by depending on a lot of implementation. In contrast, proxy chains are meant to be used where they are the simplest way to inject what you need, without creating havoc.</p>

<p>For example, suppose you want to display the progress of a very slow background task. You could mock a lot of your objects to have a fast test, of if you wanted to avoid all the bad side effects of mocking, you could run the background task in your test, and have a slow test &hellip; Or, you could use a chain of proxies :</p>

<p>``` ruby
it &lsquo;can override a deep getter&rsquo; do
  allow(RenderingTask).to proxy_message_chain(&ldquo;load.completion_ratio&rdquo;) { |e| e.and_return(0.2523) }</p>

<p>  controller.show</p>

<p>  expect(response).to include(&lsquo;25%&rsquo;)
end
```</p>

<p>Here the simplest thing to do is just to override a small getter, because from a functionnal point of view, that&rsquo;s exactly what we want to test.</p>

<h2>Last word</h2>

<p>The code is on <a href="https://github.com/philou/rspecproxies">github</a>, v1.0.0 is on <a href="https://rubygems.org/gems/rspecproxies/versions/0.1.0">rubygems</a>, it requires Ruby v2.2.5 and RSpec v3.5, the license is MIT, help in any form are welcome !</p>
]]></content>
  </entry>
  
</feed>
