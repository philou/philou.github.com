<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: joke | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/joke/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-09-18T06:55:30+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Effective warning signals that will get you sponsorship for a large scale refactoring]]></title>
    <link href="http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/"/>
    <updated>2018-09-13T13:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring</id>
    <content type="html"><![CDATA[<p>In 2005, professors Bizer and Petty showed something interesting about human behavior. People make more efforts to avoid what they don&rsquo;t want, than to get what they would like. The study itself is interesting, you can have a look at it <a href="https://www.jstor.org/stable/41057679?seq=1#page_scan_tab_contents">here</a>. For example, it explains why political campaigns are getting more and more nasty. There&rsquo;s also a lesson for us, mere developers. We&rsquo;ll get more sponsorship for our refactorings if we highlight the dangers of not doing them !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/legacy-monster.jpg" alt="Drawing of a warning panel with legacy code written below an awful monster. Sending effective warning signals is a good way to get sponsorship for large scale refactorings" /></p>

<p>This is the 11th post of a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t already, start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>From the inside, many systems are in such a messy state that seem like a catastrophe waiting to happen. Unfortunately, this mess is completely invisible to non-developers ! Here are a few techniques to show how close we are from a total breakdown !</p>

<h2>Effective Warning Signal #1 Pranks</h2>

<p>If you have the guts and your company is fun enough, you can try one of <a href="/the-size-of-code/">these pranks</a> ðŸ˜‰.</p>

<p><a href="https://www.flickr.com/photos/kk/18768224"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/paper-on-desk.jpg" alt="A photo of a desk littered under paper. As if we had printed the whole source code and dumped in on a non-developer desk. Pranks are a good way to get sponsorship for large scale refactorings" /></a></p>

<div class="image-credits">What if we printed the whole source code and dumped in on non-developers desks ? By <a href="https://www.flickr.com/photos/kk/">Kris KrÃ¼g</a>, <a href="https://creativecommons.org/licenses/by-sa/2.0/" title="Attribution-ShareAlike 2.0 Generic">CC BY-SA 2.0</a>, <a href="https://www.flickr.com/photos/kk/18768224">Link</a></div>


<br>


<p>They&rsquo;re bound to have a big impact &hellip; but they might also get you fired ! We should be creative and find both effective and acceptable pranks. Pranks are a lot more effective than we first think. <a href="https://en.wikipedia.org/wiki/Nonviolent_revolution">Non-Violent Revolution</a> activists have actually used <a href="http://laughtivismgroup5.blogspot.com/2016/04/laughtivism.html">Laughitism</a> to take dictators down ! For a good (and unexpectedly fun) read on the topic, have a look a <a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309">Blueprint for a Revolution</a>. It was written by Serb non violent activist <a href="https://en.wikipedia.org/wiki/Sr%C4%91a_Popovi%C4%87_(activist">Srdja Popovic</a>) member of <a href="https://en.wikipedia.org/wiki/Otpor!">OTPOR!,</a> who brought <a href="https://en.wikipedia.org/wiki/Slobodan_Milo%C5%A1evi%C4%87">Millosevic</a> down .</p>

<p><a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/blueprint-revolution.jpg" alt="Cover of the book Blueprint for Revolution. Laughitism is a non violent technique that we can use against Legacy Code to get sponsorship for large scale refactorings" /></a></p>

<p>Promised, as soon as I manage to use such a prank without getting fired at work, I&rsquo;ll blog about it !</p>

<h2>Effective Warning Signal #2 Dice of Debt Game</h2>

<p>While doing my researches for this article, I found the <a href="https://www.agilealliance.org/dice-of-debt-game/">Dice of Debt</a> game. It&rsquo;s aimed at making business people experience the long term legacy code drag. It has good reviews, have a try at it with your business people and post back your feedback ! I&rsquo;ll do so as soon as I have a chance to test it myself.</p>

<h2>Effective Warning Signal #3 Higher authority</h2>

<p>Appealing to a higher authority works as long as people recognize this authority as so. Knowing the people in front of us, it&rsquo;s our job to bring up the reference in an effective way. Here are</p>

<p>In <a href="https://www.youtube.com/watch?v=xEqRtIeD51k">this talk</a>, <a href="http://docondev.com/">Doc Norton</a>, a recognized technical debt expert, shows the link between technical debt and productivity.</p>

<p><a href="https://www.youtube.com/watch?v=xEqRtIeD51k"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/technical-debt-trap.jpg" alt="Slide from Doc Norton's Technical Debt Trap talk. It shows how technical debt impacts the cost of change and can be an effective warning signal for a large scale refactoring" /></a></p>

<p>Showing similarities between our own code metrics and this graph might ring the alarm bell in business people.</p>

<p>Another interesting model out there is <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM</a>. It was built through the <a href="https://www.agilealliance.org/">Agile Alliance</a>. It can be used to estimate the value of a codebase when buying a company. Maybe business people will listen if we tell them that their software would be worth 0 on the market ?</p>

<h2>Effective Warning Signal #4 Metaphor</h2>

<p>I was recently working with a team that is preparing a pitch to get sponsorship for a refactoring. They want to rework multithreaded code that uses locks and other low level synchronization. The hand written synchronization is becoming difficult to maintain. They would like to refactor it with the <a href="https://en.wikipedia.org/wiki/Actor_model">actor model</a>. Business people will likely argue that this module is now stable enough and should stay as is. We all know that this is not the case with bogus multithreaded code : the more you use it, the more bugs you find ! They had the idea to use the email vs phone metaphor. No one in the room could have handled all his daily emails with a phone only ! Everyone understood why it was necessary to switch to actors.</p>

<p>In <a href="https://engineering.riotgames.com/news/taxonomy-tech-debt">A Taxonomy of Technical Debt</a>, <a href="https://www.linkedin.com/in/bill-clark-37444a133/">Bill Clark</a> adds another dimension to technical debt. On top of the classic principal and interests he adds contagion. In fact, it&rsquo;s a bit as if he&rsquo;s ditching the <a href="https://martinfowler.com/bliki/TechnicalDebt.html">technical debt metaphor</a> for the disease metaphor ! Disease have a cost to live with, a cost to heal from and a contagion rate. People at the agile alliance also noted this <a href="https://www.agilealliance.org/technical-debt-systemic-problem/">self reinforcing behavior</a>. This metaphor might be better for &ldquo;<a href="https://en.wikipedia.org/wiki/Cruft">cruft</a>&rdquo;. <a href="https://twitter.com/wardcunningham?lang=fr">Ward Cunningham</a>&rsquo;s original metaphor of technical debt only applied to tested code.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pqeJFYwnkjE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>ðŸ’¡ A disease might be a better metaphor than debt for code cruft.</p></blockquote>

<h2>Effective Warning Signal #5 A horror story</h2>

<p>We said that a successful refactoring story will be useful to frame ours as an opportunity. We can have more impact with the opposite ! We should relate a large software failure, that had impact on the business to bad code. The bigger the impact on the business, the better it is. If you (unluckily) have something like that at your company, it should be a very powerful argument. If you don&rsquo;t, try to find a public story on the internet, or a public conference. For example here is one from <a href="https://www.makeuseof.com/tag/worst-programming-mistakes-in-history/">The 10 Worst Programming Mistakes in History.</a>Â </p>

<blockquote><p>ðŸ’¡ The <a href="https://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (a radiation therapy machine) killed 6 people because it was difficult to perform automated tests !</p></blockquote>

<p>We can draw parallels and forecasts, to highlight the high risk of failure.</p>

<h2>Almost there</h2>

<p>This was the 11th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. Unfortunately, presenting refactoring in a good way only brings us so far. If we want to be really convincing, we need to use quantitative data. That&rsquo;s going to be the topic of my <a href="http://eepurl.com/dxKE95">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20 Bad Excuses For Not Writing Unit Tests]]></title>
    <link href="http://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/"/>
    <updated>2017-05-23T06:08:00+02:00</updated>
    <id>http://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests</id>
    <content type="html"><![CDATA[<blockquote><p>I guess we always find excuses to keep on with our bad habits, don&rsquo;t we ? <em><a href="http://www.goodreads.com/quotes/797048-i-guess-we-always-find-excuses-to-keep-on-with">Stephen King</a></em></p></blockquote>

<ol>
<li>I don&rsquo;t have the time. <em>But you&rsquo;ll have the time to fix the bugs &hellip;</em></li>
<li>I don&rsquo;t know how to write tests. <em>No problem, anyone can <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">learn</a>.</em></li>
<li>I&rsquo;m sure the code is working now. <em><a href="https://www.brainyquote.com/quotes/quotes/e/edsgerdijk204340.html">The competent programmer is fully aware of the limited size of his own skull &hellip;</a></em></li>
<li>This code is not testable. <em>Learn or refactor.</em></li>
<li>It&rsquo;s (UI|DB) code, we don&rsquo;t test it. <em>Because it never crashes ?</em></li>
<li>Because I need to refactor first &hellip; and I need tests to refactor ! <em>Damn, you&rsquo;ve fallen into the test deadlock !</em></li>
<li>It&rsquo;s multithreaded code, it&rsquo;s impossible to test. <em>Because it&rsquo;s fully tederministic ?</em></li>
<li>The QA department is already testing the code. <em>Is that working well ?</em></li>
<li>I should not test my own code, I&rsquo;ll be biased. <em>Start testing other people&rsquo;s code right now then !</em></li>
<li>I&rsquo;m a programmer, not a tester. <em><a href="https://softwareengineering.stackexchange.com/questions/159572/as-a-professional-developer-is-it-acceptable-to-not-write-unit-tests">Professional programmers write tests</a>.</em></li>
</ol>


<p><img src="http://philippe.bourgau.net/imgs/2017-05-23-20-bad-excuses-for-not-writing-unit-tests/stronger_than_excuses_quote.jpg" alt="A quote 'Be Stronger Than Your Excuses'" /><div class="image-credits">From <a href="https://todayiwillbefit.com/2013/10/30/excuses-suck-top-10-bad-excuses-to-not-exercise/">todayiwillbefit.com</a></div></p>

<ol>
<li>I&rsquo;m using a REPL, it replaces unit tests. <em>Sure, and you&rsquo;re running your REPL buffers on the CI ? and keeping your them for the next time someone modifies your code.</em></li>
<li>My type system is strong enough to replace tests. <em>Does it detect when you use &lsquo;+&rsquo; instead of &lsquo;*&rsquo; ?</em></li>
<li>We don&rsquo;t have the tooling to write unit tests. <em><a href="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks">Get one</a>.</em></li>
<li>Tests aren&rsquo;t run automatically anyway. <em><a href="https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software">Install a Continuous Integration Server</a>.</em></li>
<li>I&rsquo;m domain expert developer, writing tests is not my job. <em>Creating bugs isn&rsquo;t either !</em></li>
<li>We&rsquo;d rather switch to the <a href="http://www.paulgraham.com/avg.html">Blub language</a> first ! <em>You&rsquo;re right, let&rsquo;s do neither then !</em></li>
<li>We don&rsquo;t test legacy code. <em>Specifically because it is <a href="https://en.wikipedia.org/wiki/Legacy_code">legacy code</a>.</em></li>
<li>Adding tests for every production code we write is insane ! <em>As shipping untested code is unprofessional.</em></li>
<li>I find more issues doing manual testing. <em><a href="/how-we-started-exploratory-testing/">Exploratory Testing</a> is a valuable testing, even more so on top of automated tests.</em></li>
<li>Because my teammates don&rsquo;t run them. <em>Time for a <a href="/most-scrum-teams-are-not-agile/">retrospective</a>.</em></li>
</ol>


<p><img src="http://philippe.bourgau.net/imgs/2017-05-23-20-bad-excuses-for-not-writing-unit-tests/just-do-it.jpg" alt="'Just Do It' written on a board" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Size Of Code]]></title>
    <link href="http://philippe.bourgau.net/the-size-of-code/"/>
    <updated>2016-06-08T04:45:00+02:00</updated>
    <id>http://philippe.bourgau.net/the-size-of-code</id>
    <content type="html"><![CDATA[<p>The CFO&rsquo;s debt is visible in his balance sheet. The CTO&rsquo;s technical debt is invisible. What about making it visible ?</p>

<p>Developers have an intuitive sense of the technical debt in some parts of the system. But few have an accurate estimation of its full extent. Even the size of a code base is difficult to grasp. In the same way, the size of the code is just a number. But the fact are there : between 10 000 and 10 000 000 lines of code, the rules aren&rsquo;t the same, but it&rsquo;s only invisible data on hard drives &hellip;</p>

<h2>Showing It</h2>

<p>If we had a device or a trick to show to non-developers the size of the source code, people might start to feel the embarrassment of working in a bloated code base. Unfortunately, for the moment, the only ideas I had are somehow unrealistic, albeit funny !</p>

<h3>First Idea : Printouts</h3>

<p>Suppose we printed all the source code every Monday, and then keep it around for everyone to feel its size. We could leave it in the middle of the place, or in the CTO&rsquo;s office, so that he&rsquo;d actually be hindered by the space loss. The larger the code, the bigger the troubles.</p>

<p>It&rsquo;s possible to print 50 lines on a sheet of paper, that&rsquo;s 100 on both sides.
That&rsquo;s 50 000 in a pack of 500 pages. And eventually, 200 000 in this kind of standard case :</p>

<p><img src="http://philippe.bourgau.net/imgs/2016-06-08-the-size-of-code/paper-case.jpg" alt="A 2000 sheets paper case" /></p>

<p>Keeping these printouts in sync with the real cost would make the thing even more <del>painful</del> realistic. Imagine all the printings costs, and moving around cases of paper every day &hellip; ;)</p>

<h3>Second Idea : Inflatable Device</h3>

<p>What about an inflatable device linked to <a href="http://www.sonarqube.org/">SonarQube</a> (or any other code metrics tracking system) ? It could grow as new code is written. We could make it as large as we want : 1m<sup>3</sup> for every 10K lines of Code, making the whole office a difficult place to walk around. Try to figure out how to work with this thing in the office :</p>

<p><a href="http://www.jimmykuehnle.com/artblog/inflatable-bigger-than-the-studio/"><img src="http://philippe.bourgau.net/imgs/2016-06-08-the-size-of-code/Large_Inflatable_Art.jpg" alt="Large Inflatable Art (Jimmy Kuehnle)" /></a><div class="image-credits"><a href="http://www.jimmykuehnle.com/artblog/inflatable-bigger-than-the-studio/">By Jimmy Kuehnle</a> </div></p>

<h3>Third Idea : Sand</h3>

<p>For maximum pain, let&rsquo;s use real sand instead of an inflatable device ! Imagine the mess with some sand lying around in the office. If the only way to clean up the mess was to clean up the code, surely everyone would take the issue seriously !</p>

<p><img src="http://philippe.bourgau.net/imgs/2016-06-08-the-size-of-code/sand-pile.jpg" alt="A sand pile on the pavement" /></p>

<h2>Final Word</h2>

<p>Obviously, these are jokes, but I guess there&rsquo;s a real need there. If we managed to make non developers feel the size and cost of the code base, it would be easier to agree on priorities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Legacy Code Coverall Day]]></title>
    <link href="http://philippe.bourgau.net/legacy-code-coverall-day/"/>
    <updated>2016-06-06T04:16:00+02:00</updated>
    <id>http://philippe.bourgau.net/legacy-code-coverall-day</id>
    <content type="html"><![CDATA[<p><img src="http://philippe.bourgau.net/imgs/2016-06-06-legacy-code-coverall-day/miners.jpg" alt="Miners going to work in Coveralls" /></p>

<p>Some days, coding feels like speleology or mining &hellip; Dealing with weird and undocumented old logic can even some time be <a href="https://www.quora.com/How-do-you-keep-your-sanity-while-working-on-a-Super-Dirty-Rotten-Spaghetti-codebase">damaging to the mind</a> ! I think we should go to work wearing the adequate protection !</p>

<p>OK, maybe we cannot start to go to work wearing a coverall everyday, but let&rsquo;s say very 21st of June is now legacy code day, the day when every developer maintaining legacy code comes to work dressed like that !</p>

<p>Obviously, that&rsquo;s a joke, but it could attract the attention of other non-coding people on the state of <em>their</em> codebase and amount of <em>their</em> technical debt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anti Ugly-Code Glasses]]></title>
    <link href="http://philippe.bourgau.net/anti-ugly-code-glasses/"/>
    <updated>2016-06-02T04:33:00+02:00</updated>
    <id>http://philippe.bourgau.net/anti-ugly-code-glasses</id>
    <content type="html"><![CDATA[<p>I think I found a way to fix the dirty code problem once and for all &hellip;</p>

<p>In <a href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy">The Hitchhiker&rsquo;s Guide to the Galaxy</a> Zaphod Beeblebrox has some anti panic glasses. They feature some special danger detection mechanism that turns them opaque black to save their bearer from panicking.</p>

<p><img src="http://philippe.bourgau.net/imgs/2016-06-02-anti-ugly-code-glasses/zaphod.jpg" alt="Zaphod Beeblebrox" /></p>

<p><em>(It turns out that Zaphod has two heads &hellip;)</em></p>

<p>In 2016, it&rsquo;s shocking that some many hours are lost by poor developers reading ugly code.</p>

<p>Let&rsquo;s build anti ugly-code glasses ! We&rsquo;d just need an IDE or editor plugin, connect it to <a href="http://www.sonarqube.org/">Sonar</a> in order to get the quality of the current file, and if too bad, shut the glasses black !</p>

<p>Finally the killer feature for augmented reality glasses !</p>
]]></content>
  </entry>
  
</feed>
