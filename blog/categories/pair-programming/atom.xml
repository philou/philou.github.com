<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pair programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/pair-programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-09-29T20:44:23+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eXtreme eXtreme Programming (2017)]]></title>
    <link href="http://philippe.bourgau.net/extreme-extreme-programming-2017/"/>
    <updated>2017-08-25T07:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/extreme-extreme-programming-2017</id>
    <content type="html"><![CDATA[<p>What would <a href="http://www.extremeprogramming.org/">XP</a> look like if it was invented today ?</p>

<p>A few days ago, I stumbled upon these two talks that got me thinking about this question.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cGuTmOUdFbo" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/h62n09XtS-A" frameborder="0" allowfullscreen></iframe>


<p>So I looked deeper into the question, while sticking to the same <a href="http://www.extremeprogramming.org/values.html">values</a> and principles. Here is what I came up with.</p>

<h2>Practices</h2>

<h3>Continuous Deployment</h3>

<p>Why should we only deliver at every iteration in 2017 ? <a href="https://blog.newrelic.com/2016/02/04/data-culture-survey-results-faster-deployment/">Lot&rsquo;s of companies</a> demonstrated how to deploy every commit to safely production. Amazon for example, <a href="http://www.zdnet.com/article/how-amazon-handles-a-new-software-deployment-every-second/">deploys new software every second</a> !</p>

<h3><a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a>++</h3>

<p>As a team starts doing continuous deployment, devs get more and more involved in ops. This privileged view on the users&rsquo;s behaviour can turn devs into product experts. Why not push the logic further and make them <em>the</em> product guys as well ?</p>

<h3>Test in prod</h3>

<p>Continuous deployement opens up many opportunities. Deploying safely requires bulletproof rollbacks. Once devs take care of product, code and ops they can shortcut testing and directly <a href="https://www.theguardian.com/info/developer-blog/2016/dec/05/testing-in-production-how-we-combined-tests-with-monitoring">test in prod</a> with some users ! Rollback remains an option at any time.</p>

<h3><a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#NoBugs</a></h3>

<p>That seems like wishful thinking. The idea is to fix bugs as soon as they appear, but also to prevent them in the first place. Continuous Deployment requires great engineering practices, which enable this way of working. A story cannot be &ldquo;finished&rdquo; until test in prod is over, and bugs fixed.</p>

<h3>Kanban</h3>

<p>At its core, <a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a way to limit the work in progress. It&rsquo;s almost a side effect of the previous practices. <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">#noBugs almost kills interruptions for rework</a>. On top of that, devs have full control on their end to end work, so why would they multitask ?</p>

<h3>#NoBacklog</h3>

<p>In <a href="https://gettingreal.37signals.com/">Getting Real</a>, basecamp guys said that their <a href="https://gettingreal.37signals.com/ch05_Start_With_No.php">default answer to any new feature request was &ldquo;No&rdquo;</a>. Only after the same thing got asked many times would they start thinking of it. Maintaining a long backlog is a waste of time. Dumping backlog items but the current ones saves time. Important ideas will always come up again later.</p>

<h3>#NoEstimates</h3>

<p>This one is famous already. <a href="https://www.thoughtworks.com/insights/blog/how-estimating-story-counts-worked-us">Some teams</a> have saved time by using story count instead of story points. What&rsquo;s the point anyway if the team is already :</p>

<ul>
<li>working as best as it can</li>
<li>on the most important thing</li>
<li>and deploying as soon as possible</li>
</ul>


<h3>Data Driven</h3>

<p>This is how to drive the system evolution. Instead of relying on projects, backlogs and predictions, use data. Data from user logs and interviews proves if a new feature is worth building or dumping. Exploring logs of internal tools can help to continuous improve.</p>

<h3>Lean startup &amp; Hackathons</h3>

<p>Incremental improvements, in either product or organization, is not enough. As <a href="http://timharford.com/">Tim Hardford</a> explained in <a href="https://www.amazon.com/gp/product/1250007550/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1250007550&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=1f1a29f9454328c6606e12b40399eb06">Adapt</a>, survival requires testing completely new ideas. <a href="https://en.wikipedia.org/wiki/Lean_startup">Lean startup</a> &amp; <a href="https://en.wikipedia.org/wiki/Hackathon">hackathons</a> experiments can do just that.</p>

<p><a href="https://www.amazon.com/gp/product/1250007550/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1250007550&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=1f1a29f9454328c6606e12b40399eb06"><img src="../imgs/2017-08-25-extreme-extreme-programming-2017/adapt.jpg" alt="The cover of the Adapt book" /></a></p>

<h3><a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">Improvement kata</a></h3>

<p><a href="https://en.wikipedia.org/wiki/Toyota_Kata#The_Improvement_Kata">Improvement kata</a> is a way to drive long term continuous improvement. It&rsquo;s the main tool for that at Toyota (read <a href="https://www.amazon.com/gp/product/0071635238/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0071635238&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=93a84b0867a3e0f3dd915d87cba78b90">Toyota Kata</a> to learn more). It provides more time to think of the problem than a retrospective. It also fits perfectly in a data driven environment.</p>

<h3>Mob programming</h3>

<p>Pair programming is great for code quality and knowledge sharing. <a href="https://en.wikipedia.org/wiki/Mob_programming#cite_note-8">Mob programming</a> is the more extreme version of pairing where <em>all</em> the team codes together.</p>

<h3><a href="/throwing-code-away-frequently/">Throw code away frequently</a></h3>

<p>An alternative to refactoring with unit tests is throwaway and rewrite once it gets too bad. Companies have been doing that for years. I worked at a bank that used to throwaway and rewrite individual apps that were part of a larger system. It can be a huge waste of money if these sub systems are too large. Scaling down to individual classes or microservices could make this cost effective.</p>

<h3>Remote</h3>

<p>With access to a wider pool of talents, <a href="https://martinfowler.com/articles/remote-or-co-located.html">remote teams usually perform better</a>. It also makes everybody&rsquo;s life easier. Finally, teams have reported that mob &amp; remote programming <a href="https://www.infoq.com/presentations/distributed-teams-remote-collaboration">work great together</a>.</p>

<h2>Afterthought</h2>

<p>What&rsquo;s striking from this list is that it&rsquo;s not that far from the original XP ! For example, continuous deployment and generalists have always been part of it. Another point is that is not science fiction ! I found many teams reporting success with these practices on the internet ! A well-oiled XP team might very well get there through continuous improvement.</p>

<p>The more I look at it, the more XP stands as a unique lighthouse in the foggy Agile landscape.</p>

<p>As for me, I&rsquo;m not sure I&rsquo;d dare to swap TDD &amp; refactoring for throwaway &amp; rewrite. I&rsquo;m particularly worried about the complex domain specific heart of systems. Nothing prevents from using both strategies for different modules though.</p>

<p>I should give it a try on a side project with a microservice friendly language, such as Erlang or Elixir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 SPA Conference takeaways that could make us better software professionals]]></title>
    <link href="http://philippe.bourgau.net/5-spa-conference-takeaways-that-could-make-us-better-software-professionals/"/>
    <updated>2017-07-06T22:17:00+02:00</updated>
    <id>http://philippe.bourgau.net/5-spa-conference-takeaways-that-could-make-us-better-software-professionals</id>
    <content type="html"><![CDATA[<p>Last week, my colleague <a href="https://ahmadatwi.me/">Ahmad Atwi</a> and I went to the London <a href="https://www.spaconference.org/spa2017/">SPA Conference</a> to give our <a href="https://www.youtube.com/watch?v=oJsukJhxt7E">Remote eXtreme Practice</a> talk.</p>

<p>The London <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> is one of the most active in the world. You could feel an XP atmosphere at the conference. For example, people like <a href="http://www.natpryce.com/">Nat Pryce</a> and <a href="https://twitter.com/sf105">Steve Freeman</a>, authors of <a href="https://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=fcdd83a07a3cfb190f2c8e7e8b9f72c3">GOOSGT</a> book were speakers.</p>

<p><a href="https://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=fcdd83a07a3cfb190f2c8e7e8b9f72c3"><img src="../imgs/2017-07-06-5-spa-conference-takeaways-that-could-make-us-better-software-professionals/growing.jpg" alt="The cover of Growing Object-Oriented Software, Guided By Tests" /></a></p>

<p>To summarize, we had the chance to attend a lot of very interesting sessions during the 3 days of the conference. Here are 5 pearls of wisdom I took back with me.</p>

<h2>What connascences are</h2>

<p>Identifying code <a href="http://connascence.io/">connascences</a> helps to rank refactorings and keep the system maintainable.</p>

<p><a href="http://www.extremeprogramming.org/rules/refactor.html">Continuous refactoring</a> is one of the core practices of XP. For me, knowing what to refactor next has been a matter of <a href="https://martinfowler.com/bliki/CodeSmell.html">code smells</a>, discussing with my pair and gut feeling.</p>

<p>A connascence is a coupling between parts of the system. Two parts of your code are connascent if changing one implies changing the other. For example, a function call is connascent by name with the function definition. If you change one, you need to change the other.</p>

<p>Connascences are more formal than code smells. We can detect and rank them to pick the most important refactoring to do. People have listed 9 types of connascences. Some are visible in the source code, others are dynamic and difficult to spot before runtime.</p>

<p>The lowest form of connascence is <a href="http://connascence.io/name.html">&lsquo;of name&rsquo;,</a> like in the function call example above. The worst form is <a href="http://connascence.io/identity.html">&lsquo;of Identity&rsquo;</a>, when different parts of the system must reference the same object.</p>

<iframe src="http://philippe.bourgau.net//www.slideshare.net/slideshow/embed_code/key/jPvF4gxm5z6cGN?startSlide=14" width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>The higher the connascence, the more difficult it is to evolve the parts involved. Instead of relying on intuition, you can use a connascence based refactoring algorithm :</p>

<ol>
<li>Detect the highest connascence</li>
<li>Reduce or remove it</li>
<li>Repeat.</li>
</ol>


<p>Thanks <a href="https://twitter.com/xpsurgery">Kevin Rutherford</a> and <a href="https://twitter.com/mowat27">Adrian Mowat</a> for your <a href="http://xpsurgery.com/resources/connascence-hunt-slides/">Red Green then what ?</a> session about connascence.</p>

<h2>Tips for pairing with junior developers</h2>

<p><a href="https://twitter.com/irinatsyganok">Irina Tsyganok</a> and <a href="http://www.natpryce.com/">Nat Pryce</a> gave a very fun session about this topic. A lot of valuable points discussed, from which I saved a few pearls of wisdom.</p>

<blockquote class="twitter-tweet" data-lang="fr"><p lang="en" dir="ltr">Cat eating session from <a href="https://twitter.com/natpryce">@natpryce</a> at <a href="https://twitter.com/hashtag/spaconf17?src=hash">#spaconf17</a> (unless <a href="https://twitter.com/irinatsyganok">@irinatsyganok</a> stops him) <a href="https://t.co/XSiaPDp9kJ">pic.twitter.com/XSiaPDp9kJ</a></p>&mdash; Andy Longshaw (@andylongshaw) <a href="https://twitter.com/andylongshaw/status/879714743963054080">27 juin 2017</a></blockquote>


<script async src="http://philippe.bourgau.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>It was reassuring to hear Nat saying that &ldquo;As we gain experience, we are not expected to know everything&rdquo;. Pairing with developers out of college is an occasion to &ldquo;exchange&rdquo; skills. Hard learned design skills versus updates on the latest technologies.</p>

<p>I also learned about the <a href="http://actingcoachscotland.co.uk/blog/expert-induced-amnesia/">Expert&rsquo;s Amnesia</a> and why experts often have a hard time teaching. Expert level knowledge is by nature instinctive. At this level of skill, it becomes very difficult to detail the logic of things that seem obvious.</p>

<h2>We engineers are more mentors than coaches</h2>

<p>In the <a href="https://www.amazon.com/gp/product/0201616416/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201616416&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=dc2f9dc4f5ca106842921bfded07b405">first XP book</a>, there were only 3 roles in the team : team members, on site customer and XP coach. The XP coach should be a developer who can help the team to learn the practices and principles of XP.</p>

<p>About the same time, the personal or professional coach jobs appeared. The Scrum Master, is to Scrum what the XP coach is to XP, without the developer part. Remember the joke &ldquo;Scrum is like XP, without everything that makes it work&rdquo; (<a href="https://martinfowler.com/bliki/FlaccidScrum.html">Flaccid Scrum</a>).</p>

<p>It looks like the Agile Coach job title appeared out of all this. The problem is no one exactly knows what this is. Should he be an experienced developer like the XP coach ? A great people person ? Or someone good at introducing change ? or a mix of these ?</p>

<p><a href="http://www.selfishprogramming.com/about/">Portia Tung</a> and <a href="https://uk.linkedin.com/in/helenlisowski">Helen Lisowski</a> &rsquo;s  talk &ldquo;The power of coaching&rdquo; clarified that.</p>

<p>There is no knowledge transfer from the coach to the coachees ! On the other side, a mentor does transfer knowledge to his mentees. The coach helps his coachee take a step back and take decisions in full consciousness. The goal of the mentor is to inspire and train to new techniques.</p>

<p>I&rsquo;m fine being a mentor and not a coach ;&ndash;)</p>

<h2>Servant leaders need to be tough at times</h2>

<p>We hear a lot about servant leadership nowadays. Scrum Master should be servant leaders, as well as managers in agile organizations.</p>

<p><a href="https://fr.linkedin.com/company/bellebeck-limited">Angie Main</a> gave a very interesting session about servant leadership. She made an interesting point I had not heard about before. We all know that servant leaders should trust the team to get the work done most of the time. In spite of that, servant leaders must also be ready to step in and remove people who don&rsquo;t fit in and endanger the team !</p>

<p>This reminded me of what Jim Collins says in <a href="http://www.wikisummaries.org/wiki/Built_to_Last#Chapter_6_.E2.80.93_Cult-like_Cultures">Built to last</a> : &ldquo;People who don&rsquo;t fit are expelled like viruses !&rdquo;</p>

<p><a href="https://www.amazon.com/gp/product/0060516402/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0060516402&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=e83ad8e3dcf7bdb7f875d5b22e8eb4c6"><img src="../imgs/2017-07-06-5-spa-conference-takeaways-that-could-make-us-better-software-professionals/built-to-last.jpg" alt="The cover of Built to Last" /></a></p>

<h2>1/3000 ideas succeeds</h2>

<p>Thanks to <a href="https://twitter.com/ozzieyuce">Ozlem Yuce</a>&rsquo;s session, I learned about the &ldquo;Job To Be Done&rdquo; technique to understand the customer&rsquo;s real needs.</p>

<p>Studies measured that only 1 idea out of 3000 ends up as a successful product ! <a href="https://www.researchgate.net/file.PostFileLoader.html?id=56217976614325233f8b4567&amp;assetKey=AS%3A285916150157312%401445179130594">Here</a> seems to be the original research.</p>

<p>I&rsquo;ll remember this fact next time I&rsquo;m ask for a funky feature !</p>

<h2>To conclude</h2>

<p>At the end, we had a very good time at SPAconference. The talks were insightful, we had interesting discussions, the premises were comfortable and on top of that, food was great !</p>

<p>I&rsquo;m already eager to go to SPA conference 2018 !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming, From Pain Zone To Skill Zone]]></title>
    <link href="http://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/"/>
    <updated>2016-05-06T04:04:00+02:00</updated>
    <id>http://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone</id>
    <content type="html"><![CDATA[<p>We&rsquo;re doing pair programming almost all the the time in our team. A few weeks ago, we went to <a href="http://www.devoxx.fr/">Devoxx</a> Paris, and 2 team mates used pair programming at a hands on session : they finished way before the others and had the time to take a 30 minute break. Pair programming delivers more &hellip; when it works.</p>

<h2>Flavors of Pair Programming</h2>

<p>Throughout our experience, we have identified some situations where it does or does not work :</p>

<table>
<thead>
<tr>
<th>Pain Zone         </th>
<th> Skill Zone</th>
</tr>
</thead>
<tbody>
<tr>
<td>Wandering buddies </td>
<td> Mates</td>
</tr>
<tr>
<td>Expert / Novice   </td>
<td> Mentor &amp; Apprentice</td>
</tr>
</tbody>
</table>


<br>


<h2>The Pain Zone</h2>

<p>Pair programming can be painful. It can feel like a waste of time or extremely frustrating. Here are the typical situations and how to fix them.</p>

<h3>The Wandering Buddies</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/going_nowhere.jpg" title="A &lsquo;going nowhere&rsquo; sign" ></p>

<p>That&rsquo;s what you&rsquo;d get if you asked to newcomers straight out of school to pair program on existing source code on day 1. They&rsquo;d be dabbling here and there, without going anywhere. Each one would try to get the keyboard to try his way, but in the end, no general direction would be followed.</p>

<p>The cure in this case (as often) is to stop and think. At least one in the pair needs to lean how to pair program. It&rsquo;s not difficult, that&rsquo;s just :</p>

<ul>
<li>Discuss and agree on a general plan first</li>
<li>Keep a todo list</li>
<li>Track your advancement on your todo list while you don&rsquo;t have the keyboard</li>
<li>Stop and discuss from time to time</li>
</ul>


<p>By starting that, the pair will quickly move into the &lsquo;mates&rsquo; state.</p>

<h3>The Export / The Novice</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/race.jpg" title="A race where Usain Bolt leave everyone meters behind" ></p>

<p>That&rsquo;s when a &lsquo;lone wolf kind of&rsquo; expert pairs with a junior. The expert picks the keyboard, dashes through the tasks, doesn&rsquo;t make sure his pair follows (which usually means it does not).</p>

<p>Regular pair programming means a change in job responsibilities for such expert programmers. If they were expert doers before, they should now become expert mentors or coaches. That&rsquo;s quite a difference. To them, it means that their goal must be to make his pair finish the task &hellip; It can be very frustrating at first. Nevertheless, the overall skill level in teams doing that increases so fast that&rsquo;s it&rsquo;s very fulfilling for the team as a whole.</p>

<h2>The Skill Zone</h2>

<p>The is where we want to be. When it happens, pair programming feels productive, interesting and fulfilling. Contrary to what is often thought, this can happen whatever the skill levels of the 2 programmers.</p>

<h3>The Mates</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/to-do-list.jpg" title="A Todo list" ></p>

<p>The programmers have equivalent skills on the subject at hand. They organized in a way that they are both learning from each other. By having to verbalize what and why they are doing things, by challenging each others assumptions and by sometimes doing differently than what they&rsquo;d alone.</p>

<h3>The Mentor &amp; The Apprentice</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/help.jpg" title="People helping each other to climb a mountain" ></p>

<p>Other times, there can be a real difference in skills for what the pair is attempting to do. In this situation, the goal of the most knowledgeable is to train his pair, who&rsquo;s goal is to learn. The task becomes some kind of exercise on which to practice.</p>

<p>During a typical pairing session, a pair might switch many times between mentor and mates states. Each one in the pair might assume the mentor&rsquo;s role for different aspect of the work. At the end of the day, everyone should feel as if they had learned and accomplished good work.</p>

<h2>Last Word of Caution</h2>

<p>Pair programming is exhausting. Don&rsquo;t expect to be able to do 40 hours of pair programming per week. After 6 hours in a day, one usually starts to get a lot less efficient.</p>

<p>Both juniors and experienced programmers also need some time by their own, to experiment things by themselves or to complete a simple task without having worry about explaining everything.</p>

<p>These are the reasons why <a href="http://www.extremeprogramming.org/">XP</a> stresses having a sustainable pace and leaving space for <a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack time</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Zero to Pair Programming Hero]]></title>
    <link href="http://philippe.bourgau.net/from-zero-to-pair-programming-hero/"/>
    <updated>2015-01-27T06:31:00+01:00</updated>
    <id>http://philippe.bourgau.net/from-zero-to-pair-programming-hero</id>
    <content type="html"><![CDATA[<p>In my team at <a href="http://www.murex.com">Murex</a>, we&rsquo;ve been doing Pair programming 75% of our time for the past 9 months now.</p>

<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/real-teamwork.JPG"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/real-teamwork.resized.JPG" title="Photo of all the team doing pair programming" ></a></p>

<p>Before I explain how we got there, let&rsquo;s summarize our observations :</p>

<ul>
<li>No immediate productivity drop</li>
<li>Pair programming is really tiring</li>
<li>Quality expectations throughout the team soared up</li>
<li>As a result, the quality actually increased a lot</li>
<li>But existing technical debt suddenly became incompatible with the team&rsquo;s own quality criterion. We went on to pay it back, which slowed us down for a while</li>
<li>Productivity is regularly going up as the technical debt is reduced</li>
<li>It helped us to define shared coding conventions</li>
<li>Pair programming is not for everyone. It has likely precipitated the departure of one team member</li>
<li>It certainly helped the team to <a href="http://www.hans-eric.com/2007/08/13/is-your-team-jelled/">jell</a></li>
<li>Newcomers can submit code on day 1</li>
<li>The skills of everyone increase a lot quicker than before</li>
<li><em>Bonus</em> : it improves personal skills of all the team members</li>
</ul>


<p>If you are interested in how we got there, read on, here is our story :</p>

<h2>Best Effort Code Reviews</h2>

<p>At the beginning, only experienced team members were reviewing the submitted code, and making remarks for improvement over our default review system : <a href="http://smartbear.com/product/collaborator/overview/">Code Collaborator</a>.</p>

<p>This practice revealed tedious, especially with large change lists. As it was not systematic, reviewers constantly had to remind to the reviewees to act on the remarks, which hindered empowerment.</p>

<h2>Systematic Code Reviews</h2>

<p>Observing this during a <a href="/how-we-introduced-efficient-agile-retrospectives/">retrospective</a>, we decided to do add code review to our <a href="https://www.scrum.org/Resources/Scrum-Glossary/Definition-of-Done">Definition Of Done</a>. Inspired by <a href="http://producingoss.com/en/setting-tone.html#code-review">best practices in the Open Source world</a>, we created a ruby review script that automatically creates Code Collaborator reviews based on the <a href="www.perforce.com">Perforce</a> submits. Everyone was made observer of any code change, and everyone was to participate in the reviews.</p>

<p>At first, to make this practice stick, a few benevolent review champions had to comment all the submitted code; once the habit was taken, everyone participated in the reviews.</p>

<p>Code Collaborator spamming was certainly an issue, but using Code Collaborator System Tray App helped each of us to keep up to date with the remaining reviews to do.</p>

<p><em>Bonus</em> : As everyone was doing reviews, and that reviews of small changes are easier, submits became smaller.</p>

<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/code-collaborator.png"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/code-collaborator.resized.png" title="A screenshot of our code collaborator installation" ></a></p>

<p>This was certainly an improvement, but it remained time consuming. We believed we could do better.</p>

<h2>Pair Programming</h2>

<p>After 1 or 2 months of systematic code reviews, during a retrospective (again) nearly all the team members decided to give <a href="http://blogs.sourceallies.com/2011/03/pair-programming-101/">pair programming</a> a try.</p>

<p>We felt the difference after the very first day : pair programming is intense, but the results are great. We never turned back.</p>

<p>With pair programming in place, we had to settle a pair switching frequency. We started with the full story, tried a one day rotation, and eventually settled on &ldquo;MIN(1 week, the story)&rdquo;.</p>

<p>This is not set in stone and is team dependent. It may vary depending on the learning curve required to work on a story. We might bring it down later maybe.</p>

<h2>Remote Pair Programming</h2>

<p>Ahmad, a Murex guy from Beirut joined the team a few months ago. We did not want to change our way of working, and decided to try remote pair programming.</p>

<h3>Initial Setup</h3>

<p>At the beginning, we were using <a href="http://products.office.com/en-us/Lync/lync-2013-video-conferencing-meeting-software">Lync</a> (Microsoft&rsquo;s chat system) with webcams, headphones and screen sharing. It works, but Lync&rsquo;s screen sharing does not allow seamless remote control between Paris and Beirut. Here is how we coped with this :</p>

<ul>
<li>Only exceptionally use Lync&rsquo;s &ldquo;Give Control&rdquo; feature : it lags too much</li>
<li>Do small submits, and switch control at submits</li>
<li>When you cannot submit soon, shelve the code on perforce (you would just pull your buddy&rsquo;s repo with git), and switch control</li>
</ul>


<p>As a result, Ahmad became productive a lot more quickly. We are not 2 sub teams focusing on their own area of expertise, but 1 single distributed team sharing everything.</p>

<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-setup.jpg"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-setup.resized.jpg" title="My remote pair programming setup" ></a></p>

<h3>Improved Setup</h3>

<p>Remote pair programming as such is workable, but does not feel as easy as being collocated. Here are a few best practices we are now using to improve the experience :</p>

<ul>
<li>Keep your pair&rsquo;s video constantly visible : either on your laptop of in a corner of you main screen, but it&rsquo;s important to see his facial expression all the time</li>
<li>In order to allow eye contact, place your cam next to the window containing the video of your pair.</li>
<li>Using 2 cameras, <a href="http://download.manycam.com/">ManyCams</a> and a small whiteboard allows to share drawings !</li>
</ul>


<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-screenshot.jpg"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-screenshot.resized.jpg" title="A screenshot of my pair programming environment" ></a></p>

<ul>
<li>We started using the <a href="http://pomodorotechnique.com/">Pomodoro technique</a> for control switching. <a href="http://www.marinaratimer.com/">MarinaraTimer</a> provides an online and shareable timer.</li>
<li>We also started maintaining a todo list with an online shareable editor such as <a href="http://collabedit.com/">CollabEdit</a> or <a href="https://docs.google.com/">Google Docs</a>.</li>
</ul>


<h3>Future Setup</h3>

<p>We are currently welcoming a new engineer in Beirut, and as we will be doing more remote pair programming, we&rsquo;ll need to make this more seamless. Control sharing and lag through Lync remain the main issues. We don&rsquo;t have a solution for that yet, but here are the fixes we are looking into</p>

<ul>
<li><a href="http://www.saros-project.org/">Saros</a> is an <a href="https://eclipse.org/">Eclipse</a> plugin for remote concurrent and real time editing of files. Many people can edit the files at the same time. We are waiting for the <a href="https://www.jetbrains.com/idea/">Intellij</a> version that is still under development</li>
</ul>


<p><a href="http://www.saros-project.org/screenshots"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/saros.resized.png" title="A screenshot from Eclipse with Saros plugin" ></a></p>

<ul>
<li><a href="https://floobits.com/">Floobits</a> is a commercial equivalent of saros. We tried it and it seems great. It&rsquo;s not cheap though, especially with in-house servers.</li>
<li><a href="https://screenhero.com/">Screenhero</a> is a commercial low-lag, multi cursor screen sharing tool. Unfortunately, it currently does not work behind a proxy, and so we were not able to evaluate it yet.</li>
</ul>


<h2>Final thoughts</h2>

<p>I believe that collocated, and remote, pair programming are becoming key skills for a modern software engineer.</p>

<p>I hope this will help teams envisioning pair programming. We&rsquo;d love to read about your best practices as well !</p>
]]></content>
  </entry>
  
</feed>
