<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pair programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/pair-programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-05-12T06:29:13+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pair Programming, From Pain Zone To Skill Zone]]></title>
    <link href="http://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/"/>
    <updated>2016-05-06T04:04:00+02:00</updated>
    <id>http://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone</id>
    <content type="html"><![CDATA[<p>We&rsquo;re doing pair programming almost all the the time in our team. A few weeks ago, we went to <a href="http://www.devoxx.fr/">Devoxx</a> Paris, and 2 team mates used pair programming at a hands on session : they finished way before the others and had the time to take a 30 minute break. Pair programming delivers more &hellip; when it works.</p>

<h2>Flavors of Pair Programming</h2>

<p>Throughout our experience, we have identified some situations where it does or does not work :</p>

<table>
<thead>
<tr>
<th>Pain Zone         </th>
<th> Skill Zone</th>
</tr>
</thead>
<tbody>
<tr>
<td>Wandering buddies </td>
<td> Mates</td>
</tr>
<tr>
<td>Expert / Novice   </td>
<td> Mentor &amp; Apprentice</td>
</tr>
</tbody>
</table>


<br>


<h2>The Pain Zone</h2>

<p>Pair programming can be painful. It can feel like a waste of time or extremely frustrating. Here are the typical situations and how to fix them.</p>

<h3>The Wandering Buddies</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/going_nowhere.jpg" title="A &lsquo;going nowhere&rsquo; sign" ></p>

<p>That&rsquo;s what you&rsquo;d get if you asked to newcomers straight out of school to pair program on existing source code on day 1. They&rsquo;d be dabbling here and there, without going anywhere. Each one would try to get the keyboard to try his way, but in the end, no general direction would be followed.</p>

<p>The cure in this case (as often) is to stop and think. At least one in the pair needs to lean how to pair program. It&rsquo;s not difficult, that&rsquo;s just :</p>

<ul>
<li>Discuss and agree on a general plan first</li>
<li>Keep a todo list</li>
<li>Track your advancement on your todo list while you don&rsquo;t have the keyboard</li>
<li>Stop and discuss from time to time</li>
</ul>


<p>By starting that, the pair will quickly move into the &lsquo;mates&rsquo; state.</p>

<h3>The Export / The Novice</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/race.jpg" title="A race where Usain Bolt leave everyone meters behind" ></p>

<p>That&rsquo;s when a &lsquo;lone wolf kind of&rsquo; expert pairs with a junior. The expert picks the keyboard, dashes through the tasks, doesn&rsquo;t make sure his pair follows (which usually means it does not).</p>

<p>Regular pair programming means a change in job responsibilities for such expert programmers. If they were expert doers before, they should now become expert mentors or coaches. That&rsquo;s quite a difference. To them, it means that their goal must be to make his pair finish the task &hellip; It can be very frustrating at first. Nevertheless, the overall skill level in teams doing that increases so fast that&rsquo;s it&rsquo;s very fulfilling for the team as a whole.</p>

<h2>The Skill Zone</h2>

<p>The is where we want to be. When it happens, pair programming feels productive, interesting and fulfilling. Contrary to what is often thought, this can happen whatever the skill levels of the 2 programmers.</p>

<h3>The Mates</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/to-do-list.jpg" title="A Todo list" ></p>

<p>The programmers have equivalent skills on the subject at hand. They organized in a way that they are both learning from each other. By having to verbalize what and why they are doing things, by challenging each others assumptions and by sometimes doing differently than what they&rsquo;d alone.</p>

<h3>The Mentor &amp; The Apprentice</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/help.jpg" title="People helping each other to climb a mountain" ></p>

<p>Other times, there can be a real difference in skills for what the pair is attempting to do. In this situation, the goal of the most knowledgeable is to train his pair, who&rsquo;s goal is to learn. The task becomes some kind of exercise on which to practice.</p>

<p>During a typical pairing session, a pair might switch many times between mentor and mates states. Each one in the pair might assume the mentor&rsquo;s role for different aspect of the work. At the end of the day, everyone should feel as if they had learned and accomplished good work.</p>

<h2>Last Word of Caution</h2>

<p>Pair programming is exhausting. Don&rsquo;t expect to be able to do 40 hours of pair programming per week. After 6 hours in a day, one usually starts to get a lot less efficient.</p>

<p>Both juniors and experienced programmers also need some time by their own, to experiment things by themselves or to complete a simple task without having worry about explaining everything.</p>

<p>These are the reasons why <a href="http://www.extremeprogramming.org/">XP</a> stresses having a sustainable pace and leaving space for <a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack time</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Zero to Pair Programming Hero]]></title>
    <link href="http://philippe.bourgau.net/from-zero-to-pair-programming-hero/"/>
    <updated>2015-01-27T06:31:00+01:00</updated>
    <id>http://philippe.bourgau.net/from-zero-to-pair-programming-hero</id>
    <content type="html"><![CDATA[<p>In my team at <a href="http://www.murex.com">Murex</a>, we&rsquo;ve been doing Pair programming 75% of our time for the past 9 months now.</p>

<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/real-teamwork.JPG"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/real-teamwork.resized.JPG" title="Photo of all the team doing pair programming" ></a></p>

<p>Before I explain how we got there, let&rsquo;s summarize our observations :</p>

<ul>
<li>No immediate productivity drop</li>
<li>Pair programming is really tiring</li>
<li>Quality expectations throughout the team soared up</li>
<li>As a result, the quality actually increased a lot</li>
<li>But existing technical debt suddenly became incompatible with the team&rsquo;s own quality criterion. We went on to pay it back, which slowed us down for a while</li>
<li>Productivity is regularly going up as the technical debt is reduced</li>
<li>It helped us to define shared coding conventions</li>
<li>Pair programming is not for everyone. It has likely precipitated the departure of one team member</li>
<li>It certainly helped the team to <a href="http://www.hans-eric.com/2007/08/13/is-your-team-jelled/">jell</a></li>
<li>Newcomers can submit code on day 1</li>
<li>The skills of everyone increase a lot quicker than before</li>
<li><em>Bonus</em> : it improves personal skills of all the team members</li>
</ul>


<p>If you are interested in how we got there, read on, here is our story :</p>

<h2>Best Effort Code Reviews</h2>

<p>At the beginning, only experienced team members were reviewing the submitted code, and making remarks for improvement over our default review system : <a href="http://smartbear.com/product/collaborator/overview/">Code Collaborator</a>.</p>

<p>This practice revealed tedious, especially with large change lists. As it was not systematic, reviewers constantly had to remind to the reviewees to act on the remarks, which hindered empowerment.</p>

<h2>Systematic Code Reviews</h2>

<p>Observing this during a <a href="/how-we-introduced-efficient-agile-retrospectives/">retrospective</a>, we decided to do add code review to our <a href="https://www.scrum.org/Resources/Scrum-Glossary/Definition-of-Done">Definition Of Done</a>. Inspired by <a href="http://producingoss.com/en/setting-tone.html#code-review">best practices in the Open Source world</a>, we created a ruby review script that automatically creates Code Collaborator reviews based on the <a href="www.perforce.com">Perforce</a> submits. Everyone was made observer of any code change, and everyone was to participate in the reviews.</p>

<p>At first, to make this practice stick, a few benevolent review champions had to comment all the submitted code; once the habit was taken, everyone participated in the reviews.</p>

<p>Code Collaborator spamming was certainly an issue, but using Code Collaborator System Tray App helped each of us to keep up to date with the remaining reviews to do.</p>

<p><em>Bonus</em> : As everyone was doing reviews, and that reviews of small changes are easier, submits became smaller.</p>

<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/code-collaborator.png"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/code-collaborator.resized.png" title="A screenshot of our code collaborator installation" ></a></p>

<p>This was certainly an improvement, but it remained time consuming. We believed we could do better.</p>

<h2>Pair Programming</h2>

<p>After 1 or 2 months of systematic code reviews, during a retrospective (again) nearly all the team members decided to give <a href="http://blogs.sourceallies.com/2011/03/pair-programming-101/">pair programming</a> a try.</p>

<p>We felt the difference after the very first day : pair programming is intense, but the results are great. We never turned back.</p>

<p>With pair programming in place, we had to settle a pair switching frequency. We started with the full story, tried a one day rotation, and eventually settled on &ldquo;MIN(1 week, the story)&rdquo;.</p>

<p>This is not set in stone and is team dependent. It may vary depending on the learning curve required to work on a story. We might bring it down later maybe.</p>

<h2>Remote Pair Programming</h2>

<p>Ahmad, a Murex guy from Beirut joined the team a few months ago. We did not want to change our way of working, and decided to try remote pair programming.</p>

<h3>Initial Setup</h3>

<p>At the beginning, we were using <a href="http://products.office.com/en-us/Lync/lync-2013-video-conferencing-meeting-software">Lync</a> (Microsoft&rsquo;s chat system) with webcams, headphones and screen sharing. It works, but Lync&rsquo;s screen sharing does not allow seamless remote control between Paris and Beirut. Here is how we coped with this :</p>

<ul>
<li>Only exceptionally use Lync&rsquo;s &ldquo;Give Control&rdquo; feature : it lags too much</li>
<li>Do small submits, and switch control at submits</li>
<li>When you cannot submit soon, shelve the code on perforce (you would just pull your buddy&rsquo;s repo with git), and switch control</li>
</ul>


<p>As a result, Ahmad became productive a lot more quickly. We are not 2 sub teams focusing on their own area of expertise, but 1 single distributed team sharing everything.</p>

<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-setup.jpg"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-setup.resized.jpg" title="My remote pair programming setup" ></a></p>

<h3>Improved Setup</h3>

<p>Remote pair programming as such is workable, but does not feel as easy as being collocated. Here are a few best practices we are now using to improve the experience :</p>

<ul>
<li>Keep your pair&rsquo;s video constantly visible : either on your laptop of in a corner of you main screen, but it&rsquo;s important to see his facial expression all the time</li>
<li>In order to allow eye contact, place your cam next to the window containing the video of your pair.</li>
<li>Using 2 cameras, <a href="http://download.manycam.com/">ManyCams</a> and a small whiteboard allows to share drawings !</li>
</ul>


<p><a href="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-screenshot.jpg"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/remote-pairing-screenshot.resized.jpg" title="A screenshot of my pair programming environment" ></a></p>

<ul>
<li>We started using the <a href="http://pomodorotechnique.com/">Pomodoro technique</a> for control switching. <a href="http://www.marinaratimer.com/">MarinaraTimer</a> provides an online and shareable timer.</li>
<li>We also started maintaining a todo list with an online shareable editor such as <a href="http://collabedit.com/">CollabEdit</a> or <a href="https://docs.google.com/">Google Docs</a>.</li>
</ul>


<h3>Future Setup</h3>

<p>We are currently welcoming a new engineer in Beirut, and as we will be doing more remote pair programming, we&rsquo;ll need to make this more seamless. Control sharing and lag through Lync remain the main issues. We don&rsquo;t have a solution for that yet, but here are the fixes we are looking into</p>

<ul>
<li><a href="http://www.saros-project.org/">Saros</a> is an <a href="https://eclipse.org/">Eclipse</a> plugin for remote concurrent and real time editing of files. Many people can edit the files at the same time. We are waiting for the <a href="https://www.jetbrains.com/idea/">Intellij</a> version that is still under development</li>
</ul>


<p><a href="http://www.saros-project.org/screenshots"><img class="center" src="/imgs/2015-01-27-from-zero-to-pair-programming-hero/saros.resized.png" title="A screenshot from Eclipse with Saros plugin" ></a></p>

<ul>
<li><a href="https://floobits.com/">Floobits</a> is a commercial equivalent of saros. We tried it and it seems great. It&rsquo;s not cheap though, especially with in-house servers.</li>
<li><a href="https://screenhero.com/">Screenhero</a> is a commercial low-lag, multi cursor screen sharing tool. Unfortunately, it currently does not work behind a proxy, and so we were not able to evaluate it yet.</li>
</ul>


<h2>Final thoughts</h2>

<p>I believe that collocated, and remote, pair programming are becoming key skills for a modern software engineer.</p>

<p>I hope this will help teams envisioning pair programming. We&rsquo;d love to read about your best practices as well !</p>
]]></content>
  </entry>
  
</feed>
