<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding dojo | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/coding-dojo/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-06-08T06:06:00+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frequently asked questions about the 20 hours of Code Katas]]></title>
    <link href="http://philippe.bourgau.net/frequently-asked-questions-about-the-20-hours-of-code-katas/"/>
    <updated>2018-04-12T19:20:00+02:00</updated>
    <id>http://philippe.bourgau.net/frequently-asked-questions-about-the-20-hours-of-code-katas</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/categories/20-hours-code-kata-series/">previous posts</a>, I explained how to use the 20 hours of Code Katas technique to learn new languages. If you did not read these yet, start by <a href="/how-to-learn-a-programming-language-in-just-20-hours/">the beginning</a>.</p>

<p><img src="../imgs/2018-03-26-frequently-asked-questions-about-the-20-hours-of-code-katas/faq-bulb.jpg" alt="A drawing of FAQ in a lightbulb" /></p>

<p>To close <a href="/blog/categories/20-hours-code-kata-series/">this series</a>, here are a few tips and suggestions presented as questions and answers.</p>

<h2>What if you don&rsquo;t know TDD yet ?</h2>

<p>The few <a href="http://codingdojo.org/dojo/ParisDojo/">Parisian guys</a> who invented the Coding Dojo wanted to teach and spread TDD ! You should have no problem to use it to learn TDD yourself !</p>

<blockquote><p>ðŸ’¡ The coding dojo was invented to teach and spread TDD</p></blockquote>

<p>Pick your favorite language, and schedule a kata plan to practice TDD. Watch one or two <a href="https://www.google.fr/search?q=code+kata&amp;tbm=vid">videos</a> to see how gurus are doing it. At first, you&rsquo;ll have to be very careful to stick to baby steps and the red-green-refactor loop. If you need help, check <a href="https://www.meetup.com">meetup.com</a> for local coding dojos where you&rsquo;ll find help.</p>

<h2>Can I apply this technique to learn something else than a new language ?</h2>

<p>As you might have noticed, I used it to refresh my Javascript. I went on to learn different flavors of JS, but also different test libraries. I&rsquo;ve used in to learn more advanced parts of other languages in the past.</p>

<p>Katas also work well to learn programming techniques like <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> or <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a>. Some nice people shared <a href="http://kata-log.rocks/refactoring">refactoring katas</a> on the web. To practice DDD, we could repeat katas with the constraint of using <a href="https://en.wikipedia.org/wiki/Entity">Entities</a> and <a href="https://en.wikipedia.org/wiki/Value_object">Value Objects</a> only.</p>

<p>You can even use the technique to learn other things like frameworks or tools, but you&rsquo;ll need to tune it. As I explained before, you need an exercice for deliberate practice and a fast feedback loop. We typically use a Code Katas and TDD for that, but that&rsquo;s not the only options. Whenever you can find a way to deliberately practice with a fast feedback loop, you&rsquo;re ready to go ! These days, we should look for docker images with frameworks and tools pre-installed. Going through tutorials without looking at the solutions is deliberate practice. A small live environment can give us fast enough feedback.</p>

<blockquote><p>ðŸ’¡ Find Deliberate Practice exercices and a fast feedback loop for efficient learning</p></blockquote>

<h2>What if I don&rsquo;t find any kata ?</h2>

<p>Build one yourself ! I&rsquo;m not joking, building a kata, especially one where you start from scratch is not too difficult. Inspiration comes from anything you happen to do in your daily work. Trim down a programming challenge you had to work, and you might have a kata ! Went to a programming interview ? The question you had to answer might do a nice kata.</p>

<p><img src="../imgs/2018-03-26-frequently-asked-questions-about-the-20-hours-of-code-katas/make-things-happen.jpg" alt="&quot;Make things happen&quot; written on a blackboard" /></p>

<p>Once you&rsquo;ve created and tested your kata, share it ! There are online kata repositories where you could get a chance to publish it.</p>

<ul>
<li>Â Â <a href="http://codingdojo.org/">codingdojo.org</a></li>
<li>Â Â <a href="http://cyber-dojo.org/">cyber-dojo.org</a></li>
<li>Â Â <a href="http://kata-log.rocks">kata-log.rocks</a></li>
</ul>


<h2>One last thing</h2>

<p>I just remembered I did not finish <a href="/how-to-learn-a-programming-language-in-just-20-hours/">my story about my Javascript kata plan</a>. For those wondering, here is the end of story. In the end I did not join this team to do Javascript coaching. After thinking through it for a while, I decided to stop the katas there, and move to something else. I was only 6 hours in, and what was the point to study Javascript not to use it straight away ? The day I&rsquo;ll need it, I&rsquo;m likely to have forgotten 80% of it and some of it will be outdated. The knowledge is only another 20 hours away anyway !</p>

<p>That&rsquo;s what we could call &ldquo;Just In Time Learning&rdquo; ! We are drowning in knowledge nowadays. It&rsquo;s better to have a fast and effective way to learn anything than trying to know everything.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why 20 hours of code kata are so effective for learning new languages]]></title>
    <link href="http://philippe.bourgau.net/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/"/>
    <updated>2018-04-05T08:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages</id>
    <content type="html"><![CDATA[<p>In my <a href="/how-to-learn-a-programming-language-in-just-20-hours/">previous post</a>, I described how I&rsquo;ve been using 20 hours of Code Katas to learn new languages. If you did not read it yet, have a look at it first. Let&rsquo;s now look at why it works so well.</p>

<p>In <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_2?ie=UTF8&amp;qid=1521785371&amp;sr=8-2&amp;keywords=the+first+20+hours">The First 20 Hours</a> Josh Kaufman explains how he learned <a href="https://www.ruby-lang.org/">Ruby</a> in 20 hours. He did not become a Ruby expert, but he was able to build and maintain a static website generator. For my part, I have succeeded to learn <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">a bit of machine learning</a> using the 20 hours technique.</p>

<p>The effectiveness of the 20 hours of Code Katas relies a few key points.</p>

<p><img src="../imgs/2018-03-26-why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/why.jpg" alt="Drawing of &quot;Why ?&quot; mixed up with the inside of a clock" /></p>

<h2>Time-boxing</h2>

<p>Time-boxing has 2 main benefits. First, it forces us to stick to what is the most important for us to learn. There is no time to waste slacking around in only 20 hours. Plus it&rsquo;s a lot easier to focus for 20 hours than over a very long period of time.</p>

<p>There&rsquo;s a second great thing about time-boxing. The further you go, the less remains to do, and the less likely you are to drop the effort ! We are a lot less likely to abandon when we know we only need a few hours to finish the goal we had set to ourselves.</p>

<blockquote><p>ðŸ’¡ Time-boxing creates focus</p></blockquote>

<h2>A plan</h2>

<p>Again, the plan helps us to focus. We&rsquo;ll need to choose what gets in a 20 hours plan. Building the plan itself forces us to get a grasp of the learning space. This will help to pick the good stuff to practice.</p>

<h2>Routine</h2>

<p>Routine is a magic trick to get things done. Once we have a routine in place, we don&rsquo;t have to think or do extra efforts to find time to learn. The time is already there, we just have to use it !</p>

<h2>Deliberate practice</h2>

<p>Some exemples from &ldquo;The first 20 hours&rdquo; highlight the benefits of deliberate practice. When learning the <a href="https://en.wikipedia.org/wiki/Colemak">Colemak keyboard</a>, the author went through typing exercices. When studying the game of Go, he did practices specific situation puzzles. In both cases, deliberate practice made him learn faster. Code katas are typical deliberate practice exercices for programmers.</p>

<p><img src="../imgs/2018-03-26-why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/golf-practice.jpg" alt="Picture of a golfer deliberately practicing" /></p>

<h2>Test Driven Development</h2>

<p><a href="http://codingdojo.org/">Coding Dojos</a> are the programmers' deliberate practice. Coding Dojos traditionally rely on <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. TDD sets up a fast feedback loop that is key to efficient learning. Think of all the time saved by not having to run and debug a full program every time ! Even dabbling around in the <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> cannot beat running 20 or so test cases every few seconds.</p>

<h2>We are already programmers</h2>

<p>One last and obvious little detail : we don&rsquo;t have to learn it all ! When the author learned Ruby in 20 hours, he was starting from scratch ! Unlike us, who already know how to program, but want to extend our knowledge to a few more topics. Most of the times, we don&rsquo;t need to relearn everything, but to transpose what we know in a new context.</p>

<p>For example, if we already know an object oriented language, learning a new one will be easier. It&rsquo;s a bit like with foreign languages, the more you know, and the easier it is to learn the next one. In fact, the more languages, frameworks, patterns and paradigms you know, the more the 20 hours code katas will work for you.</p>

<blockquote><p>ðŸ’¡ The more you know about software, the easier it will be to learn your next programming language.</p></blockquote>

<p>You might have a look at <a href="/how-to-keep-up-with-software-technologies/">this post</a> for advices about evergreen concepts to learn.</p>

<h2>Next part</h2>

<p>This was the second post on this <a href="/blog/categories/20-hours-code-kata-series/">series about the 20 hours of Code Katas technique</a>. The <a href="/frequently-asked-questions-about-the-20-hours-of-code-katas/">next, and last, post</a> will be compilation of answers to frequently asked questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to learn a programming language in just 20 hours]]></title>
    <link href="http://philippe.bourgau.net/how-to-learn-a-programming-language-in-just-20-hours/"/>
    <updated>2018-03-29T06:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-learn-a-programming-language-in-just-20-hours</id>
    <content type="html"><![CDATA[<p>We should not panic when asked to work with a new language. We should be bold enough to answer to job openings requiring technologies we are not used to. In one word, we should not be afraid of new techs. Here is why : by scheduling 20 hours of Code Kata routine sessions, we can get a decent level of mastery on most topics.</p>

<p><img src="../imgs/2018-03-23-how-to-learn-a-programming-language-in-just-20-hours/timed-book.jpg" alt="A book with built-in clock" /></p>

<h2>How I learned some Haskell</h2>

<p>Quite a few years ago, we used to do weekly <a href="http://codingdojo.org/">Coding Dojos</a> at <a href="https://www.murex.com/">Murex</a>. <a href="https://twitter.com/dr_c0d3">Arnaud Bailly</a> was among us, and as he is an <a href="https://www.haskell.org/">Haskell</a> fan, we ended up doing quite a lot of katas with Haskell. To my astonishment, after a few sessions, I understood of the fundamentals of the language. Without ever studying it !</p>

<blockquote><p>ðŸ’¡ I learned a lot of Haskell by just going to Coding Dojos !</p></blockquote>

<p>Many times afterwards, I learned new languages quickly by practicing them in the Dojo.</p>

<h2>How I set out to refresh my javascript</h2>

<p>Fast forward to the end of last year. Someone asked me if I could work at coaching a team doing some Javascript. I&rsquo;ve done some Javascript in the past, but my skills definitely needed a serious update. I decided to use Code Katas to refresh my Javascript. To try to make this even more effective, I decided to mix in a bit of the <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_2?ie=UTF8&amp;qid=1521785371&amp;sr=8-2&amp;keywords=the+first+20+hours">&ldquo;First 20 hours&rdquo;</a> technique.</p>

<p><a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_2?ie=UTF8&amp;qid=1521785371&amp;sr=8-2&amp;keywords=the+first+20+hours"><img src="../imgs/2018-03-23-how-to-learn-a-programming-language-in-just-20-hours/the-first-20-hours.jpg" alt="The cover of the book &quot;The first 20 hours&quot;" /></a></p>

<p>I started by defining a plan of 10 sessions of 2 hours long code katas :</p>

<ol>
<li><a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numeral</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li><a href="http://codingdojo.org/kata/GameOfLife/">Game of Life</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li><a href="http://kata-log.rocks/mars-rover-kata">Mars Rover</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li><a href="http://codingdojo.org/kata/Bowling/">Bowling Score</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li>Median of a list of lists &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; <a href="http://es6-features.org/">ES 6</a></li>
<li><a href="http://codingdojo.org/kata/NumberToLCD/">LCD Numbers</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://es6-features.org/">ES 6</a></li>
<li><a href="http://codingdojo.org/kata/Potter/">Kata Potter</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://es6-features.org/">ES 6</a></li>
<li>T9 &ndash; Jasmine &ndash; <a href="http://www.typescriptlang.org/">Typescript</a></li>
<li><a href="http://codingdojo.org/kata/PokerHands/">Poker hand</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://www.typescriptlang.org/">Typescript</a></li>
<li>Egg cooker with <a href="https://reactjs.org/">React</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://www.typescriptlang.org/">Typescript</a></li>
</ol>


<p>The plan felt pretty ambitious at the beginning. The first session was a bit hectic as I struggled to find a quick setup I could use to code my kata in. After only 3 sessions though, I could feel I&rsquo;d already made a lot of progress. I had become confident I would get most of the plan done in 20 hours.</p>

<h2>How to start ?</h2>

<p>A good thing about the 20 hours technique is that it&rsquo;s pretty easy to start with ! There&rsquo;s a catch though ! At the start, it&rsquo;s puzzling to be on your own with no clear track on how to tackle the topic. Here is the fix : start anyway, stick through, and you&rsquo;ll work it out 99% of the time.</p>

<p>Here is, in more details, how to use code kata with the 20 hours technique :</p>

<ol>
<li>Start by setting up a routine. It could be 2 hours at lunch time, 1 hour in the morning or 3 hours at night. Do whatever is best for you. It should be enough to finish in a few days or weeks.</li>
<li>Use the first hours of your 20 hours to setup a code kata plan. It might be very fast if you already have an idea of your learning space. It will take longer if you are a complete newbie. Skim through the literature for the main concepts until you have a plan. Try to keep this phase under 6 hours, otherwise you won&rsquo;t have any time left for actual learning.</li>
<li><a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> plays a key role in fast learning ! Next step is to setup a development environment with TDD to use in your Code Kata sessions.</li>
<li>Finally, do you code kata sessions. Time-box them for something less than 2 hours and run a mini-retrospective at the end of every session. Don&rsquo;t hesitate to adapt your plan if it makes sense.</li>
<li>When you reach 20 hours of learning, stop your sessions. It will be time to think a bit about what you accomplished.</li>
</ol>


<blockquote><p>ðŸ’¡ TDD plays a key role in fast learning.</p></blockquote>

<p>If all went well, you should have learned quite a lot in only 20 hours. At that point, it&rsquo;s up to you to decide what to do next. You can either decide to dig deeper. In this case, setup a new run of 20 hours of code katas ! It could also be a good time to read a bit of theory about what you just learned. Casting a different light on the topic will make it stick and deepen your understanding. Otherwise, you could stop there and start whatever is on your mind. I don&rsquo;t recommend continuing on the same topic without rethinking a new plan though. That would kill your focus and be a less efficient use of your time.</p>

<h2>To be continued</h2>

<p>This was the first post in <a href="/blog/categories/20-hours-code-kata-series/">a series about applying the 20 hours technique and Code Katas to learn new programming languages</a>. Here is the what to expect in the coming posts.</p>

<ol>
<li><a href="/how-to-learn-a-programming-language-in-just-20-hours/">How to learn a programming languages in just 20 hours</a></li>
<li><a href="/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/">Why 20 hours of code kata are so effective for learning new languages</a></li>
<li><a href="/frequently-asked-questions-about-the-20-hours-of-code-katas/">Frequently asked questions about the 20 hours of Code Katas</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get the max out of your Team Coding Dojo ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-get-the-max-out-of-your-team-coding-dojo/"/>
    <updated>2018-03-22T06:42:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-get-the-max-out-of-your-team-coding-dojo</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve read my <a href="/blog/categories/team-randori-series/">previous posts about Team Randori Coding Dojos</a>, you should know why and how to run a successful one.</p>

<p>Did you manage to setup the team <a href="http://codingdojo.org/RandoriKata/">Randori coding dojo</a> as a recurring event ? Congratulations ! Your team is on the road to continuous learning and improvement. To close this series of posts, here are battle tested tricks for greatest impact. Let&rsquo;s boost your teamwork, your production code and a few other things.</p>

<p><img src="../imgs/2018-03-08-how-to-get-the-max-out-of-your-team-coding-dojo/yoda.jpg" alt="Yoda doing the Fizz Buzz kata" /></p>

<h2>Boost your teamwork</h2>

<p>I stated <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">before</a> that the team Randori is a perfect occasion to improve your teamwork. By itself, just doing it will already take you a long way towards better collaboration. As instigator of the coding dojo though, you can push the topic faster and further.</p>

<h3>Coding and Design Conventions</h3>

<p>Whenever you see the opportunity during the dojo, raise design discussions. It&rsquo;s a good way to share best practices. It often ends up in new coding conventions for the team.</p>

<p>Also don&rsquo;t forget to use the retrospective. It&rsquo;s the perfect time to agree on best practices for the dojo <em>and</em> for production code. Push people to dig into what they are mentioning. Ask them if they are willing to adhere to a particular practice. You can use <a href="http://www.plays-in-business.com/thumb-voting/">thumb vote</a> to get a quick agreement. Once the team agrees on something, record it somewhere and make sure it is visible to everyone.</p>

<h3>Egoless Programming</h3>

<p><a href="https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/">Egoless Programming</a> makes collaboration a lot easier within a team. In the dojo, demonstrate Egoless Programming yourself. In particular if you already enjoy good peer recognition, adopt a &ldquo;low attitude&rdquo;. Don&rsquo;t hesitate to encourage others to delete your code when they have a better idea. Yourself, don&rsquo;t hesitate to delete code if it makes sense, but don&rsquo;t make a fuss about it.</p>

<blockquote><p>ðŸ’¡ Be a champion of Egoless Programming in Coding Dojo to bring this practice in your team.</p></blockquote>

<p>Be careful if your workplace is too competitive or if your reputation is not yet strong enough. I&rsquo;d go slow on this aspect in such situations.</p>

<p>During the dojo, you might notice people who have difficulties with egoless programming. In this case, remind its principes to everyone and that you are here to learn and practice. You can also mention that this is a TDD exercice and that deleting and changing code is the way to go.</p>

<p><a href="https://www.amazon.com/Psychology-Computer-Programming-Silver-Anniversary/dp/0932633420"><img src="../imgs/2018-03-08-how-to-get-the-max-out-of-your-team-coding-dojo/psychology-computer-programming.jpg" alt="The cover of &quot;The psychology of computer programming&quot;" /></a></p>

<h2>Going further</h2>

<p>After enough successful sessions, you&rsquo;ll want to push further and experiment new things. Absolutely do it ! There&rsquo;s a lot more to discover about the coding dojos.</p>

<h3>Variations</h3>

<p>You can try new formats like the <a href="http://codingdojo.org/PreparedKata/">Prepared Kata</a> or Randori in Pairs. You can learn a new language by redoing your favorite problems in this language. You can add constraints like &ldquo;No If&rdquo;, &ldquo;Always Compiles&rdquo; or even exotic things like &ldquo;No Heap Allocation&rdquo;. You might also give <a href="https://leanpub.com/codingdojohandbook">Emily Bache&rsquo;s book</a> a read for tons of others ideas.</p>

<h3>Production code</h3>

<p>If you continue long enough, your team will get particularly good at Randoris. At that point, you might wonder how you could apply this to production code ? It turns you can !</p>

<p>One way I found, which I wrote about in <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">my first post</a>, is to try to fix a local smell or static analysis issue in the code. Get all the team to do a Randori to fix that, discuss the design and conventions, and commit at the end of the session.</p>

<p>Particularly difficult legacy code refactorings are also pretty good candidates for Randoris.Â </p>

<blockquote><p>ðŸ’¡ Given enough eyeballs, all bugs are shallow. <a href="https://en.wikipedia.org/wiki/Linus%27s_Law">Linus&rsquo;s Law</a></p></blockquote>

<p>Once you are there, you might altogether jump into mob programming ! Randoris are by nature, like timeboxed mobs. Replace the Randori rule &ldquo;Driver decides what to code&rdquo; with <a href="https://code.joejag.com/2018/three-constraints-for-mobbing.html">Strong Style pairing</a> (Make the driver code your idea) and that&rsquo;s it, you are a mob !</p>

<h2>Spread the word</h2>

<p>One last thing before closing this series on team coding dojos. If the practice is useful to your team, spread it. Chances are that there are other development teams working next to you. Invite members of other teams to your dojo. This will build up their envy for their own team coding dojo. Propose your help to boot their first session !</p>

<p>In the long run, the improved practices of this team might benefit you ! For example, if your teams start collaborating. Or perhaps you&rsquo;ll join this team some day !</p>

<p>Whatever happens, I wish you a lot of fun in your teams Coding Dojos. Happy Coding !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Dojo Troubleshooting]]></title>
    <link href="http://philippe.bourgau.net/coding-dojo-troubleshooting/"/>
    <updated>2018-03-15T06:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/coding-dojo-troubleshooting</id>
    <content type="html"><![CDATA[<p>In my last 2 blog posts, I&rsquo;ve detailed <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">why</a> and <a href="/how-to-start-a-team-coding-dojo-randori-today/">how</a> to start a team Randori Coding Dojo. That&rsquo;s the easy part. As soon as you start your first dojo, you&rsquo;ll face trickier issues, especially people issues.</p>

<p><img src="../imgs/2018-03-08-coding-dojo-troubleshooting/tool-belt.jpg" alt="A martial artist with a tool belt" /></p>

<h2>What if my team (or my boss) does not want to ?</h2>

<p>Very often some of your team mates won&rsquo;t see the value of the coding dojo upfront and will prefer to work on other tasks. It can also be your boss, who thinks you should be delivering features instead. Here are a few tricks you can do to make it work.</p>

<ul>
<li>Try to find another time slot. Ask people for their preferred moment. If you can negotiate food sponsorship with your boss, you might get everyone happy. He won&rsquo;t feel you&rsquo;re not delivering features, you&rsquo;ll have a free lunch and you&rsquo;ll improve your skills.</li>
<li>If your boss or colleague doesn&rsquo;t want to spend 2 full hours on a dojo. Get them to start with smaller problems and a shorter time slot.</li>
<li>Your colleagues might have doubts about the value of the dojo. Get them to try it once or a few times before committing to a recurring event.</li>
<li>As a general rule of thumb, the more you manage to involve people in the preparation, the more they&rsquo;ll adhere.</li>
<li>If you have 1 or 2 inveterate laggards, do it without them anyway. With time, they&rsquo;ll understand what they are missing !</li>
</ul>


<blockquote><p>ðŸ’¡ If you cannot get people to adopt a new practice, get them to try it once. You&rsquo;ll be more than halfway there.</p></blockquote>

<h2>Dealing with TDD complaints</h2>

<p><img src="../imgs/2018-03-08-coding-dojo-troubleshooting/skeptic-gorilla.jpg" alt="A gorilla with a skeptic look" /></p>

<p>As you&rsquo;ll start your first Randori, you&rsquo;ll have some complaints about <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a>. Whether they come from newbies or skeptics, they usually look like :</p>

<ul>
<li>Why do we stick to TDD ? We&rsquo;d go so much faster if we coded this straight away.</li>
<li>We don&rsquo;t need TDD for such a simple problem.</li>
<li>We don&rsquo;t need such small baby steps on this simple problem.</li>
<li>&hellip;</li>
</ul>


<p>My answer is more or less always the same. I try to re-frame everyone in the context of a learning exercice of deliberate practice. It could sound something like :</p>

<blockquote><p>Yes, sure. I know you are professional developers and that you could easily solve this little problem. Keep in mind that we are here to deliberately practice TDD and friends. Solving the problem is only a side effect.</p>

<p>We are going to apply TDD by the book, for the sake of learning. It&rsquo;s a lot easier to learn to swim in 1 meter of water than in the middle of the sea. Once we&rsquo;ll master it in the safe dojo environment, you&rsquo;ll know how to adapt it to your production code.</p>

<p>Please, play by the rules here !</p></blockquote>

<p>As you can see, I don&rsquo;t try to convince them. The last thing I want is to get into a pro vs cons of TDD. 95% of the time, this answer is enough to get people over their skepticism and try it for the time of the dojo. Unfortunately, the last 5% might result in a difficult session. There&rsquo;s no single way to deal with these 5%. You can try to discuss with them in private, or run next session without them.</p>

<blockquote><p>ðŸ’¡ Reframe the coding dojo as a learning exercice relying on TDD to go beyond skepticism.</p></blockquote>

<h2>How to avoid getting bogged down in details</h2>

<p>One last advice, especially for your first sessions. It&rsquo;s a common rookie mistake to waste 80% of the coding time on error handling. The key is to focus on what you want to learn. You are not writing production code, so don&rsquo;t hesitate to omit certain aspects. For example, assume that correct arguments are provided to skip error handling. This will save you time, be more fun and increase what you learn.</p>

<h2>What&rsquo;s next ?</h2>

<p>This was part 3 of this <a href="/blog/categories/team-randori-series/">series on team coding dojo</a>. In <a href="/how-to-get-the-max-out-of-your-team-coding-dojo/">the next post</a>, I&rsquo;ll write how to maximize the benefits we can get out of coding dojos.</p>
]]></content>
  </entry>
  
</feed>
