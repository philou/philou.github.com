<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: team building | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/team-building/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-07-27T00:23:55+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to get the max out of your Team Coding Dojo ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-get-the-max-out-of-your-team-coding-dojo/"/>
    <updated>2018-03-22T06:42:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-get-the-max-out-of-your-team-coding-dojo</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve read my <a href="/blog/categories/team-randori-series/">previous posts about Team Randori Coding Dojos</a>, you should know why and how to run a successful one.</p>

<p>Did you manage to setup the team <a href="http://codingdojo.org/RandoriKata/">Randori coding dojo</a> as a recurring event ? Congratulations ! Your team is on the road to continuous learning and improvement. To close this series of posts, here are battle tested tricks for greatest impact. Let&rsquo;s boost your teamwork, your production code and a few other things.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-03-08-how-to-get-the-max-out-of-your-team-coding-dojo/yoda.jpg" alt="Yoda doing the Fizz Buzz kata" /></p>

<h2>Boost your teamwork</h2>

<p>I stated <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">before</a> that the team Randori is a perfect occasion to improve your teamwork. By itself, just doing it will already take you a long way towards better collaboration. As instigator of the coding dojo though, you can push the topic faster and further.</p>

<h3>Coding and Design Conventions</h3>

<p>Whenever you see the opportunity during the dojo, raise design discussions. It&rsquo;s a good way to share best practices. It often ends up in new coding conventions for the team.</p>

<p>Also don&rsquo;t forget to use the retrospective. It&rsquo;s the perfect time to agree on best practices for the dojo <em>and</em> for production code. Push people to dig into what they are mentioning. Ask them if they are willing to adhere to a particular practice. You can use <a href="http://www.plays-in-business.com/thumb-voting/">thumb vote</a> to get a quick agreement. Once the team agrees on something, record it somewhere and make sure it is visible to everyone.</p>

<h3>Egoless Programming</h3>

<p><a href="https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/">Egoless Programming</a> makes collaboration a lot easier within a team. In the dojo, demonstrate Egoless Programming yourself. In particular if you already enjoy good peer recognition, adopt a &ldquo;low attitude&rdquo;. Don&rsquo;t hesitate to encourage others to delete your code when they have a better idea. Yourself, don&rsquo;t hesitate to delete code if it makes sense, but don&rsquo;t make a fuss about it.</p>

<blockquote><p>💡 Be a champion of Egoless Programming in Coding Dojo to bring this practice in your team.</p></blockquote>

<p>Be careful if your workplace is too competitive or if your reputation is not yet strong enough. I&rsquo;d go slow on this aspect in such situations.</p>

<p>During the dojo, you might notice people who have difficulties with egoless programming. In this case, remind its principes to everyone and that you are here to learn and practice. You can also mention that this is a TDD exercice and that deleting and changing code is the way to go.</p>

<p><a href="https://www.amazon.com/Psychology-Computer-Programming-Silver-Anniversary/dp/0932633420"><img src="http://philippe.bourgau.net/imgs/2018-03-08-how-to-get-the-max-out-of-your-team-coding-dojo/psychology-computer-programming.jpg" alt="The cover of &quot;The psychology of computer programming&quot;" /></a></p>

<h2>Going further</h2>

<p>After enough successful sessions, you&rsquo;ll want to push further and experiment new things. Absolutely do it ! There&rsquo;s a lot more to discover about the coding dojos.</p>

<h3>Variations</h3>

<p>You can try new formats like the <a href="http://codingdojo.org/PreparedKata/">Prepared Kata</a> or Randori in Pairs. You can learn a new language by redoing your favorite problems in this language. You can add constraints like &ldquo;No If&rdquo;, &ldquo;Always Compiles&rdquo; or even exotic things like &ldquo;No Heap Allocation&rdquo;. You might also give <a href="https://leanpub.com/codingdojohandbook">Emily Bache&rsquo;s book</a> a read for tons of others ideas.</p>

<h3>Production code</h3>

<p>If you continue long enough, your team will get particularly good at Randoris. At that point, you might wonder how you could apply this to production code ? It turns you can !</p>

<p>One way I found, which I wrote about in <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">my first post</a>, is to try to fix a local smell or static analysis issue in the code. Get all the team to do a Randori to fix that, discuss the design and conventions, and commit at the end of the session.</p>

<p>Particularly difficult legacy code refactorings are also pretty good candidates for Randoris. </p>

<blockquote><p>💡 Given enough eyeballs, all bugs are shallow. <a href="https://en.wikipedia.org/wiki/Linus%27s_Law">Linus&rsquo;s Law</a></p></blockquote>

<p>Once you are there, you might altogether jump into mob programming ! Randoris are by nature, like timeboxed mobs. Replace the Randori rule &ldquo;Driver decides what to code&rdquo; with <a href="https://code.joejag.com/2018/three-constraints-for-mobbing.html">Strong Style pairing</a> (Make the driver code your idea) and that&rsquo;s it, you are a mob !</p>

<h2>Spread the word</h2>

<p>One last thing before closing this series on team coding dojos. If the practice is useful to your team, spread it. Chances are that there are other development teams working next to you. Invite members of other teams to your dojo. This will build up their envy for their own team coding dojo. Propose your help to boot their first session !</p>

<p>In the long run, the improved practices of this team might benefit you ! For example, if your teams start collaborating. Or perhaps you&rsquo;ll join this team some day !</p>

<p>Whatever happens, I wish you a lot of fun in your teams Coding Dojos. Happy Coding !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Dojo Troubleshooting]]></title>
    <link href="http://philippe.bourgau.net/coding-dojo-troubleshooting/"/>
    <updated>2018-03-15T06:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/coding-dojo-troubleshooting</id>
    <content type="html"><![CDATA[<p>In my last 2 blog posts, I&rsquo;ve detailed <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">why</a> and <a href="/how-to-start-a-team-coding-dojo-randori-today/">how</a> to start a team Randori Coding Dojo. That&rsquo;s the easy part. As soon as you start your first dojo, you&rsquo;ll face trickier issues, especially people issues.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-03-08-coding-dojo-troubleshooting/tool-belt.jpg" alt="A martial artist with a tool belt" /></p>

<h2>What if my team (or my boss) does not want to ?</h2>

<p>Very often some of your team mates won&rsquo;t see the value of the coding dojo upfront and will prefer to work on other tasks. It can also be your boss, who thinks you should be delivering features instead. Here are a few tricks you can do to make it work.</p>

<ul>
<li>Try to find another time slot. Ask people for their preferred moment. If you can negotiate food sponsorship with your boss, you might get everyone happy. He won&rsquo;t feel you&rsquo;re not delivering features, you&rsquo;ll have a free lunch and you&rsquo;ll improve your skills.</li>
<li>If your boss or colleague doesn&rsquo;t want to spend 2 full hours on a dojo. Get them to start with smaller problems and a shorter time slot.</li>
<li>Your colleagues might have doubts about the value of the dojo. Get them to try it once or a few times before committing to a recurring event.</li>
<li>As a general rule of thumb, the more you manage to involve people in the preparation, the more they&rsquo;ll adhere.</li>
<li>If you have 1 or 2 inveterate laggards, do it without them anyway. With time, they&rsquo;ll understand what they are missing !</li>
</ul>


<blockquote><p>💡 If you cannot get people to adopt a new practice, get them to try it once. You&rsquo;ll be more than halfway there.</p></blockquote>

<h2>Dealing with TDD complaints</h2>

<p><img src="http://philippe.bourgau.net/imgs/2018-03-08-coding-dojo-troubleshooting/skeptic-gorilla.jpg" alt="A gorilla with a skeptic look" /></p>

<p>As you&rsquo;ll start your first Randori, you&rsquo;ll have some complaints about <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a>. Whether they come from newbies or skeptics, they usually look like :</p>

<ul>
<li>Why do we stick to TDD ? We&rsquo;d go so much faster if we coded this straight away.</li>
<li>We don&rsquo;t need TDD for such a simple problem.</li>
<li>We don&rsquo;t need such small baby steps on this simple problem.</li>
<li>&hellip;</li>
</ul>


<p>My answer is more or less always the same. I try to re-frame everyone in the context of a learning exercice of deliberate practice. It could sound something like :</p>

<blockquote><p>Yes, sure. I know you are professional developers and that you could easily solve this little problem. Keep in mind that we are here to deliberately practice TDD and friends. Solving the problem is only a side effect.</p>

<p>We are going to apply TDD by the book, for the sake of learning. It&rsquo;s a lot easier to learn to swim in 1 meter of water than in the middle of the sea. Once we&rsquo;ll master it in the safe dojo environment, you&rsquo;ll know how to adapt it to your production code.</p>

<p>Please, play by the rules here !</p></blockquote>

<p>As you can see, I don&rsquo;t try to convince them. The last thing I want is to get into a pro vs cons of TDD. 95% of the time, this answer is enough to get people over their skepticism and try it for the time of the dojo. Unfortunately, the last 5% might result in a difficult session. There&rsquo;s no single way to deal with these 5%. You can try to discuss with them in private, or run next session without them.</p>

<blockquote><p>💡 Reframe the coding dojo as a learning exercice relying on TDD to go beyond skepticism.</p></blockquote>

<h2>How to avoid getting bogged down in details</h2>

<p>One last advice, especially for your first sessions. It&rsquo;s a common rookie mistake to waste 80% of the coding time on error handling. The key is to focus on what you want to learn. You are not writing production code, so don&rsquo;t hesitate to omit certain aspects. For example, assume that correct arguments are provided to skip error handling. This will save you time, be more fun and increase what you learn.</p>

<h2>What&rsquo;s next ?</h2>

<p>This was part 3 of this <a href="/blog/categories/team-randori-series/">series on team coding dojo</a>. In <a href="/how-to-get-the-max-out-of-your-team-coding-dojo/">the next post</a>, I&rsquo;ll write how to maximize the benefits we can get out of coding dojos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to start a team coding dojo Randori today]]></title>
    <link href="http://philippe.bourgau.net/how-to-start-a-team-coding-dojo-randori-today/"/>
    <updated>2018-03-08T08:57:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-start-a-team-coding-dojo-randori-today</id>
    <content type="html"><![CDATA[<p>In my <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">previous post</a>, I explained why you should start a team <a href="http://codingdojo.org/">coding dojo</a> <a href="http://codingdojo.org/RandoriKata/">Randori</a> as soon as you can. Here is a step by step guide to set one up today.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-02-23-how-to-start-a-team-coding-dojo-randori-today/white-belt.jpg" alt="A white belt" /></p>

<h2>Logistics</h2>

<p>This the most important, and most easy, part !</p>

<h3>A Time Slot</h3>

<p>For a regular team coding dojo, practice showed that 2 hours every 2 weeks works great. Most teams I&rsquo;ve worked with had 2 weeks sprints, which made this rhythm natural.</p>

<p>Try to find a day and a slot that fits your own constraints. It could on the first, last or mid day of the sprint. It could be in the morning where people are usually fresh. People might have a bit less energy in the afternoon. Don&rsquo;t put it in the middle of the afternoon, or you&rsquo;ll ruin the programmers' focus. Some teams use the lunch break, and bring food in to make the coding dojo even more fun.</p>

<p>Once you&rsquo;ve found the perfect slot, book a recurring meeting with all your team. It&rsquo;s now official, you are going to have your first team coding dojo !</p>

<h3>Material Stuff</h3>

<p>You now need only 4 other things :</p>

<ul>
<li>a room</li>
<li>a laptop with a programming environment</li>
<li>a large visible screen to display the laptop</li>
<li>a timer</li>
</ul>


<p>It used to need a bit of preparation to get all these, but nowadays, it should be easy.</p>

<h2>Your first session</h2>

<p>The good thing about the Randori is that it is almost preparation-free. Here is the typical agenda for a Randori session :</p>

<ol>
<li>Introduction (0:05)</li>
<li>Problem Selection (0:05)</li>
<li>Coding (1:40)</li>
<li>Retrospective (0:10)</li>
</ol>


<h3>Introduction</h3>

<p>Start by reviewing last session&rsquo;s retrospective. This will bring good resolutions back to everyone&rsquo;s minds. Obviously, you cannot do that at the first session. Present the rules of the Randori instead (as stated by <a href="https://twitter.com/emilybache?lang=fr">Emily Bache</a> in her <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1519388493&amp;sr=8-1&amp;keywords=coding+dojo+handbook">book</a>):</p>

<blockquote><ol>
<li>If you have the keyboard, you get to decide what to type</li>
<li>If you have the keyboard and you don’t know what to type, ask for help</li>
<li>If you are asked for help, kindly respond to the best of your ability</li>
<li>If you are not asked, but you see an opportunity for improvement or learning, choose an appropriate moment to mention it. This may involve waiting until the next time all the tests pass (for design improvement suggestions) or until the retrospective.</li>
</ol>
</blockquote>

<p>Don&rsquo;t hesitate to repeat the rules when you have a newcomer or when you see fit.</p>

<p>The introduction is also a moment where participants can share things together. Just make sure it does not eat on coding time.</p>

<h3>Problem Selection</h3>

<p>There is a ton of coding dojo subjects out there. For the first session, pick in 1 or 2 problems for the team to choose from. After a few sessions, let people bring in problems and dot vote on their favorite subjects.</p>

<p>As a first problem, I like the <a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numerals</a> kata. It&rsquo;s not too difficult and has some interesting <a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a> and &ldquo;Do the simplest thing that could work&rdquo; properties. That&rsquo;s only a personal preference though. Here some resources where to find kata problems :</p>

<ul>
<li><a href="http://codingdojo.org/">codingdojo.org</a></li>
<li><a href="http://cyber-dojo.org/">cyber-dojo.org</a></li>
<li><a href="http://kata-log.rocks">kata-log.rocks</a></li>
<li><a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1519279127&amp;sr=8-1&amp;keywords=coding+dojo+handbook">The Coding Dojo Handbook</a> (Where you&rsquo;ll also find tons of other valuable advices)</li>
</ul>


<p><a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1519279127&amp;sr=8-1&amp;keywords=coding+dojo+handbook"><img src="http://philippe.bourgau.net/imgs/2018-02-23-how-to-start-a-team-coding-dojo-randori-today/coding-dojo.jpg" alt="The Coding Dojo Handbook cover" /></a></p>

<p>Whatever the topic you chose for your first session, make sure it is not too difficult.</p>

<blockquote><p>💡 As a first team Randori coding dojo problem, I like <a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numerals</a> kata.</p></blockquote>

<h3>Coding</h3>

<p>That&rsquo;s why we are here ! The Randori is a dojo format where everyone works together, on the same problem, through the same computer. Start the timer for 5 minutes as the first pair works on the problem. When the timer rings, the co-pilot takes the keyboard, and someone new becomes the co-pilot. Start the timer again, and repeat after 5 more minutes. If you did not already, have a look at my previous <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">post</a> for more details.</p>

<p>You should be using <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> during the Randori. Even if you are not (yet) using it on your production code. Here is why :</p>

<ul>
<li>It provides a fast feedback loop which enables the fast paced 5 minutes round robin</li>
<li>It teaches how to design testable code, which is always useful</li>
<li>It teaches how to do baby steps refactorings</li>
<li>🎁 Bonus : it demonstrates agile principles in practice (focus on outcome, incremental delivery, YAGNI &hellip;)</li>
</ul>


<p>I&rsquo;ve written a lot about TDD, have a look at <a href="/blog/categories/tdd/">my posts</a> for more. Applying TDD means sticking to the Red-Green-Refactor loop. During first sessions, be particularly careful that people don&rsquo;t refactor on red tests.</p>

<blockquote><p>💡 Team Randori coding dojo demonstrates agile principles in practice (focus on outcome, incremental delivery, YAGNI &hellip;)</p></blockquote>

<h3>Retrospective</h3>

<p>Stop coding 10 minutes before the end of the session. It might be difficult, but remind everyone that you are here to learn and that you can resume on next session. Use these 10 minutes to think about how it went. As the facilitator, take the keyboard, write these 4 questions in a text document :</p>

<ul>
<li>What did we do ?</li>
<li>What did we learn ?</li>
<li>What still puzzles us ?</li>
<li>What did we decide ?</li>
</ul>


<p>Ask everyone for their answers and write them down. You&rsquo;ll use this at the beginning of next session.</p>

<h2>Next Post</h2>

<p>I thought 2 posts would be enough to cover coding dojos, but it seems I have more to say ! <a href="/coding-dojo-troubleshooting/">My next post</a> will be about tricks and advices to make your dojos a success.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should start a team coding dojo Randori right now]]></title>
    <link href="http://philippe.bourgau.net/why-you-should-start-a-team-coding-dojo-randori-right-now/"/>
    <updated>2018-03-01T07:05:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-you-should-start-a-team-coding-dojo-randori-right-now</id>
    <content type="html"><![CDATA[<p><a href="http://codingdojo.org/">Coding Dojos</a> are easy to start and have a high return on investment. They will improve everyone&rsquo;s technical skills. That&rsquo;s only the start though. Practiced as a team Randori, they will also be a tremendous boost to team work.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-02-20-why-you-should-start-a-team-coding-dojo-randori-right-now/aikidoka-keyboard.jpg" alt="An Aïkidoka holding a keyboard instead of a boken" /></p>

<h2>My own story</h2>

<p>Coming up with team coding conventions is always a challenge. A few years ago, I remember organizing a meeting to discuss this with my team mates. In about 1 hour, we managed to agree on the standard C# code style, but not much more. Important points like the usage of singletons were still far from any agreement. I was disappointed. At least I learned that this is not the good way to build coding conventions.</p>

<p>A few years later, in another team, the coding conventions topic came up again. I did not want to repeat my previous failure. I created a wiki page where we could suggest, comment and vote for conventions. It was a lot better than my previous attempt, but it was slow. It turned out that we had also been doing team coding dojos for a while. A colleague suggested to try to fix a <a href="https://www.sonarqube.org/">Sonar</a> issue from our production code during a Randori session. It took us 2 hours to fix not one but a bunch of errors and to agree on 3 or 4 coding conventions. That was far more effective than my wiki page ! Looking back at the past few months, I realized what other topics the Randoris had helped the team with.</p>

<blockquote><p>💡 Team Coding Dojo Randori are great at defining coding conventions.</p></blockquote>

<h2>Classic Team Problems</h2>

<p>Coding conventions is only one of the team work problems that Randoris help to solve. Here is a non-exhaustive list :</p>

<ul>
<li>People waste time by ignoring how to use their tools as best as they could.</li>
<li>People lack skills that they could easily learn from one of their colleagues.</li>
<li>Team mates don&rsquo;t agree on the same design principles. This harms collective code ownership as the design goes 1 step in a direction and then 2 in the opposite.</li>
<li>People don&rsquo;t know how to work in baby steps and, as a result, perform large commits. This makes code reviews difficult and breaks the <a href="https://www.martinfowler.com/articles/continuousIntegration.html">Continuous Integration</a> more often.</li>
<li>Because they are not at ease to give and receive feedback, people don&rsquo;t pair. Reviews suffer from this as well, either not going in the depth of things, or ending bad !</li>
<li>Some team members might have difficulties explaining what they are doing to others.</li>
</ul>


<p>Believe it of not, Randoris can help you with all these issues.</p>

<h2>What is a Randori ?</h2>

<h3>A Coding dojo</h3>

<p>A coding dojo is a meeting where programmers deliberately practice their skills. To be effective, the coding dojo should be regular, and safe. Created to spread TDD (<a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a>), it&rsquo;s an effective way to teach other skills as well. Whatever the goal, it should use TDD. TDD sets up the fast feedback loop necessary to collaboration and effective learning. The dojo should end with a short retrospective : everyone stops what they are doing to discuss how it went.</p>

<p>People have invented many formats to the coding dojo, but there were only 2 at the origin. The Kata, where someone live codes a prepared solution to a problem using TDD. The Randori which I&rsquo;ll detail right away.</p>

<h3>A Randori</h3>

<p>In a Randori, you&rsquo;ll be using a single machine, a wide screen and a timer. Pairs of programmers round-rob at the keyboard every 5 minutes or so. Particularly here, we should stick to TDD for collaboration and fast feedback loop. When the timer rings, the co-pilot gets the keyboard, and a new co-pilot comes in.</p>

<p>5 minutes are very short, and force people to use real baby steps. If they try to do something too big, they will not reach a stable state before the end of their turn. If their change is too complex, others will get lost, and remove the code. The pair needs to collaborate a lot for others to understand and continue in the same direction. They have to explain what they are doing, and take feedback into account as much as they write code.</p>

<p><a href="https://www.youtube.com/watch?v=vqnwQ3oVM1M"><img src="http://philippe.bourgau.net/imgs/2018-02-20-why-you-should-start-a-team-coding-dojo-randori-right-now/randori.jpg" alt="Programmers doing a randori" /></a><div class="image-credits">From a <a href="https://www.youtube.com/watch?v=vqnwQ3oVM1M">YouTube video</a> by <a href="http://globo.com">globo.com</a></div></p>

<h3>Your team</h3>

<p>A team Randori is a Randori with your team. It improves all the problems I listed above.</p>

<ul>
<li>People will share coding conventions and design best practices. They are likely to agree on something for the sake of progress in a 2 hours session. The opportunity to see how the convention works with dojo code often leads to a production code agreement.</li>
<li>People will share IDE shortcuts and tricks.</li>
<li>The constant feedback will make people accustomed to it.</li>
<li>On top of that, people will refactor or have their code refactored from time to time. This is a great lesson in egoless programming.</li>
</ul>


<blockquote><p>💡 Coding Dojo Randoris are a great lesson in Egoless Programming</p></blockquote>

<p>I hope I convinced you that you should start team coding dojo Randoris. In my <a href="/how-to-start-a-team-coding-dojo-randori-today/">next post</a>, I&rsquo;ll go into more details about how to setup and run your first Randori.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup a weekly fruit basket in no time]]></title>
    <link href="http://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time/"/>
    <updated>2014-12-17T07:11:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-setup-a-weekly-fruit-basket-in-no-time</id>
    <content type="html"><![CDATA[<p><a href="http://www.groupe-patus.fr/wp-content/uploads/2014/03/07-Beautiful-Fruit-Wallpapers.jpg"><img src="http://philippe.bourgau.net/imgs/2014-12-17-how-to-setup-a-weekly-fruit-basket-in-no-time/fruit.jpg" alt="A multi-fruit sandwich" /></a></p>

<p>If you&rsquo;re interested in agile software development, just read Kent Beck&rsquo;s <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/B00CF6EJG8/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1417609208&amp;sr=8-1&amp;keywords=embrace+change+1st+edition">Extreme Programming Explained : Embrace Change 1st edition</a>. It&rsquo;s only 200 pages, it was written in 1999, but it&rsquo;s still tremendously relevent, and it&rsquo;s got the highest ratio of information per page on the subject.</p>

<p>If you actually read it, you&rsquo;ll notice that Kent emphasizes about having food at the office. He claims that it improves the moral and builds team cohesion.</p>

<p>As my company already provides free drinks, my first attempt was to asked for weekly fresh fruits baskets. They are currently experimenting regular self service fruit baskets deliveries in some offices. Unfortunately not in ours yet. Let&rsquo;s hope it changes soon. Meanwhile, we decided to handle the thing ourselves.</p>

<h2>Here comes the fruit basket lean startup !</h2>

<h3>First, let&rsquo;s setup the simplest way it could possibly work</h3>

<ul>
<li>Invest 10€</li>
<li>Buy some fruits from the closest shop</li>
<li>Put them in a basket next to my desk</li>
<li>Let people buy them for 50c each</li>
<li>Leave a plastic cup next to the basket to receive the money</li>
<li>Hold the accounting public and visible in your wiki for example</li>
<li>Repeat every monday</li>
</ul>


<p><img src="http://philippe.bourgau.net/imgs/2014-12-17-how-to-setup-a-weekly-fruit-basket-in-no-time/fruits-basket.jpg" alt="Our fruit basket at my desk" /></p>

<h3>Then, verify that it is sustainable</h3>

<p>It turns out it works fine !</p>

<h3>&hellip; Until someone started to steal some money !</h3>

<p>If we forgot to hide the money cup before we left in the evening, obvious isn&rsquo;t it ?
We tried the following, in that order :</p>

<ol>
<li>Setup an automatic reminder to hide the money before leaving &hellip; FAIL</li>
<li>Setup a fake webcam and a warning notice &hellip; FAIL</li>
<li>Only keep 1€ worth of change in the money cup, and repeatedly lock up the rest in a safe place &hellip; SUCCESS !</li>
</ol>


<p>With just a bit of time, anyone, anywhere can setup a fresh fruit basket at work. It does improve the moral and build the team.</p>
]]></content>
  </entry>
  
</feed>
