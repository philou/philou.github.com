<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coaching | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/coaching/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-01-25T06:30:01+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Agile transformations usually don't work - part 3 - What to do]]></title>
    <link href="http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-3-what-to-do/"/>
    <updated>2018-01-25T09:43:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-3-what-to-do</id>
    <content type="html"><![CDATA[<p>This is the third post in a <a href="/blog/categories/agile-transformations-fail-series/">series about making large organizations more agile</a>. I encourage you to <a href="/why-agile-transformations-usually-dont-work-part-1-the-situation/">start with the beginning</a>.</p>

<p>Let&rsquo;s summarize the previous posts. Large scale &ldquo;Agile&rdquo; transformation programs usually fall short of their promise. One reason is that leaders forget to provide a safe context to learn.</p>

<p><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-3-what-to-do/donkey-carrot-stick.jpg" alt="A kid trying to drive a donkey with a carrot and a stick" /></p>

<h2>What should we do ?</h2>

<p>First, we should take the time ! Rome wasn&rsquo;t built in a day. The road to an agile organization is a never ending path. We should also remember what we are after :</p>

<ul>
<li>Super fast adaptation to business changes through massive decentralization</li>
<li>Low process overhead thanks to people&rsquo;s buy-in</li>
<li>Continuous innovation in both products and organization, relying on everyone&rsquo;s creativity</li>
</ul>


<p>This is far more ambitious than a mere 5% productivity increase !</p>

<h2>Be patient for people to learn</h2>

<p>The goal is for people to be able to take bigger decisions on the spot. No one can learn this in a few hours. All over the company, people will have to improve their problem solving skills. They might also need to learn how to do root cause analysis. They&rsquo;ll need to take into account the point of views of other people in the organization. Some will need to beef up their communication skills as well. All will need to master new collaboration practices to stay up to date with what is going on.</p>

<blockquote><p>💡 An organization cannot be agile if all decisions have to go up and down the management ladder.</p></blockquote>

<p>That&rsquo;s a lot, and it takes time. The visible part of the iceberg, the collaboration practices, can be setup in a few weeks. But it won&rsquo;t yield much until the people are bold enough to take decisions by themselves.</p>

<p>First, I need to have a word about the workload in this section. If people are <a href="http://barryoreilly.com/2017/05/31/busy-to-death/">Busy to Death</a>, They won&rsquo;t have the time to learn. They won&rsquo;t even have the mood to think. Again, lasting productivity goes through sustainable pace. Slack time or a 20% policy are very good investments here !</p>

<p>Communication skills alone take months or years to improve. A communication training campaign can help to make the company ready to be more agile. In a previous team, new joiners used to attend a <a href="https://en.wikipedia.org/wiki/Nonviolent_Communication">Non-Violent Communication</a> training. Being transparent a constructive is a foundation of an agile organization.</p>

<p><a href="https://www.amazon.com/Five-Dysfunctions-Team-Leadership-Fable/dp/0787960756/ref=sr_1_2?ie=UTF8&amp;qid=1515736081&amp;sr=8-2&amp;keywords=five+dysfunctions+of+a+team"><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-3-what-to-do/5-dysfunctions-of-a-team.jpg" alt="Pyramid of the 5 dysfunctions of a team book&quot;" /></a></p>

<p>Finally, root cause analysis and problem solving skills take practice to get around. Some organizations, used to <a href="https://en.wikipedia.org/wiki/Carrot_and_stick">carrots and sticks</a>, have been avoiding this for years ! Good coaches can teach this to teams. People first need to learn that it&rsquo;s OK to look into problems and to experiment solutions though. That&rsquo;s where a safe environment helps.</p>

<h2>The Safe environment enhancer</h2>

<p>If people remain afraid to fail, they won&rsquo;t do enough experiments. As a result, they&rsquo;ll learn slower. They&rsquo;ll also keep delegating more decisions ! The organization won&rsquo;t become very agile. Sure, leaders will get small productivity and predictability improvements. Unfortunately, exclusive focus on these puts innovation in danger.</p>

<p>People should have the means to experiment. By far the greatest experimentation killer is carrots and stick management. If people live in fear of losing their job, we have no chance of becoming more agile.</p>

<blockquote><p>💡 Encouraging experimentation while sticking to compensation by objectives is schizophrenic.</p></blockquote>

<p>The situation is only slightly better with <a href="https://en.wikipedia.org/wiki/Management_by_objectives">management by objectives</a>. One of the reason is that as people start to expect their bonus, they also start to fear not having it next year ! We&rsquo;re back at the fear problem. There&rsquo;s a more direct issue with MBO though. A good experiment should be ambitious and have a high likelihood of failure. Unfortunately, people will negotiate unambitious objectives, to secure their bonus. In the end, people do far too few bold experiments and don&rsquo;t raise problems to safeguard their bonuses. Eventually, both people and the organization fail to learn.</p>

<p><a href="https://www.amazon.com/Punished-Rewards-Trouble-Incentive-Praise/dp/0618001816"><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-3-what-to-do/punished-by-rewards.jpg" alt="Cover of the book &quot;Punished by rewards&quot;" /></a></p>

<p>Instead of using MBO, we need to find a different way to deal with compensation. The management 3.0 literature has plenty of ideas for that. For example :</p>

<ul>
<li><a href="https://management30.com/practice/salary-formula/">Salary formula</a>. Some companies, like <a href="https://buffer.com/">Buffer</a> use a <a href="https://buffer.com/salary">transparent formula</a> to compute everyone&rsquo;s compensation. This base salary is independent from any subjective performance evaluation. On top <a href="https://open.buffer.com/transparent-pay-revolution/">boosting motivation</a>, it provides plenty of room for experimentation.</li>
</ul>


<blockquote><p><a href="https://qz.com/169147/applications-have-doubled-to-the-company-that-discloses-its-salaries/">After disclosing employee salaries, Buffer was inundated with resumes</a></p></blockquote>

<ul>
<li><a href="https://www.holacracy.org/badge-based-compensation-app/">Badge-based compensation</a>. Holocracy describes how to take valuable skills into account in a salary formula. To get a badge on a topic, you need to be recognized by the people who already own this badge. Examples of badges can be &ldquo;UX Expert&rdquo; or &ldquo;Senior Software Engineer&rdquo;.</li>
<li><a href="https://management30.com/practice/merit-money/">Merit money</a>. Company profits redistribution to employees should be both motivating and fair. Instead of typical yearly bonuses, merit money is a crowd-sourced money allocation scheme. Everyone regularly receives a fixed amount of monkey money. You should give some back to a colleague who helped you. You could also give some to acknowledge someone else&rsquo;s great job. Every month a lottery is played to know if employees should receive their share of profits. If so, everyone gets his share in proportion with the monkey money they received. Otherwise, profits accumulate until the next lottery.</li>
</ul>


<p>We could worry that dropping MBO will drop people&rsquo;s motivation as well. It turns out it&rsquo;s the exact opposite ! Check out <a href="https://www.youtube.com/watch?v=LFlvor6ZHdY">this talk</a> by Daniel Pinks to understand how bonuses kill motivation.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LFlvor6ZHdY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<h2>To be continued</h2>

<p>This was part 3 of a <a href="/blog/categories/agile-transformations-fail-series/">series of posts on making large organizations more agile</a>]. We&rsquo;re almost at the end. The last post will dig into how to provide the data to everyone. <a href="https://feedburner.google.com/fb/a/mailverify?uri=PhilippeBourgau&amp;loc=en_US">Subscribe</a> to be notified as soon as next post is ready.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Agile transformations usually don't work - part 2 - The problem]]></title>
    <link href="http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-2-the-problem/"/>
    <updated>2018-01-18T09:24:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-2-the-problem</id>
    <content type="html"><![CDATA[<p>This is the second post in a <a href="/blog/categories/agile-transformations-fail-series/">series about making large organizations more agile</a>. I encourage you to <a href="/why-agile-transformations-usually-dont-work-part-1-the-situation/">start with the beginning</a>.</p>

<p>Let&rsquo;s summarize the previous post. I illustrated the typical disappointment with large scale &ldquo;Agile&rdquo; transformations. At best they bring a small short term productivity improvement. At worst, they turn into micro-management.</p>

<h2>Why doesn&rsquo;t it work ?</h2>

<p>An organization is agile if it is able to respond and take advantage of changes fast. An organization where decisions need to go up and down the ladder will be slow. To thrive in this complex world, everyone needs to be able to take faster and bigger decisions. To do so, people need the good data, but also the right to fail, and the chance to learn new ways of working.</p>

<p><img src="../imgs/2018-01-09-why-agile-transformations-usually-dont-work-part-2-the-problem/decision-making.jpg" alt="A sign post with 2 directions : a convoluted 'centralized decision making' road, and a simpler 'agile decision making' road" /></p>

<p>People with the right authority could make data available fast enough. Learning new habits and convincing every one of their right to fail takes time though.</p>

<h2>A safe environment</h2>

<p>In &ldquo;Turn the shop around&rdquo; Navy captain David Marquet explains how he empowered his crew. They would take decisions and inform him with &ldquo;I intend to &hellip;&rdquo;. Doing that, he also took on him the responsibility of his subordinates errors !</p>

<p><a href="https://www.amazon.com/Turn-Ship-Around-Turning-Followers/dp/1591846404"><img src="../imgs/2018-01-09-why-agile-transformations-usually-dont-work-part-2-the-problem/turn-the-ship-around.jpg" alt="Cover of the book &quot;Turn the ship around&quot;" /></a></p>

<p>There are always people who put the organization&rsquo;s interests before theirs. They will try new experiments, even if could backfire in their faces, because it&rsquo;s the right thing to do. Unfortunately, these people are pretty rare. The vast majority will not try things that would get them troubles. They need a safe environment to unleash autonomy.</p>

<p>The typical adoption technique is to &ldquo;fake it until you make it&rdquo;. Apply the practices until the principles and values soak in everyone&rsquo;s mind. There&rsquo;s a catch though ! People need great models. People buy-in values, not actions. Think of Apple and other technology brands. People buy Apple hardware because they &ldquo;Think Different&rdquo; not for the products ! (Though I admit I love their products too :&ndash;))</p>

<p>Although people buy-in values, they measure them through actions. Leaders need to walk their talk for people to trust them.</p>

<blockquote><p>💡 People buy-in values, but they measure them through actions.</p></blockquote>

<p>Very often, leaders stick to actions that communicate that it is <em>not ok</em> to fail. Like compensation by objectives for example. Or highlighting the <a href="https://www.scrum.org/resources/commitment-vs-forecast-subtle-important-change-scrum">commitment</a> of sprints. Praising overwork is another one !</p>

<h2>Place to learn</h2>

<p>Real learning comes from experimentation.</p>

<blockquote><p>💡 “Never help a child with a task at which he feels he can succeed.” Maria Montessori</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Maria_Montessori"><img src="../imgs/2018-01-09-why-agile-transformations-usually-dont-work-part-2-the-problem/Maria_Montessori.jpg" alt="Photograph of educator Maria Montessori" /></a></p>

<p>This is still true for adults at work. Every time management pushes top-down incentives to speed up change, general understanding suffers. There is a limit to what an organization can withstand before it falls prey to cargo cult.</p>

<p>Leaders must provide a safe environment. They must also provide the conditions for the teams to learn and improve their unique way of working.</p>

<p>Too often, leaders are in a hurry. &ldquo;Why should we waste our time rediscovering what others have already understood ? Let&rsquo;s apply Scrum (or SAFe or LeSS) !&rdquo;</p>

<p>Did you ever learn something by copying the results of others ?</p>

<p>Let&rsquo;s look at <a href="http://www.scaledagileframework.com/">SAFe</a> for example. It&rsquo;s a collection of proven best practices. That&rsquo;s only half of the story though. What&rsquo;s not clear is how a practice is proven to work ? By definition, a team had success with it before adding it to SAFe. It can only be the result of experimentation and learning, as it was not yet part of SAFe !</p>

<h2>In the end</h2>

<p>Many leaders embark their organization in an Agile transformation for some business benefits. Unfortunately, people often perceive that &ldquo;It&rsquo;s just the latest way to squeeze a bit more out of us all !&rdquo;.</p>

<p>It does not have to be that way. What if they followed massive decentralization of power. What if they made more data available ? What if they adapted the compensation scheme to encourage risk taking. What if they gave authority to their teams to experiment and learn from their own problems. Would people still feel it&rsquo;s just another re-org ? As a reference, see how <a href="https://www.solidarity-us.org/leanproduction">unions have been fighting lean manufacturing for decades</a>.</p>

<p>That&rsquo;s what we&rsquo;ll look into the next posts. This was part 2 of a <a href="/blog/categories/agile-transformations-fail-series/">series of posts on making large organizations more agile</a>. <a href="/why-agile-transformations-usually-dont-work-part-3-what-to-do/">Further posts</a> will propose what to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Agile transformations usually don't work - part 1 - The situation]]></title>
    <link href="http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-1-the-situation/"/>
    <updated>2018-01-11T06:35:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-1-the-situation</id>
    <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/The_Goose_That_Laid_the_Golden_Eggs">Aesop&rsquo;s famous tale</a>, a farmer kills his goose that lays a golden egg every day to get all the eggs at once. He finds no eggs, lost his goose, and remains poor ever after.</p>

<p>I&rsquo;ve seen the same pattern happen many times in the software industry. A team decides to become more agile. After a few years of continuous improvement, it shows largely above average performances. Managers start to notice and ask how the team got there, to replicate this success. Unfortunately, they don&rsquo;t want to wait a few years for the other teams to find their own way. As a result, an &ldquo;Agile&rdquo; process is copy printed to all teams. Follows only ephemeral improvement, at the same time that the initial team gets drowned in a company &ldquo;Scaled Agile&rdquo; initiative &hellip;</p>

<p><img src="../imgs/2018-01-09-why-agile-transformations-usually-dont-work-part-1-the-situation/lets-all-do-this-agile-thing.jpg" alt="Drawing of a street tag 'Let's all do this Agile thing !&quot;" /></p>

<h2>Examples</h2>

<p>In the 60&rsquo;s, <a href="https://en.wikipedia.org/wiki/History_of_Toyota">Toyota</a> was innovating new ways to build cars. Other car manufacturers used to visit the Toyota plants to understand how they did it. Toyota was welcoming them with open arms ! (You can still <a href="http://www.visittoyotaky.com/">visit Toyota plants</a> today) Fortunately for Toyota, none of the visitors managed to copy their results.</p>

<blockquote><p>💡 Competitors managed to copy Toyota&rsquo;s practices, but not their results !</p></blockquote>

<p>Let&rsquo;s think of other agile companies like Google, Apple or Spotify. Did they copy an existing Agile framework or recipe ? No, they rather learned to embrace change in their own way. The HP LaserJet team did not become more agile by sticking to best practices either, they also did it their own way.</p>

<p><a href="https://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726/ref=sr_1_1?ie=UTF8&amp;qid=1515476483&amp;sr=8-1&amp;keywords=hp+large+scale+agile"><img src="../imgs/2018-01-09-why-agile-transformations-usually-dont-work-part-1-the-situation/hp-large-scale-agile-dev.jpg" alt="The cover of &quot;A Practical Approach to Large-Scale Agile Development. How HP Transformed LaserJet FutureSmart Firmware&quot;" /></a></p>

<p>Thinking about it, I never read a single story of how a team succeeded by sticking to method X, Y or Z.</p>

<p>It&rsquo;s just not possible to be agile by strict adherence to a method. Unfortunately, that&rsquo;s what most companies do. Have a look at the job posts, everyone is looking for agile devs, but do these companies look agile once you are in ?</p>

<h2>What are the actual results ?</h2>

<p>With a move to &ldquo;Agile&rdquo;, management usually envisions some of the following benefits :</p>

<ul>
<li>better quality</li>
<li>increased productivity through waste reduction</li>
<li>more innovation</li>
</ul>


<p>People who want these changes fast don&rsquo;t understand what they are doing. If they were, they would not expect this to be fast. It&rsquo;s all too easy to see &ldquo;Agile&rdquo; as a method, or a process.</p>

<p>Following the traditional <a href="http://www.reinventingorganizations.com/">&ldquo;machine&rdquo; organization metaphor</a>, processes are to be applied ! Deploying the new &ldquo;Agile&rdquo; process, leaves little room for self-organization and empowerment. People throughout the organization perceive it as yet another reorganization. People still feel like cogs in the machine. Cogs don&rsquo;t show a lot of autonomy and motivation ! That&rsquo;s when the vicious circle kicks in. To fix the lack of drive, management adds more top-down process !</p>

<p>Long story short, these transformations bring very little improvements. At the beginning, when everyone is keeping a close look at the process, things will go a bit better. A few month later, things will get back to where they were.</p>

<blockquote><p><iframe src="http://philippe.bourgau.net//www.slideshare.net/slideshow/embed_code/key/JAoAahDozJKWD5?startSlide=13" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://philippe.bourgau.net//www.slideshare.net/ThoughtWorks/lean-enterprise-how-to-innovate-at-scale" title="Lean Enterprise - Enabling Innovative Culture" target="_blank">Lean Enterprise &ndash; Enabling Innovative Culture</a> </strong> de <strong><a href="http://philippe.bourgau.net//www.slideshare.net/ThoughtWorks" target="_blank">ThoughtWorks</a></strong> </div></p></blockquote>

<p>A specific danger of &ldquo;Agile&rdquo; is that it can serve micro-management. Short iterations, code reviews and other feedback practices puts everyone under the radar. This makes decision makers feel more in control, at the cost of motivation and innovation. As an example, check <a href="http://sceptical-meerkat.blogspot.fr/2016/12/pair-programming-whats-in-it-for-me.html">this post</a> from a pair programming sceptic.</p>

<blockquote><p>💡 &ldquo;Agile&rdquo; can easily slip into micro-management</p></blockquote>

<h2>Next Week&rsquo;s post</h2>

<p>This was part 1 of a <a href="/blog/categories/agile-transformations-fail-series/">series of posts on making large organizations more agile</a>. <a href="/why-agile-transformations-usually-dont-work-part-2-the-problem/">Next post</a> will dig into why the traditional approach described above does not work. Further posts will propose what to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 SPA Conference takeaways that could make us better software professionals]]></title>
    <link href="http://philippe.bourgau.net/5-spa-conference-takeaways-that-could-make-us-better-software-professionals/"/>
    <updated>2017-07-06T22:17:00+02:00</updated>
    <id>http://philippe.bourgau.net/5-spa-conference-takeaways-that-could-make-us-better-software-professionals</id>
    <content type="html"><![CDATA[<p>Last week, my colleague <a href="https://ahmadatwi.me/">Ahmad Atwi</a> and I went to the London <a href="https://www.spaconference.org/spa2017/">SPA Conference</a> to give our <a href="https://www.youtube.com/watch?v=oJsukJhxt7E">Remote eXtreme Practice</a> talk.</p>

<p>The London <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> is one of the most active in the world. You could feel an XP atmosphere at the conference. For example, people like <a href="http://www.natpryce.com/">Nat Pryce</a> and <a href="https://twitter.com/sf105">Steve Freeman</a>, authors of <a href="https://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=fcdd83a07a3cfb190f2c8e7e8b9f72c3">GOOSGT</a> book were speakers.</p>

<p><a href="https://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=fcdd83a07a3cfb190f2c8e7e8b9f72c3"><img src="../imgs/2017-07-06-5-spa-conference-takeaways-that-could-make-us-better-software-professionals/growing.jpg" alt="The cover of Growing Object-Oriented Software, Guided By Tests" /></a></p>

<p>To summarize, we had the chance to attend a lot of very interesting sessions during the 3 days of the conference. Here are 5 pearls of wisdom I took back with me.</p>

<h2>What connascences are</h2>

<p>Identifying code <a href="http://connascence.io/">connascences</a> helps to rank refactorings and keep the system maintainable.</p>

<p><a href="http://www.extremeprogramming.org/rules/refactor.html">Continuous refactoring</a> is one of the core practices of XP. For me, knowing what to refactor next has been a matter of <a href="https://martinfowler.com/bliki/CodeSmell.html">code smells</a>, discussing with my pair and gut feeling.</p>

<p>A connascence is a coupling between parts of the system. Two parts of your code are connascent if changing one implies changing the other. For example, a function call is connascent by name with the function definition. If you change one, you need to change the other.</p>

<p>Connascences are more formal than code smells. We can detect and rank them to pick the most important refactoring to do. People have listed 9 types of connascences. Some are visible in the source code, others are dynamic and difficult to spot before runtime.</p>

<p>The lowest form of connascence is <a href="http://connascence.io/name.html">&lsquo;of name&rsquo;,</a> like in the function call example above. The worst form is <a href="http://connascence.io/identity.html">&lsquo;of Identity&rsquo;</a>, when different parts of the system must reference the same object.</p>

<iframe src="http://philippe.bourgau.net//www.slideshare.net/slideshow/embed_code/key/jPvF4gxm5z6cGN?startSlide=14" width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>The higher the connascence, the more difficult it is to evolve the parts involved. Instead of relying on intuition, you can use a connascence based refactoring algorithm :</p>

<ol>
<li>Detect the highest connascence</li>
<li>Reduce or remove it</li>
<li>Repeat.</li>
</ol>


<p>Thanks <a href="https://twitter.com/xpsurgery">Kevin Rutherford</a> and <a href="https://twitter.com/mowat27">Adrian Mowat</a> for your <a href="http://xpsurgery.com/resources/connascence-hunt-slides/">Red Green then what ?</a> session about connascence.</p>

<h2>Tips for pairing with junior developers</h2>

<p><a href="https://twitter.com/irinatsyganok">Irina Tsyganok</a> and <a href="http://www.natpryce.com/">Nat Pryce</a> gave a very fun session about this topic. A lot of valuable points discussed, from which I saved a few pearls of wisdom.</p>

<blockquote class="twitter-tweet" data-lang="fr"><p lang="en" dir="ltr">Cat eating session from <a href="https://twitter.com/natpryce">@natpryce</a> at <a href="https://twitter.com/hashtag/spaconf17?src=hash">#spaconf17</a> (unless <a href="https://twitter.com/irinatsyganok">@irinatsyganok</a> stops him) <a href="https://t.co/XSiaPDp9kJ">pic.twitter.com/XSiaPDp9kJ</a></p>&mdash; Andy Longshaw (@andylongshaw) <a href="https://twitter.com/andylongshaw/status/879714743963054080">27 juin 2017</a></blockquote>


<script async src="http://philippe.bourgau.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>It was reassuring to hear Nat saying that &ldquo;As we gain experience, we are not expected to know everything&rdquo;. Pairing with developers out of college is an occasion to &ldquo;exchange&rdquo; skills. Hard learned design skills versus updates on the latest technologies.</p>

<p>I also learned about the <a href="http://actingcoachscotland.co.uk/blog/expert-induced-amnesia/">Expert&rsquo;s Amnesia</a> and why experts often have a hard time teaching. Expert level knowledge is by nature instinctive. At this level of skill, it becomes very difficult to detail the logic of things that seem obvious.</p>

<h2>We engineers are more mentors than coaches</h2>

<p>In the <a href="https://www.amazon.com/gp/product/0201616416/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201616416&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=dc2f9dc4f5ca106842921bfded07b405">first XP book</a>, there were only 3 roles in the team : team members, on site customer and XP coach. The XP coach should be a developer who can help the team to learn the practices and principles of XP.</p>

<p>About the same time, the personal or professional coach jobs appeared. The Scrum Master, is to Scrum what the XP coach is to XP, without the developer part. Remember the joke &ldquo;Scrum is like XP, without everything that makes it work&rdquo; (<a href="https://martinfowler.com/bliki/FlaccidScrum.html">Flaccid Scrum</a>).</p>

<p>It looks like the Agile Coach job title appeared out of all this. The problem is no one exactly knows what this is. Should he be an experienced developer like the XP coach ? A great people person ? Or someone good at introducing change ? or a mix of these ?</p>

<p><a href="http://www.selfishprogramming.com/about/">Portia Tung</a> and <a href="https://uk.linkedin.com/in/helenlisowski">Helen Lisowski</a> &rsquo;s  talk &ldquo;The power of coaching&rdquo; clarified that.</p>

<p>There is no knowledge transfer from the coach to the coachees ! On the other side, a mentor does transfer knowledge to his mentees. The coach helps his coachee take a step back and take decisions in full consciousness. The goal of the mentor is to inspire and train to new techniques.</p>

<p>I&rsquo;m fine being a mentor and not a coach ;&ndash;)</p>

<h2>Servant leaders need to be tough at times</h2>

<p>We hear a lot about servant leadership nowadays. Scrum Master should be servant leaders, as well as managers in agile organizations.</p>

<p><a href="https://fr.linkedin.com/company/bellebeck-limited">Angie Main</a> gave a very interesting session about servant leadership. She made an interesting point I had not heard about before. We all know that servant leaders should trust the team to get the work done most of the time. In spite of that, servant leaders must also be ready to step in and remove people who don&rsquo;t fit in and endanger the team !</p>

<p>This reminded me of what Jim Collins says in <a href="http://www.wikisummaries.org/wiki/Built_to_Last#Chapter_6_.E2.80.93_Cult-like_Cultures">Built to last</a> : &ldquo;People who don&rsquo;t fit are expelled like viruses !&rdquo;</p>

<p><a href="https://www.amazon.com/gp/product/0060516402/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0060516402&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=e83ad8e3dcf7bdb7f875d5b22e8eb4c6"><img src="../imgs/2017-07-06-5-spa-conference-takeaways-that-could-make-us-better-software-professionals/built-to-last.jpg" alt="The cover of Built to Last" /></a></p>

<h2>1/3000 ideas succeeds</h2>

<p>Thanks to <a href="https://twitter.com/ozzieyuce">Ozlem Yuce</a>&rsquo;s session, I learned about the &ldquo;Job To Be Done&rdquo; technique to understand the customer&rsquo;s real needs.</p>

<p>Studies measured that only 1 idea out of 3000 ends up as a successful product ! <a href="https://www.researchgate.net/file.PostFileLoader.html?id=56217976614325233f8b4567&amp;assetKey=AS%3A285916150157312%401445179130594">Here</a> seems to be the original research.</p>

<p>I&rsquo;ll remember this fact next time I&rsquo;m ask for a funky feature !</p>

<h2>To conclude</h2>

<p>At the end, we had a very good time at SPAconference. The talks were insightful, we had interesting discussions, the premises were comfortable and on top of that, food was great !</p>

<p>I&rsquo;m already eager to go to SPA conference 2018 !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to kill Scrum Zombies ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-kill-scrum-zombies/"/>
    <updated>2016-11-03T05:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-kill-scrum-zombies</id>
    <content type="html"><![CDATA[<p>First of all, what is that ? Usually, Scrum zombies go in groups, and quite often, you&rsquo;ll find a full team of them :</p>

<p>A typical team of Scrum Zombies follows Scrum pretty well, does all the ceremonies, adopted good engineering practices, and might even be delivering OK. But all the fun is gone, everyone is on autopilot, no continuous improvement is happening anymore, retrospectives are dull and repetitive &hellip; There&rsquo;s a gut feeling in the air that sooner or later, the project will miss a turn.</p>

<p><img class="center" src="/imgs/2016-11-03-how-to-kill-scrum-zombies/sad-fans.jpg" title="A team of sad fans, looking like lost zombies" ></p>

<p>Sounds familiar ?</p>

<h2>What&rsquo;s going on exactly ?</h2>

<p>When dev teams want to get more (agile|lean|reactive|.*) they often resort to hiring a full time coach. At first, a coach can have a great impact on the team. He will unblock change, show different ways of getting things done and train the team to new practices. Once all this is done, the coach becomes like any team member, or sometimes just leaves. That&rsquo;s the point when the team, as a whole, has to take on responsibility for continuous improvement.</p>

<h2>What&rsquo;s needed then ?</h2>

<p>The team needs to be able to conduct their own experiments and improvements. For this, they need divergent thinking, or creativity, or thinking out of the box; name it as you prefer. In a complex world, no single individual can bring all the answers to all the upcoming issues any team will face. Once the coach has put in place the practices necessary to continuous improvement, it&rsquo;s up to the team.</p>

<p>Unlike what the common idea says, creativity does not come out of thin air, it is cultivated !</p>

<h3>Diversity in the team</h3>

<p>Diversity does not mean minority quotas in your team. Diversity means diversity of interest, of way of thinking, of mentality, of way of working &hellip; The more diverse your team members, the more likely they&rsquo;ll find innovative ways to work out of their current problems.</p>

<h3>Slack</h3>

<p>Removing any slack from the planning is the surest way to kill creativity and innovation. Great ideas often come at unexpected moments (see <a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1478151003&amp;sr=1-1&amp;keywords=pragmatic+thinking+and+learning">Pragmatic Thinking and Learning: Refactor Your Wetware</a>) because the mind works in the background to find them. You want to leave some time for that.</p>

<h3>Go to conferences</h3>

<p>Creativity builds on creativity. Great ideas are often adaptations of one or many existing ones. Going to conferences is a great way to collect a lot of ideas !</p>

<h3>Share trainings and lectures</h3>

<p>Different people might react differently to the same information. When a team member finishes reading a book or comes back from a training, it&rsquo;s a great idea to have him present what he learned to the others. This will reinforce his own learning, but it might also trigger new ideas in his team mates.</p>

<h3>A dash of turnover</h3>

<p>Too much turnover can be fatal to a team, but not having any will bring other kind of problems too. Newcomers will challenge the status-quo, and the &ldquo;this is how it&rsquo;s done here&rdquo; motto won&rsquo;t be enough for them. That&rsquo;s just what&rsquo;s needed to trigger a sane re-examination of the current practices. Oh &hellip; and turnover between teams is fine too ! If your company is large enough, you don&rsquo;t need to hire or fire people to create turnover, just encourage them to move to other teams !</p>

<h2>The tricky part of complexity</h2>

<p>By leaving time for other things than just cranking out stories, life will come back into the project, and zombies should go away. But wait, there&rsquo;s even more !</p>

<p>Software projects are pretty complex beasts. One of the most counter-intuitive thing with these complex system is that they make planning very difficult. Focusing too much on your main goal might be slowing you down !</p>

<p><img class="center" src="/imgs/2016-11-03-how-to-kill-scrum-zombies/large-tunnels-in-a-mine.jpg" title="Crossroad of large tunnels in a mine" ></p>

<p>In the face of complexity your project landscape is like a maze of tunnels ! Who said you&rsquo;re choosing the best ones ? By keeping free time to explore other, seemingly unrelated, topics you might discover opportunities that will remove a lot of the work to get to your final destination !</p>
]]></content>
  </entry>
  
</feed>
