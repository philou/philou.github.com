<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coaching | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/coaching/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-10-19T04:23:32+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pair Programming, From Pain Zone To Skill Zone]]></title>
    <link href="http://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone/"/>
    <updated>2016-05-06T04:04:00+00:00</updated>
    <id>http://philippe.bourgau.net/pair-programming-from-pain-zone-to-skill-zone</id>
    <content type="html"><![CDATA[<p>We&rsquo;re doing pair programming almost all the the time in our team. A few weeks ago, we went to <a href="http://www.devoxx.fr/">Devoxx</a> Paris, and 2 team mates used pair programming at a hands on session : they finished way before the others and had the time to take a 30 minute break. Pair programming delivers more &hellip; when it works.</p>

<h2>Flavors of Pair Programming</h2>

<p>Throughout our experience, we have identified some situations where it does or does not work :</p>

<table>
<thead>
<tr>
<th>Pain Zone         </th>
<th> Skill Zone</th>
</tr>
</thead>
<tbody>
<tr>
<td>Wandering buddies </td>
<td> Mates</td>
</tr>
<tr>
<td>Expert / Novice   </td>
<td> Mentor &amp; Apprentice</td>
</tr>
</tbody>
</table>


<br>


<h2>The Pain Zone</h2>

<p>Pair programming can be painful. It can feel like a waste of time or extremely frustrating. Here are the typical situations and how to fix them.</p>

<h3>The Wandering Buddies</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/going_nowhere.jpg" title="A &lsquo;going nowhere&rsquo; sign" ></p>

<p>That&rsquo;s what you&rsquo;d get if you asked to newcomers straight out of school to pair program on existing source code on day 1. They&rsquo;d be dabbling here and there, without going anywhere. Each one would try to get the keyboard to try his way, but in the end, no general direction would be followed.</p>

<p>The cure in this case (as often) is to stop and think. At least one in the pair needs to lean how to pair program. It&rsquo;s not difficult, that&rsquo;s just :</p>

<ul>
<li>Discuss and agree on a general plan first</li>
<li>Keep a todo list</li>
<li>Track your advancement on your todo list while you don&rsquo;t have the keyboard</li>
<li>Stop and discuss from time to time</li>
</ul>


<p>By starting that, the pair will quickly move into the &lsquo;mates&rsquo; state.</p>

<h3>The Export / The Novice</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/race.jpg" title="A race where Usain Bolt leave everyone meters behind" ></p>

<p>That&rsquo;s when a &lsquo;lone wolf kind of&rsquo; expert pairs with a junior. The expert picks the keyboard, dashes through the tasks, doesn&rsquo;t make sure his pair follows (which usually means it does not).</p>

<p>Regular pair programming means a change in job responsibilities for such expert programmers. If they were expert doers before, they should now become expert mentors or coaches. That&rsquo;s quite a difference. To them, it means that their goal must be to make his pair finish the task &hellip; It can be very frustrating at first. Nevertheless, the overall skill level in teams doing that increases so fast that&rsquo;s it&rsquo;s very fulfilling for the team as a whole.</p>

<h2>The Skill Zone</h2>

<p>The is where we want to be. When it happens, pair programming feels productive, interesting and fulfilling. Contrary to what is often thought, this can happen whatever the skill levels of the 2 programmers.</p>

<h3>The Mates</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/to-do-list.jpg" title="A Todo list" ></p>

<p>The programmers have equivalent skills on the subject at hand. They organized in a way that they are both learning from each other. By having to verbalize what and why they are doing things, by challenging each others assumptions and by sometimes doing differently than what they&rsquo;d alone.</p>

<h3>The Mentor &amp; The Apprentice</h3>

<p><img class="center" src="/imgs/2016-05-06-pair-programming-from-pain-zone-to-skill-zone/help.jpg" title="People helping each other to climb a mountain" ></p>

<p>Other times, there can be a real difference in skills for what the pair is attempting to do. In this situation, the goal of the most knowledgeable is to train his pair, who&rsquo;s goal is to learn. The task becomes some kind of exercise on which to practice.</p>

<p>During a typical pairing session, a pair might switch many times between mentor and mates states. Each one in the pair might assume the mentor&rsquo;s role for different aspect of the work. At the end of the day, everyone should feel as if they had learned and accomplished good work.</p>

<h2>Last Word of Caution</h2>

<p>Pair programming is exhausting. Don&rsquo;t expect to be able to do 40 hours of pair programming per week. After 6 hours in a day, one usually starts to get a lot less efficient.</p>

<p>Both juniors and experienced programmers also need some time by their own, to experiment things by themselves or to complete a simple task without having worry about explaining everything.</p>

<p>These are the reasons why <a href="http://www.extremeprogramming.org/">XP</a> stresses having a sustainable pace and leaving space for <a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack time</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Agile Change Management Viral Hack]]></title>
    <link href="http://philippe.bourgau.net/the-agile-change-management-viral-hack/"/>
    <updated>2015-05-23T05:51:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-agile-change-management-viral-hack</id>
    <content type="html"><![CDATA[<p>We just discovered a hack to spread agile (<a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a> by the way) through an organization. It works provided :</p>

<ul>
<li>There is a BDD testing expert in your team</li>
<li>Your team is using the work of another software team from your company</li>
</ul>


<p>If this team does not use agile practices, they are likely to regularly create regressions or to be late at providing new versions.</p>

<p>Use your client role in the relation, and propose your help ! Spend some time with them to help them put automated customer tests in place. Be genuinely nice with them, show example, be available and, obviously, bring improvement. With some chance, they might soon be asking for more.</p>

<p><code>ruby
Given there are too many bugs
When you can help
Then DO IT !
</code></p>
]]></content>
  </entry>
  
</feed>
