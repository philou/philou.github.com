<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-06-28T04:41:34+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I organized my javascript assets in Rails]]></title>
    <link href="http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails/"/>
    <updated>2013-11-27T05:56:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-i-organized-my-javascript-assets-in-rails</id>
    <content type="html"><![CDATA[<p><a href="/jasmine-and-coffeescript-setup-for-rails/">Lately</a>, I have been introducing javascript and coffeescript in <a href="http://www.mes-courses.com">www.mes-courses.fr</a> (with structural architecture issues as a side effect, but that&rsquo;s another story &hellip;).</p>

<p>Here are the general goals I had when using the rails asset pipeline :</p>

<ul>
<li>most of js compiled in a single file</li>
<li>no js code in your html files : I want to use unintrusive javascript techniques, and have some outside js hook code that will wire js and html together</li>
<li>sometimes, I want some js code to be only explicitly included by some particular pages (example: hooking a timer on the document ready event of a particular html page). This means that I cannot simply compile all js code in a single minified file</li>
<li>In unit tests, I want to be able to manually set up and tear down the js hooks</li>
</ul>


<p>So, here is how I eventually organized my js code :</p>

<ul>
<li>I create a specific dependencies.js file that will require all outside dependencies</li>
<li>I split my js code under 3 subdirectories :

<ul>
<li>explicit : hooks that will be explicitly included</li>
<li>hooks : all the other hooks</li>
<li>application : all the real code</li>
</ul>
</li>
<li>In my application.js, I include dependencies and all files under application and hooks. Here is my app/assets/javascript/application.js</li>
</ul>


<p><code>javascript
//= require dependencies.js
//= require_tree ./application
//= require_tree ./hooks
</code></p>

<ul>
<li>In my tests, I only load dependencies and files from the application directory. Here is my spec/javascript/spec.js.coffee</li>
</ul>


<p>```coffeescript</p>

<h1>= require ../../app/assets/javascripts/dependencies.js</h1>

<h1>= require_tree ../../app/assets/javascripts/application</h1>

<h1>= require_tree ./</h1>

<p>```</p>

<ul>
<li>Hook code only consists of calling a setup function from the &lsquo;real&rsquo; code. For example, here is my app/assets/javascript/hooks/cart_lines/index.coffee file</li>
</ul>


<p><code>coffeescript
$(document).ready(window.mesCourses.cartLines.index.setUp)
</code></p>

<p>this setUp function is defined in the app/assets/javascript/application/cart_lines/index.coffee file</p>

<ul>
<li>This way, from the unit tests, I can explicitly call this setUp function, here is the beginning of my spec/javascript/application/cart_lines/index_spec.coffee file</li>
</ul>


<p>```coffeescript
describe &lsquo;mesCourses.cartLines.index&rsquo;, &ndash;></p>

<p>  beforeEach &ndash;></p>

<pre><code>window.mesCourses.cartLines.index.setUp()
</code></pre>

<p>  &hellip;
```</p>

<p>And you, how are you organizing your javacript assets ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine and coffeescript setup for rails]]></title>
    <link href="http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails/"/>
    <updated>2013-07-04T07:44:00+00:00</updated>
    <id>http://philippe.bourgau.net/jasmine-and-coffeescript-setup-for-rails</id>
    <content type="html"><![CDATA[<p>As I started to write more javascript code in my <a href="https://www.mes-courses.fr">rails app</a>, it became obvious that I should be testing it ! I wanted to use <a href="http://pivotal.github.io/jasmine/">jasmine</a> and <a href="http://coffeescript.org">coffeescript</a>. I searched a long time to find out what was the most common and supported setup for a rails app, so now I recommand</p>

<p><code>ruby
gem 'jasmine'
gem 'jasminerice'
gem 'guard-jasmine'
</code></p>

<ul>
<li>The <a href="https://github.com/pivotal/jasmine-gem">jasmine gem</a> is by far the most common jasmine gem, it is supported by <a href="http://pivotallabs.com">Pivotal Labs</a> so there is no fear of it being droped soon.</li>
<li>The <a href="https://github.com/netzpirat/guard-jasmine">guard-jasmin gem</a> is supported by <a href="https://mksoft.ch">MKSoft</a>, and is not only handling continuous <a href="http://phantomjs.org/">phantomjs</a> headless jasmine testing through guard, but it also provides command line and rake tools to run your jasmine specs during continuous integration.</li>
<li>Eventually, the <a href="https://github.com/bradphelan/jasminerice">jasminerice gem</a> makes it easy to write your jasmine specs with coffeescript. It also wraps a version of <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a> to assist client javascript testing. Although there is a &ldquo;looking for maintainer&rdquo; message on the README page, there are some recent commits, so it seems that pull requests are still being merged even if the project is not actively developpped anymore &hellip; I belive volunteers are welcome.</li>
</ul>


<p>All 3 have detailed and up to date setup and usage instructions.</p>
]]></content>
  </entry>
  
</feed>
