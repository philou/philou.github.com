<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: psychology | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/psychology/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-09-11T06:07:38+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Presenting a large scale refactoring as a business opportunity]]></title>
    <link href="http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity/"/>
    <updated>2018-09-06T06:27:00+02:00</updated>
    <id>http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity</id>
    <content type="html"><![CDATA[<p>Have you ever tried to talk about refactoring with business people ? Most of the time, the matter is pushed aside or received with rolling eyes &hellip; A few weeks ago, someone on <a href="https://news.ycombinator.com/">Hacker News</a> asked the question &ldquo;<a href="https://news.ycombinator.com/item?id=17600503&amp;utm_source=hackernewsletter&amp;utm_medium=email&amp;utm_term=ask_hn">As a CTO, what is your most frustrating problem with technical debt?</a>&rdquo;. Here is the most voted answer</p>

<blockquote><p>I think a lot of the time when a developer shouts ‚Äútechnical debt‚Äù what they are really shouting is ‚Äúcode someone else wrote that I‚Äôd rather rewrite than understand‚Äù. (The rest of the time is the same but they‚Äôve understood it enough to think it‚Äôs a disaster area.)</p>

<p>I have found it‚Äôs best to not take tech debt complaints very seriously and instead look at actual success metrics. For example if every change to a bit of code introduces new bugs then that might be a reason to tidy it up.</p>

<p><a href="https://github.com/ghiculescu">ghiculescu</a></p></blockquote>

<p>We need a constructive dialogue with business people to get sponsorship for important large scale refactorings. Let&rsquo;s see what we can do to have one. This is the 10th post of a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-22-presenting-a-large-scale-refactoring-as-a-business-opportunity/refactoring-opportunity.jpg" alt="Drawing of a tree growing on top of the word refactoring. The key to getting sponsorship for a large scale refactoring is to present it as a business opportunity" /></p>

<h2>Presenting a business opportunity</h2>

<p>We must be very careful about how we present refactorings. We don&rsquo;t want them to be seen as unnecessary chores, or the latest tech fashion to follow. These don&rsquo;t bring value, and business people will run away from such refactorings. Instead, we should present business opportunities for higher productivity to invest in.</p>

<h3>Presenting a similar success story and its impact on the business</h3>

<p>Most of our companies have been through similar refactorings in the past. We can try to find a successful one and draw parallels to forecast benefits for the business. If the company is too young to have any or they were all failures, we can have a look in the whole industry. When I was at <a href="https://www.devoxx.fr/">Devoxx in Paris</a>, <a href="https://twitter.com/hervelourdin?lang=fr">Herv√© Lourdin</a> the CTO of <a href="https://www.videdressing.com/">VideDressing</a> presented how they managed to do a large scale refactoring. Among other things, he went over how he managed to get sponsorship from his board. If you understand French, have a look at <a href="https://www.youtube.com/watch?v=UZt07-dsTdU">the full talk</a>. In this case as in most, a likely promise of reduction in the costs of bugs and new features is what made the point.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/UZt07-dsTdU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>üí° In most cases, a likely promise of reduction in the costs of bugs and new features is what gets a refactoring prioritized.</p></blockquote>

<h3>Be a Badass Developer</h3>

<p>I wrote a lot about being a <a href="/blog/categories/badass-developer/">badass developer</a> earlier in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">this series</a>. This is when it becomes crucial. Being badass is a way to gain the trust of business people. Without this trust business people will react like the guy on Hacker News. Badass developers are way better at presenting large scale refactoring as business opportunities.</p>

<h3>Find a path to do incremental delivery</h3>

<p>Without incremental delivery, a refactoring risks delaying features for an unknown time. That scares the hell out of business people. <a href="/blog/categories/incremental-software-development/">Day to day incremental refactoring best practices</a> will save the day here. They&rsquo;ll actually help 3 times !</p>

<ol>
<li>To already perform a lot of refactoring in day to day work</li>
<li>To learn how to find an incremental refactoring path to present to business people</li>
<li>To prove that we know what we are talking about : we&rsquo;ve already been doing it for a while</li>
</ol>


<p>If you haven&rsquo;t, have a look at <a href="/blog/categories/incremental-software-development/">the articles about incremental refactoring techniques</a> that I wrote earlier in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">this series</a>.</p>

<h2>Pitch It !</h2>

<p>In &ldquo;corporate&rdquo; environments, building credibility is a lot about being convincing. The more we learn to be convincing, the more likely we are to have our refactoring prioritized. If you are ready to spend some time learning how to pitch, I recommend reading <a href="https://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854">Pitch Anything</a>. At least have a look at <a href="https://www.marketingfirst.co.nz/2013/10/pitch-anything-an-innovative-method-for-presenting-persuading-and-winning-the-deal-by-oren-klaff/">its summary</a>. It contains many actionnable nuggets to deliver powerful pitches. Here are a few.</p>

<p><a href="https://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854"><img src="http://philippe.bourgau.net/imgs/2018-08-22-presenting-a-large-scale-refactoring-as-a-business-opportunity/pitch-anything.jpg" alt="Cover of the book Pitch Anything. Pitching a large scale refactoring as a business opportunity is a great way to get it prioritized" /></a></p>

<p>When we present an idea, we should put &ldquo;frames&rdquo; (time, authority &hellip;) in place to gain control of the discussion. For example, a time frame is a kind of deadline that will urge people to take action now. (Before overthinking it &hellip;)¬†</p>

<p>We should create tension by alternating phases where we are giving and phases where we take a step back. Following the same idea, it also mentions the <a href="https://en.wikipedia.org/wiki/The_Tao_of_Steve">Tao of Steve</a> to rule at negotiations :</p>

<ul>
<li>Don&rsquo;t want anything</li>
<li>Show that you are really good</li>
<li>Leave at the crucible moment</li>
</ul>


<p>Giving a great pitch is a great way to present large scale refactorings as business opportunities.</p>

<blockquote><p>üí° Pitching is a great skill for developers to get sponsorship for a refactoring.</p></blockquote>

<h2>More to come</h2>

<p>This was the 10th post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. In next week&rsquo;s post, I&rsquo;ll go over how to use a recent discovery about how our brain works to become even more convincing ! <a href="http://eepurl.com/dxKE95">Stay tuned</a> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Dojo Troubleshooting]]></title>
    <link href="http://philippe.bourgau.net/coding-dojo-troubleshooting/"/>
    <updated>2018-03-15T06:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/coding-dojo-troubleshooting</id>
    <content type="html"><![CDATA[<p>In my last 2 blog posts, I&rsquo;ve detailed <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">why</a> and <a href="/how-to-start-a-team-coding-dojo-randori-today/">how</a> to start a team Randori Coding Dojo. That&rsquo;s the easy part. As soon as you start your first dojo, you&rsquo;ll face trickier issues, especially people issues.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-03-08-coding-dojo-troubleshooting/tool-belt.jpg" alt="A martial artist with a tool belt" /></p>

<h2>What if my team (or my boss) does not want to ?</h2>

<p>Very often some of your team mates won&rsquo;t see the value of the coding dojo upfront and will prefer to work on other tasks. It can also be your boss, who thinks you should be delivering features instead. Here are a few tricks you can do to make it work.</p>

<ul>
<li>Try to find another time slot. Ask people for their preferred moment. If you can negotiate food sponsorship with your boss, you might get everyone happy. He won&rsquo;t feel you&rsquo;re not delivering features, you&rsquo;ll have a free lunch and you&rsquo;ll improve your skills.</li>
<li>If your boss or colleague doesn&rsquo;t want to spend 2 full hours on a dojo. Get them to start with smaller problems and a shorter time slot.</li>
<li>Your colleagues might have doubts about the value of the dojo. Get them to try it once or a few times before committing to a recurring event.</li>
<li>As a general rule of thumb, the more you manage to involve people in the preparation, the more they&rsquo;ll adhere.</li>
<li>If you have 1 or 2 inveterate laggards, do it without them anyway. With time, they&rsquo;ll understand what they are missing !</li>
</ul>


<blockquote><p>üí° If you cannot get people to adopt a new practice, get them to try it once. You&rsquo;ll be more than halfway there.</p></blockquote>

<h2>Dealing with TDD complaints</h2>

<p><img src="http://philippe.bourgau.net/imgs/2018-03-08-coding-dojo-troubleshooting/skeptic-gorilla.jpg" alt="A gorilla with a skeptic look" /></p>

<p>As you&rsquo;ll start your first Randori, you&rsquo;ll have some complaints about <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a>. Whether they come from newbies or skeptics, they usually look like :</p>

<ul>
<li>Why do we stick to TDD ? We&rsquo;d go so much faster if we coded this straight away.</li>
<li>We don&rsquo;t need TDD for such a simple problem.</li>
<li>We don&rsquo;t need such small baby steps on this simple problem.</li>
<li>&hellip;</li>
</ul>


<p>My answer is more or less always the same. I try to re-frame everyone in the context of a learning exercice of deliberate practice. It could sound something like :</p>

<blockquote><p>Yes, sure. I know you are professional developers and that you could easily solve this little problem. Keep in mind that we are here to deliberately practice TDD and friends. Solving the problem is only a side effect.</p>

<p>We are going to apply TDD by the book, for the sake of learning. It&rsquo;s a lot easier to learn to swim in 1 meter of water than in the middle of the sea. Once we&rsquo;ll master it in the safe dojo environment, you&rsquo;ll know how to adapt it to your production code.</p>

<p>Please, play by the rules here !</p></blockquote>

<p>As you can see, I don&rsquo;t try to convince them. The last thing I want is to get into a pro vs cons of TDD. 95% of the time, this answer is enough to get people over their skepticism and try it for the time of the dojo. Unfortunately, the last 5% might result in a difficult session. There&rsquo;s no single way to deal with these 5%. You can try to discuss with them in private, or run next session without them.</p>

<blockquote><p>üí° Reframe the coding dojo as a learning exercice relying on TDD to go beyond skepticism.</p></blockquote>

<h2>How to avoid getting bogged down in details</h2>

<p>One last advice, especially for your first sessions. It&rsquo;s a common rookie mistake to waste 80% of the coding time on error handling. The key is to focus on what you want to learn. You are not writing production code, so don&rsquo;t hesitate to omit certain aspects. For example, assume that correct arguments are provided to skip error handling. This will save you time, be more fun and increase what you learn.</p>

<h2>What&rsquo;s next ?</h2>

<p>This was part 3 of this <a href="/blog/categories/team-randori-series/">series on team coding dojo</a>. In <a href="/how-to-get-the-max-out-of-your-team-coding-dojo/">the next post</a>, I&rsquo;ll write how to maximize the benefits we can get out of coding dojos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how to start a #ZeroBugs policy - part 4]]></title>
    <link href="http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4/"/>
    <updated>2018-01-04T10:40:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-and-how-to-start-a-number-zerobugs-policy-part-4</id>
    <content type="html"><![CDATA[<p>This is the forth and last post of a <a href="/blog/categories/zero-bugs-series/">series about the #ZeroBugs policy</a>. In the <a href="/why-and-how-to-start-a-number-zerobugs-policy-part-1/">previous posts</a>, I detailed how we applied it in our team, what were the consequences and how you could do the same.</p>

<p>There&rsquo;s a catch though, even if you are sure that <a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#ZeroBugs</a> is a good thing, people around you might not agree ! As with any kind of change, one of the trickiest thing is overcoming people&rsquo;s fear about your idea. This post will be about dealing with people&rsquo;s resistance.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-4/bug-dilemna.jpg" alt="Drawing of people arguing over the #ZeroBugs policy" /></p>

<h2>A few general change advices</h2>

<p>With time, I discovered general best practices to bring change. The first is that you are much more likely to get your ideas through if you are nice with people ! In a bit more details, this means that :</p>

<ul>
<li>Try to help people, for real !</li>
<li>Listen to their concerns instead of pushing your idea</li>
<li>Don&rsquo;t blame people if they don&rsquo;t see the value of your idea</li>
</ul>


<blockquote><p>üí° Change agent&rsquo;s advice #1 : be nice with people</p></blockquote>

<p>Another invaluable trick is to be patient : change takes time. Finally, if you are stuck, suggest testing your idea for a while, people are more likely to adopt it this way.</p>

<p><a href="https://www.amazon.com/Enchantment-Changing-Hearts-Minds-Actions-ebook/dp/B004S26HB2/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1511346442&amp;sr=1-1&amp;keywords=the+art+of+enchantment"><img src="http://philippe.bourgau.net/imgs/2017-11-22-why-and-how-to-start-a-number-zerobugs-policy-part-4/enchantment.jpg" alt="Cover of the book &quot;Enchantment: The Art of Changing Hearts, Minds and Actions&quot;" /></a></p>

<h2>Winning the devs over</h2>

<p>Back to our particular #ZeroBugs issue. In this particular case, I would ¬†try to convince the devs first. Reason A is that without them onboard, the practice won&rsquo;t work as well as expected. Reason B is that it is more difficult for management to say &lsquo;no&rsquo; to a full team than to a single developer.</p>

<p>Developers will fear spending too much time fixing bugs. Sell them long term fixes instead of dirty quick fixes. Stress that it will be a chance to refactor important, poorly designed parts of the system. Also explain that once the bug backlog is clean, they&rsquo;ll spend more time on new developments.</p>

<p>A last argument for developers is about clarifying prioritization. Pushing bug triage to business people will save devs from feature creep. That should save them from some stress of not delivering.</p>

<h2>Winning business people over</h2>

<p>They&rsquo;ll fear that fixing bugs will reduce the delivery of valuable features. Indeed, if done without care, this is a real danger. Highlight the value of bug fixing : it improves the product and image of the company. Fixing bugs also increases feature delivery in the long run. It does so by removing some recurring support issues and fixing technical debt.</p>

<p>Also point out that they&rsquo;ll have more visibility and control over what is being worked on by the team. This is an opportunity for them to increase the value throughput.</p>

<p>They might also have concerns about the time to spend categorizing bugs. Make sure to get this as streamlined as possible. For example, if they are very busy, you could pre-categorize the issues to make it easier for them.</p>

<p>In <a href="https://medium.com/swlh/how-we-got-to-zero-bugs-and-implemented-a-zero-bug-policy-c77ee3f2e50b">this blog post</a>, Andrew Fulton explains how he convinced his boss to adopt a #ZeroBugs policy.</p>

<h2>Last words</h2>

<blockquote><p>üí° #ZeroBugs policy makes work more sustainable</p></blockquote>

<p>I&rsquo;m done with this <a href="/blog/categories/zero-bugs-series/">series about #ZeroBugs policy</a>. I hope I convinced you to give it a try. The developer&rsquo;s life is better without bugs ! If you do, or if you already did, I&rsquo;d love to read about it. Thanks a lot for reading me so far.</p>
]]></content>
  </entry>
  
</feed>
