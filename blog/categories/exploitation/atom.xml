<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: exploitation | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/exploitation/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-04-14T06:42:07+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I fixed 'devicemapper' error when deploying my Docker app]]></title>
    <link href="http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app/"/>
    <updated>2017-02-01T17:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-i-fixed-devicemapper-error-when-deploying-my-docker-app</id>
    <content type="html"><![CDATA[<p>A few months ago, I started continuously deploying my <a href="https://github.com/philou/planning-poker">latest side project</a> to a <a href="https://cloud.digitalocean.com">Digital Ocean</a> box. If you are interested, <a href="/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/">here</a> is the full story of how I did it. All was going pretty well until last week, when the builds unexpectedly started to fail. I wasn&rsquo;t getting the same error at every build, but it was always the <a href="https://www.docker.com/">Docker</a> deployment that failed. Here are the kind of errors I got :</p>

<p>```bash</p>

<h1>At first, it could not connect to the db container</h1>

<p>PG::ConnectionBad: could not translate host name &ldquo;db&rdquo; to address: Name or service not known</p>

<h1>Then I started to have weird EOF errors</h1>

<p>docker stderr: failed to register layer: ApplyLayer exit status 1 stdout:  stderr: unexpected EOF</p>

<h1>Eventually, I got some devicemapper errors</h1>

<p>docker stderr: failed to register layer: devicemapper: Error running deviceCreate (createSnapDevice) dm_task_run failed
```</p>

<p>You can read the full error logs <a href="https://circleci.com/gh/philou/planning-poker/tree/master">here</a>.</p>

<h2>That&rsquo;s what happens when you go cheap !</h2>

<p>After searching the internet a bit, I found <a href="https://github.com/docker/docker/issues/6325">this issue</a> which made me understand that my server had ran out of disk space because of old versions of my docker images. I tried to remove them, but the commands were failing. After some more search, I found <a href="https://github.com/docker/docker/issues/26015">this other issue</a> and came to the conclusion that there was no solution except resetting docker completely. Hopefully, Digital Ocean has a button for rebuilding the VM.</p>

<p><a href="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/reset-digitalocean.jpg"><img class="center" src="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/reset-digitalocean-small.jpg" title="A screenshot of the rebuild screen on digitalocean" ></a></p>

<p>Once the VM was rebuilt, the first thing that I did was to try to connect from my shell on my local machine. I had to clean up my known host file, but that was simple enough.</p>

<p><code>
nano ~/.ssh/known_hosts
</code></p>

<p>Once this was done, I just followed the steps I had documented in my <a href="/continuously-deliver-a-rails-app-to-your-digital-ocean-box-using-docker/">previous blog post</a></p>

<p>Was I all done ?</p>

<p>Almost &hellip; I ran into another kind of errors this time. Processes kept getting killed on my VM.</p>

<p><code>bash
INFO [cc536697] Running /usr/bin/env docker-compose -f docker-compose.production.yml run app bundle exec rake db:migrate as root@104.131.47.10
rake aborted!
SSHKit::Runner::ExecuteError: Exception while executing as root@104.131.47.10: docker-compose exit status: 137
docker-compose stdout: Nothing written
docker-compose stderr: Starting root_db_1
bash: line 1: 18576 Killed
</code></p>

<p>After some more Google searching, I discovered that this time, the VM was running out of memory ! The fast fix was to upgrade the VM (at the extra cost of 5$ / month).</p>

<p><a href="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/resize-digitalocean.jpg"><img class="center" src="/imgs/2017-02-01-how-i-fixed-devicemapper-error-when-deploying-my-docker-app/resize-digitalocean-small.jpg" title="A screenshot of the resize screen on digitalocean" ></a></p>

<p>After increasing the memory (and disk space) of the VM, deployment went like a charm. Others have fixed the same issue for free by <a href="https://www.digitalocean.com/community/questions/npm-gets-killed-no-matter-what">adding a swap partition to the VM</a>.</p>

<h2>The end of the story</h2>

<p>I wasted quite some time on this, but it taught me some lessons :</p>

<ol>
<li>I should have taken care of cleaning up the old images and containers, at least manually, at best automatically</li>
<li>I should write a script to provision a new server</li>
<li>The cheap options always come at a cost</li>
<li>For an open source side project like this one, it might be a better strategy to only use Docker to setup my dev env, and use free services like <a href="https://travis-ci.org/">Travis-ci</a> and <a href="https://www.heroku.com/">Heroku</a> for production</li>
<li>Doing everything myself is not a good recipe to getting things done &hellip; I well past time I leave my developer hat for an entrepreneur cap</li>
<li>In order to keep learning and experimenting, focused <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20h sessions</a> of deliberate practice might be the most time effective solution</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#1 rule for monitoring emails]]></title>
    <link href="http://philippe.bourgau.net/1-rule-for-monitoring-emails/"/>
    <updated>2013-02-22T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/1-rule-for-monitoring-emails</id>
    <content type="html"><![CDATA[<p>I just spent a few hours debugging my rails app on heroku to understand why the hell I did not systematicaly receive the monitoring emails that my app was sending ...</p>


<p>My app was actually rendering the email template.</p>


<p>Wether the mail came through actually dependend on the mail content !</p>


<p>It seems there was a spam filter somewhere between the sender and the receiver that was blocking some emails, without warning me in any way. I was sending the email to a custom domain email from 'ovh' and then forwarding emails to my gmail account, it was handy to apply automatic labels.</p>


<p>Here is the #1 rule : always send your monitoring emails directly to the final recepient ! There will be less risk that some messages get lost.&nbsp;</p>


<p>I changed the recipient to my gmail address, updated my label filter, and everything is back to normal (a lot of time lost for nothing).</p>

]]></content>
  </entry>
  
</feed>
