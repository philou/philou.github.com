<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical debt | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/technical-debt/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-09-27T06:08:48+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 2]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2/"/>
    <updated>2018-09-27T19:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2</id>
    <content type="html"><![CDATA[<p><em>How to improve a factual business case for a refactoring to make it even more compelling to business people.</em>Â </p>

<p>In last post, I explained how to make a business case for a large scale refactoring using real numbers. Numbers are great, but they won&rsquo;t get us sponsorship by themselves. We need to understand them. We need to make sure they make sense. We need to make sure they are backing our refactoring up. In the end, we might need to improve them.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/refactoring-trim-teaser.jpeg" alt="Drawing of a hammer removing the G from refactoring written with stones. Trimming a refactoring is an effective way to increase its value, and make the business case better." /></p>

<p>This is the thirteenth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>What If Payback Period is too long?</h2>

<p>If payback period is close enough, then great, we can go out and pitch the refactoring. Most of the time though, large scale refactorings take quite some time to payback.</p>

<h3>Product Life Expectancy</h3>

<p>The first thing to do is to put this in the perspective of the company&rsquo;s or product&rsquo;s life expectancy. Imagine a product which is 10 years old and expected to cash-in for another 10 years. In this context, a refactoring that pays for itself in 1 year <em>is</em> a great opportunity!</p>

<blockquote><p>ðŸ’¡ The longer the life expectancy of your product, the more refactoring you should invest in!</p></blockquote>

<p>Picking the age of the product as its life expectancy is realistic most of the time. New products have low life expectancy, but legacy systems seem to last forever!</p>

<h3>Split the refactoring!</h3>

<p>A strategy to reduce the payback period is to split this large scale refactoring. Can we make it smaller, more focused, or find sub steps that pay for themselves faster? Here again, <a href="/blog/categories/incremental-software-development/">incremental refactoring techniques</a> will be critical.</p>

<h3>Did we do an error?</h3>

<p>It&rsquo;s also possible that we did an error in the business case computation. Sampling and logging are error-prone techniques.</p>

<p>Is the iteration we took for sample is representative enough of the future work ? In doubt, we can re-do the sampling or the computation. Using better data leads to a better conclusion.</p>

<p>There are also other costs we did not take into account to be able to stick to man.hours. Let&rsquo;s have a look at these.</p>

<h2>Ideas for Improvements</h2>

<h3>Convert to Money</h3>

<p>If we have access to money numbers, we should be able to improve the figures with new costs.</p>

<p>First, we&rsquo;ll need the average wage of team members to convert our figures in real money.</p>

<p>If we have the figure, we can add the image cost of a bug to the non-refactoring cost.</p>

<p>Finally, if we have the revenue per feature, we can add the opportunity cost to the refactoring cost. Opportunity cost is the cost of not working on features !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/money.jpg" alt="Stacks of coins. If we have access to the good figures, it is possible to make the business case for large scale refactoring with real money instead of man.hours." /></p>

<h3>Use a similar refactoring</h3>

<p>Did someone do a similar refactoring in the past? If so, we can use it to improve your estimates about:</p>

<ul>
<li>Refactoring time</li>
<li>Productivity improvement</li>
<li>Time saved on bugs and support.</li>
</ul>


<h3>Is it a good idea in the end?</h3>

<p>Are the numbers still arguing against the refactoring? Maybe it&rsquo;s not such a great idea afterwards &hellip; We ought not to argue for something of dubious value, our credibility is at stake.</p>

<p>At this point, it might be a good idea to look for another improvement to do. Maybe there is other code to refactor or a new productivity tool to build.</p>

<blockquote><p>ðŸ’¡ Avoiding bad moves is a key benefit of making a business case for large scale refactoring!</p></blockquote>

<h2>Other References</h2>

<p>I&rsquo;m fond of this way of prioritizing software. It&rsquo;s the way out of bickering about best practices, and towards sustainable pace. If you want to learn more about this, here are 2 helpful references :</p>

<ul>
<li>A blog post <a href="https://www.scrum.org/resources/blog/making-tech-debt-visible">Making Technical Debt Visible</a> . It explains how to use the scrum sprint backlog to display the cost of technical debt.</li>
<li>A PluralSight course <a href="https://www.pluralsight.com/courses/making-business-case-for-best-practices">Making the Business Case for Best Practices</a>. It&rsquo;s just great. It contains a ton of practices to help us to get realistic numbers and estimates.</li>
</ul>


<p><a href="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/making-the-business-case.jpg"><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/making-the-business-case-small.jpg" alt="Visual notes from the Plural Sight course &quot;Making the Business Case for Best Practices&quot;. It contains many techniques that can be used for large scale refactoring" /></a><div class="image-credits">Visual notes from <a href="https://www.pluralsight.com/courses/making-business-case-for-best-practices">Making the Business Case for Best Practices</a></div><br></p>

<h2>Next post</h2>

<p>This is the thirteenth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. We&rsquo;re reaching the end ! In <a href="http://eepurl.com/dxKE95">next week&rsquo;s post</a>, I&rsquo;ll go over Business Partnership. Practices we can put in place once we have build a lot of trust with business people. Stay tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 1]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1/"/>
    <updated>2018-09-20T08:58:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1</id>
    <content type="html"><![CDATA[<p><em>With a bit of discipline, we can make a factual business case for a large scale refactoring that business people won&rsquo;t resist.</em></p>

<p>The <a href="/presenting-a-large-scale-refactoring-as-a-business-opportunity/">previous 2 articles</a> were about how to present large scale refactorings to business people. This might already get us a lot closer to having our large scale refactoring prioritized. Unfortunately, many times this won&rsquo;t be enough. Hopefully, we can add something to make the point to business people : numbers !</p>

<p>Business people love numbers. Presented well, they make decisions a lot easier to take. Making a business case is about estimating the costs of doing versus not doing a refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/legacy-vs-refactoring.jpg" alt="Drawing of legacy and a refactoring plan in a balance. Making a business case for a large scale refactoring is all about estimating the costs of both options" /></p>

<p>This is the twelfth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Before anything</h2>

<p>Before we start any computation, we need to know what we are talking about. This means that as a team, we must agree and specify enough the refactoring we want to do. A small group design session might be useful at this point.</p>

<blockquote><p>ðŸ’¡ We must detail precisely what refactoring we want before making a business case for it.</p></blockquote>

<h2>Refactoring Cost</h2>

<p>We pay for a refactoring only once, when we do it. The cost of the refactoring is the time it will take to do it. We can do a team estimate on the refactoring and see the numbers.</p>

<p>From my experience large scale refactoring estimates are pretty inaccurate. If the team is having a hard time agreeing on estimates, it&rsquo;s a warning! Recipes against this are :</p>

<ul>
<li>Do a bit more design to better define the refactoring</li>
<li>Take a safety margin for your estimation. Times 2 is not a bad ratio to start with (cf. the risk management section of <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art of Agile</a>)</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/art-of-agile.jpg" alt="Cover of the book The Art of Agile Development. It contains a chapter about risk management which can be useful to make realistic long term estimates of a large scale refactoring" /></a></p>

<p>Eventually, be sure to convert your estimates in man.hours. If you don&rsquo;t, it will be difficult to compare this with the non-refactoring cost.</p>

<h2>Non-Refactoring Cost</h2>

<p>Contrary to the previous one, this cost is recurring. We&rsquo;ll only compute it for a single period of time, let&rsquo;s say an iteration. It also works fine with a month, a week or whatever.</p>

<blockquote><p>ðŸ’¡ The cost of not doing a refactoring is the sum of all the waste work generated by the current code.</p></blockquote>

<p>The non-refactoring can be computed like:</p>

<p><code>
non-refactoring cost = Bug fix time + Support time + Lower productivity
</code></p>

<h3>Bug fixes &amp; Support time</h3>

<p>Bad code generates bugs and support time. By doing the refactoring well, we&rsquo;ll almost kill these wasteful activities.</p>

<p>We want to get the real amount of time the team is spending on bug fixes and support time related to our refactoring. Hopefully, our ticketing software might already contain enough time tracking data. That&rsquo;s what I used when we did <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">our improvement kata</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/types-of-tasks-small.jpg" alt="Distribution of the different kind of tasks over sprints that we extracted from Jira when we did the improvement kata. Finding where the time went is useful when making a business case for a large scale refactoring" /></p>

<p>If not, we&rsquo;ll unfortunately need to do a bit of manual time tracking for a while. It should be fine to cover a few days, and extrapolate for a longer period. Unbelievably, some people made time tracking fun by <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">using Lego Blocks</a>!</p>

<p><a href="https://code.joejag.com/2018/lego-workstream-visualisation.html"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/lego_1.jpg" alt="Joe Wright's team has had success logging time with lego blocks. Logging is time is crucial to estimate the non-refactoring cost when making a business plan" /></a><div class="image-credits">By <a href="https://twitter.com/vanschoo">Nancy Van Schooenderwoert</a></div><br></p>

<h3>Lower productivity</h3>

<p>Bad code also makes us slow! By doing this large scale refactoring, we should get a productivity boost.</p>

<p>Here again, we are only going to measure for an iteration, and extrapolate for the future. If we are working with iterations, we should have an &lsquo;estimation&rsquo; meeting of some sort. At the end of it, we should have selected a list of &lsquo;task&rsquo; for next iteration.</p>

<p>Next time you go through this meeting, we&rsquo;ll need to estimate these tasks twice.</p>

<ol>
<li>Do a normal estimation</li>
<li>Now, imagine we did the refactoring. Re-estimate.</li>
</ol>


<p>The difference between the estimates is the non-refactoring productivity loss.</p>

<p><code>
productivity loss = normal estimation - estimation after refactoring
</code></p>

<h2>Payback Period</h2>

<p>We need to convert everything in man.hours. We should now have figures for both total refactoring and recurring non-refactoring cost.</p>

<p><code>
payback period = refactoring cost / non-refactoring cost
</code></p>

<p>The payback period is the refactoring cost divided by the non-refactoring cost. It&rsquo;s the time after which the refactoring will pay for itself.</p>

<h2>To be continued</h2>

<p>We&rsquo;re done with computations. <a href="/making-the-business-case-for-a-large-scale-refactoring-part-2/">Next week</a>, I&rsquo;ll go over what to do with these numbers. We want to make business case for this large scale refactoring an unmissable offer!</p>

<p>This is the twelfth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactorings</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Effective warning signals that will get you sponsorship for a large scale refactoring]]></title>
    <link href="http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/"/>
    <updated>2018-09-13T13:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring</id>
    <content type="html"><![CDATA[<p>In 2005, professors Bizer and Petty showed something interesting about human behavior. People make more efforts to avoid what they don&rsquo;t want, than to get what they would like. The study itself is interesting, you can have a look at it <a href="https://www.jstor.org/stable/41057679?seq=1#page_scan_tab_contents">here</a>. For example, it explains why political campaigns are getting more and more nasty. There&rsquo;s also a lesson for us, mere developers. We&rsquo;ll get more sponsorship for our refactorings if we highlight the dangers of not doing them !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/legacy-monster.jpg" alt="Drawing of a warning panel with legacy code written below an awful monster. Sending effective warning signals is a good way to get sponsorship for large scale refactorings" /></p>

<p>This is the 11th post of a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t already, start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>From the inside, many systems are in such a messy state that seem like a catastrophe waiting to happen. Unfortunately, this mess is completely invisible to non-developers ! Here are a few techniques to show how close we are from a total breakdown !</p>

<h2>Effective Warning Signal #1 Pranks</h2>

<p>If you have the guts and your company is fun enough, you can try one of <a href="/the-size-of-code/">these pranks</a> ðŸ˜‰.</p>

<p><a href="https://www.flickr.com/photos/kk/18768224"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/paper-on-desk.jpg" alt="A photo of a desk littered under paper. As if we had printed the whole source code and dumped in on a non-developer desk. Pranks are a good way to get sponsorship for large scale refactorings" /></a></p>

<div class="image-credits">What if we printed the whole source code and dumped in on non-developers desks ? By <a href="https://www.flickr.com/photos/kk/">Kris KrÃ¼g</a>, <a href="https://creativecommons.org/licenses/by-sa/2.0/" title="Attribution-ShareAlike 2.0 Generic">CC BY-SA 2.0</a>, <a href="https://www.flickr.com/photos/kk/18768224">Link</a></div>


<br>


<p>They&rsquo;re bound to have a big impact &hellip; but they might also get you fired ! We should be creative and find both effective and acceptable pranks. Pranks are a lot more effective than we first think. <a href="https://en.wikipedia.org/wiki/Nonviolent_revolution">Non-Violent Revolution</a> activists have actually used <a href="http://laughtivismgroup5.blogspot.com/2016/04/laughtivism.html">Laughitism</a> to take dictators down ! For a good (and unexpectedly fun) read on the topic, have a look a <a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309">Blueprint for a Revolution</a>. It was written by Serb non violent activist <a href="https://en.wikipedia.org/wiki/Sr%C4%91a_Popovi%C4%87_(activist">Srdja Popovic</a>) member of <a href="https://en.wikipedia.org/wiki/Otpor!">OTPOR!,</a> who brought <a href="https://en.wikipedia.org/wiki/Slobodan_Milo%C5%A1evi%C4%87">Millosevic</a> down .</p>

<p><a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/blueprint-revolution.jpg" alt="Cover of the book Blueprint for Revolution. Laughitism is a non violent technique that we can use against Legacy Code to get sponsorship for large scale refactorings" /></a></p>

<p>Promised, as soon as I manage to use such a prank without getting fired at work, I&rsquo;ll blog about it !</p>

<h2>Effective Warning Signal #2 Dice of Debt Game</h2>

<p>While doing my researches for this article, I found the <a href="https://www.agilealliance.org/dice-of-debt-game/">Dice of Debt</a> game. It&rsquo;s aimed at making business people experience the long term legacy code drag. It has good reviews, have a try at it with your business people and post back your feedback ! I&rsquo;ll do so as soon as I have a chance to test it myself.</p>

<h2>Effective Warning Signal #3 Higher authority</h2>

<p>Appealing to a higher authority works as long as people recognize this authority as so. Knowing the people in front of us, it&rsquo;s our job to bring up the reference in an effective way. Here are</p>

<p>In <a href="https://www.youtube.com/watch?v=xEqRtIeD51k">this talk</a>, <a href="http://docondev.com/">Doc Norton</a>, a recognized technical debt expert, shows the link between technical debt and productivity.</p>

<p><a href="https://www.youtube.com/watch?v=xEqRtIeD51k"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/technical-debt-trap.jpg" alt="Slide from Doc Norton's Technical Debt Trap talk. It shows how technical debt impacts the cost of change and can be an effective warning signal for a large scale refactoring" /></a></p>

<p>Showing similarities between our own code metrics and this graph might ring the alarm bell in business people.</p>

<p>Another interesting model out there is <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM</a>. It was built through the <a href="https://www.agilealliance.org/">Agile Alliance</a>. It can be used to estimate the value of a codebase when buying a company. Maybe business people will listen if we tell them that their software would be worth 0 on the market ?</p>

<h2>Effective Warning Signal #4 Metaphor</h2>

<p>I was recently working with a team that is preparing a pitch to get sponsorship for a refactoring. They want to rework multithreaded code that uses locks and other low level synchronization. The hand written synchronization is becoming difficult to maintain. They would like to refactor it with the <a href="https://en.wikipedia.org/wiki/Actor_model">actor model</a>. Business people will likely argue that this module is now stable enough and should stay as is. We all know that this is not the case with bogus multithreaded code : the more you use it, the more bugs you find ! They had the idea to use the email vs phone metaphor. No one in the room could have handled all his daily emails with a phone only ! Everyone understood why it was necessary to switch to actors.</p>

<p>In <a href="https://engineering.riotgames.com/news/taxonomy-tech-debt">A Taxonomy of Technical Debt</a>, <a href="https://www.linkedin.com/in/bill-clark-37444a133/">Bill Clark</a> adds another dimension to technical debt. On top of the classic principal and interests he adds contagion. In fact, it&rsquo;s a bit as if he&rsquo;s ditching the <a href="https://martinfowler.com/bliki/TechnicalDebt.html">technical debt metaphor</a> for the disease metaphor ! Disease have a cost to live with, a cost to heal from and a contagion rate. People at the agile alliance also noted this <a href="https://www.agilealliance.org/technical-debt-systemic-problem/">self reinforcing behavior</a>. This metaphor might be better for &ldquo;<a href="https://en.wikipedia.org/wiki/Cruft">cruft</a>&rdquo;. <a href="https://twitter.com/wardcunningham?lang=fr">Ward Cunningham</a>&rsquo;s original metaphor of technical debt only applied to tested code.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pqeJFYwnkjE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>ðŸ’¡ A disease might be a better metaphor than debt for code cruft.</p></blockquote>

<h2>Effective Warning Signal #5 A horror story</h2>

<p>We said that a successful refactoring story will be useful to frame ours as an opportunity. We can have more impact with the opposite ! We should relate a large software failure, that had impact on the business to bad code. The bigger the impact on the business, the better it is. If you (unluckily) have something like that at your company, it should be a very powerful argument. If you don&rsquo;t, try to find a public story on the internet, or a public conference. For example here is one from <a href="https://www.makeuseof.com/tag/worst-programming-mistakes-in-history/">The 10 Worst Programming Mistakes in History.</a>Â </p>

<blockquote><p>ðŸ’¡ The <a href="https://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (a radiation therapy machine) killed 6 people because it was difficult to perform automated tests !</p></blockquote>

<p>We can draw parallels and forecasts, to highlight the high risk of failure.</p>

<h2>Almost there</h2>

<p>This was the 11th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. Unfortunately, presenting refactoring in a good way only brings us so far. If we want to be really convincing, we need to use quantitative data. That&rsquo;s going to be the topic of my <a href="/making-the-business-case-for-a-large-scale-refactoring-part-1/">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A coding dojo exercises plan towards refactoring legacy code]]></title>
    <link href="http://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/"/>
    <updated>2018-06-14T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>My current job <a href="http://www.murex.com">at work</a> is technical coach. I&rsquo;m available for teams that need help to adopt incremental coding practices.</p>

<h2>Problems with refactoring legacy code</h2>

<p>A few months ago, a team which was struggling with a lot of legacy code asked for help. As you might know if you read my blog, I&rsquo;m a big fan of <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development (TDD)</a> because it has made my <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">life as a developer so much more easy</a>. I&rsquo;m so used to TDD now, that even if I don&rsquo;t have tests yet (as is the case when refactoring legacy code), TDD helps me :</p>

<ul>
<li>To stick to baby steps which are a lot less likely to fail than larges changes.</li>
<li>Write testable code. I know what testable code looks like, and when refactoring, I&rsquo;ll try to change it towards that.</li>
</ul>


<p>That&rsquo;s why we started to run regular, all team, <a href="http://philippe.bourgau.net/blog/categories/team-randori-series/">coding dojo randoris</a>. It was nice for the <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">team dynamics</a>, and the people where learning a lot of technical skills. I also got the feedback that they where not able to apply this directly on their day to day job though. After a bit more discussion, I understood that they did not know where this was going, what to expect, and when !</p>

<blockquote><p>ðŸ’¡ Test Driven Development also teaches you what testable code looks like.</p></blockquote>

<h2>The coding dojo exercices</h2>

<p>It turned out that a coding dojo exercises plan was enough to answer their questions. This is what it looks like.</p>

<h3>Drawing</h3>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/Coding-Dojo-Hulk.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/Coding-Dojo-Hulk-small.jpg" alt="An illustrated Coding Dojo Exercises plan leading to the mastery of Legacy Code Refactoring" /></a></p>

<h3>Mind Map</h3>

<p>Here is another, more concrete, version, with sample names of katas we can find online.</p>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/TDD_Kata_Plan.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/TDD_Kata_Plan-small.jpg" alt="An mind map of Coding Dojo Exercises plan leading to the mastery of Legacy Code Refactoring" /></a></p>

<h3>Text</h3>

<p>It starts with simple greenfield katas :</p>

<ul>
<li><a href="http://codingdojo.org/kata/FizzBuzz/">Fizz Buzz</a></li>
<li><a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numerals</a></li>
<li><a href="http://codingdojo.org/kata/Bowling/">Bowling</a></li>
</ul>


<p>It goes on to intermediate katas, where we can use TDD to do design :</p>

<ul>
<li><a href="http://kata-log.rocks/mars-rover-kata">Mars Rover</a></li>
<li><a href="http://codingdojo.org/kata/PokerHands/">Poker Hands</a></li>
<li><a href="http://codingdojo.org/kata/TradingCardGame/">trading card game</a></li>
</ul>


<p>From then on, it&rsquo;s possible to tackle advanced katas and styles :</p>

<ul>
<li>Refactoring fresh code

<ul>
<li>Continue design katas on 2 or more sessions</li>
<li>Always compile Constraint</li>
</ul>
</li>
<li>Bottom-up TDD

<ul>
<li><a href="http://codingdojo.org/kata/GameOfLife/">Game of Life</a></li>
<li>Median of a list of lists (with no concatenation)</li>
<li><a href="http://codingdojo.org/kata/LangtonAnt/">Langton ant</a></li>
</ul>
</li>
<li>Top-Down TDD

<ul>
<li><a href="http://codingdojo.org/kata/Potter/">Kata Potter</a></li>
<li><a href="http://codingdojo.org/kata/NumberToLCD/">LCD</a></li>
</ul>
</li>
<li>TDD on algorithms

<ul>
<li><a href="http://codingdojo.org/kata/Diamond/">Diamond</a></li>
<li><a href="http://codingdojo.org/kata/Lags/">Kata Lags</a></li>
<li><a href="http://codingdojo.org/kata/Anagram/">anagrams</a></li>
</ul>
</li>
</ul>


<p>All this opens the gate to legacy code refactoring katas :</p>

<ul>
<li><a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">Gilded Rose</a></li>
<li><a href="https://github.com/emilybache/Racing-Car-Katas">Race Car Katas</a></li>
<li><a href="https://github.com/jbrains/trivia">Ugly trivia game</a></li>
<li>Others from <a href="http://kata-log.rocks">http://kata-log.rocks</a></li>
</ul>


<p>At that point, the team can <a href="https://en.wikipedia.org/wiki/Mob_programming">mob</a> to refactor production code :</p>

<ul>
<li>Real life, static analysis issue, mob programming session</li>
<li>Real life, code smell, mob programming session</li>
<li>Real life, larger mob Refactoring</li>
</ul>


<h2>What changed in practice ?</h2>

<p>We wanted to split the teamwork and the coding dojos exercises. The team is now doing mob programming sessions on their usual stories twice a week (I&rsquo;ll blog about that someday). But also doing regular coding dojos exercises in pairs.</p>

<p>Even if they did not go through all the TDD katas yet, mobbing on real stories helps the team to take on legacy code.</p>

<blockquote><p>Given enough eyeballs, all bugs are shallow. Linus&rsquo;s Law</p></blockquote>

<p>Working in pairs on the code katas allows them to be more engaged in the exercises. In the end, it brings faster learning.</p>

<blockquote><p>ðŸ’¡ A mix of Coding Dojos in pairs and Mob Programming sessions is a good way to teach TDD in a Legacy Code context.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 things to know that will make you great at refactoring legacy code]]></title>
    <link href="http://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/"/>
    <updated>2017-07-28T06:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>We write tons of <a href="https://en.wikipedia.org/wiki/Legacy_code">legacy code</a> everyday. Experienced developers understand that legacy code is not something special. Legacy code is our daily bread and butter.</p>

<p>Should we abandon all hope as we enter legacy code ? Would that be professional ? In the end, code is only a bunch of bytes, somewhere on a drive. We are the software professionals. We need to deal with that.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-07-28-10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/keep-calm-and-take-the-power-back-4.jpg" alt="Keep Calm and Take The Power Back" /></p>

<h2>1. Master non legacy refactoring first</h2>

<p>Please calm down before this &ldquo;Bring &lsquo;em out&rdquo; energy goes to your head.</p>

<p>I did not say that refactoring legacy code is easy. Legacy code can bite &hellip; bad. I&rsquo;ve been in teams which literally spent nights fixing a bad refactoring gone to production &hellip;</p>

<p>Before you can refactor legacy code, you need to be good at refactoring new code. We all learned to swim in the shallow pool, it&rsquo;s the same with refactoring. Mastering green code refactoring will help you when tackling legacy code.</p>

<p>First, you&rsquo;ll know the ideal you&rsquo;d like to get to. Knowing how productive a fast feedback loop is will motivate you to keep on refactoring.</p>

<p>Second, you&rsquo;ll have a better idea of the baby steps to take you through a tricky refactoring.</p>

<p>If you are not yet at ease with greenfield refactoring, have a look at <a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">my previous post</a>.</p>

<h2>2. Understand that refactoring legacy code is different</h2>

<p>The next thing to remember is that refactoring legacy code is different. Let&rsquo;s assume <a href="https://stackoverflow.com/questions/4174867/what-is-the-definition-of-legacy-code">Michael Feather&rsquo;s definition of legacy code</a> : &ldquo;Code without tests&rdquo;. Getting rid of legacy code means adding automated tests.</p>

<p>Unfortunately, trying to force push unit tests in legacy code usually results in a mess. It introduces lot&rsquo;s of artificial mocks in a meaningless design. It also creates brittle and unmaintainable tests. More harm than good. This might be an intermediate step, but it is usually not the quickest way to master your legacy code beast.</p>

<p>Here are alternatives I prefer.</p>

<h2>3. Divide and conquer</h2>

<p>This is the most straightforward way to deal with legacy code. It&rsquo;s an iterative process to repeat until you get things under control. Here is how it goes :</p>

<p>(1) Rely on the tests you have, (2) to refactor enough, (3) to test sub-parts in isolation. (4) Repeat until you are happy with the speed of the feedback loop.</p>

<p>Depending on the initial state of your tests, this might take more or less time. Your first tests might even be manual. This is the bulldozer of refactoring. Very effective, but slow.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-07-28-10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/bulldozer.jpg" alt="Bulldozer" /></p>

<h2>4. Pair or mob program</h2>

<blockquote><p>Given enough eyeballs, all bugs are shallow.</p>

<p><a href="https://en.wikipedia.org/wiki/Linus%27s_Law">Linus&rsquo;s Law</a></p></blockquote>

<p>Changing legacy code is a lot easier when you team up. First, it creates a motivating &ldquo;we&rsquo;re all in this together&rdquo; mindset. Second, it guards us against silly mistakes.</p>

<p><a href="https://en.wikipedia.org/wiki/Mob_programming">Mob programming</a>, might seem very expensive, so let me explain why it is not. Suppose you want to introduce some tests in a tricky section of code.</p>

<p>With mob programming, all the team gathers for half a day to work on this change. Together, they find and avoid most of the pitfalls. They commit a high quality change, which creates only one bug down the road.</p>

<p>Let&rsquo;s see the alternative.</p>

<p>Using solo programming, a poor programmer tries to tackle the change all by himself. He spends a few days to understand and double check all the traps he can think of. Finally, he commits his change, which results in many bugs later on. Every time a bug pops up, it interrupts someone to fix it ASAP.</p>

<p>The savings in interruptions are greater than up front cost of mob or pair programming.Â </p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/p_pvslS4gEI" frameborder="0" allowfullscreen></iframe>


<h2>5. Seams</h2>

<blockquote><p>A software seam is <em>a place where you can alter behavior in your program without editing in that place.</em></p>

<p><a href="http://wiki.c2.com/?SoftwareSeam">Michael Feathers</a></p></blockquote>

<p>This is one of the many interesting things I learned from Michael&rsquo;s book about legacy code.</p>

<p><a href="https://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0131177052&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=edaadc6370c2c8c9e943348d9fbdafb9"><img src="http://philippe.bourgau.net/imgs/2017-07-28-10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/legacy-code.jpg" alt="Cover of Working Effectively with Legacy Code" /></a></p>

<p>Object polymorphism is only one kind of seam. Depending on your language, many other types of seams can be available.Â </p>

<ul>
<li>Type seam for generic languages</li>
<li>Static link seam for static libraries</li>
<li>Dynamic link seam for dynamic libraries</li>
<li>&hellip;</li>
</ul>


<p>Finding seams in your program is something opportunistic. Keep in mind though that testing through seams is not the end goal. It is only a step to bootstrap the test-refactor loop and start your refactoring journey.</p>

<h2>6. Mikado Method</h2>

<p>How do you get to your end then ? How to you refactor only what&rsquo;s useful for your features ? How do you do large refactorings in baby steps ?</p>

<p>Over time, I found that the mikado method is a good answer to all these issues. The goal of the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> is to build a graph of dependent refactoring. It can then use it to perform all these refactorings one by one. Here is the mikado method by the book.</p>

<p>Before anything else, you&rsquo;ll need a large sheet of paper to draw the graph. Then repeat the following :</p>

<ol>
<li>try to do the change you want</li>
<li>If it builds and the tests pass, great, commit and you&rsquo;re done</li>
<li>Otherwise, add a node for the change you wanted to do in your mikado graph</li>
<li>Write down the compilation and test errorsÂ </li>
<li>Revert your change</li>
<li>Recurse from 1 for every compilation or test error</li>
<li>Draw a dependency arrow from the nodes of errors to the node of your initial change</li>
</ol>


<p>Once you built the full graph, tackle the refactorings from the leaves. As leafs have no dependencies, it should be easy to do and commit them.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-07-28-10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/mikado.jpg" alt="A Sample Mikado Graph" /></p>

<p>When I first read about the mikado method, it seemed very simple and powerful. Things got more complex when I tried to apply it. For example, the fact that some changes don&rsquo;t compile hide future test failures. That means that very often, the &ldquo;Build the graph&rdquo; and &ldquo;Walk the graph&rdquo; phases overlap. In real life, the graph evolves and changes over time.Â </p>

<p>My advice about the Mikado Method is not to take it to the letter. It&rsquo;s a fantastic communication tool. It helps not to get lost and to avoid a refactoring tunnel. It also helps to tackle refactoring as a team.</p>

<p>It is not a strict algorithm though. Build and tests are not the only way to build the graph. Very often, a bit of thinking and expert knowledge are the best tools at hand.</p>

<p><a href="https://www.amazon.com/gp/product/1617291218/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291218&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=f7405cd74335b3cbb8b263f1a5c37c1d"><img src="http://philippe.bourgau.net/imgs/2017-07-28-10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/mikado-book.jpg" alt="Cover of The Mikado Method book" /></a></p>

<h2>7. Bubble Context</h2>

<p>Refactoring needs to be opportunistic. Sometimes there are shortcuts in your refactoring path.</p>

<p>If you have access to a domain expert, the <a href="http://dddcommunity.org/library/evans_2011_2/2">Bubble Context</a> will cut the amount of refactoring to do. It&rsquo;s also an occasion to get rid of all the features that are in your software but that are not required anymore.Â </p>

<p>The Bubble Context originated from the <a href="http://dddcommunity.org/library/evans_2011_2/">DDD community</a>, as a way to grow a domain in an existing code base. It goes like that :</p>

<ol>
<li>Find a domain expert</li>
<li>(Re)write clean code for a very tiny sub domain</li>
<li>Protect it from the outside with an <a href="https://softwareengineering.stackexchange.com/questions/184464/what-is-an-anti-corruption-layer-and-how-is-it-used">anticorruption layer</a></li>
<li>Grow it little by little</li>
</ol>


<p>I have friends who are fans of the bubble context. It is super effective provided you have a domain expert. It is a method of choice in complex domain software.</p>

<h2>8. Strangler</h2>

<p>Bubble Context works great when refactoring domain specific code, what about the rest ? I had good results with the <a href="https://www.martinfowler.com/bliki/StranglerApplication.html">Strangler pattern</a>.</p>

<p>For example, we had to refactor a rather complex parser for an internal DSL. It was very difficult to incrementally change the old parser, so we started to build a new one aside. It would try to parse, but delegate to the old one when it failed. Little by little, the new parser was handling more and more of the grammar. When it supported all the inputs, we removed the old one.</p>

<p>The strangler is particularly well suited for refactoring technical components. They have more stable interfaces and can be very difficult to change incrementally.</p>

<h2>9. Parallel Run</h2>

<p>This is more of a trick than a long term strategy. The idea is to use the initial (legacy) version of the code as a reference for your refactoring. Run both and check that they are doing the same thing.</p>

<p><img src="http://philippe.bourgau.net/imgs/2017-07-28-10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/railroad.jpg" alt="Parallel Railroads" /></p>

<p>Here are some variations around this idea.</p>

<p>If the code you want to refactor is side effect free, it should be easy to duplicate it before refactoring. This enables running both to check that they compute the same thing.</p>

<p>Put this in a unit test to bootstrap a test-refactor loop. You can also run both in production and log any difference. You&rsquo;ll need access to production logs &hellip; Devops teams have a refactoring advantage !</p>

<p>Here is another use of your logs. If the code writes a lot of logs, we can use them as a reference. Capture the logs of the old version, and unit test that the refactored version prints the same logs out. That&rsquo;s an unmaintainable test, but good enough to bootstrap the test-refactor loop.</p>

<p>The <a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">Gilded Rose kata</a> is a good exercise to practice this last technique.</p>

<h2>10. Dead code is better off dead</h2>

<p>You don&rsquo;t need to refactor dead code ! Again, access to production logs is a great advantage for refactoring.</p>

<p>Add logs to learn how the real code runs. If it&rsquo;s never called, then delete it. If it&rsquo;s only called with some set of values, simplify it.</p>

<h2>No silver bullet</h2>

<p>That was a whirlwind tour of the legacy code refactoring techniques I know. It&rsquo;s no promise that refactoring will become easy or fast. I hope it is a good starting point to set up and walk a refactoring plan.</p>

<p>This was the last post of a series of 3 about how to learn refactoring techniques. If you didn&rsquo;t already, check part 1 <a href="/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">7 Reasons Why Learning Refactoring Techniques Will Improve Your Life as a Software Engineer</a> and part 2 <a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">How to Start Learning the Tao of Incremental Code Refactoring Today</a>.</p>
]]></content>
  </entry>
  
</feed>
