<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: side project | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/side-project/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-09-28T06:25:06+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[13 Tricks for Successful Side Projects]]></title>
    <link href="http://philippe.bourgau.net/13-tricks-for-successful-side-projects/"/>
    <updated>2017-06-19T18:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/13-tricks-for-successful-side-projects</id>
    <content type="html"><![CDATA[<p>As <a href="/side-projects-matter/">I said last week</a>, I released the v0.1 of <a href="https://philous-planning-poker.herokuapp.com/">Philou&rsquo;s Planning Poker</a>, my latest side project. Although I have a day job, a wife, a family and a mortgage to pay, I still manage to finish my side projects. In the past 7 years, I published 5 of these as open source projects, website, or wannabe businesses.</p>

<p>Side projects rely on 2 things : time and motivation. If motivation goes down, you&rsquo;ll  stop working on it, and it will die. If you don&rsquo;t manage to find enough time for it, it will also die.</p>

<p>Over the years, I accumulated best practices that increase the chances of success. Here is a shortlist of 13 of these.</p>

<p><a href="http://www.commitstrip.com/en/2014/11/25/west-side-project-story/"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/Strip-Side-project.jpg" alt="A comic strip about side projects" /></a></p>

<h2>1. Know your goal</h2>

<p>As I said before, side projects are time constrained. If you try to follow many goals at once, you&rsquo;ll spread too thin and won&rsquo;t deliver anything. That will kill your motivation.</p>

<p>To avoid this, you need to decide on a unique goal for your project. It can be anything : learning a new tech, building a tool, sell a simple product, maintain a blog.</p>

<p>Depending on the nature of your goal, your side project can take different forms. <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20 hours experiments</a> are great for learning new techs. As a side note, <a href="https://en.wiktionary.org/wiki/MOOC">MOOCs</a> can also be very effective for this. If you want to start a business, start a <a href="http://www.allencheng.com/concierge-mvp/">lean startup concierge MVP</a>. Finally, if you already know users who need a tool, build a minimalistic version for them.</p>

<h2>2. Time box your work</h2>

<p>Time boxing will force you to make the choices that will keep you going forward. The risk is to take on too many topics : more refactoring, more UI polish, more options, more bells and whistles. All these can be very interesting and valuable, but are usually not the main priority.</p>

<p>20 hours programs are time boxes, that&rsquo;s one of the reasons they work. For other kinds of side projects, I do a quarterly prioritization. &ldquo;This is what I&rsquo;d like to have in 3 months&rdquo;. I often slip a bit, but that&rsquo;s not a problem as long as I stay focused on my goal.</p>

<h2>3. Setup a routine</h2>

<p>You&rsquo;ll need to dedicate time to your side project. Think of what you could do if you worked one hour per day to it. 365 hours per year, or 90 hours per quarter ! That&rsquo;s 2 full weeks of work !</p>

<p>In the long run, having a routine is more effective than anything else. After a few weeks of sticking to a routine, it will become part of your daily life, and won&rsquo;t be an effort anymore. It will also help to forecast what you&rsquo;ll be able to do in the coming month or so.</p>

<p>To setup a routine, block a slot in your day to work on your project, and stick to it. My own routine is waking up early to have some focused time. I have entrepreneur friends who did the same. <a href="http://grasshopper.com/">GrassHopper</a> founder says the same in this <a href="https://www.indiehackers.com/podcast/003-david-hauser-of-grasshopper">Indiehacker podcast</a>.</p>

<h2>4. Keep delivering to sustain motivation</h2>

<p>Nothing kills motivation as not delivering. At work, I can go on without user feedback for a while (<a href="/how-long-can-your-inner-drive-last/">not too long though</a>). Unfortunately, that does not work on a time constrained side project. We have only one life and we don&rsquo;t want to spend our time on things that don&rsquo;t matter. Things that don&rsquo;t deliver don&rsquo;t matter &hellip;</p>

<p>To get the technical aspect of delivery out of the picture once and for all, I use <a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1498106027&amp;sr=8-1&amp;keywords=continuous+delivery">Continuous Delivery</a>. Continuous Delivery is pretty easy to start with on a new project :</p>

<ul>
<li>automate all your tests</li>
<li>setup a CI server</li>
<li>deploy when the CI passes</li>
</ul>


<p>Once this is up and running, as long as I split my work in baby steps, I&rsquo;ll be delivering.</p>

<p><a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1498106027&amp;sr=8-1&amp;keywords=continuous+delivery"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/continuous-delivery.jpg" alt="The cover of the continuous delivery book" /></a></p>

<h2>5. Use SasS tools</h2>

<p>Setting up a CI and a deployment server can take some time. In 2017 though, online platforms make this very easy. Use as many as you can.</p>

<p>For <a href="https://philous-planning-poker.herokuapp.com/">Philou&rsquo;s Planning Poker</a>, I save my code on <a href="https://github.com/philou/planning-poker">Github</a>, test through <a href="https://travis-ci.org/philou/planning-poker">Travis CI</a> and deploy to <a href="https://dashboard.heroku.com">Heroku</a>. I also use <a href="https://codeclimate.com/github/philou/planning-poker">Code Climate</a> for static code analysis.</p>

<p>Most of these tools have some free plans for small or open source projects. That alone is a great advantage of making your project open source !</p>

<h2>6. Pay for good tools</h2>

<p>If you don&rsquo;t want to make your project open source, consider paying for these services. How much you value your time will tell you whether to buy or not.</p>

<p>There are other things you should pay for as well. I definitely recommend paying for a good laptop and IDE.</p>

<p>Remember, anything that helps you to deliver also helps you to keep your motivation high. You have a day job that earns you money, so use it !</p>

<h2>7. Pick a productive language </h2>

<p>Depending on your project, you&rsquo;ll have a choice in which programming language to use.</p>

<p>Paul Graham advices to <a href="http://www.paulgraham.com/power.html">use dynamic languages</a>. I tend to do the same, especially after watching <a href="https://www.infoq.com/presentations/dynamic-static-typing">&ldquo;The Unreasonable Effectiveness of Dynamic Typing for Practical Programs&rdquo;</a>.</p>

<p><a href="https://www.infoq.com/presentations/dynamic-static-typing"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/dynamic-typing-pres.jpg" alt="A presentation about dynamic typing" /></a></p>

<p>In the end, I guess it&rsquo;s a matter of personal preference. Pick the language you&rsquo;ll be the most productive with.</p>

<h2>8. Use a popular platform</h2>

<p>Use a popular open source platform to build your side project on. Useless to say, if your goal is to learn X, use X, even if it is not popular !</p>

<p>There are many advantages to using a popular platform :</p>

<ul>
<li>you&rsquo;ll have something that has already been production proofed</li>
<li>you&rsquo;ll suffer less bugs (remember Linus&rsquo;s Law <a href="https://en.wikipedia.org/wiki/Linus%27s_Law">&ldquo;Given enough eyeballs, all bugs are shallow&rdquo;</a>)</li>
<li>you&rsquo;ll get help from the community</li>
<li>you&rsquo;ll find compatible libraries to solve some of your problems</li>
</ul>


<p>The end goal is always the same : sustain your motivation by delivering fast enough !</p>

<h2>9. Walk the edge</h2>

<p>We don&rsquo;t start side project to spend time updating dependencies. The saying goes <a href="https://martinfowler.com/bliki/FrequencyReducesDifficulty.html">&ldquo;If it hurts, do it more often&rdquo;</a>. To save your productivity and motivation, always keep your dependencies up to date.</p>

<p>This is easy with automated test and continuous integration in place. I use no version constraint, but update all dependencies at least every week. I  commit if all tests pass. Sometimes I fall into small 5 to 10 minutes fixes, but that&rsquo;s all it takes.</p>

<h2>10. Take technical debt</h2>

<p>When starting a new side project, you have no ideas how long it will last. Could be one week, for example if you started a 20h experiment at the beginning of holidays. Could also be 20 years, if you managed to transform this side project into a full fledged business.</p>

<p>Starting with all the practices that make large software systems manageable will fail. You won&rsquo;t deliver fast enough. By now, you know the story, if you don&rsquo;t deliver, you&rsquo;ll lose your motivation.</p>

<p>I used <a href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"><code>TODO</code> comments</a> in my latest side project to keep track of the shortcut I took. I found it had 2 main advantages in my situation :</p>

<ul>
<li>I had a quick view of how much total technical debt I took</li>
<li>if things get more serious, it will be easy to find improvement points</li>
</ul>


<p>I know that <code>TODO</code> comments are <a href="https://techbeacon.com/useless-comments-can-ruin-code-review-heres-how-erase-them">controversial in the software community</a>. In the context of new side projects though, they make a lot of sense.</p>

<p>My advice is to take technical debt !</p>

<h2>11. Use your day job</h2>

<p>I&rsquo;m not saying to use time from your day job to work on your side project. That would be like stealing. Your day job can help your side project in many other ways.</p>

<p>One I already mentioned is using your income to buy better tools.</p>

<p>If you have <a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack Time</a> at your day job, you could use it to start a side project that benefits your company. You&rsquo;ll need to make sure that this kind of arrangement does not pose any IP issues. It can result in a win-win situation.</p>

<p>Another way is to find subjects at work which will grow some skills that are also useful for your side project.</p>

<h2>12. Talk about it</h2>

<p>Talking about your side project serves many purposes :</p>

<ul>
<li>it&rsquo;s an unofficial engagement to work on it</li>
<li>it provides feedback</li>
<li>it could attract early users</li>
</ul>


<p>To summarize, the more you&rsquo;ll talk about it the more it will become &lsquo;real&rsquo;. You can share your side project anywhere : blog, Meetups, work, with friends or family. Depending on your topic, some places will work better than others.</p>

<p>Don&rsquo;t be afraid that one might steal your idea. A side project is small, not yet rocket science. It&rsquo;s usually too small to be on the radar of serious businesses, and too big for individuals.</p>

<p>Let me explain that. Very few people have the grit to turn their ideas into something real. If you encounter someone who has the grit and the interest, ask her to join forces !</p>

<h2>13. Find real users</h2>

<p>Deploying your software is nice, but it&rsquo;s useless until you have users. Find some ! It&rsquo;s never too early to find testers. If your first demo does not embarrass you, it was too late ! At the beginning, it can be as basic as walking through an unfinished feature to get feedback.</p>

<p>Real user feedback always results in both high motivation and value. There are many places to get beta users : at work, through friends &hellip; have the courage to ask !</p>

<p>That&rsquo;s again a case for building your system in baby steps. The faster you get to something you can show, the faster you can have beta users.</p>

<h2>Do it !</h2>

<p>If I needed a 14th best practice it would be to start today ! As with most things, just do it !</p>

<p><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/just-do-it.jpg" alt="Just Do It !" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side Projects Matter]]></title>
    <link href="http://philippe.bourgau.net/side-projects-matter/"/>
    <updated>2017-06-13T09:13:00+02:00</updated>
    <id>http://philippe.bourgau.net/side-projects-matter</id>
    <content type="html"><![CDATA[<p>As a manager, you could benefit a lot from helping your developers with their side projects.</p>

<p>I finished my <a href="https://philous-planning-poker.herokuapp.com/">latest side project</a>. That&rsquo;s the fifth serious one I bring to an end :</p>

<ol>
<li>2010-2014 <a href="/rip-mes-courses-dot-fr/">www.mes-courses.fr</a>, an improved UI for online groceries. This was both a technical project and a wannabe business</li>
<li>Since 2011, <a href="/">this blog</a></li>
<li>2015 <a href="/agileavatars-dot-com-magnets-for-real/">www.agileavatars.com</a>, a custom magnet shop for agile team boards. This was a lean startup style business project</li>
<li>2016 <a href="/verify-the-big-o-complexity-of-ruby-code-in-rspec/">complexity-asserts</a> a unit test matcher to enforce algorithm complexity. This was a technical project time boxed to 20h.</li>
<li>2016-2017 <a href="/planning-poker/">Philou&rsquo;s Planning Poker</a>, a technical product, that I built to solve my own problem.</li>
</ol>


<p>The more I do side projects, the more I am certain of their value to my employer.</p>

<p><img src="../imgs/2017-06-13-side-projects-matter/side-project.jpg" alt="Hand drawing with stating 'creative business idea'" /><div class="image-credits"><a href='http://fr.freepik.com/vecteurs-libre/dessines-a-la-main-business-icons_769576.htm'>Designed by Freepik</a></div></p>

<h2>Reasons companies discourage side projects</h2>

<p>Unfortunately, most companies discourage their employees to have side projects. It boils down to fundamental fears :</p>

<ul>
<li>they might get less done</li>
<li>they might leave</li>
</ul>


<p>While these are legitimate, most of the time, they are also unlikely or short sighted.</p>

<h3>Why don&rsquo;t they work extra hours ?</h3>

<p>Said another way : if developers want to code, why don&rsquo;t they add new features to the company&rsquo;s products ?</p>

<p>From my own experience, having a side project has always been an <a href="/is-there-any-room-for-the-not-passionate-developer/">energy booster</a>. Side projects have made me more effective at work !</p>

<p>For a compulsive hacker, a side project is a hobby ! As painting, piano or soccer is to others. Working on smaller software, being in full control, renews the joy of programming.</p>

<h3>They&rsquo;ll quit once they&rsquo;ve learned new skills !</h3>

<p>Simply said, if a company&rsquo;s retention strategy is to deprecate its developers &hellip; It&rsquo;s got problems a lot worse than a few people doing side projects at night !</p>

<h3>They won&rsquo;t be as productive !</h3>

<p>You could think that developers will be less focused on the company&rsquo;s issues while at work. Indeed, passionate side-project hackers always have it on top of their heads.</p>

<p>Most of the time though, the extra energy provided by the side project out-weights this focus loss.</p>

<p>In the end, we should trust people to be professional. Let&rsquo;s deal with the problem later, when someone actually starts to underdeliver.</p>

<h3>They&rsquo;ll leave if it turns into a successful product !</h3>

<p>Building a product company is pretty damn hard. A time starved side project is pretty unlikely to turn into a successful business. Not much to worry about here ! If it happens, the company is lucky to have had such a productive employee.</p>

<h3>They might steal our intellectual property !</h3>

<p>This one is true. Only a very small minority of people might do that, but the risk remains.</p>

<p>You might conclude that it&rsquo;s easier to play it safe and prohibit side projects &hellip; at the same time, it&rsquo;s always sad to punish the majority for a minority&rsquo;s bad behavior.</p>

<p>It boils down to a tradeoff between risks and rewards. How sensible the company is to IP theft vs the benefits of having a side-project friendly policy.</p>

<p>If you are wondering what these benefits are, read on !</p>

<h2>Side projects made me a more valuable employee</h2>

<p>As developers, side project teach us a lot. What is less obvious, is how these new skills benefit our employers !</p>

<h3>Keep up with technology</h3>

<p>A side project is an occasion to work on any subject, with any technology we want. That&rsquo;s the perfect time to try that latest <a href="https://colorlib.com/wp/javascript-frameworks/">JS</a> framework we cannot use at work.</p>

<p>This will help us and our companies to transition to these new technologies in the future.</p>

<p>Experimenting different platforms also widens our horizons. It teaches us new ways of addressing problems in our daily stack. For examples, learning <a href="https://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special">LISP macros</a> pushed me to use lambdas to create new control structures in Java, C++ or C#.</p>

<p>The conclusion is that side projects make people more productive and adaptive. Which in turn makes companies more productive and resilient</p>

<h3>Understand what technical debt is</h3>

<p><img src="../imgs/2017-06-13-side-projects-matter/iceberg-technical-debt.jpg" alt="A technical debt iceberg" /><div class="image-credits"><a href='https://www.vectorcast.com/testing-solutions/technical-debt-legacy-code'>Image from Vector Software</a></div></p>

<p>The bottleneck in a side project is always time. In this context, to deliver fast enough to keep my motivation high, I tend to take technical debt. Particularly because I ignore how long I&rsquo;ll be maintaining this code.</p>

<p>Even so, if I later decide to stick to this side project, this technical debt will be an issue.</p>

<p>That&rsquo;s what technical debt is : a conscious choice to cut a corner and fix it later. Without keeping track of the cut corners, it&rsquo;s not debt anymore, but crappy code ! That&rsquo;s why I ended up using <a href="/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"><code>#TODO</code> comments</a> in my side projects.</p>

<p>Later down the road, at any moment, I can decide to invest in refactoring some technical debt out. We can apply the exact same principles at our day jobs.</p>

<h3>Understanding what a business is</h3>

<p>Trying to make money from your side project taught me other kind of lessons. To sell my product or service, I had to learn a ton of other skills than the typical developer has. Nothing will sell without marketing or sales. I also had to dip my toes in design, web content creation and project management.</p>

<p>Once I went through this, I was able to better understand a big picture at work. It became easier to discuss with product, project and sales people. I&rsquo;m able to make better tradeoffs between engineering, product and technical debt. Non technical colleagues appreciate that. As developers, it increases our value and trustworthiness.</p>

<h3>Discover new ways of doing things</h3>

<p>While progressing towards my own side project goals, I had to search the internet for help on some tasks. I ended up using SaaS tools, and discovered alternate practices to the ones I was using in my daily job.</p>

<p>That&rsquo;s great for employers ! Developers will gain perspective about which company processes work well and which don&rsquo;t. If you have some form of continuous improvement in place at work, they&rsquo;ll suggest great ideas ! If you don&rsquo;t, then you should <a href="/how-we-introduced-efficient-agile-retrospectives/">start doing retrospectives</a> now !</p>

<h2>Companies should sponsor side projects</h2>

<p>I hope I convinced you that side projects are at least as efficient as a formal training. The topics are unknown at the beginning, but that&rsquo;s the trick : they deal with the <a href="https://en.wikipedia.org/wiki/There_are_known_knowns">unknown unknowns</a> !</p>

<p>There are many ways a company can help its employees with their side projects :</p>

<ul>
<li><a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack time</a> is a great way to spark the interest in a topic. Developers might start something in their slack time, and continue as a side project. Provided the topic as value for the company, they could continue using their Slack time on it.</li>
<li>Hosting a <a href="https://startupweekend.org/">Startup Weekend</a> or a <a href="https://en.wikipedia.org/wiki/Hackathon">Hackathon</a>. Most company offices are empty on Saturdays and Sundays. You could ask your company to lend its premises for such an event. It&rsquo;s very likely that some employees will take part.</li>
<li>Even better, some companies, like <a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/">Spotify</a>, organize regular Hackathons <em>on office hours</em> ! That&rsquo;s Slack time, on steroids !</li>
<li>Sponsoring internal communities can enable employees with side-projects to help each other. Sponsorship could be free lunch, premises or a regular small slice of time on work hours.</li>
<li>Providing a clear legal framework around side projects reduces the risks for everyone. Questions like the ownership of intellectual property are better dealt with upfront.</li>
</ul>


<p><a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/"><img src="../imgs/2017-06-13-side-projects-matter/spotify-hackathon.jpg" alt="A photo of Spotify's open space during a Hackathon" /></a></p>

<p>If you are a developer looking for a side project idea, suggest slack time in retrospective ! You could also ask for sponsorship and organize a startup week-end or a lunch time community.</p>

<p>Finally, if your company is side-project friendly, communicate about it ! It&rsquo;s a great selling point and it will attract great programmers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is There Any Room For The Not-Passionate Developer ?]]></title>
    <link href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/"/>
    <updated>2016-07-26T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer</id>
    <content type="html"><![CDATA[<p><a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1470025727&amp;sr=8-1&amp;keywords=the+passionate+programmer"><img class="center" src="/imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/passionate-programmer.jpg" title="The cover of The Passionate Programmer book" ></a></p>

<p>In <a href="https://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1469597091&amp;sr=8-1&amp;keywords=rework">Rework</a>, <a href="https://basecamp.com/">Basecamp</a> guys David Heinemeier Hansson and Jason Fried advise to <a href="https://signalvnoise.com/posts/902-fire-the-workaholics">&ldquo;Fire the workaholics&rdquo;</a>, while in <a href="https://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1469801854&amp;sr=8-1&amp;keywords=zero+to+one">Zero to One</a> Peter Thiel argues that great working conditions (as described within Google for example) result from 10x technological advantages, not the other way round.</p>

<p>Back in 1983, Bill Gates said :</p>

<blockquote><p>You have to think it’s a fun industry. You’ve got to go home at night and open your
mail and find computer magazines or else you’re not going to be on the same
wavelength as the people [at Microsoft].</p></blockquote>

<p>Where do we stand now ? Do you need to live and breath programming to remain a good developer ?</p>

<h2>What about the 40h per week rule ?</h2>

<p><img class="center" src="/imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/productivity.jpg" title="A graph of the productivity when working overtime" ></p>

<p>Studies have repeatedly demonstrated that 40h per week is the most productive work load, but in <a href="https://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017930">Outliers, the Story of Success</a> Malcolm Gladwell explains that getting fast to the 10000 hours of practice is a required road to success. As my Aïkido professor says, the more you practice, the better you get &hellip;</p>

<p>In <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1469801992&amp;sr=1-1&amp;keywords=soft+skills+the+software+developer%27s+life+manual">Soft Skills: The software developer&rsquo;s life manual</a> John Somnez also makes the point for hard work, that while he long believed that smart work would be enough, it&rsquo;s only when he put more in that he managed to drastically change his career.</p>

<p>During an <a href="http://calacanis.com/2008/03/07/how-to-save-money-running-a-startup-17-really-good-tips/">argument</a>, DHH argued in favor of work life balance whereas Jason Calacanis said that working in a startup had to be an all-in activity. In the end, they agreed that what matters is passion.</p>

<p>From my own experience, whenever I work on something I am passionate about :</p>

<ul>
<li>I am more productive</li>
<li>I feel energized rather than dulled by the work</li>
</ul>


<p>When I look around me, all the great developers I know are passionate and putting in more than 40 hours per week in programming. I also noticed that passion and efforts have always been pretty good indicators of future skills.</p>

<p>But then, how do passionate people manage to remain productive when working more than 40 hours per week ?</p>

<h2>What about the under the shower idea ?</h2>

<p>In <a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050">Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers)</a> (which is a great book BTW), Andy Hunt explains that our R-mode works in the background, and needs time away from the task at hand to come up with &ldquo;out of the box&rdquo; creative solutions.</p>

<p>XP argues for a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>, but at the same time, Uncle Bob says that we should put in 60 hours (40 for employer, and 20 for yourself) of work per week to become and remain &lsquo;professionals&rsquo; (I guess that&rsquo;s from <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_2?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1470026034&amp;sr=8-2&amp;keywords=the+clean+code">The Clean Coder</a> if I remember correctly).</p>

<p>On my side, 6 to 8 solid hours of pair-programming on the same subject is the most I can do before becoming a <a href="http://c2.com/cgi/wiki?NetNegativeProducingProgrammer">Net Negative Producing Programmer</a>. But I can do more programming per day if I work on a side project at the same time though !</p>

<p>I guess that&rsquo;s how passionate people do it, they have different topics outside of their main work :</p>

<ul>
<li>they read books about programming</li>
<li>they have their own <a href="http://www.sideprojectbook.com/">side projects</a></li>
<li>they read articles about programming</li>
<li>they might maintain a programming blog</li>
<li>they might attend, organize or speak at meetup</li>
</ul>


<p>Most of the time, this does not make for more work, but rather for more learning. If I&rsquo;ve noticed that all the great programmers around me are passionate and strive to improve at their craft, I&rsquo;ve also noticed that overworked workaholics usually aren&rsquo;t very productive.</p>

<h2>Special challenges for mums and dads</h2>

<p>I think that Bill Gates 1983 statement still holds. If you are not passionate about programming, you&rsquo;ll have a hard time remaining and succeeding as a programmer in the long run.</p>

<p>The great thing about all this passion is that we can experience an energized work environment, always bubbling with change and novelty. On the flip side, keeping up with all is not always easy.</p>

<p>As we developers gain more experience, we tend to loose patience with everything that just feels as a pain in the ass, and will want :</p>

<ul>
<li>Powerful languages and technologies</li>
<li>An efficient working environment</li>
<li>Smart colleagues</li>
</ul>


<p>Unfortunately, that might also be the moment in your life when you become a parent, and you&rsquo;ll want  a stable income to sustain your family and some time to spend with your kids.</p>

<p>That is when things get tricky. Neither can you jump ship for the next cool and risky startup where you&rsquo;ll do great things, nor can you find enough time moonlighting to improve your skills &hellip; To add pain to injury, even with 10 years of experience in various languages and technologies, most companies won&rsquo;t look at your resume unless it contains good keywords &hellip; It looks like the developer&rsquo;s version of  <a href="https://www.amazon.com/Innovators-Dilemma-Revolutionary-Change-Business/dp/0062060244/ref=sr_1_sc_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1470024448&amp;sr=8-1-spell&amp;keywords=the+innovator%27s+dilemns">The Innovator&rsquo;s Dilemna</a> !</p>

<p>Lack of passion and parenthood might partially explain why people stop being developers after a while. I can quickly think of 2 bad consequences of this :</p>

<ul>
<li>We tend to reinvent the wheel quite a lot (I&rsquo;m looking at you, .js frameworks &hellip;)</li>
<li>We might be meta ignoring (ignoring that we ignore) people skills that could make us all more efficient</li>
</ul>


<p><em>EDIT 2017/01/11 Thanks for all your valuable comments, <a href="/what-happens-to-non-enthusiast-programmers-in-the-long-run/">here is a follow up</a></em></p>

<p><em><a href="http://www.inside.com.tw/2016/08/05/is-there-any-room-for-the-not-passionate-developer">Chinese translation</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RIP mes-courses.fr]]></title>
    <link href="http://philippe.bourgau.net/rip-mes-courses-dot-fr/"/>
    <updated>2014-06-27T06:33:00+02:00</updated>
    <id>http://philippe.bourgau.net/rip-mes-courses-dot-fr</id>
    <content type="html"><![CDATA[<p>Rest In Peace <a href="https://dl.dropboxusercontent.com/u/206938/mes-courses.fr/archives/index.html">mes-courses.fr</a>. Here is what it looked like :</p>

<p><img class="center" src="/imgs/2014-06-27-rip-mes-courses-dot-fr/screenshot.png" title="Screen shot of the home page of mes-courses.fr" ></p>

<p>I wanted to create a really fast on-line grocery front-end, where people could shop for the week in only 5 minutes. It supported shopping recipes instead of individual items but I also envisioned to allow automatic menus recommendations, and automatic item preference selection. I started 4 years ago, and this is my last doing on the subject :). If you&rsquo;re thinking about starting your own side project, this post is for you.</p>

<h3>Here are the lessons I learned</h3>

<ul>
<li>As a professional programmer, I largely underestimated the non programming time required for a serious side project. It represents more than half the time you&rsquo;ll spend on your project (marketing, discussing with people, mock ups and prototypes)</li>
<li>When I started, I kind of estimated the time it would take me to build a first prototype. Again I ridiculously underestimated this :

<ul>
<li>because of the previous point</li>
<li>because on a side project, you&rsquo;ll be on your own to handle any infra issue</li>
<li>because you don&rsquo;t have 8 hours per day to spend to your project (As a professional developer, dad of 2, I only managed to get 10 to 15 hours per week)</li>
</ul>
</li>
<li><a href="/programming-as-an-exponential-problem/">A small project does not require as much infrastructure as a big one</a>. I lost some time doing things as I do when working on projects with more than 100K lines of code. So next time :

<ul>
<li>I&rsquo;ll stick to end to end cucumber tests for as long as possible</li>
<li>I&rsquo;ll use an economical framework like described in <a href="http://www.amazon.fr/The-Principles-Product-Development-Flow/dp/1935401009">Donald G. Reinertsen&rsquo;s Flow book</a> to prioritize improvements vs features</li>
</ul>
</li>
<li>Eventually, what killed me was that I could not go around the &ldquo;experiment &ndash;> adapt&rdquo; loop fast enough. The project was just too big for my time

<ul>
<li>I&rsquo;ll try to select a subject a project that suits my constraints of time and money</li>
<li>This will be one of the first hypotheses that I&rsquo;m willing to verify</li>
<li>Web marketing and HTML design are more important than coding skills to run experiments : I&rsquo;m learning both</li>
</ul>
</li>
<li>Scrapping is a time hog. I won&rsquo;t start any side project involving scrapping anymore.</li>
<li>Using on-line services always saved me a lot of time. They are a lot more reliable than anything I could setup. Mainly, this was :

<ul>
<li>Mailing services</li>
<li>Cloud deployment</li>
</ul>
</li>
<li>Go the standard way. Again, anytime I did something a bit weird, it turned out to cost me some time

<ul>
<li>Use standard open source software, stick to the latest version</li>
<li>Use standard and wide spread technology</li>
</ul>
</li>
<li>Automated testing and deployment saved me some time from the start. Especially with the small amount of time that I could spend on my project, it was really easy to forget details and to make mistakes.

<ul>
<li><a href="https://github.com/philou/mes-courses/blob/master/lib/mes_courses/deployment.rb">Here</a> is the <a href="https://www.heroku.com/">Heroku</a> deployment script I used to test and deploy in a single shell call</li>
<li>And <a href="https://github.com/philou/mes-courses/blob/master/lib/mes_courses/utils/scheduled_tasks.rb">here</a> is a Heroku workaround to run some cron tasks weekly, this allowed me to run some scrapping tests every week on Heroku</li>
</ul>
</li>
<li>It took all my time ! Next time I start a side project, I&rsquo;ll be prepared to

<ul>
<li>Spend all my free time on it (my time was divided between day-job, family, side project)</li>
<li>Spend all my learning time (books, on-line trainings &hellip;) for it</li>
<li>Choose something that I am passionate about !</li>
<li>Choose a different kind of project to fit my constraints

<ul>
<li>Joining an existing open source project would let me focus on technical work at my own pace</li>
<li>Volunteer for a not for profit project might be less time intensive while allowing some fulfilment</li>
</ul>
</li>
</ul>
</li>
<li>I did my project alone, and it was hard to keep my motivation high on the long run. Next time :

<ul>
<li>I&rsquo;ll join someone else</li>
<li>I&rsquo;ll <a href="/my-own-side-project-best-practices-after-reading-the-side-project-book/">time box my project</a> before a pivot or starting something completely different</li>
</ul>
</li>
<li>I did not manage to get anything done before I settled a regular daily rhythm. I used to work from 5:30am to 7:30am, I first tried in the evening, but after a day&rsquo;s work, I was too tired to be really productive.</li>
<li>When I could afford it, paying for things or services really saved me some time. I&rsquo;m thinking of

<ul>
<li>A fast computer</li>
<li>Some paying on-line services</li>
</ul>
</li>
</ul>


<p>It is sure that doing a side project seriously is a heavy time investment, but there&rsquo;s also a lot of benefits !</p>

<p><img class="center" src="/imgs/2014-06-27-rip-mes-courses-dot-fr/side-projects-are-important.gif" title="Side projects are important blackboard" ></p>

<h3>Here is what I gained</h3>

<ul>
<li>Real experience with new technologies. For me, this included

<ul>
<li>Ruby on Rails</li>
<li>Coffeescript</li>
<li>HTML scrapping</li>
<li>Dev-ops practices with Heroku</li>
<li>Web design with HTML and CSS</li>
</ul>
</li>
<li>I also learned a lot of non technical skills in which I was completely inexperienced

<ul>
<li>Web marketing</li>
<li>Blogging</li>
<li>Mailing</li>
</ul>
</li>
<li>Trying to bootstrap a for profit side project is like running a micro company, it&rsquo;s a good opportunity to understand how a company is ran. This can help you to become a better professional during your day-job.</li>
<li>Having control on everything is a good situation to use Lean techniques.

<ul>
<li><a href="http://www.amazon.com/The-Lean-Startup-Entrepreneurs-Continuous/dp/0307887898/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1404024050&amp;sr=8-1&amp;keywords=lean+startup">Lean Start-up</a></li>
<li><a href="http://www.amazon.com/The-Principles-Product-Development-Flow/dp/1935401009/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1404024094&amp;sr=8-1&amp;keywords=reinersten">Lean product development (Donald G. Reinertsen)</a></li>
</ul>
</li>
<li>Failing allowed me to actually understand Lean Start up ! The ideas are easy to understand in theory, the practice is a very different thing. It should help me for my next project.</li>
<li>Resolving real problems on my own was a very good source for valuable blog articles.</li>
<li>I collaborated with very clever people on open source libraries

<ul>
<li>By fixing some bugs in some libraries I was using</li>
<li>By releasing some parts of my code as open source libraries</li>
</ul>
</li>
</ul>


<p>Next time, I hope I&rsquo;ll get more euros as well !</p>

<p>You&rsquo;ve got nothing to loose from trying ! Just do it. Give yourself 1 year to get some small success, and then continue or repeat with something else !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My own side project best practices after reading the 'Side Project Book']]></title>
    <link href="http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book/"/>
    <updated>2013-07-25T07:26:00+02:00</updated>
    <id>http://philippe.bourgau.net/my-own-side-project-best-practices-after-reading-the-side-project-book</id>
    <content type="html"><![CDATA[<p>First, I recommend <a href="http://sideprojectbook.com/">this book</a> to any side project infected person : it&rsquo;s a great motivation boost !</p>

<p>After reading it, it seems that there are no absolute rules to side projects success. Some did no marketting and just did what they loved, others did à carefull market study before building anything, some did the whole things, others outsourced the code or the design, or even both &hellip; That said, as I read somewhere, it seems that one is more likely to achieve commercial success if he first focusses on the market, then marketting, then the design, and eventually on the features.</p>

<p>Common advices from the interviewees are :</p>

<ul>
<li>ship early</li>
<li>iterate</li>
<li>don&rsquo;t give up</li>
</ul>


<p>Why not apply these principle to &ldquo;building a side project&rdquo; instead of &ldquo;building XXX in my free time&rdquo; ?</p>

<p>From now on, I am going to set up project target duration and revenue. For example, if I don&rsquo;t make at least 100€ / month after one year, I&rsquo;ll stop working on it and start a new one.</p>

<p>I hope that by iterating more quickly through projects I&rsquo;ll learn more and increase my chances of successes as the time goes. Keeping the same target duration and revenue for all projects should make me better at filtering ideas that are a good fit to my resources. As I tend to get bored quickly, it should also allow me to keep my motivation high.</p>

<p>Let&rsquo;s see what happens !</p>
]]></content>
  </entry>
  
</feed>
