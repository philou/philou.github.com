<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: refactoring | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-08-28T06:26:10+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #3 : Manage it !]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/"/>
    <updated>2018-08-23T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it</id>
    <content type="html"><![CDATA[<p><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">My previous posts</a> where about how to find and use small time slots for large scale refactorings. <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">Refactoring step by step</a> is a series of slack slots, sub tasks of features and boy scout rule increments. Unfortunately, keeping track of all these is a challenge of its own.</p>

<p>Here is a little story of what can go bad. I used to work in a team which <a href="/refactoring-trick-to-insert-a-wrapper/">had a high &lsquo;refactoring culture&rsquo;.</a> Everyone in the team wanted to apply the kind of practices I mentioned in my previous posts. To make things more tricky, we were <a href="/from-zero-to-pair-programming-hero/">working from 2 cities</a>. We had introduced slack time and developers would tackle refactoring at the end of every iteration. As we did not particularly organize or collaborate on slack time, we soon ran into conflicts. People wanted to refactor the same code, maybe in different ways ! After a while we also had too many large scale refactorings going on at the same time. This slowed down progress, increased the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> and the failure rate. Worst of all, it made it difficult to refocus on a newly discovered but urgent refactoring.</p>

<p>With a bit of organization though, we got things to work. Let&rsquo;s see how we managed it.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/manage-it.jpg" alt="Drawing of a calendar entitled &quot;Manage It !&quot;. Collaboration and organization are key to succeed to use incremental software development for large scale refactorings." /></p>

<p>This is the eighth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Manage it with a Design Vision</h2>

<p>To succeed at anything, we need to know where we are going. It&rsquo;s the same for large scale refactorings. We don&rsquo;t need to have all the details of what we want to build. We do need a good enough draft to avoid going in the wrong direction. That&rsquo;s even more true when we work as a team. Without a shared design vision, people will refactor in conflicting directions.</p>

<p>It&rsquo;s very important to share the vision with all the team. We can stick high level UML sketches on the walls for example. As <a href="https://twitter.com/kentbeck">Kent Beck</a> suggests, we can also use <a href="http://www.extremeprogramming.org/rules/metaphor.html">metaphores</a> to communicate the design. In <a href="https://vimeo.com/275530146">this talk</a>, <a href="http://www.natpryce.com/">Nat Pryce</a> explains that it&rsquo;s a great way start, but that we will have to drop the metaphore later.</p>

<iframe src="https://player.vimeo.com/video/275530146?title=0&byline=0&portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<div class="image-credits">By <a href="https://vimeo.com/275530146">Nat Pryce - What we talk about when we talk about software</a> from <a href="https://vimeo.com/newcrafts">NEWCRAFTS Conferences</a> on <a href="https://vimeo.com">Vimeo</a></div>


<br>


<p>The idea is not to waste time in a <a href="https://en.wikipedia.org/wiki/Big_Design_Up_Front">Big Design Up Front</a>. We just want to draft a vision :</p>

<ul>
<li>We can run a Design level Event Storming (I guess I&rsquo;ll have to blog about this some day)</li>
<li>We can grab a copy of <a href="https://www.amazon.com/Gamestorming-Playbook-Innovators-Rulebreakers-Changemakers/dp/0596804172/ref=sr_1_1?ie=UTF8&amp;qid=1534409953&amp;sr=8-1&amp;keywords=gamestorming">Gamestorming</a> and run another kind of collaborative design game</li>
<li>Or a few team members could work on something the way they prefer</li>
</ul>


<p>Whatever the technique we start with, we&rsquo;ll be able to refine and evolve the vision down the road.</p>

<h2>Manage it with Mikado Graphs</h2>

<p>Remember the &lsquo;<a href="http://mikadomethod.info/">Mikado Method</a>&rsquo; from <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">my previous post</a> ? It&rsquo;s a technique to code and deploy large scale refactorings in baby steps. If you had a look at the reference links, you&rsquo;ll might seen mentions of a &lsquo;Mikado Graph&rsquo;. Here is what it looks like :</p>

<p><a href="http://mikadomethod.info/"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/mikado-graph.png" alt="Sample Mikado Graph. The Mikado graph is a great tool to manage and collaborate on incremental software development of large scale refactoring." /></a></p>

<div class="image-credits">Sample mikado graph from <a href="http://mikadomethod.info/">http://mikadomethod.info/</a></div>


<br>


<p>As the number of refactoring steps grows, it becomes tricky to keep track of them all. A simple way is to draw them as nodes in a graph, and tackle the work from the leaves. If you are interested, check <a href="/blog/categories/mikado-method/">these posts about the Mikado Method</a>. In my previous team, we became fans of the Mikado Method. We even built a tool to generate mikado graph from <a href="https://www.atlassian.com/software/jira">JIRA</a> (our ticket management system) dependencies ! Using colors, we could track where we stood in the refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/generated-mikado-graph.jpg" alt="Sample Mikado Graph generated by our tool. Automating around Mikado graphs is of great help for large scale refactoring." /></p>

<p>The key advantage of mikado graphs is that we can stick them on the wall. This enables all the team to know where we stand in a refactoring. This way, team members can collaborate during their slack. It can also make the boy scout rule more effective. When a developer happens to touch a file that appears in the graph, he or she can move it further in the good direction.</p>

<blockquote><p>ðŸ’¡ A key benefit of mikado graphs is that we can stick them on the wall for everyone to know where we stand in a refactoring.</p></blockquote>

<h2>Manage it with Metrics</h2>

<p>I mentioned coding conventions and a clear <a href="https://www.agilealliance.org/glossary/definition-of-done/">Definition of Done</a> in <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">a previous post</a>. Â Having code quality constraints is the compass of constant merciless refactoring. To make this actionable and real, we should take the time to setup an automatic metrics system. For example :</p>

<p><a href="https://youtu.be/Env47tQewIA?t=2685"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/tech-debt-trap.jpg" alt="Doc Norton's talk about &quot;The Technical Debt trap&quot;. His metrics are very useful to manage large scale refactoring." /></a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=Env47tQewIA">Doc Norton suggests</a> to track maintainability, coverage, complexity and coupling over time.</li>
<li>The <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM model</a> suggests using specific rules to create Definition of Done constraints</li>
</ul>


<p>Putting this in place will help everyone in the team to know if she or he should do more or less refactoring. The first benefit is that it prevents under and over engineering on new code. The second benefit is progress validation through metrics changes as we refactor.</p>

<p><a href="https://codeclimate.com/github/philou/planning-poker"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/code-climate-dashboard.jpg" alt="Sample metrics dashboard. Out of the box, Code Climate supports 3 out of the 4 metrics suggested by Doc Norton. This can be really helpful to manage incremental software development." /></a></p>

<h2>Manage it with a bit of Planning</h2>

<p>Granted, planning is not the most fun part of our job. It can save us a ton of work though. <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">Joe Wright explains</a> how they doubled their productivity by spending more time planning. If we want to make a good job of incremental refactoring, we&rsquo;ll need to spend enough time preparing it. Important questions are :</p>

<ul>
<li>What are the most important refactorings to work on ?</li>
<li>How many refactorings should we tackle at the same time ?</li>
<li>Are we making good progress on our refactorings ?</li>
<li>Why is this refactoring not yielding any visible results through our metrics system ?</li>
<li>Are there any news that should change our plans ?</li>
<li>Are we doing enough refactoring to keep things under control ?</li>
<li>What are the next steps in these refactorings ?</li>
<li>etc</li>
</ul>


<p>I&rsquo;m not talking about a big 6 month planning but rather regular short planning sessions. In <a href="https://www.scrum.org/">Scrum</a> this kind of planning happens every sprint. To make plannings more visual, engaging and fun, we might us something like <a href="https://jpattonassociates.com/user-story-mapping/">Story Mapping</a>. (I guess I should blog about this someday.)</p>

<blockquote><p>ðŸ’¡ Keeping a Work In Progress limit on refactorings is essential.</p></blockquote>

<h2>Manage it through Time-Boxing</h2>

<p>One last advice before I&rsquo;m done. We must be very careful to time-box our work on refactoring increments. It&rsquo;s all too easy, to get caught up in a refactoring during the slack at the end of the iteration. If we let the refactoring spill on features we risk loosing the business people&rsquo;s trust.</p>

<p>Here again, using extra small baby steps helps to pause the refactoring. Another way is to do <a href="https://en.wikipedia.org/wiki/Kanban_(development">Kanban</a>) style slack. Replace end of sprint slack by a fixed number of people slacking all the time. But I&rsquo;ll come back to this in more details in a future post.</p>

<h2>Next post</h2>

<p>Using this set of practices my team was able to deliver large scale refactorings in small steps. That said, some refactorings are very difficult to technically deliver incrementally. Fortunately, people have come up with patterns like the Strangler and the Bubble Context to cope with this. That&rsquo;s what I&rsquo;ll go over in the <a href="http://eepurl.com/dxKE95">next post</a>.</p>

<p>This was the eighth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. I&rsquo;ve already been through why it&rsquo;s so difficult to get sponsorship for a refactoring. Why a badass developer attitude is important ? How to deliver refactorings steps by steps ? If you haven&rsquo;t start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #2 : Baby Steps]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/"/>
    <updated>2018-08-09T08:50:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps</id>
    <content type="html"><![CDATA[<p><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">My previous post</a> was about how to get slots of time in your daily (or weekly) work to do some refactoring. I left my readers with the promise of techniques to fit the refactoring work into these small slots.</p>

<p>Obviously, it won&rsquo;t be possible to perform any refactoring of any size in this way. With a bit of discipline and know-how though, it is possible to deal with quite a lot by splitting them up.</p>

<p>Baby steps are small increments of working software. The idea is that we test, commit, integrate and even deploy every small code change ! Using baby steps, we can perform large scale refactorings little by little. Refactoring in this way might seem involved, but it&rsquo;s so much safer that it&rsquo;s <a href="/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">a no brainer once you&rsquo;ve tried it</a> ! Refactoring in baby steps can be challenging to master though.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-07-incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/baby-steps.jpg" alt="Baby footprints. Taking really small baby steps when going through a large scale refactoring is safer" /></p>

<p>10 years ago, I used to work in a large bank in Paris. I had been dabbling on my own with <a href="https://en.wikipedia.org/wiki/Extreme_programming">eXtreme Programming</a> for a few years, when we started a small project. I was to become the informal XP coach. The project was about connecting to an online brokering service. It involved adapting an existing domain library. It went out pretty well. More precisely, we created very few bugs in production, which was very different from the norm at the time. I remember this feedback from the manager :</p>

<blockquote><p>We managed to move the code from X to Y through a succession of working baby steps ! That&rsquo;s pretty uncommon ! A manager in 2006</p></blockquote>

<p>Keep in mind that this was 10 years ago. We had not done anything special except trying to apply eXtreme Programming. Nowadays, as Continuous Integration has become mainstream these skills are becoming more common. That said, we still need to learn how to apply incremental software development to large scale refactoring. This is what I&rsquo;m going to write about today.</p>

<p>This is the seventh post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Team TDD Coding Dojos</h2>

<p>Learning to work in baby steps is not as complicated as it might first seem. The safest and easiest way is to setup a <a href="/blog/categories/team-randori-series/">team TDD coding dojo</a>. With its Red-Green-Refactor loop TDD sets up a baby steps rhythm. As I&rsquo;ll explain in <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/">my next post</a>, baby steps work best when all the team uses them. That&rsquo;s another thing the team Coding Dojo helps with.</p>

<blockquote><p>ðŸ’¡ TDD has a baby steps rhythm baked in.</p></blockquote>

<p>We can push the learning further. For example, we can use the <a href="http://kata-log.rocks/baby-steps">baby steps constraint</a> during a few coding dojo sessions. With this constraint, we revert the code if tests fail for more than 2 minutes ! Here is a way to go at it :</p>

<ol>
<li>Setup <a href="https://www.amazon.com/Continuous-Testing-Ruby-Rails-JavaScript/dp/1934356700/ref=sr_1_4?ie=UTF8&amp;qid=1533638529&amp;sr=8-4&amp;keywords=continuous+testing">continuous testing</a> : <a href="https://www.ncrunch.net/">NCrunch</a> in <a href="https://www.microsoft.com/net">.Net</a>, <a href="https://github.com/guard/guard">Guard</a> in <a href="https://www.ruby-lang.org/fr/">Ruby</a> or <a href="http://infinitest.github.io/">Infinitest</a> in <a href="https://en.wikipedia.org/wiki/Java_(programming_language">Java</a>)</li>
<li>Only use automated refactorings or extremely simple code changes in order to &hellip;.</li>
<li>&hellip; keep the code compiling all the time &hellip;</li>
<li>&hellip; and cut the time the tests fail as much as possible</li>
</ol>


<h2>Mikado Method</h2>

<p>One way to keep the tests green all the time is to use a slightly different TDD loop, as <a href="http://natpryce.com/articles/000780.html">Nat Pryce suggests</a> :</p>

<p><a href="http://natpryce.com/articles/000780.html"><img src="http://philippe.bourgau.net/imgs/2018-08-07-incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/listening-to-the-tests.png" alt="The red-green-refactor loop of TDD with an extra green arrow from failing test to refactor. This alternate TDD loop illustrates how to take baby steps with the Mikado Method" /></a></p>

<div class="image-credits">From <a href="http://natpryce.com">Nat Pryce's</a> <a href="http://natpryce.com/articles/000780.html">blog</a></div>


<br>


<p>Here is how it goes.Â </p>

<ol>
<li>Add a new failing testÂ </li>
<li>If it&rsquo;s trivial to fix, fix it. We are done</li>
<li>If not, see what&rsquo;s missing in the code</li>
<li>Comment the test to get back to a green state</li>
<li>Refactor the code to add what&rsquo;s missing (and use other tests if needed)</li>
<li>Uncomment the test</li>
<li>Repeat from step 2</li>
</ol>


<p>When doing this at the scale of a real life story or feature, we&rsquo;d use <code>git stash</code> instead of comments. This way of working has a name, it&rsquo;s called the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a>. It is at the heart of making baby steps work in real life.</p>

<blockquote><p>ðŸ’¡ The Mikado Method is at the heart of making baby steps work in real life</p></blockquote>

<h2>Take a break</h2>

<p>With TDD and the Mikado Method we can put the refactoring on pause. We can perform a small increment of the refactoring, commit and deploy it &hellip; and pause ! We&rsquo;ll work on business features for a while, and resume the refactoring later on.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-07-incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/coffee-break.jpg" alt="A cup of coffee next to a computer. Developers can pause their large scale refactoring if they work in small enough baby steps" /></p>

<p>When done well, it feels slow. We have to remember that the alternative is to convince business people of prioritizing a refactoring &hellip; As we&rsquo;ll regularly ship baby steps of a large scale refactoring, we&rsquo;ll know we&rsquo;re on the good track !</p>

<h2>More to come</h2>

<p>Unfortunately, even with bandwidth and skills, we are not there yet &hellip; It&rsquo;s one thing for developers to do incremental software development of large scale refactoring on their own. It&rsquo;s another to do it as a team !</p>

<p>This was the seventh post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/">Next post</a> will be about how to manage constant merciless refactoring and baby steps as a team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #1 : Constant Merciless Refactoring]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/"/>
    <updated>2018-08-02T08:31:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring</id>
    <content type="html"><![CDATA[<p><a href="/incremental-software-development-techniques-for-large-scale-refactorings/">My previous post</a> advocated incremental software development for large scale refactorings. It&rsquo;s less risky and it prevents tunnel effects. Most of all, it&rsquo;s a lot easier to convince business people of engaging in a refactoring this way.</p>

<p>It&rsquo;s one thing to understand why it&rsquo;s the way to go, but it&rsquo;s another to be able to do it ! In this post, I&rsquo;ll start by explaining how to find the time to do constant <a href="http://www.extremeprogramming.org/rules/refactor.html">merciless refactoring</a>.</p>

<p>This is the sixth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/recurring-cleanup.jpg" alt="Constant Merciless Refactoring illustrated as a recurring cleanup activity" /></p>

<h2><del>Steal</del> Take the time for constant merciless refactoring</h2>

<blockquote><p>If it hurts, do it more often ! <a href="https://martinfowler.com/bliki/FrequencyReducesDifficulty.html">Wisdom of the internet</a></p></blockquote>

<p>As a child, I used to be a very untidy kid. Every few week, my room would get in a real mess, and my mum would order me to clean all this mess. I would then lose 1 or 2 hours tidying my room up. She used to tell me that if I kept things tidy as I used them, I would not have to lose this time. From the top of my 10 years old, I would judge this advice as nonsense.Â </p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/messy-bedroom.jpg" alt="This is the kind of mess my bedroom used to be in, when I was a kid, before I learned the virtues of constant merciless refactoring" /></p>

<p>Fast forward a few years, I am myself a parent and I&rsquo;ve been working with legacy code for many years. These years have taught me how much I was wrong &hellip;</p>

<blockquote><p>ðŸ’¡ The easiest refactorings to negotiate are the ones we don&rsquo;t have to talk about !</p></blockquote>

<p>The more refactoring we embed in &lsquo;Business As Usual&rsquo;, the more we&rsquo;ll do, and the less we&rsquo;ll argue with the business. We can wonder if this is still &lsquo;professional&rsquo; ? In <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1533190334&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art Of Agile Development</a>, <a href="http://www.jamesshore.com/">James Shore</a> explains that managing technical debt is the key to long term productivity. (Details in the <a href="http://www.jamesshore.com/Agile-Book/risk_management.html">Risk Management section of his book</a>). As developers, <em>we</em> are the only experts in the code, the responsibility to keep it clean falls on us.</p>

<blockquote><p>Never ask the permission to do a good job ! <a href="http://docondev.com/">Doc Norton</a></p></blockquote>

<p>There&rsquo;s more to constant merciless refactoring ! It also keeps us in a good position to accept new features or refactorings later down the road.</p>

<p>Following are the 3 practices that make up constant merciless refactoring.</p>

<h2>Yesterday&rsquo;s weather and slack time</h2>

<p>20 years ago, a promises of agile software development was to stick to a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>. When we are working with a flavor of <a href="https://www.scrum.org/">Scrum</a>, we can rely on it&rsquo;s literature to inject some <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a>. Â Slack time is buffer time at the end of every iteration. We should not plan any work during the slack, to accommodate with the unexpected. It&rsquo;s a way to deliver on forecasts, whatever happens.</p>

<p>In short, if your velocity chart looks something like that :</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/velocity.jpg" alt="Drawing of a fluctuating team velocity. This is often the result of not enough constant merciless refactoring" /></p>

<p>Scrum tells us to plan what you delivered in your worst iteration for the next one ! When things will work bad, we&rsquo;re still pretty likely to deliver what we wanted. When things work well, we&rsquo;ll have time to tackle refactoring.</p>

<p>There&rsquo;s a lot more to say about slack time. How to take some when you are using <a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> ? How to make sure you keep some when your velocity becomes pretty stable ? How to do you increase your velocity in the long term ? (I guess I&rsquo;ll have to write a full blog post about this some day.)</p>

<h2>The Boy Scout Rule</h2>

<p>I already blogged about the <a href="http://www.informit.com/articles/article.aspx?p=1235624&amp;seqNum=6">Boy Scout Rule</a>. Here is how <a href="https://blog.cleancoder.com/">Uncle Bob</a> wrote it :</p>

<blockquote><p>Always leave the file you are editing a little better than you found it. Bob Martin</p></blockquote>

<p>Following this simple rule goes a long way to keep the code clean and ready for larger refactorings. It works arm in arm with Yesterday&rsquo;s weather principle. The extra time we take for clean up impacts our capacity to plan stories and features. This creates time to keep on doing the boy scout rule in future iterations.</p>

<p>How &lsquo;clean&rsquo; the code should be is a team decision. Coding conventions and a static code analyzer are very important to track the boy scout rule. I learned that code reviews, pairing, mobbing and <a href="/blog/categories/team-randori-series/">coding dojos</a> are great to agree on coding conventions.</p>

<h2>Embedding refactoring in features</h2>

<p>The Test Driven Development loop goes as Red-Green-Refactor.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/red-green-refactor.jpg" alt="TDD's Red-Green-Refactor loop. Itself highlighting Constant Merciless Refactoring as a recurring activity" /></p>

<p>The same loop goes on at larger scale for Acceptance or Feature Test. When repeated many times, the loop could as well be Refactor &ndash; Red &ndash; Green. In fact, it&rsquo;s a lot easier to refactor when you know what feature you want to build than at the end of the previous one. (Nat Pryce <a href="http://natpryce.com/articles/000780.html">wrote about that</a> in more details)</p>

<blockquote><p>ðŸ’¡ &ldquo;Disguise&rdquo; refactoring as first technical sub tasks of features to get them prioritized.</p></blockquote>

<p>All this to say, we should start our features with the pre-requisite refactoring ! We should not build features on shaky foundations. We should also impact our estimates. In fact, it&rsquo;s a lot easier to justify to business people at that moment. We don&rsquo;t need to mention &lsquo;refactoring&rsquo; or &lsquo;clean up&rsquo;. We can use technical sub-tasks to track these technical refactorings. Technical sub-tasks are the team&rsquo;s and don&rsquo;t need to be understandable by business people.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/tech-tasks-sea-level.jpg" alt="Technical tasks drawn &quot;Under the sea&quot; and visible to devs only. This leaves them room to do constant merciless refactoring" /></p>

<h2>To be continued</h2>

<p>Finding the time for constant merciless refactoring is one thing, but how do we fit the work in these short slots ? In the <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">next post</a>, I&rsquo;ll continue about how to actually work in baby steps.</p>

<p>This was the sixth post about <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">how to get sponsorship for large scale refactoring</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development for Large Scale Refactorings]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings/"/>
    <updated>2018-07-26T09:32:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-techniques-for-large-scale-refactorings</id>
    <content type="html"><![CDATA[<p>My <a href="/principles-that-will-make-you-become-a-badass-developer/">previous post</a> was about the badass developer attitude. More specifically, how it can buy sponsorship for large scale refactorings. Unfortunately, attitude is not enough. We also need to be able to deliver in a way that builds trust with the business. Most of all, business <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">is scared of the tunnel effect</a>. <a href="https://en.wikipedia.org/wiki/Iterative_and_incremental_development">Incremental software development</a> techniques allows to deliver large scale refactoring step by step. Not only that, but it also allows to do so alongside business features. That&rsquo;s how badass developers walk their talk and gain the business people&rsquo;s trust.</p>

<p>This is the fifth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-07-20-incremental-software-development-techniques-for-large-scale-refactorings/incremental-plant.jpg" alt="Drawing of a plant at different stages of growth, illustrating Incremental Software Development" /></p>

<h2>Why does incremental software development matter ?</h2>

<h3>A short story</h3>

<p>A few years ago, I joined a team whose work involved a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">Domain Specific Language</a> and a parser. The parser had grown in an ad-hoc way for a few years, and was now both very brittle and difficult to extend. We knew the way to go was to adopt a more solid parsing approach. We wanted to migrate to <a href="http://www.antlr.org/">ANTLR</a> and a <a href="https://en.wikipedia.org/wiki/Multi-pass_compiler">multi pass parser</a>.</p>

<p>As always, the business was very pushy for new features. There was no way we could have stoped everything for a full parser re-write. We explained to them that some of their features would be impossible to write without the new parser. We suggested that we work on migrating the parser as a background technical Epic. We did so using incremental software development techniques.</p>

<p>It took us a few months to migrate the parser. Meanwhile, we kept the software in a releasable state. This allowed us to validate our progress on the refactoring. We could continue to release features. We were able to share our progress on the refactoring with Â the business people. They were very happy with the way we did this refactoring. In fact, it set a standard about how to prepare the software for big features later on.</p>

<h3>The real problems</h3>

<p>To understand why incremental software development works, let&rsquo;s understand the alternatives' problems. The main alternative it to do the refactoring in one massive task. This kind of initiative screams &ldquo;Tunnel effect waiting to happen&rdquo; ! The <a href="http://www.wethetalent.co/data-robots-ai/the-tunnel-effect-and-the-abstruse-trap/">tunnel effect</a> scares business people for 3 reasons :</p>

<ol>
<li>Because they don&rsquo;t know how much money they&rsquo;ll need to put in the tunnel to get out of it</li>
<li>Because they don&rsquo;t know when they&rsquo;ll get the other features which they are also waiting for</li>
<li>To be blocked in the tunnel if something unexpected and important comes along</li>
</ol>


<p><img src="http://philippe.bourgau.net/imgs/2018-07-20-incremental-software-development-techniques-for-large-scale-refactorings/tunnel-effect.jpg" alt="Picture of someone holding a light, alone in a tunnel. Incremental Software Development helps to avoid the tunnel effect when performing a large scale refactoring" /></p>

<p>Delivering a large scale refactoring with incremental software development fixes these 3 points.</p>

<ul>
<li>Every commit is a step forward while keeping the system in a releasable state. If ever something unexpected comes along, we can pause the refactoring for a while. (point 3)</li>
<li>Not all the team has to work on refactoring at the same time. Working on the refactoring does not block the delivery of other features. (point 2)</li>
<li>Finally, after working on a refactoring for a while, it becomes easier to have an idea of how long it will take. (point 1)</li>
</ul>


<blockquote><p>ðŸ’¡ Incremental software development fixes the business people&rsquo;s fear of refactoring tunnel.</p></blockquote>

<p>It is true that performing the refactoring in one team-wide batch would be more efficient. It would reduce the overall Work In Progress and get it done quicker. Unfortunately, it&rsquo;s also a lot more scary for business people !</p>

<h2>Incremental Software Development techniques</h2>

<p>Like any skills, we can learn these techniques. Some are easy, and we can learn them from books. Others are more difficult and are usually learned through hard won experience. They can also be learned from a veteran developer in your team who&rsquo;s been through all this already. If you aren&rsquo;t or don&rsquo;t have a veteran around, we can still manage. <a href="https://medium.com/the-crossover-cast/deliberate-practice-learn-like-an-expert-cc3114b8a10e">Deliberate practice</a> is a great way to <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">learn almost anything</a>. <a href="http://philippe.bourgau.net/blog/categories/coding-dojo/">Coding dojos</a> are the thing here (I&rsquo;ll write more about this later).</p>

<p>Once we master these skills, a lot of things change. First, we can do refactoring without harming our relationship with business people. Second, it builds enough self confidence among developers to negotiate with business people. This in itself, makes us more credible in their eyes. As a result, they are more likely to compromise on prioritizing refactoring.</p>

<blockquote><p>ðŸ’¡ Mastering incremental software development builds self-confidence for developers.</p></blockquote>

<h2>To be continued</h2>

<p>This was the fifth post about <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">how to get sponsorship for large scale refactoring</a>. In the next posts, I&rsquo;ll deal headlong with the actual techniques. <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">How to get bandwidth</a> ? <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">How to work in baby steps</a> ? How to track the progress ? How to deal with the large scale ? Finally how to go further ? As you can see, there is still a lot to come, so <a href="http://eepurl.com/dxKE95">stay tuned</a> !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles that will make you become a badass developer]]></title>
    <link href="http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer/"/>
    <updated>2018-07-19T12:57:00+02:00</updated>
    <id>http://philippe.bourgau.net/principles-that-will-make-you-become-a-badass-developer</id>
    <content type="html"><![CDATA[<p>In my <a href="/5-mistakes-badass-developers-never-do/">last post</a>, I went over things we should avoid if we want to become badass developers. As I said though, this is far from enough. Once we&rsquo;ve stoped losing trust from the business, it&rsquo;s time to build some more ! This is the forth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for a large scale refactoring</a>. If you haven&rsquo;t, start reading from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>The badass developers gain the business&rsquo;s trust by sneaking in as business partners. A good way to become one is to start acting like one ! Here are examples of principles for that.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-07-09-principles-that-will-make-you-become-a-badass-developer/badass-principles-tatoo.jpg" alt="Arm of a badass developer with the tatoo '&gt; Badass Principles;' " /></p>

<h2>Keeping the business best interests in mind</h2>

<p>This is all about decision making. We should try to steer decisions according to the business. Whenever we talk with business people, we should stay aways from technical topics. I still remember my younger self explaining threading details to a trader &hellip; Most of all I remember the look on his face ! We should avoid technical bla bla, but we should be clear about the business consequences.</p>

<h2>Honesty and Candor</h2>

<p>When we don&rsquo;t agree with something, we should say so. When we don&rsquo;t understand something, we should ask the question. We need to stick to facts and assume everyone has the business&rsquo;s best interests in mind. Candor is a way to get our opinions and questions through, without sounding rude or pushy. There&rsquo;s a whole chapter about candor in <a href="https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration/dp/0812993012/ref=sr_1_1?ie=UTF8&amp;qid=1531133278&amp;sr=8-1">Creativity.inc</a>, the book about Pixar.</p>

<p><a href="https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration/dp/0812993012/ref=sr_1_1?ie=UTF8&amp;qid=1531133278&amp;sr=8-1"><img src="http://philippe.bourgau.net/imgs/2018-07-09-principles-that-will-make-you-become-a-badass-developer/creativity-inc.jpg" alt="Cover of the Creativity.inc book. It contains lessons on Candor we should all read to become badass developers" /></a></p>

<p>With time, business people will think of us as a positive and <a href="/real-developers-ship/">pragmatic problem solvers</a>. That is exactly the kind of people they want to work with !</p>

<blockquote><p>ðŸ’¡ Candor is a way to get our opinions and questions through, without sounding rude or pushy.</p></blockquote>

<h2>Strong opinions, but weekly held</h2>

<p><a href="https://twitter.com/codinghorror">Jeff Atwood</a>, already <a href="https://blog.codinghorror.com/strong-opinions-weakly-held/">wrote</a> about this. The idea is to fight for our opinions, but let them go without a fuss when we proved wrong. We know that we are all very often wrong. Only fools or self-centered people don&rsquo;t admit this reality. Business people won&rsquo;t trust us in either case. We need to show that we can go over our previous opinions. This grows our reputation of rational problem solver.</p>

<h2>Acknowledging when we don&rsquo;t know</h2>

<p>The same logic goes with knowledge. None of us knows everything. We have to admit when we don&rsquo;t know something and ask for help. This proves that we place the business&rsquo;s speed over our personal &lsquo;know-it-all&rsquo; reputation.</p>

<p>Here is a story that happened to me at my first job. I&rsquo;m sure most developers go through it one day or another. I was assigned a new task involving technologies I did not know. I did not have the guts to state upfront that I would have to learn them. The result was that I sent 2 full weeks fiddling with this task to get something working. The more it went on, the more the product people were wondering why it was taking so long, and the more I got stressed !</p>

<h2>Be bold and say No !</h2>

<p>If we are sure something we should not do something, we need to say so. Badass developers are not afraid to say they won&rsquo;t do it. <a href="/are-software-developers-overworked-or-undecided/">Good software engineering requires merciless prioritization</a>. If there are doubt about the value of doing something, it&rsquo;s often a better idea to make sure before wasting time on it.</p>

<p>There are many ways to say &lsquo;No&rsquo;. Before giving a harsh &lsquo;No&rsquo;, we can try to challenge decisions. We can ask for clarifications and rationals through open questions. Very often, highlighting the risks makes people review their plans. As technical experts, we should also share as much of the consequences as possible.</p>

<p>In the end, badass developers are ready to leave a <a href="https://www.urbandictionary.com/define.php?term=Fubared">FUBARed</a> situation. Great engineers don&rsquo;t have troubles finding jobs these days &hellip; There&rsquo;s no reason they should accept to be waisting their time.</p>

<blockquote><p>ðŸ’¡ In the end, badass developers are ready to leave a FUBARed situation</p></blockquote>

<h2>What do to next ?</h2>

<p>As we become badass developers, our reputation will grow. We&rsquo;ll be in a better position to negotiate a large scale refactoring with the business. There&rsquo;s a catch though : we&rsquo;ll need to live up to our reputation ! Admitting that we are wrong 100% with candor will not make it !Â </p>

<p>When we manage to negotiate a large scale refactoring, the team will need to do a good job of it. This boils down to delivering it piece by piece, alongside features. This is exactly what my <a href="http://eepurl.com/dxKE95">next post</a> will be about.</p>

<p>This post was the forth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring</a>.</p>
]]></content>
  </entry>
  
</feed>
