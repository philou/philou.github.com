<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: refactoring | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-09-21T12:46:37+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 1]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1/"/>
    <updated>2018-09-20T08:58:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1</id>
    <content type="html"><![CDATA[<p><em>With a bit of discipline, we can make a factual business case for a large scale refactoring that business people won&rsquo;t resist.</em></p>

<p>The <a href="/presenting-a-large-scale-refactoring-as-a-business-opportunity/">previous 2 articles</a> were about how to present large scale refactorings to business people. This might already get us a lot closer to having our large scale refactoring prioritized. Unfortunately, many times this won&rsquo;t be enough. Hopefully, we can add something to make the point to business people : numbers !</p>

<p>Business people love numbers. Presented well, they make decisions a lot easier to take. Making a business case is about estimating the costs of doing versus not doing a refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/legacy-vs-refactoring.jpg" alt="Drawing of legacy and a refactoring plan in a balance. Making a business case for a large scale refactoring is all about estimating the costs of both options" /></p>

<p>This is the twelfth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Before anything</h2>

<p>Before we start any computation, we need to know what we are talking about. This means that as a team, we must agree and specify enough the refactoring we want to do. A small group design session might be useful at this point.</p>

<blockquote><p>💡 We must detail precisely what refactoring we want before making a business case for it.</p></blockquote>

<h2>Refactoring Cost</h2>

<p>We pay for a refactoring only once, when we do it. The cost of the refactoring is the time it will take to do it. We can do a team estimate on the refactoring and see the numbers.</p>

<p>From my experience large scale refactoring estimates are pretty inaccurate. If the team is having a hard time agreeing on estimates, it&rsquo;s a warning! Recipes against this are :</p>

<ul>
<li>Do a bit more design to better define the refactoring</li>
<li>Take a safety margin for your estimation. Times 2 is not a bad ratio to start with (cf. the risk management section of <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art of Agile</a>)</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/art-of-agile.jpg" alt="Cover of the book The Art of Agile Development. It contains a chapter about risk management which can be useful to make realistic long term estimates of a large scale refactoring" /></a></p>

<p>Eventually, be sure to convert your estimates in man.hours. If you don&rsquo;t, it will be difficult to compare this with the non-refactoring cost.</p>

<h2>Non-Refactoring Cost</h2>

<p>Contrary to the previous one, this cost is recurring. We&rsquo;ll only compute it for a single period of time, let&rsquo;s say an iteration. It also works fine with a month, a week or whatever.</p>

<blockquote><p>💡 The cost of not doing a refactoring is the sum of all the waste work generated by the current code.</p></blockquote>

<p>The non-refactoring can be computed like:</p>

<p><code>
non-refactoring cost = Bug fix time + Support time + Lower productivity
</code></p>

<h3>Bug fixes &amp; Support time</h3>

<p>Bad code generates bugs and support time. By doing the refactoring well, we&rsquo;ll almost kill these wasteful activities.</p>

<p>We want to get the real amount of time the team is spending on bug fixes and support time related to our refactoring. Hopefully, our ticketing software might already contain enough time tracking data. That&rsquo;s what I used when we did <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">our improvement kata</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/types-of-tasks-small.jpg" alt="Distribution of the different kind of tasks over sprints that we extracted from Jira when we did the improvement kata. Finding where the time went is useful when making a business case for a large scale refactoring" /></p>

<p>If not, we&rsquo;ll unfortunately need to do a bit of manual time tracking for a while. It should be fine to cover a few days, and extrapolate for a longer period. Unbelievably, some people made time tracking fun by <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">using Lego Blocks</a>!</p>

<p><a href="https://code.joejag.com/2018/lego-workstream-visualisation.html"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/lego_1.jpg" alt="Joe Wright's team has had success logging time with lego blocks. Logging is time is crucial to estimate the non-refactoring cost when making a business plan" /></a><div class="image-credits">By <a href="https://twitter.com/vanschoo">Nancy Van Schooenderwoert</a></div><br></p>

<h3>Lower productivity</h3>

<p>Bad code also makes us slow! By doing this large scale refactoring, we should get a productivity boost.</p>

<p>Here again, we are only going to measure for an iteration, and extrapolate for the future. If we are working with iterations, we should have an &lsquo;estimation&rsquo; meeting of some sort. At the end of it, we should have selected a list of &lsquo;task&rsquo; for next iteration.</p>

<p>Next time you go through this meeting, we&rsquo;ll need to estimate these tasks twice.</p>

<ol>
<li>Do a normal estimation</li>
<li>Now, imagine we did the refactoring. Re-estimate.</li>
</ol>


<p>The difference between the estimates is the non-refactoring productivity loss.</p>

<p><code>
productivity loss = normal estimation - estimation after refactoring
</code></p>

<h2>Payback Period</h2>

<p>We need to convert everything in man.hours. We should now have figures for both total refactoring and recurring non-refactoring cost.</p>

<p><code>
payback period = refactoring cost / non-refactoring cost
</code></p>

<p>The payback period is the refactoring cost divided by the non-refactoring cost. It&rsquo;s the time after which the refactoring will pay for itself.</p>

<h2>To be continued</h2>

<p>We&rsquo;re done with computations. <a href="http://eepurl.com/dxKE95">Next week</a>, I&rsquo;ll go over what to do with these numbers. We want to make business case for this large scale refactoring an unmissable offer!</p>

<p>This is the twelfth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactorings</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Effective warning signals that will get you sponsorship for a large scale refactoring]]></title>
    <link href="http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/"/>
    <updated>2018-09-13T13:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring</id>
    <content type="html"><![CDATA[<p>In 2005, professors Bizer and Petty showed something interesting about human behavior. People make more efforts to avoid what they don&rsquo;t want, than to get what they would like. The study itself is interesting, you can have a look at it <a href="https://www.jstor.org/stable/41057679?seq=1#page_scan_tab_contents">here</a>. For example, it explains why political campaigns are getting more and more nasty. There&rsquo;s also a lesson for us, mere developers. We&rsquo;ll get more sponsorship for our refactorings if we highlight the dangers of not doing them !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/legacy-monster.jpg" alt="Drawing of a warning panel with legacy code written below an awful monster. Sending effective warning signals is a good way to get sponsorship for large scale refactorings" /></p>

<p>This is the 11th post of a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t already, start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p>From the inside, many systems are in such a messy state that seem like a catastrophe waiting to happen. Unfortunately, this mess is completely invisible to non-developers ! Here are a few techniques to show how close we are from a total breakdown !</p>

<h2>Effective Warning Signal #1 Pranks</h2>

<p>If you have the guts and your company is fun enough, you can try one of <a href="/the-size-of-code/">these pranks</a> 😉.</p>

<p><a href="https://www.flickr.com/photos/kk/18768224"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/paper-on-desk.jpg" alt="A photo of a desk littered under paper. As if we had printed the whole source code and dumped in on a non-developer desk. Pranks are a good way to get sponsorship for large scale refactorings" /></a></p>

<div class="image-credits">What if we printed the whole source code and dumped in on non-developers desks ? By <a href="https://www.flickr.com/photos/kk/">Kris Krüg</a>, <a href="https://creativecommons.org/licenses/by-sa/2.0/" title="Attribution-ShareAlike 2.0 Generic">CC BY-SA 2.0</a>, <a href="https://www.flickr.com/photos/kk/18768224">Link</a></div>


<br>


<p>They&rsquo;re bound to have a big impact &hellip; but they might also get you fired ! We should be creative and find both effective and acceptable pranks. Pranks are a lot more effective than we first think. <a href="https://en.wikipedia.org/wiki/Nonviolent_revolution">Non-Violent Revolution</a> activists have actually used <a href="http://laughtivismgroup5.blogspot.com/2016/04/laughtivism.html">Laughitism</a> to take dictators down ! For a good (and unexpectedly fun) read on the topic, have a look a <a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309">Blueprint for a Revolution</a>. It was written by Serb non violent activist <a href="https://en.wikipedia.org/wiki/Sr%C4%91a_Popovi%C4%87_(activist">Srdja Popovic</a>) member of <a href="https://en.wikipedia.org/wiki/Otpor!">OTPOR!,</a> who brought <a href="https://en.wikipedia.org/wiki/Slobodan_Milo%C5%A1evi%C4%87">Millosevic</a> down .</p>

<p><a href="https://www.amazon.com/Blueprint-Revolution-Nonviolent-Techniques-Communities/dp/0812995309"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/blueprint-revolution.jpg" alt="Cover of the book Blueprint for Revolution. Laughitism is a non violent technique that we can use against Legacy Code to get sponsorship for large scale refactorings" /></a></p>

<p>Promised, as soon as I manage to use such a prank without getting fired at work, I&rsquo;ll blog about it !</p>

<h2>Effective Warning Signal #2 Dice of Debt Game</h2>

<p>While doing my researches for this article, I found the <a href="https://www.agilealliance.org/dice-of-debt-game/">Dice of Debt</a> game. It&rsquo;s aimed at making business people experience the long term legacy code drag. It has good reviews, have a try at it with your business people and post back your feedback ! I&rsquo;ll do so as soon as I have a chance to test it myself.</p>

<h2>Effective Warning Signal #3 Higher authority</h2>

<p>Appealing to a higher authority works as long as people recognize this authority as so. Knowing the people in front of us, it&rsquo;s our job to bring up the reference in an effective way. Here are</p>

<p>In <a href="https://www.youtube.com/watch?v=xEqRtIeD51k">this talk</a>, <a href="http://docondev.com/">Doc Norton</a>, a recognized technical debt expert, shows the link between technical debt and productivity.</p>

<p><a href="https://www.youtube.com/watch?v=xEqRtIeD51k"><img src="http://philippe.bourgau.net/imgs/2018-08-27-effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/technical-debt-trap.jpg" alt="Slide from Doc Norton's Technical Debt Trap talk. It shows how technical debt impacts the cost of change and can be an effective warning signal for a large scale refactoring" /></a></p>

<p>Showing similarities between our own code metrics and this graph might ring the alarm bell in business people.</p>

<p>Another interesting model out there is <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM</a>. It was built through the <a href="https://www.agilealliance.org/">Agile Alliance</a>. It can be used to estimate the value of a codebase when buying a company. Maybe business people will listen if we tell them that their software would be worth 0 on the market ?</p>

<h2>Effective Warning Signal #4 Metaphor</h2>

<p>I was recently working with a team that is preparing a pitch to get sponsorship for a refactoring. They want to rework multithreaded code that uses locks and other low level synchronization. The hand written synchronization is becoming difficult to maintain. They would like to refactor it with the <a href="https://en.wikipedia.org/wiki/Actor_model">actor model</a>. Business people will likely argue that this module is now stable enough and should stay as is. We all know that this is not the case with bogus multithreaded code : the more you use it, the more bugs you find ! They had the idea to use the email vs phone metaphor. No one in the room could have handled all his daily emails with a phone only ! Everyone understood why it was necessary to switch to actors.</p>

<p>In <a href="https://engineering.riotgames.com/news/taxonomy-tech-debt">A Taxonomy of Technical Debt</a>, <a href="https://www.linkedin.com/in/bill-clark-37444a133/">Bill Clark</a> adds another dimension to technical debt. On top of the classic principal and interests he adds contagion. In fact, it&rsquo;s a bit as if he&rsquo;s ditching the <a href="https://martinfowler.com/bliki/TechnicalDebt.html">technical debt metaphor</a> for the disease metaphor ! Disease have a cost to live with, a cost to heal from and a contagion rate. People at the agile alliance also noted this <a href="https://www.agilealliance.org/technical-debt-systemic-problem/">self reinforcing behavior</a>. This metaphor might be better for &ldquo;<a href="https://en.wikipedia.org/wiki/Cruft">cruft</a>&rdquo;. <a href="https://twitter.com/wardcunningham?lang=fr">Ward Cunningham</a>&rsquo;s original metaphor of technical debt only applied to tested code.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pqeJFYwnkjE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>💡 A disease might be a better metaphor than debt for code cruft.</p></blockquote>

<h2>Effective Warning Signal #5 A horror story</h2>

<p>We said that a successful refactoring story will be useful to frame ours as an opportunity. We can have more impact with the opposite ! We should relate a large software failure, that had impact on the business to bad code. The bigger the impact on the business, the better it is. If you (unluckily) have something like that at your company, it should be a very powerful argument. If you don&rsquo;t, try to find a public story on the internet, or a public conference. For example here is one from <a href="https://www.makeuseof.com/tag/worst-programming-mistakes-in-history/">The 10 Worst Programming Mistakes in History.</a> </p>

<blockquote><p>💡 The <a href="https://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (a radiation therapy machine) killed 6 people because it was difficult to perform automated tests !</p></blockquote>

<p>We can draw parallels and forecasts, to highlight the high risk of failure.</p>

<h2>Almost there</h2>

<p>This was the 11th post in a <a href="http://philippe.bourgau.net/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. Unfortunately, presenting refactoring in a good way only brings us so far. If we want to be really convincing, we need to use quantitative data. That&rsquo;s going to be the topic of my <a href="/making-the-business-case-for-a-large-scale-refactoring-part-1/">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presenting a large scale refactoring as a business opportunity]]></title>
    <link href="http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity/"/>
    <updated>2018-09-06T06:27:00+02:00</updated>
    <id>http://philippe.bourgau.net/presenting-a-large-scale-refactoring-as-a-business-opportunity</id>
    <content type="html"><![CDATA[<p>Have you ever tried to talk about refactoring with business people ? Most of the time, the matter is pushed aside or received with rolling eyes &hellip; A few weeks ago, someone on <a href="https://news.ycombinator.com/">Hacker News</a> asked the question &ldquo;<a href="https://news.ycombinator.com/item?id=17600503&amp;utm_source=hackernewsletter&amp;utm_medium=email&amp;utm_term=ask_hn">As a CTO, what is your most frustrating problem with technical debt?</a>&rdquo;. Here is the most voted answer</p>

<blockquote><p>I think a lot of the time when a developer shouts “technical debt” what they are really shouting is “code someone else wrote that I’d rather rewrite than understand”. (The rest of the time is the same but they’ve understood it enough to think it’s a disaster area.)</p>

<p>I have found it’s best to not take tech debt complaints very seriously and instead look at actual success metrics. For example if every change to a bit of code introduces new bugs then that might be a reason to tidy it up.</p>

<p><a href="https://github.com/ghiculescu">ghiculescu</a></p></blockquote>

<p>We need a constructive dialogue with business people to get sponsorship for important large scale refactorings. Let&rsquo;s see what we can do to have one. This is the 10th post of a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-22-presenting-a-large-scale-refactoring-as-a-business-opportunity/refactoring-opportunity.jpg" alt="Drawing of a tree growing on top of the word refactoring. The key to getting sponsorship for a large scale refactoring is to present it as a business opportunity" /></p>

<h2>Presenting a business opportunity</h2>

<p>We must be very careful about how we present refactorings. We don&rsquo;t want them to be seen as unnecessary chores, or the latest tech fashion to follow. These don&rsquo;t bring value, and business people will run away from such refactorings. Instead, we should present business opportunities for higher productivity to invest in.</p>

<h3>Presenting a similar success story and its impact on the business</h3>

<p>Most of our companies have been through similar refactorings in the past. We can try to find a successful one and draw parallels to forecast benefits for the business. If the company is too young to have any or they were all failures, we can have a look in the whole industry. When I was at <a href="https://www.devoxx.fr/">Devoxx in Paris</a>, <a href="https://twitter.com/hervelourdin?lang=fr">Hervé Lourdin</a> the CTO of <a href="https://www.videdressing.com/">VideDressing</a> presented how they managed to do a large scale refactoring. Among other things, he went over how he managed to get sponsorship from his board. If you understand French, have a look at <a href="https://www.youtube.com/watch?v=UZt07-dsTdU">the full talk</a>. In this case as in most, a likely promise of reduction in the costs of bugs and new features is what made the point.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/UZt07-dsTdU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<blockquote><p>💡 In most cases, a likely promise of reduction in the costs of bugs and new features is what gets a refactoring prioritized.</p></blockquote>

<h3>Be a Badass Developer</h3>

<p>I wrote a lot about being a <a href="/blog/categories/badass-developer/">badass developer</a> earlier in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">this series</a>. This is when it becomes crucial. Being badass is a way to gain the trust of business people. Without this trust business people will react like the guy on Hacker News. Badass developers are way better at presenting large scale refactoring as business opportunities.</p>

<h3>Find a path to do incremental delivery</h3>

<p>Without incremental delivery, a refactoring risks delaying features for an unknown time. That scares the hell out of business people. <a href="/blog/categories/incremental-software-development/">Day to day incremental refactoring best practices</a> will save the day here. They&rsquo;ll actually help 3 times !</p>

<ol>
<li>To already perform a lot of refactoring in day to day work</li>
<li>To learn how to find an incremental refactoring path to present to business people</li>
<li>To prove that we know what we are talking about : we&rsquo;ve already been doing it for a while</li>
</ol>


<p>If you haven&rsquo;t, have a look at <a href="/blog/categories/incremental-software-development/">the articles about incremental refactoring techniques</a> that I wrote earlier in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">this series</a>.</p>

<h2>Pitch It !</h2>

<p>In &ldquo;corporate&rdquo; environments, building credibility is a lot about being convincing. The more we learn to be convincing, the more likely we are to have our refactoring prioritized. If you are ready to spend some time learning how to pitch, I recommend reading <a href="https://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854">Pitch Anything</a>. At least have a look at <a href="https://www.marketingfirst.co.nz/2013/10/pitch-anything-an-innovative-method-for-presenting-persuading-and-winning-the-deal-by-oren-klaff/">its summary</a>. It contains many actionnable nuggets to deliver powerful pitches. Here are a few.</p>

<p><a href="https://www.amazon.com/Pitch-Anything-Innovative-Presenting-Persuading/dp/0071752854"><img src="http://philippe.bourgau.net/imgs/2018-08-22-presenting-a-large-scale-refactoring-as-a-business-opportunity/pitch-anything.jpg" alt="Cover of the book Pitch Anything. Pitching a large scale refactoring as a business opportunity is a great way to get it prioritized" /></a></p>

<p>When we present an idea, we should put &ldquo;frames&rdquo; (time, authority &hellip;) in place to gain control of the discussion. For example, a time frame is a kind of deadline that will urge people to take action now. (Before overthinking it &hellip;) </p>

<p>We should create tension by alternating phases where we are giving and phases where we take a step back. Following the same idea, it also mentions the <a href="https://en.wikipedia.org/wiki/The_Tao_of_Steve">Tao of Steve</a> to rule at negotiations :</p>

<ul>
<li>Don&rsquo;t want anything</li>
<li>Show that you are really good</li>
<li>Leave at the crucible moment</li>
</ul>


<p>Giving a great pitch is a great way to present large scale refactorings as business opportunities.</p>

<blockquote><p>💡 Pitching is a great skill for developers to get sponsorship for a refactoring.</p></blockquote>

<h2>More to come</h2>

<p>This was the 10th post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. In <a href="/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/">next week&rsquo;s post</a>, I&rsquo;ll go over how to use a recent discovery about how our brain works to become even more convincing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #4 : a Pattern Language]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/"/>
    <updated>2018-08-30T08:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language</id>
    <content type="html"><![CDATA[<p><em>It can sometimes be a real challenge to integrate, let alone deploy, a refactoring step by step ! Here are some patterns that make this easier.</em></p>

<p>This is the ninth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>. It&rsquo;s also the fourth about incremental software development strategies for large scale refactoring. My point is that it&rsquo;s not possible to sell a refactoring to business people until we master those :</p>

<ol>
<li>How to find the time to refactor in our daily work</li>
<li>How to learn to work in baby steps</li>
<li>How to organize and manage this ongoing effort as a team</li>
</ol>


<p>What about when it is not easy to split the work into incremental steps ?</p>

<p>Do you remember the DSL parser refactoring story in mentioned in <a href="/incremental-software-development-techniques-for-large-scale-refactorings/">another post</a> ? Switching to a different parser technology incrementally sounds like an impossible mission. Even so, that&rsquo;s what we did ! </p>

<p>Here&rsquo;s another story. A long time ago, I was working in a bank. We were to migrate imperative <a href="http://www.cplusplus.com/">C++</a> financial contract models into declarative definitions in <a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language">C#</a>). We had to maintain an ugly adaptation layer. It made it possible migrate and deliver step by step. In the end, we suffered almost no bugs resulting from this transition.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/pattern.jpg" alt="Drawing of the pattern for a T-shirt. Patterns can be useful for Incremental Software Development of Large Scale Refactoring" /></p>

<h2>Why the effort ?</h2>

<p>Incremental refactoring implies going through Frankensteinesk intermediate situations. Situations where both the legacy and the new models exist in the software at the same time. This kind of adaptation layer costs time and energy, but doesn&rsquo;t add value to the product either ! What&rsquo;s the point of going through this ? Isn&rsquo;t a Big-Bang change cheaper ? Here is why it is still worth doing :</p>

<ol>
<li>It&rsquo;s safer. With incremental delivery, we confirm that what we are doing is working in production. On top of that, if something goes wrong, as we only delivered a small increment, the problem is easier to diagnose.</li>
<li>It&rsquo;s also safer in term of priorities. The system keeps working during all the refactoring. There&rsquo;s no pressure to finish it before we can move on to the next &lsquo;valuable&rsquo; feature. As <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">I explained before</a> it makes it possible to pause, and why not stop there for the moment. This can be helpful if we hit a new urgent priority.</li>
<li>Finally, it creates value earlier. Instead of having to wait 2 months to get all the value, you start getting a bit of this value every week. Even refactoring create value ! They reduce the time wasted to fix bugs. They increase our productivity. Sometimes, they even improve Non Functional Requirements of the system.</li>
</ol>


<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/value.jpg" alt="Plot of value over time in incremental vs big-bang. We can see that incremental software development creates more value." /></p>

<p>As we can see, the goal of incremental refactoring is not only to work in small steps. We also want to find a way to deliver <em>value</em> incrementally !</p>

<blockquote><p>💡 Incremental refactoring is not only about baby steps, it&rsquo;s also about early value delivery !</p></blockquote>

<h2>A Mini pattern language</h2>

<p>As I said earlier, this is easier said than done. Some piece of code won&rsquo;t let you refactor them step by step easily. Some will be too obscure to know where to start. Some will be just huge. Others will depend on an all encompassing third party. etc.</p>

<p>Here is a short pattern language to deliver large scale refactorings incrementally.</p>

<h3><a href="https://www.infoq.com/news/2016/05/domain-experts-ddd">Discuss with a domain experts</a></h3>

<h4>Goal</h4>

<p>We need to refactor code containing a lot of domain knowledge</p>

<h4>Conditions</h4>

<p>We have a domain expert available</p>

<h4>Therefore</h4>

<p>Have regular discussions with the domain expert to find the best modeling possible.</p>

<h4>Consequences</h4>

<ul>
<li>💚 We get simpler code than by trying to replicate the twisted legacy logic</li>
<li>💚 Can save a lot of work by skipping deprecated aspects.</li>
<li>💚 Chance to get bug fixes or new features for free</li>
<li>⚠️ The system does not exactly behave as it used to, which can cause integration problems</li>
</ul>


<h4>Difficulties</h4>

<p>It can sometimes be difficult to find a domain expert &hellip;</p>

<p>A lot of the presentations at the July Paris DDD Meetup were about how to find domain experts. Who actually seem to be pretty rare beasts ! Here are my notes.</p>

<p><a href="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/ddd-from-the-trenches.jpg"><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/ddd-from-the-trenches-small.jpg" alt="Mind map of my notes at July Paris DDD Meetup. The point was how to find a domain expert" /></a></p>

<h3><a href="http://dddcommunity.org/library/evans_2011_2/2">Bubble context</a></h3>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/bubble-context.jpg" alt="Drawing of developer and business expert inflating a bubble together. The bubble context is a way to incrementally grow a large scale refactoring from within the software" /></p>

<h4>Goal</h4>

<p>We want to refactor a large piece of code with no Big-Bang</p>

<h4>Conditions</h4>

<p>We have access to the internals of the code to refactor</p>

<h4>Therefore</h4>

<ul>
<li>Create a new bubble of clean code (a namespace, a package &hellip;)</li>
<li>Rewrite a piece of legacy code in the bubble</li>
<li>From the legacy code, delegate to the bubble</li>
<li>Repeat until the legacy code is not used anymore</li>
</ul>


<h4>Consequences</h4>

<ul>
<li>💚 Enables a step by step continuous delivery of the new version</li>
<li>💚 It is possible to eventually transform the API of the system</li>
<li>💚 It&rsquo;s easy to add new features in the bubble long before the refactoring is over</li>
</ul>


<h4>Difficulties</h4>

<ul>
<li>Need to understand the legacy enough to find good delegation points</li>
<li>Need to understand what the old small piece of code was doing to re-write it. A domain expert might be mandatory.</li>
</ul>


<h3><a href="https://www.martinfowler.com/bliki/StranglerApplication.html">Strangler</a></h3>

<p>The bubble context grows from the inside, but the strangler starts from the outside.</p>

<h4>Goal</h4>

<p>We want to refactor a large piece of code with no Big-Bang</p>

<h4>Conditions</h4>

<p>We can keep the same interface (API) for the legacy and the refactored versions</p>

<h4>Therefore</h4>

<ul>
<li>Wrap the existing code</li>
<li>Re-implement calls in the wrapper</li>
<li>Delegate the rest to the legacy</li>
<li>Repeat until you support all the interface</li>
<li>Remove the legacy code</li>
</ul>


<h4>Consequences</h4>

<ul>
<li>💚 Enables a step by step continuous delivery of the new version</li>
<li>⚠️ Maintenance of the wrapper and both versions of the code during all the refactoring</li>
</ul>


<h4>Difficulties</h4>

<ul>
<li>Interaction between the legacy and the refactored version is not always as simple. For example when the wrapped code is stateful</li>
<li>The granularity of the steps is the (method) calls to the interface. They need to be small enough for the whole process to be incremental</li>
</ul>


<p>Remember my story about how we switched our DSL parser to <a href="http://www.antlr.org/">ANTLR</a> ? We used a Strangler to do this.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/strangler.jpg" alt="Drawings of a strangler plant growing around legacy code. The strangler is very effective to do incremental software development of doing large scale refactorings" /></p>

<h3><a href="https://martinfowler.com/articles/feature-toggles.html">Feature toggles</a></h3>

<p>Sometimes, we just don&rsquo;t find a way to deliver a refactoring to users step by step. I&rsquo;ve seen situations where all incremental paths implied a temporary impact on NFRs. Ex : Keeping both versions of the code implied an increase in resource consumption.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-14-incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/switch.jpg" alt="Drawings of an electric switch. Feature toggles are sometimes the last resort to do incremental software development of large scale refactoring" /></p>

<h4>Goal</h4>

<p>Incrementally build a refactoring that we cannot deliver piece by piece to all our users.</p>

<h4>Conditions</h4>

<p>When we cannot find a way to incrementally deliver our refactoring to bulk of our users</p>

<h4>Therefore</h4>

<p>From the code, dynamically switch to the different versions depending on runtime configuration. This way, we let most users stick to the legacy version. Yet, we can build, test, integrate and deploy the new version to beta testers.</p>

<h4>Consequences</h4>

<ul>
<li>💚 We can build, integrate and test our refactored code in baby steps</li>
<li>💚 We can beta and A/B test our refactored code</li>
<li>⚠️ We need to maintain and evolve both versions of the code for a long time</li>
<li>⚠️ We need to maintain the switches in the code</li>
<li>⚠️ We only deploy to beta testers, and don&rsquo;t get as much early value</li>
<li>⚠️ Duplicate the Continuous Delivery pipeline to test different feature toggle sets</li>
</ul>


<h4>Difficulties</h4>

<p>Maintaining <a href="https://dzone.com/articles/feature-toggles-are-one-worst">feature toggles is a mess</a>. Thus, we need to</p>

<ul>
<li>As much as possible, prepare the code to reduce the number of switches. Ref : <a href="https://martinfowler.com/bliki/BranchByAbstraction.html">Branch by abstraction</a></li>
<li>Hunt down the number of active feature toggles at any given time</li>
<li>Reduce the scope of toggles. Where possible, we should push things out of the toggle into stranglers or bubbles.</li>
</ul>


<p>Feature toggles are an alternate to branches. Even if toggles are painful to use, branches are worse ! I&rsquo;m not going to go over branches. If you want to see why we should not use branches, check <a href="http://videos.ncrafts.io/video/275529985">this talk</a>.</p>

<iframe src="https://player.vimeo.com/video/275529985" width="640" height="360" frameborder="0" allowfullscreen></iframe>


<blockquote><p>💡 Feature toggles are painful, but branches are worse !</p></blockquote>

<h2>Final word</h2>

<p>I&rsquo;m done writing about Incremental Software Development Strategies for Large Scale Refactoring. This is only what I currently know about this very important topic. There&rsquo;s one last thing we need to do to be successful at it. We all need to keep an eye on new ideas from the community, and to share this with our teams as much as possible.</p>

<p>This was the ninth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a> ! In <a href="/presenting-a-large-scale-refactoring-as-a-business-opportunity/">next post</a>, I&rsquo;ll start to go over how to present a refactoring in financial terms to business people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #3 : Manage it !]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/"/>
    <updated>2018-08-23T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it</id>
    <content type="html"><![CDATA[<p><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">My previous posts</a> where about how to find and use small time slots for large scale refactorings. <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">Refactoring step by step</a> is a series of slack slots, sub tasks of features and boy scout rule increments. Unfortunately, keeping track of all these is a challenge of its own. Here are some organization best practices for that.</p>

<p>Here is a little story of what can go bad. I used to work in a team which <a href="/refactoring-trick-to-insert-a-wrapper/">had a high &lsquo;refactoring culture&rsquo;.</a> Everyone in the team wanted to apply the kind of practices I mentioned in my previous posts. To make things more tricky, we were <a href="/from-zero-to-pair-programming-hero/">working from 2 cities</a>. We had introduced slack time and developers would tackle refactoring at the end of every iteration. As we did not particularly organize or collaborate on slack time, we soon ran into conflicts. People wanted to refactor the same code, maybe in different ways ! After a while we also had too many large scale refactorings going on at the same time. This slowed down progress, increased the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> and the failure rate. Worst of all, it made it difficult to refocus on a newly discovered but urgent refactoring.</p>

<p>With a bit of organization though, we got things to work. Let&rsquo;s see how we managed it.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/manage-it.jpg" alt="Drawing of a calendar entitled &quot;Manage It !&quot;. Collaboration and organization are key to succeed to use incremental software development for large scale refactorings." /></p>

<p>This is the eighth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Manage it with a Design Vision</h2>

<p>To succeed at anything, we need to know where we are going. It&rsquo;s the same for large scale refactorings. We don&rsquo;t need to have all the details of what we want to build. We do need a good enough draft to avoid going in the wrong direction. That&rsquo;s even more true when we work as a team. Without a shared design vision, people will refactor in conflicting directions.</p>

<p>It&rsquo;s very important to share the vision with all the team. We can stick high level UML sketches on the walls for example. As <a href="https://twitter.com/kentbeck">Kent Beck</a> suggests, we can also use <a href="http://www.extremeprogramming.org/rules/metaphor.html">metaphores</a> to communicate the design. In <a href="https://vimeo.com/275530146">this talk</a>, <a href="http://www.natpryce.com/">Nat Pryce</a> explains that it&rsquo;s a great way start, but that we will have to drop the metaphore later.</p>

<iframe src="https://player.vimeo.com/video/275530146?title=0&byline=0&portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<div class="image-credits">By <a href="https://vimeo.com/275530146">Nat Pryce - What we talk about when we talk about software</a> from <a href="https://vimeo.com/newcrafts">NEWCRAFTS Conferences</a> on <a href="https://vimeo.com">Vimeo</a></div>


<br>


<p>The idea is not to waste time in a <a href="https://en.wikipedia.org/wiki/Big_Design_Up_Front">Big Design Up Front</a>. We just want to draft a vision :</p>

<ul>
<li>We can run a Design level Event Storming (I guess I&rsquo;ll have to blog about this some day)</li>
<li>We can grab a copy of <a href="https://www.amazon.com/Gamestorming-Playbook-Innovators-Rulebreakers-Changemakers/dp/0596804172/ref=sr_1_1?ie=UTF8&amp;qid=1534409953&amp;sr=8-1&amp;keywords=gamestorming">Gamestorming</a> and run another kind of collaborative design game</li>
<li>Or a few team members could work on something the way they prefer</li>
</ul>


<p>Whatever the technique we start with, we&rsquo;ll be able to refine and evolve the vision down the road.</p>

<h2>Manage it with Mikado Graphs</h2>

<p>Remember the &lsquo;<a href="http://mikadomethod.info/">Mikado Method</a>&rsquo; from <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">my previous post</a> ? It&rsquo;s a technique to code and deploy large scale refactorings in baby steps. If you had a look at the reference links, you&rsquo;ll might seen mentions of a &lsquo;Mikado Graph&rsquo;. Here is what it looks like :</p>

<p><a href="http://mikadomethod.info/"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/mikado-graph.png" alt="Sample Mikado Graph. The Mikado graph is a great tool to manage and collaborate on incremental software development of large scale refactoring." /></a></p>

<div class="image-credits">Sample mikado graph from <a href="http://mikadomethod.info/">http://mikadomethod.info/</a></div>


<br>


<p>As the number of refactoring steps grows, it becomes tricky to keep track of them all. A simple way is to draw them as nodes in a graph, and tackle the work from the leaves. If you are interested, check <a href="/blog/categories/mikado-method/">these posts about the Mikado Method</a>. In my previous team, we became fans of the Mikado Method. We even built a tool to generate mikado graph from <a href="https://www.atlassian.com/software/jira">JIRA</a> (our ticket management system) dependencies ! Using colors, we could track where we stood in the refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/generated-mikado-graph.jpg" alt="Sample Mikado Graph generated by our tool. Automating around Mikado graphs is of great help for large scale refactoring." /></p>

<p>The key advantage of mikado graphs is that we can stick them on the wall. This enables all the team to know where we stand in a refactoring. This way, team members can collaborate during their slack. It can also make the boy scout rule more effective. When a developer happens to touch a file that appears in the graph, he or she can move it further in the good direction.</p>

<blockquote><p>💡 A key benefit of mikado graphs is that we can stick them on the wall for everyone to know where we stand in a refactoring.</p></blockquote>

<h2>Manage it with Metrics</h2>

<p>I mentioned coding conventions and a clear <a href="https://www.agilealliance.org/glossary/definition-of-done/">Definition of Done</a> in <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">a previous post</a>.  Having code quality constraints is the compass of constant merciless refactoring. To make this actionable and real, we should take the time to setup an automatic metrics system. For example :</p>

<p><a href="https://youtu.be/Env47tQewIA?t=2685"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/tech-debt-trap.jpg" alt="Doc Norton's talk about &quot;The Technical Debt trap&quot;. His metrics are very useful to manage large scale refactoring." /></a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=Env47tQewIA">Doc Norton suggests</a> to track maintainability, coverage, complexity and coupling over time.</li>
<li>The <a href="https://www.agilealliance.org/the-agile-alliance-debt-analysis-model/">A2DAM model</a> suggests using specific rules to create Definition of Done constraints</li>
</ul>


<p>Putting this in place will help everyone in the team to know if she or he should do more or less refactoring. The first benefit is that it prevents under and over engineering on new code. The second benefit is progress validation through metrics changes as we refactor.</p>

<p><a href="https://codeclimate.com/github/philou/planning-poker"><img src="http://philippe.bourgau.net/imgs/2018-08-08-incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/code-climate-dashboard.jpg" alt="Sample metrics dashboard. Out of the box, Code Climate supports 3 out of the 4 metrics suggested by Doc Norton. This can be really helpful to manage incremental software development." /></a></p>

<h2>Manage it with a bit of Planning</h2>

<p>Granted, planning is not the most fun part of our job. It can save us a ton of work though. <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">Joe Wright explains</a> how they doubled their productivity by spending more time planning. If we want to make a good job of incremental refactoring, we&rsquo;ll need to spend enough time preparing it. Important questions are :</p>

<ul>
<li>What are the most important refactorings to work on ?</li>
<li>How many refactorings should we tackle at the same time ?</li>
<li>Are we making good progress on our refactorings ?</li>
<li>Why is this refactoring not yielding any visible results through our metrics system ?</li>
<li>Are there any news that should change our plans ?</li>
<li>Are we doing enough refactoring to keep things under control ?</li>
<li>What are the next steps in these refactorings ?</li>
<li>etc</li>
</ul>


<p>I&rsquo;m not talking about a big 6 month planning but rather regular short planning sessions. In <a href="https://www.scrum.org/">Scrum</a> this kind of planning happens every sprint. To make plannings more visual, engaging and fun, we might us something like <a href="https://jpattonassociates.com/user-story-mapping/">Story Mapping</a>. (I guess I should blog about this someday.)</p>

<blockquote><p>💡 Keeping a Work In Progress limit on refactorings is essential.</p></blockquote>

<h2>Manage it through Time-Boxing</h2>

<p>One last advice before I&rsquo;m done. We must be very careful to time-box our work on refactoring increments. It&rsquo;s all too easy, to get caught up in a refactoring during the slack at the end of the iteration. If we let the refactoring spill on features we risk loosing the business people&rsquo;s trust.</p>

<p>Here again, using extra small baby steps helps to pause the refactoring. Another way is to do <a href="https://en.wikipedia.org/wiki/Kanban_(development">Kanban</a>) style slack. Replace end of sprint slack by a fixed number of people slacking all the time. But I&rsquo;ll come back to this in more details in a future post.</p>

<h2>Next post</h2>

<p>Using this set of practices my team was able to deliver large scale refactorings in small steps. That said, some refactorings are very difficult to technically deliver incrementally. Fortunately, people have come up with patterns like the Strangler and the Bubble Context to cope with this. That&rsquo;s what I&rsquo;ll go over in the <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/">next post</a>.</p>

<p>This was the eighth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. I&rsquo;ve already been through why it&rsquo;s so difficult to get sponsorship for a refactoring. Why a badass developer attitude is important ? How to deliver refactorings steps by steps ? If you haven&rsquo;t start by <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a> !</p>
]]></content>
  </entry>
  
</feed>
