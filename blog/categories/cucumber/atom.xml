<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cucumber | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-05-31T07:16:20+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 minutes hack to speed up RSpec in Rails 5 using in-memory SQLite]]></title>
    <link href="http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite/"/>
    <updated>2017-01-25T07:53:00+01:00</updated>
    <id>http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite</id>
    <content type="html"><![CDATA[<p>Here is the story : you have a <a href="http://rubyonrails.org/">Rails 5</a> app that uses <a href="http://rspec.info/">RSpec</a>, but your RSpec suite is getting slower and slower to run. You&rsquo;ve already considered some solutions :</p>

<ul>
<li>Use <a href="https://sqlite.org/">SQLite</a> in memory for your test env.</li>
</ul>


<p><code>yaml
test:
  adapter: sqlite3
  database: ":memory:"
</code></p>

<p>That&rsquo;s the most straightforward thing to do, but unfortunately, if you are sharing your test env with <a href="https://cucumber.io/">Cucumber</a>, you might want to use a production like DB with Cucumber (<a href="https://www.postgresql.org/">PostgreSQL</a> or whatever). So unless you are ready to setup a new env for cucumber (which I tried and don&rsquo;t recommend) you&rsquo;re stuck.</p>

<ul>
<li>Use mocks. That&rsquo;s surely going to work, it&rsquo;s going to make your test hell of a lot faster ! It will also make your tests a lot more fragile and more expensive to maintain &hellip; If you want to read more about why I think mocks are a bad idea, just have a look at <a href="/blog/categories/mocking/">these posts</a>.</li>
</ul>


<h2>The hack</h2>

<p>Here is a third alternative, I&rsquo;ve <a href="/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/">already written about it</a>, but here it comes updated and tested for Rails 5 :</p>

<ol>
<li>Don&rsquo;t change anything to your <code>config/database.yml</code></li>
<li>Obviously, you&rsquo;ll need to add <code>sqlite3</code> to your <code>Gemfile</code></li>
<li>At the beginning of your <code>spec/rails_helper.rb</code>, replace</li>
</ol>


<p>``` ruby</p>

<h1>Checks for pending migration and applies them before tests are run.</h1>

<h1>If you are not using ActiveRecord, you can remove this line.</h1>

<p>ActiveRecord::Migration.maintain_test_schema!
```</p>

<p>with</p>

<p>``` ruby</p>

<h1>In order to keep the same RAILS_ENV for rspec and cucumber, and to make rspec</h1>

<h1>faster, patch the connection to use sqlite in memory when running rspec</h1>

<p>ActiveRecord::Base.establish_connection(adapter: &lsquo;sqlite3&rsquo;, database: &lsquo;:memory:&rsquo;)
ActiveRecord::Schema.verbose = false
load &ldquo;#{Rails.root.to_s}/db/schema.rb&rdquo;
```</p>

<p>That&rsquo;s it ! Run your specs &hellip; not bad for a 5 minutes investment !</p>

<h4>Rails 5.1 (2017-03-29 Edit)</h4>

<p>My fresh hack started to fail on Rails 5.1 ! If <code>schema.rb</code> is generated with the Postgres adapter, it is now incompatible with this injected Sqlite adapter. Here is a patch that removes the glitches :</p>

<p>```ruby</p>

<h1>In order to keep the same RAILS_ENV for rspec and cucumber, and to make rspec</h1>

<h1>faster, patch the connection to use sqlite in memory when running rspec</h1>

<p>ActiveRecord::Base.establish_connection(adapter: &lsquo;sqlite3&rsquo;, database: &lsquo;:memory:&rsquo;)
ActiveRecord::Schema.verbose = false</p>

<h1>load db agnostic schema by default. Needed to remove the &ldquo;, id: :serial&rdquo; from</h1>

<h1>the table definitions to make it load on sqlite</h1>

<p>eval(<code>cat #{Rails.root.to_s}/db/schema.rb | sed 's/,[^:]*: :serial\//g'</code>)
```</p>

<p>I admit this is getting a bit crappy, and I don&rsquo;t know how long it is going to work &hellip;</p>

<h2>One more thing &hellip;</h2>

<p>If you need even more speed, you can now run your specs in parallel in different processes ! Each in-memory SQLite DB is bound to its process, so unlike a real PostgreSQL dev DB, you won&rsquo;t get any conflicts between your tests ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber_tricks gem : my favorite Gherkin and Cucumber tricks]]></title>
    <link href="http://philippe.bourgau.net/cucumber-tricks-gem-my-favorite-gherkin-and-cucumber-tricks/"/>
    <updated>2014-06-12T06:28:00+02:00</updated>
    <id>http://philippe.bourgau.net/cucumber-tricks-gem-my-favorite-gherkin-and-cucumber-tricks</id>
    <content type="html"><![CDATA[<p>I just compiled my Gherkin and Cucumber goodies into a gem. It&rsquo;s called <a href="https://rubygems.org/gems/cucumber_tricks">cucumber_tricks</a> and the source code can be found on <a href="https://github.com/philou/cucumber_tricks">github</a>. It&rsquo;s also tested on <a href="https://travis-ci.org/philou/cucumber_tricks">travis</a> and documented in details on <a href="https://www.relishapp.com/philou/cucumber-tricks/docs">relish</a>.</p>

<p>The goal of all these tricks is to be able to write more natural english scenarios. Here is an extract from the readme of the gem, which explains what it can do :</p>

<h3>Use pronouns to reference previously introduced items</h3>

<p>foo.feature</p>

<p><code>gherkin
Given the tool 'screwdriver'
When this tool is used
</code></p>

<p>steps.rb</p>

<p>```ruby
A_TOOL = NameOrPronounTransform(&lsquo;tool&rsquo;, &lsquo;hammer&rsquo;)</p>

<p>Given /^(#{A_TOOL})$/ do |tool|
  &hellip;
end
```</p>

<h3>Use the same step implementation to handle an inline arg as a 1-cell table</h3>

<p>steps.rb</p>

<p>```ruby
GivenEither /^the dog named &ldquo;(.*)&rdquo;$)$/,</p>

<pre><code>        /^the following dogs$/ do |dogs_table|
</code></pre>

<p>  &hellip;
end
```</p>

<p>foo.feature</p>

<p><code>gherkin
Given the dog "Rolphy"
...
Given the following dogs
  | Rex  |
  | King |
  | Volt |
</code></p>

<h3>Add default values to the hashes of a table</h3>

<p>foo.feature</p>

<p><code>gherkin
Given the following dogs
  | names | color |
  | Rex   | white |
  | King  | Sand  |
</code></p>

<p>steps.rb</p>

<p>```ruby
Given /^the following dogs$$/ do |dogs|
  hashes = dogs.hashes_with_defaults(&lsquo;names&rsquo;, &lsquo;tail&rsquo; => &lsquo;wagging&rsquo;, &lsquo;smell&rsquo; => &lsquo;not nice&rsquo;)</p>

<h1>hashes.each do |hash|</h1>

<h1>expect(hash[&lsquo;smell&rsquo;]).to eq(&lsquo;not nice&rsquo;)</h1>

<h1>end</h1>

<p>  &hellip;
end
```</p>

<h3>Define named lists from a table</h3>

<p>foo.feature</p>

<p><code>gherkin
Given the following dishes
  | Spaghetti Bolognaise | =&gt; | Spaghetti | Bolognaise sauce |       |         |
  | Burger               | =&gt; | Bread     | Meat             | Salad | Ketchup |
</code></p>

<p>steps.rb</p>

<p>```ruby
Given /^the following dishes$$/ do |dishes|
  name_2_dishes = dishes.hash_2_lists</p>

<h1>expect(name_2_dishes[&lsquo;Burger&rsquo;]).to eq([&lsquo;Bread&rsquo;,&lsquo;Meat&rsquo;,&lsquo;Salad&rsquo;,&lsquo;Ketchup&rsquo;])</h1>

<p>  &hellip;
end
```</p>

<p>Visit <a href="https://www.relishapp.com/philou/cucumber-tricks/docs">relish</a> for more detailed documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spork alternative compatible with cucumber]]></title>
    <link href="http://philippe.bourgau.net/spork-alternative-compatible-with-cucumber/"/>
    <updated>2013-08-03T08:51:00+02:00</updated>
    <id>http://philippe.bourgau.net/spork-alternative-compatible-with-cucumber</id>
    <content type="html"><![CDATA[<p>Version 1.3.0 of <a href="http://cukes.info/">Cucumber</a> droped spork support, so I had to find something else. I am using <a href="https://github.com/guard/guard">Guard</a> setup with <a href="http://rspec.info/">rspec</a> and Cucumber for my <a href="http://rubyonrails.org/">Rails</a> app.</p>

<p>I first tried <a href="https://github.com/burke/zeus">Zeus</a> with <a href="https://github.com/qnm/guard-zeus">guard-zeus</a>, it kind of worked, but it ruined my Guard console with the Zeus server status, and it left zombie processes on guard exit &hellip;</p>

<p>Eventually, I tried <a href="https://github.com/jonleighton/spring">Spring</a>, and once I made sure <a href="/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/">rspec and cucumber both ran on the test environment</a>, it worked fine with minimal configuration. Here is what I had to do to get it working</p>

<ul>
<li>remove spork from your Gemfile</li>
<li>remove require &lsquo;spork&rsquo;, Spork.prefork and Spork.each_run calls from spec/spec_helper.rb and features/support/env.rb</li>
<li>install spring</li>
</ul>


<p><code>
gem install spring
</code></p>

<ul>
<li>add spring to your Gemfile ! Also <a href="https://github.com/jonleighton/spring/blob/master/README.md">they say it is not required</a> I later had an error complaining it wasn&rsquo;t.</li>
</ul>


<p><code>ruby
group :test, :development do
  ...
  gem 'spring'
  ...
group
</code></p>

<ul>
<li>update your Guardfile example :</li>
</ul>


<p>```ruby
guard :rspec, cli: &ldquo;&mdash;tag ~@slow&rdquo;, all_after_pass: true, all_on_start: false, keep_failed: true, spring: true, bundler: false do
  &hellip;
end</p>

<p>guard &lsquo;cucumber&rsquo;, all_on_start: false, cli: &lsquo;&mdash;format progress &mdash;no-profile&rsquo;, command_prefix: &lsquo;spring&rsquo;, bundler: false do
  &hellip;
end
```</p>

<ul>
<li>add a .spring.rb file to automaticaly restart Spring on main file changes. I think I&rsquo;ll have to update this file when I discover that a test failed because spring needs to be restarted</li>
</ul>


<p>```ruby
Spring.watch &ldquo;.spring.rb&rdquo;
Spring.watch &ldquo;spec/factories&rdquo;
Spring.watch &ldquo;features/env.rb&rdquo;</p>

<p>Spring.watch_method = :listen
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplest way to speed up rspec with in memory sqlite db]]></title>
    <link href="http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/"/>
    <updated>2013-08-02T09:16:00+02:00</updated>
    <id>http://philippe.bourgau.net/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db</id>
    <content type="html"><![CDATA[<p>There are already a lot of articles explaining how to setup an in memory <a href="http://www.sqlite.org/">SQLite</a> database to speed up <a href="http://rubyonrails.org/">Rails</a> specs or unit tests. Most of them explain how to change your database.yml and to run setup your schema before running the tests. It works fine.</p>

<p>There&rsquo;s a catch though : suppose you are using <a href="http://cukes.info/">cucumber</a>, it&rsquo;s likely you&rsquo;d rather run cucumber on a real database (<a href="http://www.postgresql.org/">PostgreSQL</a>, <a href="http://www.mysql.com/">MySQL</a> or whatever). Most gems expect cucumber and <a href="http://rspec.info/">rspec</a> to both run in the test environment &hellip; Every time I updated my bundle or that I wanted to use a new test gem, I would hit an issue about cucumber being run in its own &lsquo;cucumber&rsquo; environment : unexpected warnings and things not working out of the box.</p>

<p>Eventually, I ditched the cucumber env, setup a PostgreSQL db on the test env, and injected the in memory sqlite database right inside spec_helper.rb :</p>

<p>In database.yml :</p>

<p><code>yaml
test:
  adapter: postgresql
  database: mes_courses_test
  encoding: utf8
  pool: 5
  timeout: 5000
  username: mes_courses
  password: secret
  host: localhost
  port: 5433
</code></p>

<p>At the bottom of spec_helper.rb</p>

<p>```ruby
setup_sqlite_db = lambda do
  ActiveRecord::Base.establish_connection(adapter: &lsquo;sqlite3&rsquo;, database: &lsquo;:memory:&rsquo;)</p>

<p>  load &ldquo;#{Rails.root.to_s}/db/schema.rb&rdquo; # use db agnostic schema by default
  # ActiveRecord::Migrator.up(&lsquo;db/migrate&rsquo;) # use migrations
end
silence_stream(STDOUT, &amp;setup_sqlite_db)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't repeat names in cucumber scenarios]]></title>
    <link href="http://philippe.bourgau.net/dont-repeat-names-in-cucumber-scenarios/"/>
    <updated>2013-05-09T08:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/dont-repeat-names-in-cucumber-scenarios</id>
    <content type="html"><![CDATA[<p><strong>Update 06/12/2014: I created a <a href="https://github.com/philou/cucumber_tricks">gem</a> for this and other things, read an introduction <a href="http://philippe.bourgau.net//">here</a></strong></p>

<p>When the same name is repeated all over the place in a cucumber scenario, it can be difficult to read.
<code>gherkin
Scenario: Withdrawing some cash
  Given a deposit account with 1000€
  When I withdraw 100€ from the deposit account
  Then there should be 900€ on the deposit account
</code>
It would be better if we could write it like that
<code>gherkin
Scenario: Withdrawing some cash
  Given a deposit account with 1000€
  When I withdraw 100€ from the account
  Then there should be 900€ on the account
</code>
Sometimes we actually want to repeat the names though, either for clarity, or if we are dealing with many accounts within the same scenario.</p>

<p>To make both my scenarios more readable and my steps more versatile, I created special main_account_name accessors and a custom transform.
```ruby
def main_account_name
  @main_account_name ||= &ldquo;credit&rdquo;
end
def main_account_name=(account_name)
  @main_account_name ||= account_name
end</p>

<p>CAPTURE_ACCOUNT_NAME = Tranform(/^(a|an|the) <em>(.</em>) account$/) do |_prefix, account_name|
  if account_name == &ldquo;&rdquo;</p>

<pre><code>main_account_name
</code></pre>

<p>  else</p>

<pre><code>account_name
</code></pre>

<p>  end
end
<code>
When creating the account, I added some code to set the main_account_name
</code>ruby
Given(/^(#{CAPTURE_ACCOUNT_NAME}) with (\d+)€$/) do |account_name, amount|
  &hellip;
  self.main_account_name= account_name
end
<code>
It is then possible to write steps like
</code>
When(/^I withdraw (\d+)€ from (#{CAPTURE_ACCOUNT_NAME})$/) do |amount, account_name|
  &hellip;
end
```
that will match both &ldquo;the deposit account&rdquo; and &ldquo;the account&rdquo; depending on context.</p>

<p>It would be really nice to be able to write things like
<code>gherkin
  Then there should be 900€ on it
</code>
but because of the <a href="/if-new-cucumber-transform-breaks-everyhing-dot-dot-dot/">way cucumber handles transforms</a>, the only way I know to do that is to write a new step definition.</p>
]]></content>
  </entry>
  
</feed>
