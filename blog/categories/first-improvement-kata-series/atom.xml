<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: first-improvement-kata-series | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/first-improvement-kata-series/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-03-13T09:41:20+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 5]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/"/>
    <updated>2017-09-27T07:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5</id>
    <content type="html"><![CDATA[<p>This is the fifth (and last) post of a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/">previous post</a>, we decided to adjust our definition of a bug to limit the time lost on nice-to-have bug fixes.</p>

<p>It would take a while to know if adjusting the definition of a bug would help us or not. At the same time, we knew it would not help us to reduce the number of bugs we escaped to other teams.</p>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/success-banner.jpg" alt="A 'SUCCESS' banner in the wind" /></p>

<h2>Idea 3 : More exploratory testing</h2>

<p>We decided to push on this matter as well. This means that we would be running two <a href="https://en.wikipedia.org/wiki/PDCA">PDCAs (Plan-Do-Check-Act)</a> at the same time. This is not the improvement kata procedure by the book. That could have been an error from our side, as first time users of the kata. Or maybe it&rsquo;s a pragmatic habit to adapt the kata to real life &hellip; I guess we&rsquo;ll know better as we apply the kata more often. The danger is that the different experiments can conflict with each other. When measuring the results, it becomes difficult to link observations with experiments. Anyway, back to our own situation, as you&rsquo;ll see, it ended up well for us.</p>

<p>The first thing was to know a bit more about our bugs. Checking the recently closed bugs yielded suspicions about a recent features. Analyzing further proved our gut feeling.</p>

<h6>Curve of how bugs were fixed on the last 2 months</h6>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/fixed-bugs.png" alt="Curve of how bugs were fixed on last 2 months" /></p>

<h6>Curve of the origin of bugs on the last 2 months</h6>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/kind-of-bugs.png" alt="Curve of the origin of bugs on the last 2 months" /></p>

<p>Ignoring the Christmas drop at the middle of the curve, we concluded 2 things from these graphs :</p>

<ul>
<li>We were leaking bugs to the product</li>
<li>Bugs mostly came from newly added features</li>
</ul>


<blockquote><p>Despite all our automated tests and regular Â exploratory testing, we were leaking bugs.</p></blockquote>

<p>We decided to do more exploratory testing for a while ! We were already doing exploratory testing at the end of every story. We added an extra 1 hour team session of exploratory testing every sprint.</p>

<h2>Do, Check &amp; Act</h2>

<p>We used these new conventions for a few weeks. We did more exploratory testing, and would be more strict about what a bug was. We stuck to our prioritization : first improvements, then bugs and only after, stories.</p>

<p>After a few weeks of that, we were able to update our bug trend and do a linear regression on it again. Here were the results :</p>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/final-bug-trend.png" alt="Curve of the origin of bugs on the last 2 months" /></p>

<p>Hurray ! As you can see, we were to be done with bugs around April 2017, which was 3 months away at that time.</p>

<blockquote><p>ðŸ’¡ Quality is free, but only for those willing to pay for it ! [<a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> in <a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=9SX9Y3RG61NB7N9VJ6KS&amp;dpID=61lAwzXfQiL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=detail">Peopleware</a>]</p></blockquote>

<p><a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=9SX9Y3RG61NB7N9VJ6KS&amp;dpID=61lAwzXfQiL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=detail"><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/peopleware.jpg" alt="Cover of the 'Peopleware' book by Tom DeMarco &amp; Timothy Lister" /></a></p>

<p>We confidently adopted these practices as part of our working agreements. This brought our first improvement kata to its end.</p>

<blockquote><p>ðŸ’¡ The improvement kata not only brings improvements, it also teaches you why they work.</p></blockquote>

<h2>3 months later</h2>

<p>As you know, April 2017 is long gone. I can now give you a more up to date report of the actual effects on the team&rsquo;s daily work.Â </p>

<p>First, the backlog does not contain bugs anymore. We payed the bug debt back. Second, we still discover some bugs from time to time, but a lot less than we used to. To summarize, there is now a pair of developers (25%) of the team that can work on user stories instead of fixing bugs.</p>

<p>As we are still fixing bugs as they appear, the 25% productivity gain claim might be an overstatement, but 20% is not. At the same time, less bugs are now escaping. This means that the whole organization is saving on interruptions and rework. 25% might not be such a bold claim after all !</p>

<h2>This is it !</h2>

<p>This was post 5 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. I&rsquo;m not completely done writing about this improvement kata though. In the coming weeks, I&rsquo;ll post about the <a href="/lessons-learned-from-running-our-first-improvement-kata/">lessons learned</a> and <a href="/how-to-run-your-first-improvement-kata/">how to start your own improvement kata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 4]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/"/>
    <updated>2017-09-22T06:40:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4</id>
    <content type="html"><![CDATA[<p>This is the fourth post on a <a href="/blog/categories/first-improvement-kata-series/">series of 5 about the improvement kata</a>. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>We ended the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">previous post</a> with a target condition :</p>

<blockquote><p>We&rsquo;d like to be done with bugs within 3 months.</p></blockquote>

<p>Currently, 1 pair (one quarter of the team) is constantly busy fixing bugs. If we manage to find a way to spend less time on bugs, we can expect a productivity increase of about 25%.</p>

<p><img src="../imgs/2017-09-22-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/x-bugs.jpg" alt="Anti bug insecticide can" /></p>

<p>Next step in the improvement kata is to run <a href="https://en.wikipedia.org/wiki/PDCA">Plan-Do-Check-Act (PDCA)</a> experiments. Before you run experiments, you need ideas !</p>

<h2>Idea 1 : Stop exploratory testing</h2>

<p>We&rsquo;d like to spend less time fixing bugs. At the same time, we know that we started to spend more time on bug fixing when we <a href="/how-we-started-exploratory-testing/">started exploratory testing</a>.</p>

<p>We thought that one easy way to do less bug fixing was to stop exploratory testing altogether ! We listed the pros and the cons of exploratory testing.</p>

<h3>The obvious cons</h3>

<ul>
<li>It discovers bugs. Fixing these bugs costs time. We&rsquo;d rather spend this time delivering new features</li>
</ul>


<h3>But the pros are many</h3>

<ul>
<li>It helps us discover technical debt and improve the quality of our code, which makes us faster in the long run. Clean code has less bugs. When we discover many bugs related to a particular region of the code, it means we should refactor it.</li>
<li>It speeds up integration with other teams' work in many ways :

<ul>
<li>It saves other teams from debugging their time away trying to use broken things</li>
<li>Fixing bugs is sometimes just a matter of providing clear &lsquo;not supported yet&rsquo; errors. Doing this saves a tremendous amount of time to other teams.</li>
<li>Avoids blocking other teams as they wait for your bug fixes</li>
<li>Reduces interruptions from bug reports and fixes bouncing between teams.</li>
<li>By reducing unplanned rework, it makes any commitment you do more likely</li>
</ul>
</li>
</ul>


<p>In the light of all this, stoping exploratory testing did not seem like a great idea. We had to find something else.</p>

<blockquote><p>ðŸ’¡Saving time by not fixing bugs might not be a great idea</p></blockquote>

<p><img src="../imgs/2017-09-22-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/exploration.jpg" alt="Exploration map with a red cross" /></p>

<h2>Idea 2 : Review what a bug is</h2>

<p>We needed to find a middle ground between where we were and stoping exploratory testing. We wanted :</p>

<ul>
<li>not to let bugs escape</li>
<li>raise clean errors on things that are not yet supported</li>
<li>prevent scope creep from bug reports</li>
</ul>


<p>A few months ago, when we decided to prioritize bugs before features, we had defined a definition for bugs. Here is what it looked like. Something is a bug if any one of these is true :</p>

<ol>
<li>It used to work</li>
<li>It corrupts data</li>
<li>It silently returns wrong results</li>
<li>It returns an internal error (like an internal exception stack trace)</li>
</ol>


<p>We examined this definition, discussed, and decided to dump the first clause. Our logic was that it was very difficult to know if something had already been working. The best thing we could refer to was our extensive suite of tests. If we discover that something is not working, it is very likely that it has never been. If it had been working, it means there was a hole in our test suite.</p>

<blockquote><p>ðŸ’¡A hole in a test suite is a bug to fix</p></blockquote>

<p>We decided to test this new bug definition for a while.</p>

<h2>Not there yet !</h2>

<p>We&rsquo;re getting closer to the end, but you&rsquo;re not done with PDCA yet.</p>

<p>This was post 4 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/">next and last post</a> of this story you&rsquo;ll learn how we ended the PDCAs for great results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 3]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/"/>
    <updated>2017-09-13T09:12:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3</id>
    <content type="html"><![CDATA[<p>This is the third post on a <a href="/blog/categories/first-improvement-kata-series/">series of 5 about the improvement kata</a>. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/">previous post</a>, I explained how we started to understand what was going on. We were now questioning our way of handling bugs.</p>

<blockquote><p>Are we spending too much time on bugs ?</p></blockquote>

<p><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/code-and-bugs.jpg" alt="Bugs drawn on top of code" /></p>

<h2>More understanding</h2>

<h3>Types of tasks</h3>

<p>To answer this question, we decided to plot the different types of tasks we had completed per sprint.</p>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/types-of-tasks.jpg"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/types-of-tasks-small.jpg" alt="Bar chart with the types of tasks over sprints" /></a></p>

<p>Think again of the velocity curve we started with. We see an almost exact correlation between story count (green bars above) and story points (blue curve below).</p>

<blockquote><p>ðŸ’¡#NoEstimates works</p></blockquote>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/velocity.jpg"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/velocity-small.jpg" alt="Velocity graph" /></a></p>

<p>We can also see that after sprint 56, we were spending more time on bugs and improvements. Improvements are supposed to improve productivity, so we decided to focus on bugs first. Here is what we get if we compute the average number of bugs per sprint :</p>

<table>
<thead>
<tr>
<th>Periods </th>
<th> Sprints </th>
<th> Bugs </th>
<th> Average bugs fixed per sprint</th>
</tr>
</thead>
<tbody>
<tr>
<td>2015, Before sprint 56  </td>
<td> 15 </td>
<td>  21 </td>
<td>    1.4</td>
</tr>
<tr>
<td>After sprint 56 </td>
<td> 34 </td>
<td>  210 </td>
<td>   6.1</td>
</tr>
</tbody>
</table>


<br>


<p>Starting sprint 56, we were fixing 4 times as many bugs as we used to do before !</p>

<h3>What is going on with bugs ?</h3>

<p>At this point, we felt we&rsquo;d made a great step forward in our understanding. We almost thought we were done with it &hellip;</p>

<p>After a bit of thinking though, it was clear that we were not ! We still needed to understand why we were in this situation.</p>

<p>We started by listing more questions :</p>

<ul>
<li>Could it be that we just got a lot better at testing ? Since sprint 56, we had been doing <a href="/how-we-started-exploratory-testing/">regular exploratory testing</a>. Exploratory testing sessions were very effective at finding bugs.</li>
<li>Were we paying back a bug debt ? The created versus resolved trend seemed to show so. But it could also be that we weren&rsquo;t testing as well as we used to !</li>
</ul>


<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/created-vs-resolved.png"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/created-vs-resolved-small.png" alt="Created vs Resolved Bugs graph" /></a></p>

<ul>
<li>If we were paying back a bug debt, how close were we to the end of the payback ?</li>
<li>Were we creating too many flaws in the software ?</li>
<li>Are we fixing too many bugs ? If so, what should we do to fix less ?</li>
<li>Are the bugs coming from other teams using our component or from our own testing ?</li>
<li>Are bugs on new or old code ?</li>
</ul>


<p>A lot of questions, all difficult to answer. We decided to first see if we were paying back a bug debt. If this was the case, most other questions would become more or less irrelevant. With a bit of thinking, we came up with a measure to get the answer.</p>

<h3>Are we paying back a bug debt ?</h3>

<p>We first started to do exploratory testing at sprint 56. To do this, we would run a 1 hour session, where the pair finding the more bugs would win fruits. (Later on, we streamlined exploratory testing as part of the workflow for every story) At that time, we used to find more than 10 bugs in 1 hour.</p>

<blockquote><p>ðŸ’¡Gamification transforms nice developers into berserk testers !</p></blockquote>

<table>
<thead>
<tr>
<th>Explo Test Sesssion </th>
<th> 61 </th>
<th> 62 </th>
<th> 63 </th>
<th> 64 </th>
<th> 66 </th>
<th> 16.01</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bugs found  </td>
<td> 16 </td>
<td>  6 </td>
<td> 16 </td>
<td>    10 </td>
<td>    11 </td>
<td> 11</td>
</tr>
</tbody>
</table>


<br>


<p>We would do another such a session. If we found significantly less than 10 bugs, let&rsquo;s say less than 6, it would mean that :</p>

<ul>
<li>we improved the quality of our software</li>
<li>our streamlining of exploratory testing works</li>
<li>if we continue to search and fix bugs as we do currently, we&rsquo;ll reach a point where we won&rsquo;t find any more bugs</li>
</ul>


<p>Otherwise, none of these stand, and we&rsquo;ll have to continue our investigations.</p>

<p>So we did a 1 hour, fruit-powered, exploratory testing session. And we found only 3 bugs ! Indeed, we were paying back a bug debt. The question became</p>

<blockquote><p>When should payback be over ?</p></blockquote>

<p>A linear regression on the created vs resolved bug trend showed that we still had 15 more months to go !</p>

<p><a href="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/bug-trend.png"><img src="../imgs/2017-09-13-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/bug-trend-small.png" alt="Bug trend graph" /></a></p>

<h2>Target condition</h2>

<p>At that point, the target condition became obvious :</p>

<blockquote><p>We&rsquo;d like to be done with bugs within 3 months.</p></blockquote>

<p>Currently, around 1 pair (25% of the team) was busy fixing bugs. If we&rsquo;d manage to bring this down, we&rsquo;d have a 25% productivity boost.</p>

<p>This was post 3 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/">Next post</a> will be about PDCA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 2]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/"/>
    <updated>2017-09-12T09:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2</id>
    <content type="html"><![CDATA[<p>In my <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">previous post</a>, I described the productivity issue our team was facing. How retrospectives did not work, and how I started looking at the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>.</p>

<p>We had gone through the first phase of the improvement kata : set the end goal.</p>

<blockquote><p>Generating enough profit for the business while sticking to a sustainable pace.</p></blockquote>

<p>Time to start the second phase : Understand.</p>

<p><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/question-light.jpeg" alt="Drawing of a question mark transforming into a light bulb" /></p>

<h2>Understand</h2>

<p>Where we really slower ? Or was it an illusion ?</p>

<p>When trying to understand, you have to start with the data you have. You continue digging until you get a deeper understanding of the situation.</p>

<h3>Velocity</h3>

<p>We started with available data : story points and velocity. For sure this is a pretty bad measure of productivity. (Note : we should never use velocity for performance appraisal) In our case though, it felt like a good starting proxy measure.</p>

<p>Here is our velocity curve over 2 years.</p>

<p><a href="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity.jpg"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-small.jpg" alt="Velocity graph" /></a></p>

<p>It&rsquo;s obvious that something changed. There are 2 parts to this graph. The velocity dropped between sprint 54 and 16.01. That&rsquo;s a clue that our gut feeling was not completely wrong. Our productivity did change.</p>

<h3>Man days</h3>

<p>Our first hypothesis was that team members turnover was the cause. As with any team, some people came, and some people left. Let&rsquo;s superpose the man days and velocity curves.</p>

<p><a href="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-vs-manpower.jpg"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/velocity-vs-manpower-small.jpg" alt="Velocity vs Manpower graph" /></a></p>

<p>That could only explain <em>part</em> of the problem !</p>

<p>We tried to fine tune the man days curve. We took people&rsquo;s involvement in tasks outside of programming into account. We used coefficients depending on the developers' experience. That did not provide a better explanation.</p>

<p>We had to find another explanation.</p>

<h3>Velocity computation</h3>

<p>As I said earlier, velocity is not a measure of productivity. Any change in the way we were computing velocity would impact this curve.</p>

<p>We had kept photos and Trello boards of our <a href="/trellospectives-remote-retrospectives-with-trello/">retrospectives meetings</a>. We searched them through for anything that could impact velocity. Here is what we found :</p>

<ul>
<li>At sprint 55, we decided to ditch the <a href="https://www.scrum.org/resources/deadly-disease-focus-factor">focus-factor</a></li>
<li>At sprint 61, we started to do regular <a href="/how-we-started-exploratory-testing/">exploratory-testing</a>. Exploratory testing discovers more bugs on top of user reported bugs. This made us spend more time on fixing bugs.</li>
<li>At sprint 62, as we opted for a <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">No Bug policy</a> we decided not to count story points for bugs</li>
</ul>


<blockquote><p>ðŸ’¡Keep Photos and Trello boards of Retrospectives as a log of your working agreements changes</p></blockquote>

<p>The timings almost perfectly matched what we had observed in the first place. The question that came to our minds was :</p>

<blockquote><p>Are we spending too much time on bugs ?</p></blockquote>

<h2>Halfway through understanding</h2>

<p>This is how we started to dig into our situation. It&rsquo;s a good time to give you a bit of feedback about how we felt at that point.</p>

<p>It was the first time we tried the improvement kata. More than that, we did not find any tutorial or guides about how to run it. The only instructions we had were theoretical descriptions or super concrete examples. We had to bridge the gap and come up with our own way.</p>

<p>To summarize, we felt a bit lost, we had gathered data from here and there, and we did not know what to look at next. On top of that, the quality of the data we were collecting was not great. We were wondering if we would get anything out of these investigations.</p>

<p><a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1483258282&amp;sr=8-1&amp;keywords=the+first+20+hours"><img src="../imgs/2017-09-12-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/the-first-20-hours.jpg" alt="The cover of the book 'The First 20 Hours'" /></a></p>

<p>It felt a bit like when I did the <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20 hours experiment to learn anything</a>. We did exactly what had worked with the learning experiment : we pushed through !</p>

<blockquote><p>ðŸ’¡If you feel lost when doing something for the first time. Push through !</p></blockquote>

<p>In <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">next week&rsquo;s post</a>, I&rsquo;ll continue to detail the &lsquo;understand&rsquo; phase. <a href="/blog/categories/first-improvement-kata-series/">The series</a> also gained an extra post, and will now be 5 posts long.</p>

<p>More to read next week.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 1]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/"/>
    <updated>2017-09-07T06:39:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1</id>
    <content type="html"><![CDATA[<p>If you are serious about continuous improvement, you should learn the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>.</p>

<p><a href="/blog/categories/retrospectives/">Retrospectives</a> are great to pick all the low hanging improvements. Once you&rsquo;ve caught up with the industry&rsquo;s best practices, retrospectives risk drying up. Untapped improvement opportunities likely still exist in your specific context. The improvement kata can find those.</p>

<p><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/low-hanging-fruits.jpeg" alt="Low and high hangling fruits on a tree" /></p>

<p>Here is how we applied the improvement kata to gain 25% of productivity in my previous team.</p>

<h2>The Situation</h2>

<p>Thanks to repeated retrospectives, the team had been improving for 2 years. Retrospectives seemed like a silver bullet. We would discuss the current problems, grasp an underlying cause and pick a best practice. Most of the time, that fixed the problem.</p>

<p>Sometimes it did not work though. Even if the issue came back in a later retrospective, it would not survive a second scrutiny. In the previous two years, the team had transformed the way it worked. It adopted TDD, incremental refactoring, pair programming, remote work, automated performance testing and many others.</p>

<p>Lately though, things did not work so well. The team was struggling with productivity issues. The team was not slowing down, but the scope and complexity of the product had grown. Features were not getting out of the door as fast as they used to. We had the habit of prioritizing improvements and bug fixes over features. That used to improve the flow enough to get more and more feature done. It did not seem to work anymore.</p>

<p>We tried to tackle the issue in retrospectives. We would change the way we prioritized features &hellip; To be later bogged down by bugs, technical debt or bad tools. We would discuss that in retrospective, and decide to change the priorities again &hellip; The loop went on and on a few times.</p>

<p>We were getting nowhere.</p>

<h2>The improvement kataÂ </h2>

<p>That&rsquo;s why I started to look for other ways to do continuous improvement. I stumbled upon a book called <a href="http://leanagilecamp.fr/">Small Lean Management Guide for Agile Teams</a>. The book is in french, but I wrote an <a href="/are-most-agile-teams-doing-continuous-improvement-the-silly-way/">english review</a>. I fell in love with the way the authors dug into the hard data of how they worked to understand and fix their problems.</p>

<p>To learn more about this technique, I read <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1504758735&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a>. It details two management tools used at Toyota : the improvement and coaching katas. Some say these are Toyota&rsquo;s special weapon. <em>The</em> thing that grew them from a small shop to the <a href="https://en.wikipedia.org/wiki/Automotive_industry">largest car manufacturer in the world</a>.</p>

<p>They are katas because they are routines. They must be re-execute many times. The <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> should improve the flow of work. The <a href="http://www-personal.umich.edu/~mrother/The_Coaching_Kata.html">coaching kata</a> helps someone (or yourself) to learn the improvement kata. Every time we go through the kata, we also understand it better.</p>

<p>Here is how the improvement kata goes :</p>

<ol>
<li>Describe your end goal</li>
<li>Understand where you stand about this goal by measuring facts and data</li>
<li>Based on your end goal and the current situation, define where you&rsquo;d like to be in 3 months or less</li>
<li>Use <a href="https://en.wikipedia.org/wiki/PDCA">Plan-Do-Check-Act</a> to experiment your way to this new situation

<ol>
<li>Plan an experiment</li>
<li>Do this experiment</li>
<li>Check the results of this experiment</li>
<li>Act on these results.Â 

<ul>
<li>Either drop the experiment and plan a new one (go back to &lsquo;Plan&rsquo;).</li>
<li>Or spread the change at a larger scale.</li>
</ul>
</li>
</ol>
</li>
</ol>


<p><a href="http://www-personal.umich.edu/~mrother/Homepage.html"><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/katapattern.jpg" alt="The Improvement Kata Pattern" /></a><div class="image-credits">Image from Mike Rother on <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata Website</a></div></p>

<p>The coaching kata is a way to coach someone into applying the improvement kata. The fun thing is that you can coach yourself ! The idea is to ask questions to the coachee to remind him of where he stands in his improvement kata.</p>

<p><a href="https://traccsolution.com/resources/coaching-infographic/"><img src="../imgs/2017-09-07-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/The-coaching-Kata-questions.jpg" alt="The Coaching Kata Questions" /></a></p>

<p>You&rsquo;ll find tons of details and material about these katas on the <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata website</a>.</p>

<h2>Our end goal</h2>

<p>That&rsquo;s how I started to apply the improvement kata in my team. I already had an idea of our end goal : to be more productive. To be more precise :</p>

<blockquote><p>Generating enough profit for the business while sticking to a sustainable pace.</p></blockquote>

<p>Retrospectives could not get us there. Would the improvement kata would succeed ?</p>

<p>This is the first part of a <a href="/blog/categories/first-improvement-kata-series/">series of 4 posts</a> relating our first use of the improvement kata. In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-2/">next post</a>, I&rsquo;ll explain what we did to understand the current situation.</p>
]]></content>
  </entry>
  
</feed>
