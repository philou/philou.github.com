<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: improvement kata | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/improvement-kata/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-03-29T06:16:24+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reducing the risks of large organization changes with the Mikado Method - part 2]]></title>
    <link href="http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/"/>
    <updated>2018-02-15T06:45:00+01:00</updated>
    <id>http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2</id>
    <content type="html"><![CDATA[<p>In the <a href="/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/">previous post</a>, I presented both large scale code and organization changes. I highlighted how they face similar difficulties of huge <a href="https://en.wikipedia.org/wiki/Work_in_process">Work In Progress</a>. Let&rsquo;s see how programmers deal with these problems.</p>

<p><img src="../imgs/2018-01-22-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/mind-your-wip.jpg" alt="A drawing of a wipe, with the text &quot;Mind your WIP&quot;" /></p>

<h2>The mikado method algorithm</h2>

<p>The <a href="https://mikadomethod.wordpress.com/">mikado method</a> is a programming technique to perform large <a href="https://en.wikipedia.org/wiki/Code_refactoring">code refactoring</a> one step at a time. It fixes the problematic situation we raised at the beginning of these posts. It enables developers to integrate their work with their teammates' continuously. It allows to build features and do the refactoring in parallel. Developers can also pause a mikado refactoring for a while if needed. On top of all this, it makes it easier for the full team to collaborate on the same refactoring.</p>

<blockquote><p>ðŸ’¡ Developers can pause a Mikado Method refactoring for a while if needed.</p></blockquote>

<p>Here is how it goes, but you can get a more detailed (and technical) description <a href="/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/">here</a>.</p>

<ol>
<li>Try to do the change you want</li>
<li>If it the tests pass, great, you&rsquo;re done</li>
<li>Otherwise, add a node for the change you wanted to do in your mikado graph</li>
<li>Write down the errors you faced</li>
<li>Revert your change</li>
<li>Recurse from 1 for every error</li>
<li>Draw a dependency arrow from the nodes of errors to the node of your initial change</li>
</ol>


<p>The catch is that developers should revert the work they could not finish to move on !</p>

<h2>How to apply it to an organization change</h2>

<p>In some way, the Mikado Method is very similar to the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>. The flow of the Improvement kata goes on like that :</p>

<ol>
<li>Determine a target condition</li>
<li>Try to work with the target condition in place</li>
<li>If it works, you&rsquo;re done</li>
<li>Otherwise, understand the main impediment, and revert to the old way of doing things</li>
<li>Work to remove the impediment</li>
<li>Start again from step 2</li>
</ol>


<p>Have a look at <a href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">these blog posts</a> for a more practical presentation of the improvement kata.</p>

<blockquote><p>ðŸ’¡ The Mikado Method and the Improvement Kata are more than similar.</p></blockquote>

<p>Granted, the Mikado method and the improvement kata look similar. They are in fact more than similar. The improvement kata does not prescribe how you should fix your impediments. What&rsquo;s not explicit is that we can use it recursively to fix impediments ! That makes it almost identical to the Mikado Method, but for organization instead of code. It won&rsquo;t be a surprise to know that some companies have used the improvement kata for that. For example, <a href="https://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726?pd_rd_wg=UdZ7n&amp;pd_rd_r=ea4d5912-c825-432a-b633-ac6822a475f4&amp;pd_rd_w=rQ1LZ&amp;ref_=pd_gw_psimh&amp;pf_rd_r=0N5KT332R3TD0DWK8FM0&amp;pf_rd_p=a1e8e44e-a6a8-5785-afd0-7f174f0d74f9">HP used it to drive its Laser Jet team transformation</a>. Others have already used the <a href="http://nomad8.com/organisational-change-with-mikado/">Mikado Method for organization transformation</a>.</p>

<p><a href="http://nomad8.com/organisational-change-with-mikado/"><img src="../imgs/2018-01-22-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/orga-mikado-post-its.jpg" alt="Extract of the orga mikado graph used by the Sandy Mamoli" /></a><div class="image-credits"><a href="http://nomad8.com/organisational-change-with-mikado/">Original Post</a> by Sandy Mamoli</div></p>

<p>Suppose your organization wants to move to full Continuous Integration(TODO). It could start by trying to integrate all their devs in 10 minutes on a small group of teams. If it works, fine, other large teams can try it as well. Let&rsquo;s see what to do if it fails though. Thanks to a <a href="/blog/categories/retrospectives/">retrospective</a> teams understand that they need to master CI themselves first. In this case, they could revert large scale CI, and have one of the teams try to do continuous integration. If it works, fine, another team can try it too. If it does not, they&rsquo;ll do a post-mortem of some sort to understand the root issue, and work on it. For example, here the main impediment could be a coupled architecture. The fun thing would be to apply the Mikado Method to do this refactoring ðŸ˜‰.</p>

<p>As with the Mikado Method, it is possible to draw an organization change Mikado graph along the way :</p>

<p><img src="../imgs/2018-01-22-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/sample-mikado.png" alt="The mikado graph for the story above" /></p>

<p>The graph is a living artifact. As we try and revert new experiments, we should expand and collapse the graph. This creates a global and shared view of the state of the change. Needless to say that this is great for collaboration.</p>

<h2>To be continued (again)</h2>

<p>This was part 2 of a <a href="/blog/categories/mikado-method-organization-series/">series on applying the Mikado Method to organization changes</a>. I&rsquo;ll end this series up with <a href="/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/">next post</a>, where I&rsquo;ll go through the pros and cons of the approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run your first improvement kata]]></title>
    <link href="http://philippe.bourgau.net/how-to-run-your-first-improvement-kata/"/>
    <updated>2017-10-03T06:37:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-run-your-first-improvement-kata</id>
    <content type="html"><![CDATA[<p>The <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> can solve problems that typical retrospectives fail to address. Although there is a halo of mystery around it, it&rsquo;s actually not that difficult to get started ! Here is a guide.</p>

<p>During the last few weeks, I&rsquo;ve been blogging about the improvement kata. You can read <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">the full story</a> of the first time we applied it in our team to gain 25% of productivity. If you are more interested by what it taught us, check this <a href="/lessons-learned-from-running-our-first-improvement-kata/">other post</a>.</p>

<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/cookbook.jpg" alt="Illustration of the improvement kata cookbook" /></p>

<h2>A 5 bullets summary</h2>

<p>Here is how I would explain what the improvement kata is :</p>

<ul>
<li>It&rsquo;s a continuous improvement technique. It relies on the scientific method to reach a target state.</li>
<li>It involves running experiments to know if your ideas are valid.</li>
<li>It can be long to run through, but it works on tricky situation where retrospectives don&rsquo;t.</li>
<li>It&rsquo;s 100% scientific. It uses data analysis and deduction. Not gut feeling and community best practices.</li>
<li>It can be part of the backlog, as any other item. It does not have to be a special event like retrospectives usually are.</li>
</ul>


<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/katapattern.jpg" alt="The main steps of the improvement kata" /></p>

<blockquote><p>ðŸ’¡ The improvement kata is 100% scientific, it uses data and deduction, not gut feeling and best practices</p></blockquote>

<h2>Let&rsquo;s give it a try !Â </h2>

<p>Is that enough for you to give it a try ? If so, great, read on ! If you need a bit more convincing, check the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">full story</a> of how we gained 25% of productivity with it.</p>

<p>Here is how to get started :</p>

<ol>
<li>The first thing is to read about it. If you have the time, <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1507005860&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a> is a good read. If you read French, the <a href="http://leanagilecamp.fr/index.html">&ldquo;Petit guide de management lean Ã  l'usage des Ã©quipes agiles&rdquo;</a> is a very pleasant and easy read. Finally if you want to cut it as short as possible, read the <a href="http://www-personal.umich.edu/~mrother/Homepage.html">Toyota Kata website</a>.</li>
<li>Pick a topic to try it on. Best candidates are clear and important problems. They might have emerged out of a retrospective for example. The scope should be small enough not to get lost.</li>
<li>Once you&rsquo;ve identified a topic, someone or a pair should take ownership of the kata. It&rsquo;s very unlikely that you&rsquo;ll be able to do the full kata in one afternoon. Understanding happens when the brain is at rest, and experiments take time. The owners need to dedicate some time to follow up on the kata.</li>
<li><p>Repeatedly ask yourself the <a href="http://www-personal.umich.edu/~mrother/The_Coaching_Kata.html">coaching kata</a> questions. This will help you and your pair to stay on track.</p>

<ol>
<li>What&rsquo;s the target condition ? (Describe what are you trying to achieve)</li>
<li>What&rsquo;s the actual condition ? (Describe your current situation)</li>
<li>What obstacles do you think are preventing you from reaching the target condition ? Which one are you addressing now ? (Describe the first problem you are about to try to fix)</li>
<li>What is your next step ? What do you expect ? (Describe the experiment you are going to run to test a solution)</li>
<li>When can we go and see what we have learned from taking that step ? (Run the experiment and learn from the results. Decide on a process change or repeat from an earlier step)</li>
</ol>
</li>
<li><p>Going through the kata in pair is a great way to spread the practice within the team. At some point you might be able to run many improvement katas in parallel ! Just make sure not to walk on each other&rsquo;s toes &hellip;</p></li>
</ol>


<p>Expect the first time to be a bit rocky, and to feel lost from time to time &hellip;</p>

<h2>Start today !</h2>

<p><img src="../imgs/2017-10-03-how-to-run-your-first-improvement-kata/rocket-launch.jpg" alt="The main steps of the improvement kata" /></p>

<p>Many practices and techniques seem daunting at first. Remember the first time you wrote a test before the code. The first time you tried to program using only immutable data structures. Or the time you wrote your first &ldquo;hello world&rdquo; program !</p>

<blockquote><p>ðŸ’¡ We can learn anything on our own by just doing it</p></blockquote>

<p>The improvement kata is no different. Give it a go, and you&rsquo;ll learn a powerful technique.</p>

<p><em>Whether you have already used the kata, you plan to use it or you have questions about it, I&rsquo;d like to hear from you ! Leave a comment.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons learned from running our first improvement kata]]></title>
    <link href="http://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata/"/>
    <updated>2017-09-29T06:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/lessons-learned-from-running-our-first-improvement-kata</id>
    <content type="html"><![CDATA[<p>During the past few weeks, I blogged the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">story of our first improvement kata</a>.</p>

<p>Doing this first <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> taught us many lessons. We re-discovered best practices of the software industry. We also learned more general things about the improvement kata itself.</p>

<p><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/lessons.jpg" alt="Drawing of books" /></p>

<h2>Rediscovered best practices</h2>

<p>As we went through the kata, we &lsquo;proved&rsquo; many known best practices. We did not have to <em>believe</em> them, we had data explaining that they worked. For example :</p>

<ul>
<li><a href="https://twitter.com/hashtag/noestimates">#NoEstimate</a> works. Back in <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">part 3</a> we saw that the story point and story count curves were very similar, almost identical</li>
<li><a href="https://www.infoq.com/articles/0-bugs-policy">#NoBug policy</a> was part of the solution to our problem</li>
<li>Doing more exploratory testing resulted in less bug fixing and increased our productivity. This proves principles like &ldquo;<a href="http://deming14points.com/quotes/build-quality-in/">Build quality in"</a> and <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">&ldquo;Quality is free&rdquo;</a></li>
</ul>


<p>We also pushed the #NoBug policy further than it is usually done. We defined a clear definition for bugs that anyone could use. Doing so, we removed the product owner (or on-site customer) from the picture. Very often, the PO is the only one who can sort stories from bugs out. We created what <a href="http://reinertsenassociates.com/category/tips/">Donald Reinertsen</a> calls a distributed rule in the <a href="https://www.amazon.fr/Principles-Product-Development-Flow-Generation/dp/1935401009">flow book</a>. It increased empowerment, removes bottlenecks, while ensuring alignment.</p>

<p><a href="https://www.amazon.fr/Principles-Product-Development-Flow-Generation/dp/1935401009"><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/flow-book-cover.jpg" alt="The 'Flow' book cover" /></a></p>

<h2>The improvement kata</h2>

<p>The first general lesson that we learned is that the improvement kata works !</p>

<p>At the beginning, we were very uneasy not to have perfect data. Remember how we had to resort to velocity as a proxy measure for productivity. In the end, that was not a severe problem. It still allowed us to understand what was going on.</p>

<p>We also learned that <a href="http://philippe.bourgau.net/blog/categories/retrospectives/">retrospective</a> is not the only road to continuous improvement. In fact, the improvement kata and retrospectives are very different :</p>

<ul>
<li>The time frame is different. A retrospective lasts for 1 or 2 hours and yield immediate results. An improvement kata is a background task that could take months in theory !</li>
<li>But the improvement kata also digs a lot deeper in the topic and brings true understanding. In our case, it fixed a problem that retrospectives where failing to address.</li>
<li>Ownership is also different. Retrospectives are a team activity. The improvement kata needs one or a few owners. It would be very difficult to align everyone on the same path of thoughts if we did it as a group activity.</li>
<li>Being a team activity, retrospectives have built-in alignment. The conclusions of the improvement kata must explained and agreed for a team to act on them. A good practice is to have regular (short) team meetings to share the current state of an improvement kata.</li>
<li>As the improvement kata is a more individual activity, it is more remote friendly. Team members can run the kata on their side, sharing everything through a wiki, or a blog for example.</li>
</ul>


<p>Keep in mind that this was our first try at the kata. Some of our difficulties might disappear with a bit of practice !</p>

<h2>What&rsquo;s next ?</h2>

<h3>Hybrid continuous improvement</h3>

<p>I clarified the differences between the improvement kata and retrospectives. That&rsquo;s not the end of it. I&rsquo;m sure a mixed format could be very interesting ! Start with a retrospective to collect the team&rsquo;s problems, and vote on the more important. Add a corresponding improvement kata task to the backlog. Someone would then handle this improvement task, sharing with the team along the way.</p>

<p>This might be a great opportunity to reduce meeting time with shorter retrospectives.</p>

<blockquote><p>ðŸ’¡ Reduce meeting time with mixed retrospective &amp; improvement kata</p></blockquote>

<h3>Data science for software</h3>

<p>Going through this improvement kata made me realize something else. It is very difficult to get quality data to investigate. We had to resort to what was available all the way.</p>

<p>What&rsquo;s striking is that we use software tool for all our work ! These tools have logs and could record usage data somewhere. Imagine all we could learn by mining all this data ! Our IDEs, CI servers, quality monitors, test tools, version control and project management tools should store everything we do at the same place !</p>

<p>With all this data, could we improve our estimations ? Could we find creative ways to be more productive ? Could we estimate the speed up that fixing some technical debt would bring ?</p>

<blockquote><p>ðŸ’¡ What are we waiting to apply data science to the development process ?</p></blockquote>

<p>As the saying goes, &ldquo;The cobbler&rsquo;s children go barefoot&rdquo;. We are building such systems for others, but not for ourselves.</p>

<p>Hopefully, new tools like <a href="https://codescene.io/">CodeScene</a> are emerging to fill this gap. You can learn more about CodeScene on their <a href="https://codescene.io/">website</a>, or from the <a href="https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384">founder&rsquo;s book</a>. It analyses the version control history to find hot spots and other things in your code.</p>

<p><a href="https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384"><img src="../imgs/2017-09-29-lessons-learned-from-running-our-first-improvement-kata/code-as-crime-scene.jpg" alt="The 'Code as a Crime Scene' book cover" /></a></p>

<p>While we keep dreaming of such tool, I&rsquo;ll continue to blog. Next week, I will write a short guide of <a href="/how-to-run-your-first-improvement-kata/">how to run your first improvement kata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 5]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/"/>
    <updated>2017-09-27T07:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5</id>
    <content type="html"><![CDATA[<p>This is the fifth (and last) post of a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/">previous post</a>, we decided to adjust our definition of a bug to limit the time lost on nice-to-have bug fixes.</p>

<p>It would take a while to know if adjusting the definition of a bug would help us or not. At the same time, we knew it would not help us to reduce the number of bugs we escaped to other teams.</p>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/success-banner.jpg" alt="A 'SUCCESS' banner in the wind" /></p>

<h2>Idea 3 : More exploratory testing</h2>

<p>We decided to push on this matter as well. This means that we would be running two <a href="https://en.wikipedia.org/wiki/PDCA">PDCAs (Plan-Do-Check-Act)</a> at the same time. This is not the improvement kata procedure by the book. That could have been an error from our side, as first time users of the kata. Or maybe it&rsquo;s a pragmatic habit to adapt the kata to real life &hellip; I guess we&rsquo;ll know better as we apply the kata more often. The danger is that the different experiments can conflict with each other. When measuring the results, it becomes difficult to link observations with experiments. Anyway, back to our own situation, as you&rsquo;ll see, it ended up well for us.</p>

<p>The first thing was to know a bit more about our bugs. Checking the recently closed bugs yielded suspicions about a recent features. Analyzing further proved our gut feeling.</p>

<h6>Curve of how bugs were fixed on the last 2 months</h6>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/fixed-bugs.png" alt="Curve of how bugs were fixed on last 2 months" /></p>

<h6>Curve of the origin of bugs on the last 2 months</h6>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/kind-of-bugs.png" alt="Curve of the origin of bugs on the last 2 months" /></p>

<p>Ignoring the Christmas drop at the middle of the curve, we concluded 2 things from these graphs :</p>

<ul>
<li>We were leaking bugs to the product</li>
<li>Bugs mostly came from newly added features</li>
</ul>


<blockquote><p>Despite all our automated tests and regular Â exploratory testing, we were leaking bugs.</p></blockquote>

<p>We decided to do more exploratory testing for a while ! We were already doing exploratory testing at the end of every story. We added an extra 1 hour team session of exploratory testing every sprint.</p>

<h2>Do, Check &amp; Act</h2>

<p>We used these new conventions for a few weeks. We did more exploratory testing, and would be more strict about what a bug was. We stuck to our prioritization : first improvements, then bugs and only after, stories.</p>

<p>After a few weeks of that, we were able to update our bug trend and do a linear regression on it again. Here were the results :</p>

<p><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/final-bug-trend.png" alt="Curve of the origin of bugs on the last 2 months" /></p>

<p>Hurray ! As you can see, we were to be done with bugs around April 2017, which was 3 months away at that time.</p>

<blockquote><p>ðŸ’¡ Quality is free, but only for those willing to pay for it ! [<a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> in <a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=9SX9Y3RG61NB7N9VJ6KS&amp;dpID=61lAwzXfQiL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=detail">Peopleware</a>]</p></blockquote>

<p><a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=9SX9Y3RG61NB7N9VJ6KS&amp;dpID=61lAwzXfQiL&amp;preST=_SX218_BO1,204,203,200_QL40_&amp;dpSrc=detail"><img src="../imgs/2017-09-27-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/peopleware.jpg" alt="Cover of the 'Peopleware' book by Tom DeMarco &amp; Timothy Lister" /></a></p>

<p>We confidently adopted these practices as part of our working agreements. This brought our first improvement kata to its end.</p>

<blockquote><p>ðŸ’¡ The improvement kata not only brings improvements, it also teaches you why they work.</p></blockquote>

<h2>3 months later</h2>

<p>As you know, April 2017 is long gone. I can now give you a more up to date report of the actual effects on the team&rsquo;s daily work.Â </p>

<p>First, the backlog does not contain bugs anymore. We payed the bug debt back. Second, we still discover some bugs from time to time, but a lot less than we used to. To summarize, there is now a pair of developers (25%) of the team that can work on user stories instead of fixing bugs.</p>

<p>As we are still fixing bugs as they appear, the 25% productivity gain claim might be an overstatement, but 20% is not. At the same time, less bugs are now escaping. This means that the whole organization is saving on interruptions and rework. 25% might not be such a bold claim after all !</p>

<h2>This is it !</h2>

<p>This was post 5 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. I&rsquo;m not completely done writing about this improvement kata though. In the coming weeks, I&rsquo;ll post about the <a href="/lessons-learned-from-running-our-first-improvement-kata/">lessons learned</a> and <a href="/how-to-run-your-first-improvement-kata/">how to start your own improvement kata</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we used the improvement kata to gain 25% of productivity - Part 4]]></title>
    <link href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/"/>
    <updated>2017-09-22T06:40:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4</id>
    <content type="html"><![CDATA[<p>This is the fourth post on a <a href="/blog/categories/first-improvement-kata-series/">series of 5 about the improvement kata</a>. If you haven&rsquo;t read the beginning of the story, I recommend you start from <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">part 1</a>.</p>

<p>We ended the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">previous post</a> with a target condition :</p>

<blockquote><p>We&rsquo;d like to be done with bugs within 3 months.</p></blockquote>

<p>Currently, 1 pair (one quarter of the team) is constantly busy fixing bugs. If we manage to find a way to spend less time on bugs, we can expect a productivity increase of about 25%.</p>

<p><img src="../imgs/2017-09-22-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/x-bugs.jpg" alt="Anti bug insecticide can" /></p>

<p>Next step in the improvement kata is to run <a href="https://en.wikipedia.org/wiki/PDCA">Plan-Do-Check-Act (PDCA)</a> experiments. Before you run experiments, you need ideas !</p>

<h2>Idea 1 : Stop exploratory testing</h2>

<p>We&rsquo;d like to spend less time fixing bugs. At the same time, we know that we started to spend more time on bug fixing when we <a href="/how-we-started-exploratory-testing/">started exploratory testing</a>.</p>

<p>We thought that one easy way to do less bug fixing was to stop exploratory testing altogether ! We listed the pros and the cons of exploratory testing.</p>

<h3>The obvious cons</h3>

<ul>
<li>It discovers bugs. Fixing these bugs costs time. We&rsquo;d rather spend this time delivering new features</li>
</ul>


<h3>But the pros are many</h3>

<ul>
<li>It helps us discover technical debt and improve the quality of our code, which makes us faster in the long run. Clean code has less bugs. When we discover many bugs related to a particular region of the code, it means we should refactor it.</li>
<li>It speeds up integration with other teams' work in many ways :

<ul>
<li>It saves other teams from debugging their time away trying to use broken things</li>
<li>Fixing bugs is sometimes just a matter of providing clear &lsquo;not supported yet&rsquo; errors. Doing this saves a tremendous amount of time to other teams.</li>
<li>Avoids blocking other teams as they wait for your bug fixes</li>
<li>Reduces interruptions from bug reports and fixes bouncing between teams.</li>
<li>By reducing unplanned rework, it makes any commitment you do more likely</li>
</ul>
</li>
</ul>


<p>In the light of all this, stoping exploratory testing did not seem like a great idea. We had to find something else.</p>

<blockquote><p>ðŸ’¡Saving time by not fixing bugs might not be a great idea</p></blockquote>

<p><img src="../imgs/2017-09-22-how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-4/exploration.jpg" alt="Exploration map with a red cross" /></p>

<h2>Idea 2 : Review what a bug is</h2>

<p>We needed to find a middle ground between where we were and stoping exploratory testing. We wanted :</p>

<ul>
<li>not to let bugs escape</li>
<li>raise clean errors on things that are not yet supported</li>
<li>prevent scope creep from bug reports</li>
</ul>


<p>A few months ago, when we decided to prioritize bugs before features, we had defined a definition for bugs. Here is what it looked like. Something is a bug if any one of these is true :</p>

<ol>
<li>It used to work</li>
<li>It corrupts data</li>
<li>It silently returns wrong results</li>
<li>It returns an internal error (like an internal exception stack trace)</li>
</ol>


<p>We examined this definition, discussed, and decided to dump the first clause. Our logic was that it was very difficult to know if something had already been working. The best thing we could refer to was our extensive suite of tests. If we discover that something is not working, it is very likely that it has never been. If it had been working, it means there was a hole in our test suite.</p>

<blockquote><p>ðŸ’¡A hole in a test suite is a bug to fix</p></blockquote>

<p>We decided to test this new bug definition for a while.</p>

<h2>Not there yet !</h2>

<p>We&rsquo;re getting closer to the end, but you&rsquo;re not done with PDCA yet.</p>

<p>This was post 4 in a <a href="/blog/categories/first-improvement-kata-series/">series of 5</a> about the improvement kata. In the <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-5/">next and last post</a> of this story you&rsquo;ll learn how we ended the PDCAs for great results.</p>
]]></content>
  </entry>
  
</feed>
