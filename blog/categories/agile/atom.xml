<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-08-18T09:45:16+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Remote energizer tips that will make your remote retrospectives rock]]></title>
    <link href="http://philippe.bourgau.net/5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/"/>
    <updated>2017-08-18T09:11:00+02:00</updated>
    <id>http://philippe.bourgau.net/5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock</id>
    <content type="html"><![CDATA[<p>Do you remember how people who are not used to the phone tend to shout in it, for the message to get far ? Read on and I&rsquo;ll explain how this silly habit will make your remote retrospectives great !</p>

<p>A typical retrospective starts with an energizing activity, or <a href="http://www.funretrospectives.com/category/energizer/">energizer</a>. It&rsquo;s important for two reasons. First, people who don&rsquo;t speak during the first 5 minutes of a meeting are more likely to remain silent until the end. Second, getting everyone to do an energizing and fun activity sets the tone for a peaceful and creative time.</p>

<p><img src="../imgs/2017-08-18-5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/remote-plus-retro.jpg" alt="Remote control + magnifying glass" /></p>

<h2>Our experiences with remote energizers</h2>

<p>When we started to do retrospectives at work, all the team was co located in Paris. There are tons of activities available on the internet to run effective energizers. We could do games like Fizz Buzz, or drawing based activities like <a href="http://www.funretrospectives.com/collaborative-face-drawing/">face drawing</a> and <a href="http://www.funretrospectives.com/visual-phone/">visual phone</a>. It was easy and fun.</p>

<p>A few years ago, <a href="https://ahmadatwi.me/">Ahmad Atwi</a> joined our team from Beirut. Our catalog of energizer shrank to a few activities that we could run remotely. On top of that, going through the remote medium made it more challenging for energizers to &hellip; energize ! With time and trial, we managed to understand what works and how to pick the right energizer for a remote team.</p>

<h2>Principles for remote energizers</h2>

<p>We have an Agile <a href="https://en.wikipedia.org/wiki/Special_Interest_Group">Special Interest Group</a> at <a href="https://www.murex.com/">Murex</a>, where volunteers meet to share things they find interesting. A few weeks ago, during one of these sessions, we discussed remote energizers in a <a href="http://leancoffee.org/">Lean Coffee</a>.</p>

<p>Here are the points we came up with.</p>

<ul>
<li>Question activities work great through <a href="https://trello.com/agileretrospectives">Trello</a>. <a href="https://www.amazon.com/gp/product/0977616649/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0977616649&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=2b51890b8e8909b6f2223ca69ec3b26f">Agile Retrospectives, making good teams great</a> details such a Check-In activity. The typical questions sound like &ldquo;Coming into this retrospective, if you were a car, what kind of car would you be ?&rdquo;</li>
</ul>


<p><a href="https://www.amazon.com/gp/product/0977616649/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0977616649&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=2b51890b8e8909b6f2223ca69ec3b26f"><img src="../imgs/2017-08-18-5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/agile-retros.jpg" alt="The Agile Retrospectives, making good teams great book cover" /></a></p>

<ul>
<li>If they are enough teammates at every place, energizers that play in small groups will work well. For example, it would be easy to organize a <a href="http://www.funretrospectives.com/the-balloon-battle/">balloon battle</a> or a <a href="http://www.funretrospectives.com/back-to-back/">back to back</a>.</li>
</ul>


<p><a href="https://martinfowler.com/articles/remote-or-co-located.html"><img src="../imgs/2017-08-18-5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/multi-site-team.png" alt="The Agile Retrospectives, making good teams great book cover" /></a></p>

<ul>
<li>It&rsquo;s also easy to use variations on an activity that proved effective. For example, explore new kinds of questions. It&rsquo;s even ok to repeat verbatim an activity from time to time.</li>
<li>Replace energizing by team building. Team building is particularly important for remote teams. Instead of engaging activities, it&rsquo;s ok to have everyone share a personal anecdote. By knowing each other better, the team can build trust. For example, you could introduce such an activity with : &ldquo;What book would you bring on a desert island ? Why ?&rdquo;</li>
<li>One last thing we came up with my colleague <a href="https://twitter.com/mc_moe">Morgan Kobeissi</a> to energize a remote meeting is to YELL. The idea is to ask everyone to answer a question while standing and yelling. A question could be &ldquo;How long have you been working and what companies did you work for ?&rdquo;</li>
</ul>


<p><img src="../imgs/2017-08-18-5-remote-energizer-tips-that-will-make-your-remote-retrospectives-rock/yell.jpg" alt="Someone yelling in a kid's 'can-phone'" /></p>

<p>Remote work is here to stay. More and more teams are facing similar difficulties. We need to invent new work practices. If you discovered new ways to run remote energizer, please share them with a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't stick to TDD's Red-Green-Refactor loop to the letter]]></title>
    <link href="http://philippe.bourgau.net/dont-stick-to-tdds-red-green-refactor-loop-to-the-letter/"/>
    <updated>2017-06-28T15:52:00+02:00</updated>
    <id>http://philippe.bourgau.net/dont-stick-to-tdds-red-green-refactor-loop-to-the-letter</id>
    <content type="html"><![CDATA[<p>As long as you are writing your tests before your code and doing regular refactoring, you are doing <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> !</p>

<p>The Red &ndash; Green &ndash; Refactor loop is useful to introduce TDD to new developers. Different loops can be more effective in real world situation.</p>

<p>The Red &ndash; Green &ndash; Refactor loop is not a dogma !</p>

<p><a href="http://www.natpryce.com/"><img src="../imgs/2017-06-28-dont-stick-to-tdds-red-green-refactor-loop-to-the-letter/red-green-refactor.jpg" alt="The famous red, green, refactor TDD loop" /></a></p>

<h2>Refactor &ndash; Red &ndash; Green</h2>

<p>When I work on a story, I very often keep a TODO list next to my desk. I use it to keep track of the next steps, the edge cases to test, the code smells and refactorings to do.</p>

<p>When I get to the end of the story, all that remains of this list is a few refactorings. Very often, I don&rsquo;t do them !</p>

<p>With the feature working, doing these refactorings feels like violation of <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a>. Next time we&rsquo;ll have to work on this part of the code, we&rsquo;ll have a story to serve as guide to which refactorings to do.</p>

<p>The same thing is effective at the unit test scale. It&rsquo;s easier to refactor when you know the test you want to add. Refactor to make this test easy to write !</p>

<p>Here is an example with <a href="https://en.wikipedia.org/wiki/Fizz_buzz">Fizz Buzz</a></p>

<p>```java
static int fizzBuzz(int number) {
   return number;
}</p>

<p>@Test public void
it_is_1_for_1() {
   assertThat(fizzBuzz(1)).isEqualTo(1);
}</p>

<p>@Test public void
it_is_2_for_2() {
   assertThat(fizzBuzz(2)).isEqualTo(2);
}
```</p>

<p>Here is the test I&rsquo;d like to add. </p>

<p><code>java
@Test public void
it_is_Fizz_for_3() {
   assertThat(fizzBuzz(3)).isEqualTo("Fizz");
}
</code></p>

<p>Unfortunately, fizzBuzz needs to return a String instead of an integer for it to compile. That&rsquo;s when I would refactor before adding the new test.</p>

<p>```java
static String fizzBuzz(int number) {
   return Integer.toString(number);
}</p>

<p>@Test public void
it_is_1_for_1() {
   assertThat(fizzBuzz(1)).isEqualTo(&ldquo;1&rdquo;);
}</p>

<p>@Test public void
it_is_2_for_2() {
   assertThat(fizzBuzz(2)).isEqualTo(&ldquo;2&rdquo;);
}
```</p>

<p>In the end, this loop is very like the classic TDD loop :</p>

<p><code>
red-green-refactor-red-green-refactor-red-green-refactor.............
..........refactor-red-green-refactor-red-green-refactor-red-green...
</code></p>

<p>A bit more YAGNI, that&rsquo;s all.</p>

<h2>Red &ndash; Better Red &ndash; Green &ndash; Refactor</h2>

<p>A few weeks ago, <a href="/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/">I wrote about error messages in unit tests</a>. To summarize, extra work on error messages reduces the testing feedback loop.</p>

<p>We can translate this focus on error messages into an extra TDD step. Whatever the TDD loop you are using, you can add this step after the Red step.</p>

<h2><del>Red</del> &ndash; Green &ndash; Refactor &ndash; Red &ndash; Green</h2>

<p>Sometimes, it makes sense to refactor before fixing the test. The idea is to rely on the existing tests to prepare the code to fix the new test in one line.</p>

<p>Let&rsquo;s take our Fizz Buzz example again. Imagine we finished the kata, when we decide to tweak the rules and try Fizz Buzz Bang. We should now print Bang on multiples of 7.</p>

<p>Here is our starting point :</p>

<p>```java
static String fizzBuzz(int number) {
   if (multipleOf(number, 3)) {
      return &ldquo;Fizz&rdquo;;
   }
   if (multipleOf(number, 5)) {
      return &ldquo;Buzz&rdquo;;
   }
   if (multipleOf(number, 3*5)) {
      return &ldquo;FizzBuzz&rdquo;;
   }   
   return Integer.toString(number);
}</p>

<p>&hellip;</p>

<p>@Test public void
it_is_Bang_for_7() {
   assertThat(fizzBuzz(7)).isEqualTo(&ldquo;Bang&rdquo;);
}
```</p>

<p>I could go through all the hoops, 7, 14, then 3<em>7, 5</em>7 and finally 3<em>5</em>7 &hellip; By now, I should know the music though !</p>

<p>What I would do in this case is :</p>

<ul>
<li>first to comment the new failing test to get back to green</li>
<li>refactor the code to prepare for the new code</li>
<li>uncomment the failing test</li>
<li>fix it</li>
</ul>


<p>In our example, here is the refactoring I would do</p>

<p>```java
static String fizzBuzz(int number) {
   String result = &ldquo;&rdquo;;
   result += multipleWord(number, 3, &ldquo;Fizz&rdquo;);
   result += multipleWord(number, 5, &ldquo;Buzz&rdquo;);
   if (result.isEmpty()) {
      result = Integer.toString(number);
   }
   return result;
}</p>

<p>private static String multipleWord(int number, int multiple, String word) {
   if (multipleOf(number, multiple)) {
      return word;
   }
   return &ldquo;&rdquo;;
}</p>

<p>&hellip;</p>

<p>//@Test public void
//it_is_Bang_for_7() {
//   assertThat(fizzBuzz(7)).isEqualTo(&ldquo;Bang&rdquo;);
//}
```</p>

<p>From there, fixing the test is dead simple.</p>

<p>In practice I find this loop very useful. At local scale as we saw but it&rsquo;s also a great way to refactor your architecture at larger scale.</p>

<p>One downsize is that if you are not careful, it might lead to over-engineering. Be warned, keep an eye on that !</p>

<p>Last caveat : not all TDD interviewers like this technique &hellip;</p>

<h2>Don&rsquo;t obsess</h2>

<p>It&rsquo;s not because you are not following the Red Green Refactor loop to the letter that you are not doing TDD.</p>

<p>An interesting point is that these variations to the TDD loop are combinable ! Experienced TDD practitioners can jump from one to the other without even noticing.</p>

<p><a href="https://blog.acolyer.org/2017/06/13/a-dissection-of-the-test-driven-development-process-does-it-really-matter-to-test-first-or-test-last/">This paper</a> argues that as long as you write the tests along (before or after) the code, you get the same benefit. That&rsquo;s not going to make me stop writing my tests first, but it is interesting. That would mean that even a Code &ndash; Test &ndash; Refactor loop would be ok if it is fast enough !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Most Scrum teams are not agile]]></title>
    <link href="http://philippe.bourgau.net/most-scrum-teams-are-not-agile/"/>
    <updated>2017-05-09T06:36:00+02:00</updated>
    <id>http://philippe.bourgau.net/most-scrum-teams-are-not-agile</id>
    <content type="html"><![CDATA[<p>Being agile is about adapting to change and continuously improving. I&rsquo;ve seen (and been) in too many teams blindly following Scrum (<a href="/how-to-kill-scrum-zombies/">Scrum Zombies</a>) without figuring out how to continuous improve. The most obvious symptom is a boring (or no) retrospective.</p>

<p>Usually, it did not start that way, people had good intentions, and tried to follow the Scrum cookbook. Unfortunately, without any guidance or extreme perseverance, it is plain too easy to mess up the retrospective. If no concrete actions are scheduled at the end of the retro, if the same problems keep coming up at every retro, or if no problems at all are raised during the retro : your Scrum is somehow broken !</p>

<p>One of the promises of Scrum is to keep code quality high, in order to be able to adapt to late changes. Without a good retro to update the coding standards, the working agreements, or to spot and organize large scale refactoring, this will not happen.</p>

<p>One of the agile principle <a href="http://agilemanifesto.org/principles.html">explicitly states</a> the need for motivated team members. In <a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1494561757&amp;sr=8-1&amp;keywords=pink+drive">Drive</a> Daniel Pink explains that one of the ingredient for motivation is autonomy. As a way to fix recurring problems, effective retrospectives will create autonomy, and enable motivation. Dysfunctional retros will slowly kill both &hellip;</p>

<p>Although continuous improvement at all levels is one of the most important element in your process, it needs a bit of practice to setup right. After trying different approach in different teams, I compiled a list of the things that worked for me :</p>

<p><a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1494561757&amp;sr=8-1&amp;keywords=pink+drive"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/drive.jpg" alt="The cover of the Daniel Pink's &quot;Drive&quot; book" /></a></p>

<h2>How to do successful retrospectives</h2>

<h3>Start !</h3>

<p>Sounds obvious ! The first step is to schedule a recurring meeting and invite all the team. Someone should take care of facilitating. If you want to improve things, do this yourself at the beginning ! Once the practice is in place and everyone sees the benefits, you&rsquo;ll be able to get some help.</p>

<p><a href="/how-we-introduced-efficient-agile-retrospectives/">Here</a> is a crash-course about how to organize and drive your first retrospective. If your team is distributed, you&rsquo;ll need a slightly different setup. In my previous team, we had success using <a href="https://trello.com">Trello</a>, you can read more about it <a href="/trellospectives-remote-retrospectives-with-trello/">here</a>.</p>

<p><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/just-do-it.jpg" alt="Just Do It picture" /></p>

<h3>Make sure everyone talks</h3>

<p>Retros should not be &ldquo;just-another-boring-meeting&rdquo; ! People should be excited to be there and to solve their recurring problems. I&rsquo;ve seen retros where no one would speak, as if there was absolutely nothing to improve ! I&rsquo;ve also been in retros where people raised collaboration issues, and came up with drastic improvements to the way they work, like adopting pair-programming for example.</p>

<p>There can be many reason why people don&rsquo;t speak : habit, organizational culture &hellip; Whatever the cause, if you show them the path, if you demonstrate that retro work and that it is safe to speak, you&rsquo;ll get them to participate.</p>

<p>Here are a few tricks to guide a team there :</p>

<ul>
<li>It is said that if someone does not speak in the first 5 minutes of a meeting, he&rsquo;ll remain silent for the rest. That&rsquo;s why <a href="www.funretrospectives.com/category/energizer/">energizers</a> work. They force everyone to participate to a Fun activity right from the start. <a href="http://www.funretrospectives.com/">Fun Retrospective</a> contains a lot of engaging energizers.</li>
<li>Bring food ! Having food at work was one of Kent Beck&rsquo;s main advises in <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_2?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1494561932&amp;sr=1-2&amp;keywords=extreme+programming+explained+embrace+change">eXtreme Programming, Embrace Change</a>. Food is social and create a more relaxed and safer atmosphere.</li>
<li>Before you start the meeting, it might be useful to repeat the <a href="http://www.retrospectives.com/pages/retroPrimeDirective.html">Retrospective&rsquo;s Prime Directive</a>.</li>
</ul>


<blockquote><p>Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.</p></blockquote>

<ul>
<li>As the animator, you should make sure the discussions don&rsquo;t degenerate into some kind of trolling or blaming. If it&rsquo;s the case, remind that this is not the way the retro is meant to work. In worst case, give a 5 minutes break to everyone to calm down.</li>
<li>If needed, have a private discussion with people outside the retro to make sure that they understand the &ldquo;Blame the process, not the people&rdquo; principle of the retro well enough.</li>
</ul>


<p>Dealing with &ldquo;bad&rdquo; behavior in retros is a wide topic which I am only scratching the surface here. I guess I could write a full post about it.</p>

<p><a href="http://www.funretrospectives.com/"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/fun-retro.jpeg" alt="The cover of the &quot;Fun Retrospectives&quot; book" /></a></p>

<h3>Get out of with actionable tasks</h3>

<p>If you want a sure way to screw up your retros here it is : end the first one with no actionable things to do ! People will learn that it&rsquo;s a useless pscho-blabla meeting for agile softies.</p>

<p>This should be the absolute priority during the first retros. There are various kind of actionable tasks. Teams can adopt new conventions, decide to tackle some specific refactoring, or build a small new tool &hellip;</p>

<p>Actionable items should be small enough to be completed in one sprint. This is fine for refactoring a class, adding a <a href="https://www.sonarqube.org/">SonarQube</a> rule or asking for something from another team. What about larger tasks ? Suppose you just identified a large refactoring to do, how do you get started ? I know 2 strategies for that :</p>

<ul>
<li>Only identify the first step of what you want to start. At least, that&rsquo;s enough to get started and learn what to do later.</li>
<li>Agree on a <a href="https://mikadomethod.wordpress.com/">Mikado</a> discovery task to understand what needs to be done. Code is not the only thing that can be refactored with the Mikado method ! People have used it to transform <a href="http://nomad8.com/organisational-change-with-mikado/">organizations</a> !</li>
</ul>


<p>It&rsquo;s also a good habit to book the rooms for extra time after the official retro time. Nothing is as frustrating as being interrupted while investigating a promising improvement !</p>

<p>Finally, I think it&rsquo;s a good practice to review what happened of the improvements that were selected during last retro. It stresses the importance of doing what was scheduled in retrospective. It also gives a chance to investigate the reason why they were not done !</p>

<p><a href="https://www.amazon.com/Mikado-Method-Ola-Ellnestam/dp/1617291218/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1494562230&amp;sr=1-1&amp;keywords=mikado+method"><img src="../imgs/2017-05-09-most-scrum-teams-are-not-agile/mikado-method.jpg" alt="The cover of the &quot;Mikado Method&quot; book" /></a></p>

<h3>Put them in the sprint</h3>

<p>When actions are selected in the retro, you should add them to the coming sprint before it starts. Obviously, you&rsquo;ll add non business related items in your sprint backlog. Whatever you might have hear from agile zealots, do it ! Process improvements are fist class backlog citizens, just don&rsquo;t discuss them with your <a href="https://www.scrum.org/resources/blog/who-professional-scrum-product-owner">product owner</a>.</p>

<p>If you want a chance to deliver what you committed to in your sprint backlog, you&rsquo;ll need bandwidth for that ! They are many ways to do get that. Some teams use <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a>, others reserve an &lsquo;improvement day&rsquo; every sprint. My personal favorite (and the one we&rsquo;ve been doing at work) is to estimate the improvements in story points and reserve a fraction (ex 20%) of your story points for improvements.</p>

<p>You can try to negotiate your improvement ratio with your product owner &hellip; or you might also just set it yourself ! The team is responsible for the quality of its work. Better be sorry than ineffective. If you stick to your ratio and only work on the most important improvements, it&rsquo;s usually pretty easy to justify working on them. Plus if you manage to go under the radar for a few sprints, the results of the improvements should speak by themselves.</p>

<h3>Do them as soon as the sprint starts</h3>

<p>One last thing. Start to work on your improvements as soon as the sprint starts.</p>

<p>Improvements are similar to investments : you invest in process, tools or code in exchange for more value creation downstream. Once you&rsquo;ve decided to invest in something, what&rsquo;s the point of waiting 1 week ? Plus if you wait for later in the sprint, you run the risk of having unfinished improvements at the next retro, which might interfere when prioritizing new ones.</p>

<h2>Continuously improving teams</h2>

<p>Being part of a continuously improving team is easier to live than to describe. It feels like the future is bright. Once a team has mastered continuous improvement, people can be optimistic that they&rsquo;ll manage to adapt to change later down the road :</p>

<ul>
<li>They could switch gears and go full speed on a particular re-architecture</li>
<li>They could change their working agreements to adapt to new constraints</li>
<li>They could re-focus their efforts to handle a maintenance pike</li>
</ul>


<p>At the end of the day, bottom-up continuous improvement makes everyone&rsquo;s lives easier. Developers experience more autonomy while improving their productivity, they can do good work (which also means spending less time bug-fixing). Product owners learn that they can trust the team to do their best. Sponsors get more value for their money.</p>

<blockquote><p>Agile teams bend so they don&rsquo;t break !</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Straightforward Way to Scale to More Than 1 Scrum Team]]></title>
    <link href="http://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team/"/>
    <updated>2017-05-02T06:11:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team</id>
    <content type="html"><![CDATA[<p>How come the &ldquo;agile scaling&rdquo; landscape seems so daunting and bloated ?</p>

<p>Being agile should be about taking baby steps, doing things incrementally, starting with the simplest thing that could possibly work, slowly but continuously improving and trying out experiments.</p>

<p>Here&rsquo;s a real-life 2 hours change that kicks-off a very efficient organization for a few scrum teams.</p>

<p><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/dive-jump.jpg" alt="A guy jumping from a cliff into the sea" /><div class="image-credits">&ldquo;SafeLess&rdquo; : everything will go fine as long as you follow the principles</div></p>

<h2>A classic story</h2>

<p>Without doing anything about it, there are a lot of situations in where <a href="https://www.scrum.org/">Scrum</a> teams will collaborate inefficiently. For example if you are a developer within a medium or large company, suffering from communication loss between your team and others. Or you could be the owner of a software startup, needing to dramatically grow your dev team.</p>

<p>Whatever your situation, without good collaboration, the output of two Scrum teams is bound to be a fraction of the sum of their individual outputs.</p>

<h3>Our own situation</h3>

<p>We are a group of 4 teams that spun out of the R&amp;D division. We are working to build a highly reusable component for the future versions of <a href="http://www.murex.com">Murex</a>&rsquo;s main product.</p>

<p>While in R&amp;D, teams were aligned with technologies. Now shifting to a product focus, this layered team structure makes it hard for us to organize efficiently. To make things even more tricky, the component we are building is something huge by itself, and we really need to find a way to deliver it incrementally.</p>

<p>This tech-oriented, low synchronization organization of team backlog was really underdelivering. It was not rare to see stories jump from one team to another, as dependencies were discovered, taking one full sprint every time. Integrating end to end features often took a few sprints instead of a few hours &hellip;</p>

<p>Clearly, we needed to do something.</p>

<h3>The simplest things that could possibly work</h3>

<p>Hopefully, all teams were following Scrum. We first had a look at scaling frameworks, especially since other parts of the company are moving to <a href="http://www.scaledagileframework.com/">SAFe</a> but we found that they required too much budget and re-organization for our means (remember, we are just a few motivated developers).</p>

<p>While we were discussing what to do, someone had an idea that was simple, cheap and easy : &ldquo;Let&rsquo;s start by doing all our scrum ceremonies together&rdquo;.</p>

<p>We took the opportunity to add a &lsquo;product&rsquo; retro after the teams retros, and a &lsquo;product&rsquo; planning just before the teams plannings. We were hoping that regular higher level retros would bring continuous improvement at the product scale and bring in all the other practices required to make it work.</p>

<h3>The situation now</h3>

<p>It&rsquo;s now been 2 sprints that we have set this up. Every 2 weeks, Friday is what we call Demo-Day. It&rsquo;s a meeting heavy day where all the teams have their scrum ceremonies together</p>

<ul>
<li>Product demo</li>
<li>Team retros</li>
<li>Product retro</li>
<li>Product planning</li>
<li>Team planning</li>
</ul>


<p>Sure as hell, 1 day of meetings is exhausting, but unfortunately, it is not possible to efficiently grow a team without increasing the communication overhead. The good side of the coin is that it allows the teams to focus on building valuable stuff during the 9 other days.</p>

<p>Here are the first effects we have seen.</p>

<h4>Improved team spirit &amp; product focus</h4>

<p>The first noticeable effect was on team spirit. Having a demo and planning for the whole team showed to everyone that we are all pulling towards the same goal. It helped everyone to understand what his current role is in this greater scheme, but also ways to tweak our individual roles to bring more value.</p>

<h4>Visible problems</h4>

<p>The second good effect is that problems are now visible. If teams are not working in the same direction, it&rsquo;s visible at the demo and plannings. If a team delivers a story too late for another one to integrated it, it&rsquo;s again visible at demo and planning.</p>

<p>Another example : after the product planning, Product Managers had to admit that they had not managed to feed high value stories to all teams. They asked to do a pre-planning preparation meeting (which is a standard practice in <a href="https://less.works">LeSS</a> for example)</p>

<h4>Better continuous improvement</h4>

<p>During our first team retro in this setting, we directly stumbled upon on a recurring systemic issue that we never managed to do anything about. Instead of going around in circle on the topic again, we pushed it to the product retro. We worked on another team related problem, for which we scheduled improvement actions.</p>

<p>During the product retro, we raised our recurring unsolved issue. With everyone in place, people higher in the organization had the chance to understand its consequences. Eventually, we managed to come up with concrete actions.</p>

<h2>How to do it</h2>

<h3>Pre-requisites</h3>

<p>There&rsquo;s only one thing required : that the teams are already following Scrum. All the rest is easy stuff.</p>

<p>This technique is a bottom-up agile adoption. If you want to switch your whole company from waterfall to something more agile, take a look at <a href="http://www.scaledagileframework.com/">SAFe</a>.</p>

<h3>Organizing the Demo-Day</h3>

<p>Here is our planning for our demo day</p>

<table>
<thead>
<tr>
<th></th>
<th> Time </th>
<th> Meeting </th>
<th> Who </th>
<th> Details </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 10h &ndash; 12h </td>
<td> Demo </td>
<td> Everyone </td>
<td> 30m per team |</td>
</tr>
<tr>
<td></td>
<td> 12h30 &ndash; 14h </td>
<td> Team Retro </td>
<td> Teams </td>
<td> Every team has a different retro in a different room |</td>
</tr>
<tr>
<td></td>
<td> 14h30 &ndash; 15h30 </td>
<td> Product Retro </td>
<td> Scrum master, volunteers, and decision makers </td>
<td> Decision makers are important to be able to take actions |</td>
</tr>
<tr>
<td></td>
<td> 16h &ndash; 17h </td>
<td> Product Planning </td>
<td> Product managers or owners, volunteers </td>
<td> Product people present what they would like to see in the product in one sprint |</td>
</tr>
<tr>
<td></td>
<td> 17h &ndash; 18h </td>
<td> Team Planning </td>
<td> Teams </td>
<td> Every team has a different planning in a different room |</td>
</tr>
</tbody>
</table>


<p>We had to negotiate a bit with other people in the company to get enough rooms for all these meetings at the same time, but all in all, it did not take more than 2 hours.</p>

<p>All meetings are open to anyone, everyone should have the right to come to any of them !</p>

<p>Obviously, that&rsquo;s a long day ! It&rsquo;s also full of team energy. In 2 sprints, we found the following improvements :</p>

<h4>Food</h4>

<p>We pre-order food to be delivered at work, so that we can all eat together. Did you know that food makes retros more efficient ?</p>

<h4>Product Retro</h4>

<p>You might have noticed that the product retro is only 1 hour long. To make it all fit in one day, we had to cut some time here and there &hellip; In order to gain some time on the product retro, we decided to pre-fill its &lsquo;gather data&rsquo; phase.</p>

<p>During team retros, if people find product scale issues, they can directly save them for the product retro items (As we are distributed, we use <a href="/trellospectives-remote-retrospectives-with-trello/">Trello for retrospectives</a>). This way, when the product retro starts, the gather data phase is almost done, pre-filled with genuine points.</p>

<h4>Keep the energy high</h4>

<p>One full day of meetings is long. People get tired. In order to keep the energy high and the overall experience fun, we deliberately added some fun throughout the day :</p>

<ul>
<li><a href="http://www.funretrospectives.com/category/energizer/">Energizers</a> at beginning of meetings</li>
<li>Board games during breaks</li>
<li>End of day celebration outside the office. You could go out and have a drink all together for exemple.</li>
</ul>


<p><a href="https://www.amazon.com/Asmodee-TIM01USASM-Timeline/dp/B005N57CNU/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1493870547&amp;sr=8-1&amp;keywords=timeline"><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/timeline.jpg" alt="The Timeline board game box" /></a><div class="image-credits">We had fun playing this game between the meetings</div></p>

<h3>Preparing the product Backlog</h3>

<p>Depending on your situation, you might (or not) have a prioritized product backlog. My advice is to start with what you have.</p>

<p>If you are scaling your single team to 2, keep a unique backlog for both teams and create 2 feature teams. You&rsquo;ll be heading to the <a href="https://less.works">LeSS</a> organization, which you&rsquo;ll be able to refer to.</p>

<p>If you are applying this on existing scrum teams with their own backlogs, it might be easier to create a product backlog for the product managers. This is more akin to what <a href="http://www.scaledagileframework.com/">SAFe</a> suggests. It&rsquo;s not as straightforward as having a single backlog for everyone, you&rsquo;ll need to add some links between team and product stories to be able to track progress. Nevertheless, it provides visibility to everyone. As a side note, this is what we actually did.</p>

<p>Keep in mind that it&rsquo;s only a starting point anyway, product retrospectives might transform all this down the road any way.</p>

<h3>Start where you are now !</h3>

<p>The most important thing to do is to start ! There are always a ton of reasons why things are not ready and need more preparation. Remember the agile principles : integrate early and often, adapt, experiment &hellip; Here are few examples of bad reasons  not to start</p>

<ul>
<li>You cannot get all the good people in the room : start, invite them anyway, and send them a report of what has been decided without them. I cannot promise that&rsquo;s it&rsquo;s going to work at the end, but at least, it will create some discussions</li>
<li>The product backlog is not ready : start, and see what happens ! It will make it clear to everyone that product backlog is super important. People will organize to provide enough product features next sprint.</li>
<li>You need some other regular meetings for X, Y or Z. For example, <a href="https://www.agilealliance.org/glossary/scrum-of-scrums/">Scrum of Scrum</a> has daily SoS Meetings. Start anyway, if there&rsquo;s a need, people will ask for these extra meetings, which will save you some goodwill. You might also discover that you don&rsquo;t need these meetings at all and save some time !</li>
</ul>


<p>With a product retrospective every sprint, important issues will get addressed !</p>

<p><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/just-do-it.jpg" alt="Just Do It" /></p>

<h2>Does &lsquo;Agile Scaling&rsquo; even exist ?</h2>

<p>We did this on 4 teams. I have no ideas how it would work with more teams. We did not use any framework, even though we took ideas here and there. What we really did is to follow the agile principles, for example :</p>

<ul>
<li>KISS</li>
<li>Do the simplest thing that could work</li>
<li>Baby steps</li>
<li>Continuous improvement</li>
<li>Experiment</li>
</ul>


<p>Others have noticed similar things :</p>

<ul>
<li>LeSS : <a href="https://less.works/less/framework/introduction.html">&ldquo;Truly scaled scrum is Scrum scaled.&rdquo;</a></li>
<li>In the <a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1493870372&amp;sr=8-1&amp;keywords=the+nature+of+software+development">Nature of Software</a> <a href="http://ronjeffries.com/">Ron Jeffries</a> explains that for a company is agile if it just focuses on delivering software &ldquo;feature by feature&rdquo;</li>
<li>In <a href="https://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1493870423&amp;sr=1-1&amp;keywords=large+scale+hp">A Practical Approach to Large-Scale Agile Development [&hellip;]</a>, the authors explain that they did not use any frameworks at HP, but just followed the agile principles</li>
</ul>


<p>Agile scaling frameworks might be a good starting point (the Shu in <a href="https://fr.wikipedia.org/wiki/Shuhari">Shu-Ha-Ri</a>), but only as long as the agile principles and values have not been understood by the organization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental architecture, a cure against architecture astronauts]]></title>
    <link href="http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/"/>
    <updated>2017-04-24T06:52:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts</id>
    <content type="html"><![CDATA[<p>Back in 2001, when I started to code for a living, fresh out of school, I was mainly doing a form of <a href="https://en.wikipedia.org/wiki/Cowboy_coding">cowboy coding</a>. After a few months of maintaining my own mess, I started to recall my university lessons : we should be doing design before coding &hellip;</p>

<p>When I was asked to re-engineer the &lsquo;wizards UI&rsquo;, I paused my coding to design something clean from scratch. It worked quite well at first : the overall code was a lot simpler and contained a lot less duplication than before. Seeing this new shiny UI, product people asked for new features. Unfortunately, I hadn&rsquo;t thought of them when designing this little framework. I was almost back at my initial situation.</p>

<p>That&rsquo;s how I started to look for another way to design software. At about the same time the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_3?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1493096057&amp;sr=8-3&amp;keywords=extreme+programming">eXtreme Programming book</a> fell into my hands. That&rsquo;s where I discovered the idea of incremental design and architecture.</p>

<p><a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_3?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1493096057&amp;sr=8-3&amp;keywords=extreme+programming"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/xp-1ed.jpg" alt="Front cover of the first edition of the XP book" /></a></p>

<h2>What is Incremental Archi</h2>

<p>Let&rsquo;s start with the antithesis of incremental architecture :</p>

<h3>Astronaut Architecture</h3>

<p>The term &ldquo;Architecture Astronaut&rdquo; was coined by <a href="https://www.joelonsoftware.com">Joel Spolsky</a> back in 2001. If you haven&rsquo;t read this <a href="https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/">classic post</a> yet, I strongly encourage you to do so. Basically, he explains that we should not be impressed by architects going over their heads talking about too abstract stuff.</p>

<p>Incremental is the exact opposite of astronaut architecture</p>

<h3>Two Schools to Software Architecture</h3>

<p>Traditional architecture is about taking up-front choices that will be difficult to change. Incremental architecture is about preparing for non-stop change and taking decisions as late as possible.</p>

<p>The idea in incremental architecture is really simple : keep your code simple, clean and automatically tested in order to be able to simply adapt your code and architecture when definitely needed.</p>

<h3>Pros and Cons of incremental architecture</h3>

<p>The first reaction of most software engineers (me included, remember how my story started) is that it can only work on trivial stuff. After practicing it for about a decade, I am now convinced it works most of the time. I&rsquo;m not alone, <a href="http://www.jamesshore.com/Agile-Book/incremental_design.html">James Shore</a> (who wrote the more on the subject) also shares my view:</p>

<blockquote><p>Common thought is that distributed processing, persistence, internationalization, security, and transaction structure are so complex that you must consider them from the start of your project. I disagree; I&rsquo;ve dealt with all of them incrementally.</p>

<p>Two issues that remain difficult to change are choice of programming language and platform. I wouldn&rsquo;t want to make those decisions incrementally!</p></blockquote>

<p>I would add published APIs to this list.</p>

<p>Granted, there are situations that incremental architecture alone cannot handle, what about its good points then ?</p>

<p>In all the other cases (and that means most of the time), here is what you get :</p>

<ul>
<li>As you won&rsquo;t need to deal with future use cases, you&rsquo;ll do less work</li>
<li>That in turn, will keep your code simpler, decreasing time to release new features</li>
<li>As change is built-in, you&rsquo;ll be able to improve your architecture in ways you could not have imagined from the start !</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1493096137&amp;sr=1-1&amp;keywords=the+art+of+agile+development"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/art-of-agile.jpg" alt="Front cover of the Art of Agile Software Development book" /></a></p>

<p>If you cannot see how this could possibly work ? Read on !</p>

<h2>How to do it</h2>

<h3>eXtreme Programming</h3>

<p>As I said earlier, incremental architecture emerged from eXtreme Programming. It won&rsquo;t come as a surprise that in order to work well incremental architecture requires the XP practices to be in place. In particular, the code base should be automatically tested, the continuous integration cycle should take less than 10 minutes, the design should be simple. The team should be good at doing refactoring.</p>

<p>Don&rsquo;t expect to be able to do incremental architecture without these practices in place. But this alone might be enough already !</p>

<p><a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1493096197&amp;sr=1-1&amp;keywords=fowler+refactoring"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/refactoring.jpg" alt="Front cover of the Martin Fowler's refactoring book" /></a></p>

<h3>Architecture Vision</h3>

<p>At work, where our team consists of 9 developers, it&rsquo;s not always that simple to coordinate and all pull in the same direction. That&rsquo;s why we find it useful to share a very long term architecture vision (<a href="https://www.thoughtworks.com/insights/blog/enabling-incremental-design-and-evolutionary-architecture">Enabling Incremental Design and Evolutionary Architecture</a>). This will help people to make coherent decisions when hesitating between 2 alternate designs.</p>

<p>The vision can be the result of the work of a pair, or a mob brainstorming or whatever. Building this vision is typically an activity where experienced programmers can contribute a lot of value.</p>

<p>Once this vision is shared and understood by the team, every time a pair has to work on a story, they can orient the design towards it. But always as little as possible to finish the work at hand, remember the XP motos <a href="https://en.wikipedia.org/wiki/KISS_principle">KISS (Keep It Simple &amp; Stupid)</a> &amp; <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI (You Ain&rsquo;t Gonna Need It</a>.</p>

<p>One final word &hellip; a vision is just that : a vision ! It might turn out true, or false, be ready to change it as circumstances change.</p>

<h3>Spikes</h3>

<p>At times, even with a story in your hands and a long term architecture sketch on the whiteboard, you might have difficulties to know how to change your design to fulfill both.</p>

<p>As always in XP, in case of uncertainty, use <a href="http://agiledictionary.com/209/spike/">Spikes</a> ! Spikes are short time-boxed experiments of throwaway code, which goal is to answer a specific design question.</p>

<h3>How to mitigate the risks</h3>

<p>What about these topics that don&rsquo;t yield to incremental architecture ? What if you discover late that you need to change your platform ? Or your API ?</p>

<p>Obviously, you should think about these questions up-front. Hopefully, there are usually not that difficult to answer. But, over time, Non-Functional-Requirements and technologies change. Large and long living systems are particularly likely to need to change to a new platform someday.</p>

<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix had the answer</a> : build your system out of small tools, that do only one thing well, and that communicate through a standard protocol. Systems built that way can be re-written one piece at a time.</p>

<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/Ken_n_dennis.jpg" alt="Ken Thompson and Dennis Ritchie, the creators of Unix" /></a><div class="image-credits">Photo from <a href="https://commons.wikimedia.org/wiki/File:Ken_n_dennis.jpg">WikiMedia</a></div></p>

<p>The modern version of this is the micro-services architecture. Incremental architecture allows you to start with a monolith, split it when you need to, and replace micro-services as needed.   With the safety of simple code and a great automated test harness. Interestingly, successful software systems that were architectured up-front also take this road &hellip; without the safety !</p>

<h3>The Architect</h3>

<p>Good news : no more PowerPoints and a lot more coding with the team ! Here is what&rsquo;s expected from an incremental architect :</p>

<ul>
<li>To code with the team. As Bertrand Meyer once said &ldquo;<a href="http://stal.blogspot.fr/2008/08/architect-always-implements.html">Bubbles (aka. diagrams) don&rsquo;t crash</a>&rdquo;, it&rsquo;s plain too easy, and wrong, to mandate architecture without living with the consequences</li>
<li>To come up with more ideas when drafting the long term vision</li>
<li>To keep an eye on the &lsquo;long term&rsquo; while being the navigator in pair programming</li>
<li>In the second edition of the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1493096057&amp;sr=8-1&amp;keywords=extreme+programming">XP book</a> Kent Beck suggests that the architect should write large scale tests to stress the system and demonstrate architecture issues to the team</li>
<li>To delegate as much as possible to the team. However smart the architect, the team as a whole is smarter ! Delegating architecture increases motivation and the quality of the outcome.</li>
</ul>


<h2>End of the story</h2>

<p>I&rsquo;ve been practicing incremental architecture and design for a long time now. It made my life a lot simpler ! Most architecture questions become backlog items to prioritize.</p>

<p>One last advice : be prepared to re-read <a href="https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/">Joel Spolsky&rsquo;s article</a> whenever you get caught up in architecture meetings &hellip;</p>
]]></content>
  </entry>
  
</feed>
