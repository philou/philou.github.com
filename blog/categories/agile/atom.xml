<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-05-04T06:29:27+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Straightforward Way to Scale to More Than 1 Scrum Team]]></title>
    <link href="http://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team/"/>
    <updated>2017-05-02T06:11:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-straightforward-way-to-scale-to-more-than-1-scrum-team</id>
    <content type="html"><![CDATA[<p>How come the &ldquo;agile scaling&rdquo; landscape seems so daunting and bloated ?</p>

<p>Being agile should be about taking baby steps, doing things incrementally, starting with the simplest thing that could possibly work, slowly but continuously improving and trying out experiments.</p>

<p>Here&rsquo;s a real-life 2 hours change that kicks-off a very efficient organization for a few scrum teams.</p>

<p><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/dive-jump.jpg" alt="A guy jumping from a cliff into the sea" /><div class="image-credits">&ldquo;SafeLess&rdquo; : everything will go fine as long as you follow the principles</div></p>

<h2>A classic story</h2>

<p>Without doing anything about it, there are a lot of situations in where <a href="https://www.scrum.org/">Scrum</a> teams will collaborate inefficiently. For example if you are a developer within a medium or large company, suffering from communication loss between your team and others. Or you could be the owner of a software startup, needing to dramatically grow your dev team.</p>

<p>Whatever your situation, without good collaboration, the output of two Scrum teams is bound to be a fraction of the sum of their individual outputs.</p>

<h3>Our own situation</h3>

<p>We are a group of 4 teams that spun out of the R&amp;D division. We are working to build a highly reusable component for the future versions of <a href="http://www.murex.com">Murex</a>&rsquo;s main product.</p>

<p>While in R&amp;D, teams were aligned with technologies. Now shifting to a product focus, this layered team structure makes it hard for us to organize efficiently. To make things even more tricky, the component we are building is something huge by itself, and we really need to find a way to deliver it incrementally.</p>

<p>This tech-oriented, low synchronization organization of team backlog was really underdelivering. It was not rare to see stories jump from one team to another, as dependencies were discovered, taking one full sprint every time. Integrating end to end features often took a few sprints instead of a few hours &hellip;</p>

<p>Clearly, we needed to do something.</p>

<h3>The simplest things that could possibly work</h3>

<p>Hopefully, all teams were following Scrum. We first had a look at scaling frameworks, especially since other parts of the company are moving to <a href="http://www.scaledagileframework.com/">SAFe</a> but we found that they required too much budget and re-organization for our means (remember, we are just a few motivated developers).</p>

<p>While we were discussing what to do, someone had an idea that was simple, cheap and easy : &ldquo;Let&rsquo;s start by doing all our scrum ceremonies together&rdquo;.</p>

<p>We took the opportunity to add a &lsquo;product&rsquo; retro after the teams retros, and a &lsquo;product&rsquo; planning just before the teams plannings. We were hoping that regular higher level retros would bring continuous improvement at the product scale and bring in all the other practices required to make it work.</p>

<h3>The situation now</h3>

<p>It&rsquo;s now been 2 sprints that we have set this up. Every 2 weeks, Friday is what we call Demo-Day. It&rsquo;s a meeting heavy day where all the teams have their scrum ceremonies together</p>

<ul>
<li>Product demo</li>
<li>Team retros</li>
<li>Product retro</li>
<li>Product planning</li>
<li>Team planning</li>
</ul>


<p>Sure as hell, 1 day of meetings is exhausting, but unfortunately, it is not possible to efficiently grow a team without increasing the communication overhead. The good side of the coin is that it allows the teams to focus on building valuable stuff during the 9 other days.</p>

<p>Here are the first effects we have seen.</p>

<h4>Improved team spirit &amp; product focus</h4>

<p>The first noticeable effect was on team spirit. Having a demo and planning for the whole team showed to everyone that we are all pulling towards the same goal. It helped everyone to understand what his current role is in this greater scheme, but also ways to tweak our individual roles to bring more value.</p>

<h4>Visible problems</h4>

<p>The second good effect is that problems are now visible. If teams are not working in the same direction, it&rsquo;s visible at the demo and plannings. If a team delivers a story too late for another one to integrated it, it&rsquo;s again visible at demo and planning.</p>

<p>Another example : after the product planning, Product Managers had to admit that they had not managed to feed high value stories to all teams. They asked to do a pre-planning preparation meeting (which is a standard practice in <a href="https://less.works">LeSS</a> for example)</p>

<h4>Better continuous improvement</h4>

<p>During our first team retro in this setting, we directly stumbled upon on a recurring systemic issue that we never managed to do anything about. Instead of going around in circle on the topic again, we pushed it to the product retro. We worked on another team related problem, for which we scheduled improvement actions.</p>

<p>During the product retro, we raised our recurring unsolved issue. With everyone in place, people higher in the organization had the chance to understand its consequences. Eventually, we managed to come up with concrete actions.</p>

<h2>How to do it</h2>

<h3>Pre-requisites</h3>

<p>There&rsquo;s only one thing required : that the teams are already following Scrum. All the rest is easy stuff.</p>

<p>This technique is a bottom-up agile adoption. If you want to switch your whole company from waterfall to something more agile, take a look at <a href="http://www.scaledagileframework.com/">SAFe</a>.</p>

<h3>Organizing the Demo-Day</h3>

<p>Here is our planning for our demo day</p>

<table>
<thead>
<tr>
<th></th>
<th> Time </th>
<th> Meeting </th>
<th> Who </th>
<th> Details </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 10h &ndash; 12h </td>
<td> Demo </td>
<td> Everyone </td>
<td> 30m per team |</td>
</tr>
<tr>
<td></td>
<td> 12h30 &ndash; 14h </td>
<td> Team Retro </td>
<td> Teams </td>
<td> Every team has a different retro in a different room |</td>
</tr>
<tr>
<td></td>
<td> 14h30 &ndash; 15h30 </td>
<td> Product Retro </td>
<td> Scrum master, volunteers, and decision makers </td>
<td> Decision makers are important to be able to take actions |</td>
</tr>
<tr>
<td></td>
<td> 16h &ndash; 17h </td>
<td> Product Planning </td>
<td> Product managers or owners, volunteers </td>
<td> Product people present what they would like to see in the product in one sprint |</td>
</tr>
<tr>
<td></td>
<td> 17h &ndash; 18h </td>
<td> Team Planning </td>
<td> Teams </td>
<td> Every team has a different planning in a different room |</td>
</tr>
</tbody>
</table>


<p>We had to negotiate a bit with other people in the company to get enough rooms for all these meetings at the same time, but all in all, it did not take more than 2 hours.</p>

<p>All meetings are open to anyone, everyone should have the right to come to any of them !</p>

<p>Obviously, that&rsquo;s a long day ! It&rsquo;s also full of team energy. In 2 sprints, we found the following improvements :</p>

<h4>Food</h4>

<p>We pre-order food to be delivered at work, so that we can all eat together. Did you know that food makes retros more efficient ?</p>

<h4>Product Retro</h4>

<p>You might have noticed that the product retro is only 1 hour long. To make it all fit in one day, we had to cut some time here and there &hellip; In order to gain some time on the product retro, we decided to pre-fill its &lsquo;gather data&rsquo; phase.</p>

<p>During team retros, if people find product scale issues, they can directly save them for the product retro items (As we are distributed, we use <a href="/trellospectives-remote-retrospectives-with-trello/">Trello for retrospectives</a>). This way, when the product retro starts, the gather data phase is almost done, pre-filled with genuine points.</p>

<h4>Keep the energy high</h4>

<p>One full day of meetings is long. People get tired. In order to keep the energy high and the overall experience fun, we deliberately added some fun throughout the day :</p>

<ul>
<li><a href="http://www.funretrospectives.com/category/energizer/">Energizers</a> at beginning of meetings</li>
<li>Board games during breaks</li>
<li>End of day celebration outside the office. You could go out and have a drink all together for exemple.</li>
</ul>


<p><a href="https://www.amazon.com/Asmodee-TIM01USASM-Timeline/dp/B005N57CNU/ref=sr_1_1?ie=UTF8&amp;qid=1493870547&amp;sr=8-1&amp;keywords=timeline"><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/timeline.jpg" alt="The Timeline board game box" /></a><div class="image-credits">We had fun playing this game between the meetings</div></p>

<h3>Preparing the product Backlog</h3>

<p>Depending on your situation, you might (or not) have a prioritized product backlog. My advice is to start with what you have.</p>

<p>If you are scaling your single team to 2, keep a unique backlog for both teams and create 2 feature teams. You&rsquo;ll be heading to the <a href="https://less.works">LeSS</a> organization, which you&rsquo;ll be able to refer to.</p>

<p>If you are applying this on existing scrum teams with their own backlogs, it might be easier to create a product backlog for the product managers. This is more akin to what <a href="http://www.scaledagileframework.com/">SAFe</a> suggests. It&rsquo;s not as straightforward as having a single backlog for everyone, you&rsquo;ll need to add some links between team and product stories to be able to track progress. Nevertheless, it provides visibility to everyone. As a side note, this is what we actually did.</p>

<p>Keep in mind that it&rsquo;s only a starting point anyway, product retrospectives might transform all this down the road any way.</p>

<h3>Start where you are now !</h3>

<p>The most important thing to do is to start ! There are always a ton of reasons why things are not ready and need more preparation. Remember the agile principles : integrate early and often, adapt, experiment &hellip; Here are few examples of bad reasons  not to start</p>

<ul>
<li>You cannot get all the good people in the room : start, invite them anyway, and send them a report of what has been decided without them. I cannot promise that&rsquo;s it&rsquo;s going to work at the end, but at least, it will create some discussions</li>
<li>The product backlog is not ready : start, and see what happens ! It will make it clear to everyone that product backlog is super important. People will organize to provide enough product features next sprint.</li>
<li>You need some other regular meetings for X, Y or Z. For example, <a href="https://www.agilealliance.org/glossary/scrum-of-scrums/">Scrum of Scrum</a> has daily SoS Meetings. Start anyway, if there&rsquo;s a need, people will ask for these extra meetings, which will save you some goodwill. You might also discover that you don&rsquo;t need these meetings at all and save some time !</li>
</ul>


<p>With a product retrospective every sprint, important issues will get addressed !</p>

<p><img src="../imgs/2017-05-02-a-straightforward-way-to-scale-to-more-than-1-scrum-team/just-do-it.jpg" alt="Just Do It" /></p>

<h2>Does &lsquo;Agile Scaling&rsquo; even exist ?</h2>

<p>We did this on 4 teams. I have no ideas how it would work with more teams. We did not use any framework, even though we took ideas here and there. What we really did is to follow the agile principles, for example :</p>

<ul>
<li>KISS</li>
<li>Do the simplest thing that could work</li>
<li>Baby steps</li>
<li>Continuous improvement</li>
<li>Experiment</li>
</ul>


<p>Others have noticed similar things :</p>

<ul>
<li>LeSS : <a href="https://less.works/less/framework/introduction.html">&ldquo;Truly scaled scrum is Scrum scaled.&rdquo;</a></li>
<li>In the <a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?ie=UTF8&amp;qid=1493870372&amp;sr=8-1&amp;keywords=the+nature+of+software+development">Nature of Software</a> <a href="http://ronjeffries.com/">Ron Jeffries</a> explains that for a company is agile if it just focuses on delivering software &ldquo;feature by feature&rdquo;</li>
<li>In <a href="https://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1493870423&amp;sr=1-1&amp;keywords=large+scale+hp">A Practical Approach to Large-Scale Agile Development [&hellip;]</a>, the authors explain that they did not use any frameworks at HP, but just followed the agile principles</li>
</ul>


<p>Agile scaling frameworks might be a good starting point (the Shu in <a href="https://fr.wikipedia.org/wiki/Shuhari">Shu-Ha-Ri</a>), but only as long as the agile principles and values have not been understood by the organization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental architecture, a cure against architecture astronauts]]></title>
    <link href="http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts/"/>
    <updated>2017-04-24T06:52:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-architecture-a-cure-against-architecture-astronauts</id>
    <content type="html"><![CDATA[<p>Back in 2001, when I started to code for a living, fresh out of school, I was mainly doing a form of <a href="https://en.wikipedia.org/wiki/Cowboy_coding">cowboy coding</a>. After a few months of maintaining my own mess, I started to recall my university lessons : we should be doing design before coding &hellip;</p>

<p>When I was asked to re-engineer the &lsquo;wizards UI&rsquo;, I paused my coding to design something clean from scratch. It worked quite well at first : the overall code was a lot simpler and contained a lot less duplication than before. Seeing this new shiny UI, product people asked for new features. Unfortunately, I hadn&rsquo;t thought of them when designing this little framework. I was almost back at my initial situation.</p>

<p>That&rsquo;s how I started to look for another way to design software. At about the same time the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_3?ie=UTF8&amp;qid=1493096057&amp;sr=8-3&amp;keywords=extreme+programming">eXtreme Programming book</a> fell into my hands. That&rsquo;s where I discovered the idea of incremental design and architecture.</p>

<p><a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0201616416/ref=sr_1_3?ie=UTF8&amp;qid=1493096057&amp;sr=8-3&amp;keywords=extreme+programming"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/xp-1ed.jpg" alt="Front cover of the first edition of the XP book" /></a></p>

<h2>What is Incremental Archi</h2>

<p>Let&rsquo;s start with the antithesis of incremental architecture :</p>

<h3>Astronaut Architecture</h3>

<p>The term &ldquo;Architecture Astronaut&rdquo; was coined by <a href="https://www.joelonsoftware.com">Joel Spolsky</a> back in 2001. If you haven&rsquo;t read this <a href="https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/">classic post</a> yet, I strongly encourage you to do so. Basically, he explains that we should not be impressed by architects going over their heads talking about too abstract stuff.</p>

<p>Incremental is the exact opposite of astronaut architecture</p>

<h3>Two Schools to Software Architecture</h3>

<p>Traditional architecture is about taking up-front choices that will be difficult to change. Incremental architecture is about preparing for non-stop change and taking decisions as late as possible.</p>

<p>The idea in incremental architecture is really simple : keep your code simple, clean and automatically tested in order to be able to simply adapt your code and architecture when definitely needed.</p>

<h3>Pros and Cons of incremental architecture</h3>

<p>The first reaction of most software engineers (me included, remember how my story started) is that it can only work on trivial stuff. After practicing it for about a decade, I am now convinced it works most of the time. I&rsquo;m not alone, <a href="http://www.jamesshore.com/Agile-Book/incremental_design.html">James Shore</a> (who wrote the more on the subject) also shares my view:</p>

<blockquote><p>Common thought is that distributed processing, persistence, internationalization, security, and transaction structure are so complex that you must consider them from the start of your project. I disagree; I&rsquo;ve dealt with all of them incrementally.</p>

<p>Two issues that remain difficult to change are choice of programming language and platform. I wouldn&rsquo;t want to make those decisions incrementally!</p></blockquote>

<p>I would add published APIs to this list.</p>

<p>Granted, there are situations that incremental architecture alone cannot handle, what about its good points then ?</p>

<p>In all the other cases (and that means most of the time), here is what you get :</p>

<ul>
<li>As you won&rsquo;t need to deal with future use cases, you&rsquo;ll do less work</li>
<li>That in turn, will keep your code simpler, decreasing time to release new features</li>
<li>As change is built-in, you&rsquo;ll be able to improve your architecture in ways you could not have imagined from the start !</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1493096137&amp;sr=1-1&amp;keywords=the+art+of+agile+development"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/art-of-agile.jpg" alt="Front cover of the Art of Agile Software Development book" /></a></p>

<p>If you cannot see how this could possibly work ? Read on !</p>

<h2>How to do it</h2>

<h3>eXtreme Programming</h3>

<p>As I said earlier, incremental architecture emerged from eXtreme Programming. It won&rsquo;t come as a surprise that in order to work well incremental architecture requires the XP practices to be in place. In particular, the code base should be automatically tested, the continuous integration cycle should take less than 10 minutes, the design should be simple. The team should be good at doing refactoring.</p>

<p>Don&rsquo;t expect to be able to do incremental architecture without these practices in place. But this alone might be enough already !</p>

<p><a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1493096197&amp;sr=1-1&amp;keywords=fowler+refactoring"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/refactoring.jpg" alt="Front cover of the Martin Fowler's refactoring book" /></a></p>

<h3>Architecture Vision</h3>

<p>At work, where our team consists of 9 developers, it&rsquo;s not always that simple to coordinate and all pull in the same direction. That&rsquo;s why we find it useful to share a very long term architecture vision (<a href="https://www.thoughtworks.com/insights/blog/enabling-incremental-design-and-evolutionary-architecture">Enabling Incremental Design and Evolutionary Architecture</a>). This will help people to make coherent decisions when hesitating between 2 alternate designs.</p>

<p>The vision can be the result of the work of a pair, or a mob brainstorming or whatever. Building this vision is typically an activity where experienced programmers can contribute a lot of value.</p>

<p>Once this vision is shared and understood by the team, every time a pair has to work on a story, they can orient the design towards it. But always as little as possible to finish the work at hand, remember the XP motos <a href="https://en.wikipedia.org/wiki/KISS_principle">KISS (Keep It Simple &amp; Stupid)</a> &amp; <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI (You Ain&rsquo;t Gonna Need It</a>.</p>

<p>One final word &hellip; a vision is just that : a vision ! It might turn out true, or false, be ready to change it as circumstances change.</p>

<h3>Spikes</h3>

<p>At times, even with a story in your hands and a long term architecture sketch on the whiteboard, you might have difficulties to know how to change your design to fulfill both.</p>

<p>As always in XP, in case of uncertainty, use <a href="http://agiledictionary.com/209/spike/">Spikes</a> ! Spikes are short time-boxed experiments of throwaway code, which goal is to answer a specific design question.</p>

<h3>How to mitigate the risks</h3>

<p>What about these topics that don&rsquo;t yield to incremental architecture ? What if you discover late that you need to change your platform ? Or your API ?</p>

<p>Obviously, you should think about these questions up-front. Hopefully, there are usually not that difficult to answer. But, over time, Non-Functional-Requirements and technologies change. Large and long living systems are particularly likely to need to change to a new platform someday.</p>

<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix had the answer</a> : build your system out of small tools, that do only one thing well, and that communicate through a standard protocol. Systems built that way can be re-written one piece at a time.</p>

<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy"><img src="../imgs/2017-04-24-incremental-architecture-a-cure-against-architecture-astronauts/Ken_n_dennis.jpg" alt="Ken Thompson and Dennis Ritchie, the creators of Unix" /></a><div class="image-credits">Photo from <a href="https://commons.wikimedia.org/wiki/File:Ken_n_dennis.jpg">WikiMedia</a></div></p>

<p>The modern version of this is the micro-services architecture. Incremental architecture allows you to start with a monolith, split it when you need to, and replace micro-services as needed.   With the safety of simple code and a great automated test harness. Interestingly, successful software systems that were architectured up-front also take this road &hellip; without the safety !</p>

<h3>The Architect</h3>

<p>Good news : no more PowerPoints and a lot more coding with the team ! Here is what&rsquo;s expected from an incremental architect :</p>

<ul>
<li>To code with the team. As Bertrand Meyer once said &ldquo;<a href="http://stal.blogspot.fr/2008/08/architect-always-implements.html">Bubbles (aka. diagrams) don&rsquo;t crash</a>&rdquo;, it&rsquo;s plain too easy, and wrong, to mandate architecture without living with the consequences</li>
<li>To come up with more ideas when drafting the long term vision</li>
<li>To keep an eye on the &lsquo;long term&rsquo; while being the navigator in pair programming</li>
<li>In the second edition of the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1493096057&amp;sr=8-1&amp;keywords=extreme+programming">XP book</a> Kent Beck suggests that the architect should write large scale tests to stress the system and demonstrate architecture issues to the team</li>
<li>To delegate as much as possible to the team. However smart the architect, the team as a whole is smarter ! Delegating architecture increases motivation and the quality of the outcome.</li>
</ul>


<h2>End of the story</h2>

<p>I&rsquo;ve been practicing incremental architecture and design for a long time now. It made my life a lot simpler ! Most architecture questions become backlog items to prioritize.</p>

<p>One last advice : be prepared to re-read <a href="https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/">Joel Spolsky&rsquo;s article</a> whenever you get caught up in architecture meetings &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overclocking a Scrum Team to 12]]></title>
    <link href="http://philippe.bourgau.net/overclocking-a-scrum-team-to-12/"/>
    <updated>2016-12-21T04:57:00+01:00</updated>
    <id>http://philippe.bourgau.net/overclocking-a-scrum-team-to-12</id>
    <content type="html"><![CDATA[<p><em>From <a href="https://en.wikipedia.org/wiki/Overclocking">Wikipedia</a> :</em></p>

<blockquote><p>Overclocking is configuration of computer hardware components to operate faster than certified by the original manufacturer &hellip;</p></blockquote>

<p>It is said that Scrum teams work best at 7 people, and that they break at about 10. The trouble is that sometimes there is just too much work for 7 people, but no enough for a full Scrum of Scrums. What if there was a simple way to hack this number up to 12 ?</p>

<p><img class="center" src="/imgs/2016-12-21-overclocking-a-scrum-team-to-12/overclocking.jpg" title="An overclocked motherboard working with extra fans and cellar tape" ></p>

<h2>An Idea</h2>

<h3>The Surgical Team</h3>

<p>In his classic <a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1482298579&amp;sr=1-1&amp;keywords=the+mythical+man+month">The Mythical Man Month</a> Fred Brooks presents an idea to organize software development the way surgeons work. The master performs the surgery while the rest of his team (intern or junior surgeon and the nurses) are there to support him. Fred Brook imagined an organization where master developers could be the only ones with access to the production code, while other more junior developers would have the task to provide them with tools and technical libraries.</p>

<p>I admit that this idea sounds out-of-fashion in contrast with modern agile teams of generalists &hellip; Still &hellip;</p>

<h3>Tools</h3>

<p>At work, we are working on a pretty technical and complex product which requires some time getting into both the code and the domain. We took a few interns during the past years, and a bit like Fred Brooks, we came to the conclusion that internships yield more results when focused on building supporting tools rather than joining the team and working on production code.</p>

<p>We&rsquo;ve also been doing <a href="http://philippe.bourgau.net/how-we-introduced-efficient-agile-retrospectives/">retrospectives</a> for 3 years now, we&rsquo;ve stolen a lot of best practices from the industry and the team is working a lot better than it used to. The pending side of this is that nowadays, the opportunities for improvement that we discover are a lot more specific, and they often need us to take some time to build new tools to support our work.</p>

<h3>The Agile Surgical Team</h3>

<p>Agile method such as Scrum or XP are all about creating real teams instead of a collection of individual. That means that if we wanted to adopt the surgical team idea, we could use teams instead of individuals : a team of experts, and a tooling team of apprentice developers !</p>

<p>Why not, there&rsquo;s not nothing really new here, but the challenge is to run such a tooling team efficiently !</p>

<ul>
<li>3 people or less : there&rsquo;s <a href="http://pm.stackexchange.com/a/10075">evidence in the industry</a> that micro teams can self organize in an ad-hoc manner</li>
<li>Mandate ScrumBan, Continuous Delivery and Devops : on site customer makes this possible, it should reduce project management overhead to almost nothing, and enforce quality</li>
<li>A sandbox for junior developers : there&rsquo;s no risk of messing up production code here, the domain (tools for software developers) is straightforward and the fast feedback provides a great environment for learning</li>
</ul>


<p>Obviously, for this to work, you&rsquo;ll also need to have enough tooling work to do for a 3 people team. That&rsquo;s usually the case, the CI alone can take quite some time (see Jez Humble&rsquo;s talk <a href="https://www.youtube.com/watch?v=2zYxWEZ0gYg">Why Agile Doesn&rsquo;t Work</a>) and any team will have its own custom tools to do. For example, in our team, we built our own benchmark framework and we could benefit a lot from <a href="http://www.saros-project.org/">Saros</a> on IntelliJ.</p>

<p><a href="https://www.youtube.com/watch?v=2zYxWEZ0gYg"><img class="center" src="/imgs/2016-12-21-overclocking-a-scrum-team-to-12/why-agile-doesnt-work.jpg" title="The slide in Jez Humble&rsquo;s Why Agile Doesn&rsquo;t Work about the time taken for CI" ></a></p>

<h2>Not quite there yet</h2>

<p>I promised to scale up to 12. Let&rsquo;s do the maths :</p>

<ul>
<li>3 people in the tooling team</li>
<li>8 people in the product team if we push Scrum a bit</li>
</ul>


<p>That&rsquo;s only 11, 1 is missing. This one is more specific to each team&rsquo;s context.</p>

<p>As I said earlier, the product we are building is pretty technical and complex. Sometimes, we simply don&rsquo;t know how we are going to do something. We need to try different ways before finding out the good one. The typical agile way of doing that is by conducting time-boxed <a href="http://agiledictionary.com/209/spike/">spikes</a>. Spikes are fine for code and design related issues but way too short to deal with hard R&amp;D problems. These need a lot of uninterrupted time for research and experiments, so it&rsquo;s not really possible to split them in backlog stories that any one can work on either &hellip;</p>

<h3>The R&amp;D Role</h3>

<p>Here is what you want : some uninterrupted time to learn and experiment different ways to do something difficult.</p>

<p>Here is what you don&rsquo;t want :</p>

<ul>
<li>specialists in the team</li>
<li>people out of sync with the daily production constraints</li>
<li>a never ending &lsquo;research&rsquo; topic</li>
</ul>


<p>Here is a simple solution in the context I describe : add someone in the product team, and do some 2 month round robin on hard subjects. This should leave plenty of time to study something different, but not so much time that one looses connection with the rest of the team. Plus it brings a bit of diversity in every one&rsquo;s daily work. One issue I can think of is that working on isolation might leave someone on a bad track, regularly presenting what was done to the rest of the team might alleviate this concern.</p>

<h2>A final word</h2>

<p>Obviously, this has a smell of specialization, we&rsquo;re bending Scrum principles a bit. So take it for what it is : just like overclocking, it&rsquo;s a hack to get a bit of extra juice before investing in something a lot more expensive (<a href="https://www.agilealliance.org/glossary/scrum-of-scrums/">Scrum of Scrums</a>, <a href="http://less.works/">Less</a> or whatever).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video for our talk 'Extreme Practices' is on YouTube]]></title>
    <link href="http://philippe.bourgau.net/video-for-our-talk-extreme-practices-is-on-youtube/"/>
    <updated>2016-11-23T05:19:00+01:00</updated>
    <id>http://philippe.bourgau.net/video-for-our-talk-extreme-practices-is-on-youtube</id>
    <content type="html"><![CDATA[<p>As I already wrote about <a href="/rexp-remote-extreme-programming/">before</a>, my colleague <a href="https://ahmadatwi.me/">Ahmad</a> from Beirut gave a talk at <a href="http://www.agiletourbeirut.org/">Agile Tour Beirut</a> about how we adopted <a href="http://www.extremeprogramming.org/">XP</a> to a distributed team <a href="http://www.murex.com">at work</a>. I was the remote buddy during the talk.</p>

<p>It was recorded and is now available on YouTube.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/oJsukJhxt7E" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to kill Scrum Zombies ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-kill-scrum-zombies/"/>
    <updated>2016-11-03T05:41:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-kill-scrum-zombies</id>
    <content type="html"><![CDATA[<p>First of all, what is that ? Usually, Scrum zombies go in groups, and quite often, you&rsquo;ll find a full team of them :</p>

<p>A typical team of Scrum Zombies follows Scrum pretty well, does all the ceremonies, adopted good engineering practices, and might even be delivering OK. But all the fun is gone, everyone is on autopilot, no continuous improvement is happening anymore, retrospectives are dull and repetitive &hellip; There&rsquo;s a gut feeling in the air that sooner or later, the project will miss a turn.</p>

<p><img class="center" src="/imgs/2016-11-03-how-to-kill-scrum-zombies/sad-fans.jpg" title="A team of sad fans, looking like lost zombies" ></p>

<p>Sounds familiar ?</p>

<h2>What&rsquo;s going on exactly ?</h2>

<p>When dev teams want to get more (agile|lean|reactive|.*) they often resort to hiring a full time coach. At first, a coach can have a great impact on the team. He will unblock change, show different ways of getting things done and train the team to new practices. Once all this is done, the coach becomes like any team member, or sometimes just leaves. That&rsquo;s the point when the team, as a whole, has to take on responsibility for continuous improvement.</p>

<h2>What&rsquo;s needed then ?</h2>

<p>The team needs to be able to conduct their own experiments and improvements. For this, they need divergent thinking, or creativity, or thinking out of the box; name it as you prefer. In a complex world, no single individual can bring all the answers to all the upcoming issues any team will face. Once the coach has put in place the practices necessary to continuous improvement, it&rsquo;s up to the team.</p>

<p>Unlike what the common idea says, creativity does not come out of thin air, it is cultivated !</p>

<h3>Diversity in the team</h3>

<p>Diversity does not mean minority quotas in your team. Diversity means diversity of interest, of way of thinking, of mentality, of way of working &hellip; The more diverse your team members, the more likely they&rsquo;ll find innovative ways to work out of their current problems.</p>

<h3>Slack</h3>

<p>Removing any slack from the planning is the surest way to kill creativity and innovation. Great ideas often come at unexpected moments (see <a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1478151003&amp;sr=1-1&amp;keywords=pragmatic+thinking+and+learning">Pragmatic Thinking and Learning: Refactor Your Wetware</a>) because the mind works in the background to find them. You want to leave some time for that.</p>

<h3>Go to conferences</h3>

<p>Creativity builds on creativity. Great ideas are often adaptations of one or many existing ones. Going to conferences is a great way to collect a lot of ideas !</p>

<h3>Share trainings and lectures</h3>

<p>Different people might react differently to the same information. When a team member finishes reading a book or comes back from a training, it&rsquo;s a great idea to have him present what he learned to the others. This will reinforce his own learning, but it might also trigger new ideas in his team mates.</p>

<h3>A dash of turnover</h3>

<p>Too much turnover can be fatal to a team, but not having any will bring other kind of problems too. Newcomers will challenge the status-quo, and the &ldquo;this is how it&rsquo;s done here&rdquo; motto won&rsquo;t be enough for them. That&rsquo;s just what&rsquo;s needed to trigger a sane re-examination of the current practices. Oh &hellip; and turnover between teams is fine too ! If your company is large enough, you don&rsquo;t need to hire or fire people to create turnover, just encourage them to move to other teams !</p>

<h2>The tricky part of complexity</h2>

<p>By leaving time for other things than just cranking out stories, life will come back into the project, and zombies should go away. But wait, there&rsquo;s even more !</p>

<p>Software projects are pretty complex beasts. One of the most counter-intuitive thing with these complex system is that they make planning very difficult. Focusing too much on your main goal might be slowing you down !</p>

<p><img class="center" src="/imgs/2016-11-03-how-to-kill-scrum-zombies/large-tunnels-in-a-mine.jpg" title="Crossroad of large tunnels in a mine" ></p>

<p>In the face of complexity your project landscape is like a maze of tunnels ! Who said you&rsquo;re choosing the best ones ? By keeping free time to explore other, seemingly unrelated, topics you might discover opportunities that will remove a lot of the work to get to your final destination !</p>
]]></content>
  </entry>
  
</feed>
