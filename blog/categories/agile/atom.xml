<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-01-08T09:24:53+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The technical debt ponzi scheme]]></title>
    <link href="http://philippe.bourgau.net/the-technical-debt-ponzi-scheme/"/>
    <updated>2015-10-01T19:34:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-technical-debt-ponzi-scheme</id>
    <content type="html"><![CDATA[<p>Madoff would have been better off managing software projects than investing on Wall Street !</p>

<p><img class="center" src="/imgs/2015-10-01-the-technical-debt-ponzi-scheme/bernie.jpg" title="&ldquo;Madoff&rsquo;s photo in jail&rdquo;" ></p>

<p>Whereas in finance, a Ponzi scheme is a sure road to jail, it seems to be the de-facto standard in software development.</p>

<p>A few months ago, I read <a href="http://www.amazon.com/Managing-Software-Debt-Inevitable-Development/dp/0321554132/ref=sr_1_2?ie=UTF8&amp;qid=1443728175&amp;sr=8-2&amp;keywords=managing+technical+debt">Managing Software Debt</a>, hoping to find methods about how to manage technical debt with some hard numbers (instead I found some good practices to avoid it, but that&rsquo;s another story). At no place did I read that taking more debt to pay the interests of existing debt was a good practice though &hellip;</p>

<p>Thinking of it, I can remember of such <a href="https://en.wikipedia.org/wiki/Ponzi_scheme">Ponzi Schemes</a> in nearly every organization I worked in. Here are a few typical manifestations I saw :</p>

<ul>
<li>writing bogus code to compensate for some other bogus code</li>
<li>creating tools to workaround existing technical debt. Ex:

<ul>
<li>exotic build tools to build some code riddled with cyclic dependencies that no sane build tool can build</li>
<li>in house tools that do 10% of what standard (open source) tools can do on code following main standards</li>
</ul>
</li>
</ul>


<p>If this goes on for too long, you can end up in a technical debt death spiral : you know debt is out of control, so taking debt becomes the only way of actually getting anything done. &ldquo;Let&rsquo;s win this client now, because we won&rsquo;t be able to later &hellip;&rdquo;. It&rsquo;s like running to one&rsquo;s own ruin.</p>

<p><img class="center" src="/imgs/2015-10-01-the-technical-debt-ponzi-scheme/road-wall.jpg" title="&ldquo;A road going straight in a wall&rdquo;" ></p>

<p>If your organization is in this stage, you might think at the <a href="/a-plan-for-technical-debt-lean-software-development-part-7/">&lsquo;time horizon&rsquo;</a> of your product, and discover that fixing the technical debt sometimes brings more value than getting this new client !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Hand Planning Poker]]></title>
    <link href="http://philippe.bourgau.net/binary-hand-planning-poker/"/>
    <updated>2015-09-23T19:44:00+00:00</updated>
    <id>http://philippe.bourgau.net/binary-hand-planning-poker</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.murex.com">work</a>, we are using as we all have Android phones, we are using the <a href="https://play.google.com/store/apps/details?id=artarmin.android.scrum.poker&amp;hl=fr">Scrum Poker Cards</a> app to do our <a href="https://en.wikipedia.org/wiki/Planning_poker">planning poker</a>.</p>

<p>This usually works fine, but newcomers usually have one bad remark about it :</p>

<blockquote><p>It&rsquo;s not geeky enough</p></blockquote>

<p>Obviously, it also does not work if one lakes a phone, but who would come in a meeting without it nowadays ?</p>

<p>Enters the binary hand poker !</p>

<table>
<thead>
<tr>
<th> Score </th>
<th> Sign </th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td> <br/> <img src="/imgs/2015-09-23-binary-hand-planning-poker/01.jpg" alt="Sign for 1" /></td>
</tr>
<tr>
<td>2</td>
<td> <img src="/imgs/2015-09-23-binary-hand-planning-poker/02.jpg" alt="Sign for 2" /></td>
</tr>
<tr>
<td>3</td>
<td> <img src="/imgs/2015-09-23-binary-hand-planning-poker/03.jpg" alt="Sign for 3" /></td>
</tr>
<tr>
<td>5</td>
<td> <img src="/imgs/2015-09-23-binary-hand-planning-poker/05.jpg" alt="Sign for 5" /></td>
</tr>
<tr>
<td>8</td>
<td> <img src="/imgs/2015-09-23-binary-hand-planning-poker/08.jpg" alt="Sign for 8" /></td>
</tr>
<tr>
<td>13</td>
<td> <img src="/imgs/2015-09-23-binary-hand-planning-poker/13.jpg" alt="Sign for 13" /></td>
</tr>
<tr>
<td>20</td>
<td> <img src="/imgs/2015-09-23-binary-hand-planning-poker/20.jpg" alt="Sign for 20" /></td>
</tr>
</tbody>
</table>


<br/>


<p>Now that&rsquo;s geeky ! I still have to find a symbol for the coffee cup and the question mark though &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feedback On 360° Feedback Session]]></title>
    <link href="http://philippe.bourgau.net/feedback-on-360-degrees-feedback-session/"/>
    <updated>2015-08-27T19:40:00+00:00</updated>
    <id>http://philippe.bourgau.net/feedback-on-360-degrees-feedback-session</id>
    <content type="html"><![CDATA[<blockquote><p>If you remove your job, you are promoted. (a classic lean quote)</p></blockquote>

<p>In <a href="http://www.amazon.com/Management-3-0-Leading-Developers-Developing-ebook/dp/B004ISL6JY/ref=sr_1_1?ie=UTF8&amp;qid=1438085414&amp;sr=8-1&amp;keywords=management+3.0">Management 3.0</a>, <a href="http://jurgenappelo.com/">Jurgen Appelo</a> suggests doing full team 360° feedback sessions instead of more traditional manager-collaborator meetings.</p>

<p><a href="http://www.amazon.com/Management-3-0-Leading-Developers-Developing-ebook/dp/B004ISL6JY/ref=sr_1_1?ie=UTF8&amp;qid=1438085414&amp;sr=8-1&amp;keywords=management+3.0"><img class="center" src="/imgs/2015-08-27-feedback-on-360-degrees-feedback-session/management30.jpg" title="&ldquo;The cover of Management 3.0 book&rdquo;" ></a></p>

<p>He argues in favor of this practice in order to :</p>

<ul>
<li>obviously, get some feedback and improve</li>
<li>also give feedback to the manager so he too can improve</li>
<li>help the team to further self organize</li>
<li>practice everyone&rsquo;s people skills</li>
<li>have more quality objective feedback than subjective manager feedback</li>
<li>free some manager time</li>
</ul>


<h2>Our Experience</h2>

<p>We just gave it a try. As a fist experiment, we did it at just 3, all willing to try. Here is the ROTI (Return On Time Invested)</p>

<table>
<thead>
<tr>
<th>Grade(/5) </th>
<th> Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>5 </td>
<td> Useful and healthy. It&rsquo;s a way to stop grumbling. It&rsquo;s also the occasion to say things that we often don&rsquo;t.</td>
</tr>
<tr>
<td>5 </td>
<td> I&rsquo;m leaving the room with real improvement topics. It calms my emotions, it&rsquo;s like &ldquo;balm for the heart&rdquo;</td>
</tr>
<tr>
<td>5 </td>
<td> I&rsquo;m getting out with great advises. I think it&rsquo;s great for team spirit. It took 1h for just the 3 of us, I&rsquo;m wondering how we&rsquo;ll manage this if we are more ?</td>
</tr>
</tbody>
</table>


<h2>If you want to try it</h2>

<p>A few last minute advises  :</p>

<ul>
<li>Don&rsquo;t force it onto people, start with volunteers</li>
<li>There must be a safe and positive atmosphere in the team</li>
<li>This is an improvement exercices, and it should not be used as any kind of evaluation</li>
<li>Learn how to give feedback

<ul>
<li><a href="http://www.murex.com">Our company</a> provides trainings on non violent communication and positive feedback, maybe yours does too !</li>
<li>Appelo explains how to give written feedback in his other book <a href="http://www.amazon.com/gp/product/9492032023">#Workout</a>. Though better suited for email feedback, I found it a great way to prepare for the session.</li>
</ul>
</li>
</ul>


<p><a href="https://management30.com/product/workouts/"><img class="center" src="/imgs/2015-08-27-feedback-on-360-degrees-feedback-session/feedback-wrap.jpg" title="&ldquo;The front page of #Workout chapter about written feedback&rdquo;" ></a></p>

<p>I&rsquo;d like to ear about your experiences with such collaborative feedbacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Plan For Technical Debt (Lean Software Development Part 7)]]></title>
    <link href="http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7/"/>
    <updated>2015-08-20T17:11:00+00:00</updated>
    <id>http://philippe.bourgau.net/a-plan-for-technical-debt-lean-software-development-part-7</id>
    <content type="html"><![CDATA[<p>The sad truth :</p>

<blockquote><p>The <a href="http://en.wikipedia.org/wiki/Technical_debt">technical debt</a> metaphor does not help me to fix it.</p></blockquote>

<p><img class="center" src="/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/debt.jpg" title="&ldquo;A desperate man counting his debts&rdquo;" ></p>

<p>Here is my modest 2€ plan about how to try to get out of this.</p>

<h2>Why does the metaphor fall short ?</h2>

<p>The debt comparison effectively helps non programming people to understand that bad code costs money. Unfortunately, it does not tell you how much. As a consequence, deciding whether it&rsquo;s best to fix the technical debt or to live with it remains a gut feeling decision <del>(aka programmers want to stop the world and fix all of it while the product owner wants to live with it)</del>.</p>

<p>They are very good reason why we cannot measure how much the technical debt costs :</p>

<ul>
<li>It is purely subjective : bad code for someone might be good code for another. Even worse, as you become a better programmer, yesterday&rsquo;s master piece might become today&rsquo;s crap. More often, as a team gains insight on the domain, old code might suddenly appear completely wrong &hellip;</li>
<li>Tools such as Sonar only spot the a small part of the debt. The larger part (design, architecture and domain) remains invisible</li>
<li>Finally, non-remediation cost (the time wasted working on the bad code) is often overlooked and very difficult to measure : it depends on what you are going to work in the future !</li>
</ul>


<p>No surprise it&rsquo;s difficult to convince anyone else why fixing your debt is a good investment.</p>

<p><a href="http://www.dilbert.com"><img class="center" src="/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/dilbert.jpg" title="&ldquo;A dilbert cartoon about a programmer killed by technical debt&rdquo;" ></a></p>

<h2>The Plan</h2>

<p>In the team, we usually try not to create debt in the first place. We have strong code conventions and working agreements. We are doing a lot of refactoring in order to keep our code base clean. But even with all this, debt creeps in :</p>

<ul>
<li>a pair worked on something and did not know that there is another part of the system that does roughly the same thing</li>
<li>we understand something new about the domain and some previously fine code becomes debt !</li>
<li>like all programmers, we are constantly in a hurry, and sometimes, we just let debt through</li>
<li>&hellip;</li>
</ul>


<p>If the required refactoring is small enough, we just slip it inside a user story and do it on the fly. The real problem comes larger refactorings.</p>

<p>The strategy to deal with those is to get estimations of both the remediation and non-remediation costs. This way, the technical debt becomes an investment ! Invest X$ now and receive Y$ every month up to the end of the life of product. Provided you have the Cost Of Delay of the product, you can estimate the cost of delay of this individual technical debt fix. For example :</p>

<ul>
<li>Let&rsquo;s define the product horizon as its expected remaining life span at any moment</li>
<li>Suppose the product has a 5 years (60 months) horizon</li>
<li>Suppose the Cost Of Delay of the full product is 150K€/month</li>
<li>Suppose that the technical debt costs 10 days (0.5 month) to fix</li>
<li>Suppose that that once fixed, you&rsquo;ll save 2 days (0.1 month) of work per month</li>
<li>By doing the fix now, at the end of the 5 years, you would have saved : <em>(60 &ndash; 0.5) * 0.1 &ndash; 0.5 = 5.45 months</em></li>
<li>Using CoD, this ammounts to : <em>5.45 * 159K = 817.5K €</em></li>
<li>Dividing by the number of months, we finaly get the CoD for this technical debt fix : <em>817.5K / 60 = 13 625 €/month</em></li>
</ul>


<p>This can be compared to the CoD of other backlog items, allowing us to prioritize large refactorings as we would of any feature or story.</p>

<p>One nice thing about this is that it not only helps to know if a refactoring is cost effective, but also when is the best moment to do it. As the CoD of the refactoring is proportional to inverse of the product horizon, a premature refactoring for a startup product might become a real bargain after the product has settled as a market leader. Here are examples of possible product horizons :</p>

<table>
<thead>
<tr>
<th>Context </th>
<th> Horizon</th>
</tr>
</thead>
<tbody>
<tr>
<td>Startup </td>
<td> 6 months</td>
</tr>
<tr>
<td>3 years old company </td>
<td> 3 years</td>
</tr>
<tr>
<td>Market leading product </td>
<td> 10 years</td>
</tr>
<tr>
<td>Aging System </td>
<td> 5 years</td>
</tr>
<tr>
<td>Legacy System </td>
<td> 2 years</td>
</tr>
</tbody>
</table>


<br/>


<p>Oh, and just one more thing &hellip; prioritizing technical debt fixes in your backlog will create some real time to focus on and only on refactoring, reducing task switching and saving even more time.</p>

<p>All this sounds great ! There&rsquo;s just one last little thing : how do we get estimations of both costs of the technical debt ?</p>

<h2>Idea 1 : Collective Estimations</h2>

<p>When I attended Donald Reinertsen&rsquo;s training, I asked him the question and he answered :</p>

<blockquote><p>I&rsquo;d gather the top programmers in a room and I&rsquo;d make them do an estimation of both costs.</p></blockquote>

<p>So I asked my team if they wanted to do the following :</p>

<ol>
<li>whenever you spot a large piece of debt, create a JIRA issue for it</li>
<li>at the end of your next sprint planning session, go through all your technical debt issues, and for each

<ol>
<li>estimate the remediation cost in story points</li>
<li>estimate the non-remediation cost on the coming sprint, taking the prioritized stories into account</li>
</ol>
</li>
<li>using the ROI horizon for every issues, collectively decide which one to tackle and add them to the sprint backlog</li>
</ol>


<p>To keep the story short, it did not stick. I bet it was just too boring.</p>

<h2>Idea 2 : Technical Debt Code Annotations</h2>

<p>During a retrospective, we discussed marking technical debt directly in the code to decide when to fix it. I created 2 code annotations so that this can be done. Here is an example of some identified technical debt :</p>

<p>```java
public final class Transformers {</p>

<p>   private Transformers() {
   }</p>

<p>   @TechnicalDebt(storyPoints = 8, description =</p>

<pre><code> "We need to find a way to do all the ast rewriting before staring the analysis", wastes = {
 @Waste(date = "2015/05/14", hours = 16, summary =
   "For union, we lost quite some time identifying which transformers were not copying the full tree")})
</code></pre>

<p>   public static AstNode analyzeAst(AstNode ast) {</p>

<pre><code> ...
</code></pre>

<p>```</p>

<p>The @TechnicalDebt annotation identifies areas of the code that could be improved.
The @Waste annotation is a way to log time wasted because of this bad code.</p>

<p>By comparing the time to fix the technical debt and the flow of extra work it incurs, we should be able to more easily justify and prioritize these in our backlog.</p>

<p>We are thinking of writing a sonar plugin to keep track of this technical debt right in our <a href="http://www.sonarqube.org/">Sonar dashboard</a>. It would :</p>

<ul>
<li>create a technical debt item in sonar for every @TechnicalDebt annotation found in the code</li>
<li>link it with a mirror technical debt issue in JIRA</li>
<li>use the story points we entered in the annotation as remediation cost</li>
<li>extrapolate the non remediation cost by the sum of wasted hours registered during the last month</li>
</ul>


<p>We just started using those, and I cannot give enough feedback for the moment. I bet not enough @Waste items will be entered though &hellip; again, it might just be too boring</p>

<p><a href="http://www.sonarqube.org/"><img class="center" src="/imgs/2015-08-20-a-plan-for-technical-debt-lean-software-development-part-7/sonar-sqale.jpg" title="&ldquo;A screenshot of Sonar Qube Sqale technical debt plugin&rdquo;" ></a></p>

<h2>Idea 3 : Sonar and IDE Plugins</h2>

<p>If it&rsquo;s too boring to add @Waste annotations in the code, it might be easier to have an IDE plugin with 1 big button to register some time wasted on the local @TechnicalDebt zone.</p>

<p>Pushing things a bit further, it might even be possible to estimate non remediation cost by having a look at what files are read the more, what files are triggering the more test failures when changed, etc.</p>

<p>Unfortunately, that&rsquo;s a long shot, we&rsquo;re definitely not there yet !</p>

<h2>Possible Improvements</h2>

<h3>The Mikado Method</h3>

<p>Whether you&rsquo;ve got these estimations or not, it&rsquo;s always a good practice to learn how to  use the <a href="https://mikadomethod.wordpress.com/2010/02/02/the-mikado-method-in-under-a-minute/">mikado method</a>. It&rsquo;s great to split a refactoring into smaller part and spread them over many sprints.</p>

<p>The pill is easier to swallow for everyone, and it keeps the code releasable at any given time.</p>

<h3>Decision Rule</h3>

<p>Provided you have :</p>

<ul>
<li>Product CoD</li>
<li>Top Features CoD</li>
<li>Product horizon</li>
</ul>


<p>You could easily come up with a <a href="/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">decision rule</a> to help us prioritizing technical debt more quickly, without the need for a formal planning.</p>

<h2>References</h2>

<ul>
<li><a href="http://fr.slideshare.net/zazworka/identifying-and-managing-technical-debt">Identifying and Managing Technical Debt</a></li>
<li><a href="http://www.amazon.com/Managing-Software-Debt-Inevitable-Development/dp/0321948610/ref=sr_1_2?ie=UTF8&amp;qid=1433246385&amp;sr=8-2&amp;keywords=managing+technical+debt">Managing Technical Debt</a></li>
</ul>


<p>This was part 7 of my <a href="/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 6 was <a href="/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/">You don&rsquo;t have to ask your boss for a fast build</a>, Part 8 will be <a href="/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/">How I&rsquo;ll Measure the Lean Startup Value of Information in My Next Side Project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You don't have to ask your boss for a fast build (Lean Software Development part 6)]]></title>
    <link href="http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/"/>
    <updated>2015-06-03T04:43:00+00:00</updated>
    <id>http://philippe.bourgau.net/you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6</id>
    <content type="html"><![CDATA[<p>A slow build costs money. I mean it costs <em>a whole lot of money all the time !</em></p>

<p>Spending some time to speed up the build is like an investment, you&rsquo;ll pay some money now, but then it&rsquo;s only a matter of time until you get a return on investment. Here is the trick, if you manage to get it quickly, no one will even notice that you spent some time making the build faster !</p>

<p>With a bit of maths, you can even get what <a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?ie=UTF8&amp;qid=1432909293&amp;sr=8-1&amp;keywords=reinertsen+flow">Reinertsen</a> calls a &ldquo;Decentralized Decision Rule&rdquo;, making it possible for anyone in the organization to figure out if he should spend some time on the build or not; without the need to ask the permission to anyone.</p>

<p><a href="http://fr.wikipedia.org/wiki/Balance_%28instrument%29"><img class="center" src="/imgs/2015-06-03-you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/Balance_ordinaire.jpg" title="A 2-pan balance (From Wikipedia)" ></a></p>

<h2>Our example</h2>

<p>Our team is constituted of 5 pairs, each running the build at least 10 times per day. Let&rsquo;s figure out the value of 1 minute build time speed-up</p>

<ul>
<li>The whole team would save : 1m x 5 pairs x 10 builds = 50 minutes per day</li>
<li>In a 2 weeks sprint, this would amount to around 1 day of work</li>
</ul>


<p>This means that if a pair spends half a day to get a 1 minute build speed-up, it would not change the output of the sprint, and it would in fact increase the throughput of the team for further sprints.</p>

<p>Anyone in our team that spots a potential 1 minute build time speed-up that would take less that 1 man.day to implement should do it right away, without asking the permission to anyone</p>

<h2>Other Benefits</h2>

<p>A direct benefit is that the issue will not have to be re-discussed every time someone spots a build time improvement. This will save some management time, and more build speed-up actions will eventually be undertaken.</p>

<p>The astute lean reader will have noticed that I completely ignored the second effect of fast feedback :</p>

<ul>
<li>if the build is faster</li>
<li>we will run it more often</li>
<li>we&rsquo;ll spot errors earlier</li>
<li>less errors will be submitted</li>
<li>the overall throughput will be increased even more</li>
</ul>


<p>Another hidden benefit concerns the <a href="http://en.wikipedia.org/wiki/Cost_of_delay">Cost of Delay</a> (the cost of not selling the product NOW). As Cost of Delay typically trumps the work costs, this means that any improvement to the build time will bring even greater ROI in the long term.</p>

<h2>Variations</h2>

<p><a href="http://en.wikipedia.org/wiki/Boeing_777"><img class="center" src="/imgs/2015-06-03-you-dont-have-to-ask-your-boss-for-a-fast-build-lean-software-development-part-6/Boeing_777.jpg" title="A Boeing 777 in flight over the mountains (From Wikipedia)" ></a></p>

<p>If your sponsor agrees, you can negotiate a longer return on investment period for your decision rule. For example, if he agreed to increase the horizon to 2 sprints, we could undertake more build time speed-up tasks. You might also prefer only to discuss really long ROI investments with him.</p>

<p>While designing the 777 Boeing used a similar decision rule to meet the required weight of the plan : any engineer could increase the production cost of 300$ provided it saved a pound of weight on the plane. This fixed issues they previously had with department weight budgets and escalation.</p>

<p>Finally, it would be great if we had the same rule for technical debt ! Imagine that you knew both the costs of fixing and not fixing your technical debt, you could then decided whether it makes sense to work on the debt right now or not. But that&rsquo;s for a later experiment.</p>

<p>This was part 6 of my <a href="/the-flow-book-summary-lean-software-development_part_1/">Lean Software Development Series</a>. Part 5 was <a href="/what-optimization-should-we-work-on-lean-software-development-part-5/">What optimization should we work on ?</a>, Part 7 will be <a href="/a-plan-for-technical-debt-lean-software-development-part-7/">A Plan for Technical Debt</a>.</p>
]]></content>
  </entry>
  
</feed>
