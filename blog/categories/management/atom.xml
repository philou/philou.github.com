<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: management | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/management/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-02-29T21:38:19+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Keep Programming When Assigned A Management Job]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job/"/>
    <updated>2016-02-03T08:45:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-programming-when-assigned-a-management-job</id>
    <content type="html"><![CDATA[<p>Remaining a competent developer is a career long effort, if you stop programming, you&rsquo;ll loose it ! As time goes, we are regularly <del>offered</del> pushed into management positions, sometimes by cluelessness, other times by cheer necessity ! Be it temporary or long term, here are some techniques to remain a relevant developer.</p>

<h2>How Joe became a manager</h2>

<p>```
def work
  if manager?</p>

<pre><code>go_to_meetings
</code></pre>

<p>  else</p>

<pre><code>program
</code></pre>

<p>  end
end
```</p>

<p>Imagine you&rsquo;re Joe, an expert developer in a small software company. Everything is going fine, he&rsquo;s working on interesting subjects with 4 other, rather junior, team mates. Management is OK, at least good enough not to cause too many troubles.</p>

<p>Suddenly, the team manager leaves for a better position in another company. Unprepared for this, the small organization has difficulties to find a suitable replacement, and, you&rsquo;ll guess it, Joe is asked to take on management responsibilities until someone gets hired. How is Joe going to continue to do a good job at both programming and management ?</p>

<h2>His first reaction</h2>

<p>Two weeks into the job, Joe takes a step back and summarizes :</p>

<ul>
<li>he feels depressed when he does not program for a long time</li>
<li>he has the feeling he&rsquo;s been jumping from A to B to C to Z to A, and so on for two weeks without actually getting a lot done</li>
<li>he feels everyone is waiting for him to do things before they move</li>
<li>his mailbox is starting to make him nervous</li>
<li>it&rsquo;s difficult to program anything if you are interrupted by meetings throughout the day</li>
</ul>


<p>Joe figures out that he needs to reduce his management work if he wants to get back to programming.  After setting up an efficient <a href="bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">TODO list</a>. He has already read some personnal effectiveness books, so he knows how one can reduce his amount of work :</p>

<ul>
<li>say no : he&rsquo;ll have to keep this in mind all the time, especially when accepting meetings or when asked for some new work</li>
<li>automate : some tasks can be automated, others can be partly automated by a good process. He&rsquo;ll have to regularly stop and think to improve how he works</li>
<li>delegate : he&rsquo;d like to push more work to the team, but it will take some time. He decides to read things on self-organized team to know how to do</li>
</ul>


<h2>Joe&rsquo;s measure of programming time</h2>

<p>In order to get some continuous time for programming, Joe books &lsquo;programming days&rsquo; in his calendar. This is also a way to say no to other meetings during this period. He starts with all Mondays, he hopes he&rsquo;ll be able to book others days as he manages to do more programming. His ideal would be to book all week for programming (while still having the management job get done !)</p>

<p>This works well, and gives Joe a motivation boost since he has the opportunity to program again :&ndash;). There are still a few glitches though :</p>

<ul>
<li>Joe often doesn&rsquo;t program &lsquo;on his own&rsquo; on Mondays because he is spending is time with junior programmers who are really appreciating his help</li>
<li>Joe once made the mistake of committing to a critical programming task that he did not manage to finish in 1 day and had to hand it over to another developer, losing more time</li>
</ul>


<p>Joe is realizing that he is more of a programming coach than a direct developer now, and that he should not commit on critical tasks but rather help others to do so. Pair programming is becoming the norm for him.</p>

<h2>Communication time</h2>

<p>While doing his full programming days, Joe realized that emails can wait. If people want an immediate answer, let them use the phone ! He now reads and answers his emails in the morning when he arrives at work, at noon just after lunch and on evenings, just before leaving. That&rsquo;s good enough for a day !</p>

<p>Joe also had to interrupt his programming day once for an urgent meeting &hellip; he now reserves 1 hour at the end of his programming days to handle such urgent meetings without interrupting his programming time.</p>

<h2>Self organized teams</h2>

<p>Meanwhile, Joe read some books about self organized teams, such as <a href="http://www.amazon.com/Workout-Practices-Improve-Delight-Clients/dp/9492032023/ref=sr_1_1?ie=UTF8&amp;qid=1454480226&amp;sr=8-1&amp;keywords=management+3.0+workout">Management 3.0 Workout</a> by Jurgen Appelo.</p>

<p><a href="https://management30.com/product/workouts/">{% img center /imgs/2016-02-03-how-to-keep-programming-when-assigned-a-management-job/management-workout.jpg Management 3.0 Workout Book Cover %}</a></p>

<p>Self organization is some kind of aggressive delegation. Joe sees management as described in these books as a way to increase purpose and motivation throughout the team, while getting him more time for programming.</p>

<p>This kind of management perfectly suits agile teams. His team is already using some agile practices, such as automated testing, some kind of continuous integration, and quite a few others, to varying degrees. Joe decides to embark his team on a road to self organization, and to start by applying all the standard Scrum and eXtreme Programming practices. In parallel, he introduces the rolling Scrum Master role, where sprint after sprint, a different team member is responsible for :</p>

<ul>
<li>organizing the recurring team meetings</li>
<li>representing the team in outside meetings</li>
<li>grooming the backlog before the demo and planning</li>
</ul>


<p>This alone frees Joe 1 or 2 days of programming every week. He now helps his team mates to master all the technical agile practices they are not used to.</p>

<h2>More self organization</h2>

<p>A few months later, the team is doing well, Joe has some time for programming, but he still has some pure management job to do. From what he read from self organized teams, even these subjects can be delegated ! He decides to start workshops with the team :</p>

<ul>
<li>How can we handle vacations in a self organized way ?</li>
<li>How can we handle the hiring in a self organized way ?</li>
<li>How can we handle performance feedback and pay raises in a self organized way ?</li>
</ul>


<p>The journey is long and rough : one team member left as they were going seriously into agile. Nevertheless the team is already more motivated than it ever was, and delivers more value than it ever did.</p>

<h2>The end result for Joe</h2>

<p>Joe is now programming nearly as much as his team mates ! Most of his programming time is coaching time though. He does not sit and hack his way into a feature as he used to do. He&rsquo;s missing that a bit, he&rsquo;s also missing learning new technologies.</p>

<p>That&rsquo;s why he started working on <a href="/my-own-side-project-best-practices-after-reading-the-side-project-book">side projects</a> at home, using the latest hype JavaScript framework. He&rsquo;s reading generalist programming books also, such as the <a href="http://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&amp;field-keywords=%22in+seven+weeks%22&amp;rh=i%3Aaps%2Ck%3A%22in+seven+weeks%22">7 XXX in 7 weeks</a> series which allow him to learn without loosing time on technical quirks he&rsquo;s not interested in at the moment &hellip;</p>

<p><a href="http://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X/ref=sr_1_1?ie=UTF8&amp;qid=1454739459&amp;sr=8-1&amp;keywords=7+languages+in+7+weeks">{% img center /imgs/2016-02-03-how-to-keep-programming-when-assigned-a-management-job/7-languages.jpg Seven Languages In Seven Weeks Book Cover %}</a></p>

<p>Good luck Joe !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Holy Code Antipattern]]></title>
    <link href="http://philippe.bourgau.net/the-holy-code-antipattern/"/>
    <updated>2014-08-10T08:42:00+00:00</updated>
    <id>http://philippe.bourgau.net/the-holy-code-antipattern</id>
    <content type="html"><![CDATA[<p>As I&rsquo;ve encountered this situation in different disguise in different companies, I now assume it&rsquo;s a widely applied antipattern.</p>

<h3>Context</h3>

<p>A team of programmers inherits a piece of code from one of their bosses. They find it really difficult to maintain : it is difficult to understand, fix, and change.</p>

<h3>The Antipattern</h3>

<p>{% img center /imgs/2014-08-10-the-holy-code-antipattern/grenade.jpg A picture from the Monty Python&rsquo;s Holy Grail movie featuring the holy hand grenade of antioch %}</p>

<p>As this piece of code seems too complex to be maintained by a team of simple programmers, as the boss, just forbid them :</p>

<ul>
<li>to refactor any part of it</li>
<li>to rewrite it from scratch</li>
<li>to use something else instead</li>
</ul>


<h3>Consequences</h3>

<ul>
<li>This often limits the number of bugs that appear in this library, but &hellip;</li>
<li>It slows down development, because of the micro management required to enforce this pattern</li>
<li>It frustrates programmers, and it is likely that the best ones will leave</li>
<li>It prevents better design</li>
<li>Even worse, in the long run, it prevents great domain driven design to emerge from merciless refactoring</li>
<li>In the end, it makes the whole organization less performant</li>
</ul>


<h3>Examples</h3>

<ul>
<li><p>Your boss wrote something a few years ago, if the domain is more or less complex, the resulting code <em>is</em> complicated. The subject eventually got the reputation of being &lsquo;touchy&rsquo;. Your boss is the only person who effectively manages to change anything in there. He&rsquo;s a bit afraid that by trying to improve it, the whole thing might just break down and become a bug nest. So, now that he has some authority, he forbids anyone to touch it. If a change is finally required, he&rsquo;ll micro manage it !</p></li>
<li><p>Your big boss spent some over time on writing an uber-meta-generic-engine to solve <del>the universe and</del> everything. After seeing many developpers fixing the same kind of bugs over and over, he decides that it&rsquo;s time to remove the dust from his compiler and that he starts building something that should solve the root cause of all these. In the spirit of the <a href="http://en.wikipedia.org/wiki/Second-system_effect">second system effect</a>, he adds all bells and whistle to his beloved project, trying to incorporate a solution to every different issue he has seen during the last decade. This code grows and grows in total isolation of any real working software. When he eventually thinks it is ready, he justs drops the whole thing to your team, that is now responsible to integrate and use this thing in the running system. He&rsquo;s micro managing the whole thing, and you don&rsquo;t have any choice but to comply and succeed. This usually generates gazillions of bugs, makes projects really late and ruins the developpers' lives.</p></li>
</ul>


<h3>Alternatives</h3>

<ul>
<li>Use collective code ownership so that knowledge about the code is shared by design</li>
<li>Trust programmers to design and architecture the system</li>
<li>Use constant refactoring to let tailor made domain driven designs emerge from the system</li>
</ul>

]]></content>
  </entry>
  
</feed>
