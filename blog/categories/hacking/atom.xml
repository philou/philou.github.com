<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacking | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-12-16T07:57:03+01:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hackers et peintres]]></title>
    <link href="http://philippe.bourgau.net/hackers-et-peintres/"/>
    <updated>2012-07-03T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/hackers-et-peintres</id>
    <content type="html"><![CDATA[<div style="margin: 8px;">
<p>This is a french translation of the famous <a href="http://www.paulgraham.com/hp.html">Hackers and painters</a>&nbsp;essay&nbsp;written by&nbsp;<a href="http://www.paulgraham.com">Paul Graham</a>.</p>
<blockquote>
<p><strong>Hackers et peintres</strong></p>
<p>mai 2003</p>
<p>(Cet article est d&eacute;riv&eacute; d'une conf&eacute;rence &agrave; Harvard, qui int&eacute;grait un premier discours &agrave; Northeastern.)</p>
<p>Lorsque j'ai termin&eacute; mes &eacute;tudes sup&eacute;rieures en informatique, je suis all&eacute; &eacute;tudier la peinture dans une &eacute;cole d'art. Beaucoup de personnes semblaient surprises que quelqu'un qui s'int&egrave;resse aux ordinateurs puisse &eacute;galement s'int&eacute;resser &agrave; la peinture. Ils semblaient penser que le hacking et la peinture &eacute;taient des travaux tr&egrave;s diff&eacute;rents -- que le hacking &eacute;tait froid, pr&eacute;cis et m&eacute;thodique, et que la peinture &eacute;tait l'expression fr&eacute;n&eacute;tique d'un besoin primaire.</p>
<p>Ces deux images sont fausses. Le hacking et la peinture ont beaucoup de point communs. En fait, de tous les diff&eacute;rents types de personnes que j'ai connu, les hackers et les peintres sont parmis les plus semblables.</p>
<p>Les hackers et les peintres ont en commun qu'ils sont tous deux des cr&eacute;ateurs. Tout comme les compositeurs, les architectes, et les &eacute;crivains, les hackers et les peintres essayent de cr&eacute;er des belles choses. Ils ne font pas de la recherche en soi, bien que si jamais ils d&eacute;couvrent une nouvelle technique pendant qu'ils essayent de cr&eacute;er de belles choses, c'est encore mieux.</p>
<p>&nbsp;</p>
<p>Je n'ai jamais aim&eacute; le terme de "science informatique". Principalement parce qu'un tel concept n'existe pas. L'informatique est un ensemble de domaines vaguement reli&eacute;s ensemble qui ont &eacute;t&eacute; jet&eacute;s ensemble par un accident de l'histoire, comme la Yougoslavie. A une extremit&eacute; vous avez des gens qui sont de vrais math&eacute;maticiens, mais qui appellent ce qu'ils font de l'informatique pour obtenir des subventions de la DARPA. Au milieu vous avez des gens qui travaillent sur ce qui pourrait &ecirc;tre l'histoire naturelle des ordinateurs -- &eacute;tudier le comportements des algorithmes de routage de donn&eacute;es &agrave; travers un r&eacute;seau, par example. Et ensuite, &agrave; l'autres extr&eacute;mit&eacute;, vous avez les hackers, qui essayent d'&eacute;crire des programmes int&eacute;ressants, et pour qui les ordinateurs ne sont qu'un moyen d'expression, come le b&eacute;ton l'est pour les architectes ou la peinture l'est pour les peintres. C'est comme si les math&eacute;maticiens, physiciens, et architectes devaient tous &ecirc;tre dans le m&ecirc;me d&eacute;partement.</p>
<p>Parfois, ce que les hackers font s'appelle "ing&eacute;nieurie logicielle" mais ce terme est tout aussi trompeur. Les bons concepteurs de logiciel ne sont pas plus des ing&eacute;nieurs que les architectes. La fronti&egrave;re entre l'architecture et l'ing&eacute;nieurie n'est pas pr&eacute;cisement d&eacute;finie, mais elle existe. Cela se situe entre le quoi et le comment : les architectes d&eacute;cident ce qu'il faut faire, et les ing&eacute;nieurs trouvent comment le faire.</p>
<p>Le quoi et le comment ne devraient pas rest&eacute;s trop s&eacute;par&eacute;s. Vous cherchez les ennuis si vous d&eacute;cidez ce qu'il faut faire sans comprendre comment le faire. Mais le hacking peut en fait &ecirc;tre bien plus que juste d&eacute;cider comment impl&eacute;menter une sp&eacute;cification. A son meilleur, c'est cr&eacute;er la sp&eacute;cification -- et il s'av&egrave;re que la meilleure fa&ccedil;on de faire cela est de l'impl&eacute;menter.</p>
<p>&nbsp;</p>
<p>Peut &ecirc;tre qu'un jour la "science informatique" sera, comme la Yougoslavie, d&eacute;coup&eacute;e en ses diff&eacute;rentes sous parties. Ca pourrait &ecirc;tre bien. Surtout si cela signifiait l'ind&eacute;pendance pour mon pays natal, le hacking.</p>
<p>Regrouper ensemble toutes ces diff&eacute;rentes sortes de travaux est peut &ecirc;tre pratique administrativement, mais c'est intellectuellement trompeur. C'est l'autre raison pour laquelle je n'aime pas le terme "science informatique". On peut dire que les gens au milieu font quelque chose qui ressemble &agrave; une science experimentale. Mais les gens aux extr&eacute;mit&eacute;s, les hackers et les math&eacute;maticiens, ne font en fait pas de science.</p>
<p>Les math&eacute;maticiens ne semblent pas emb&ecirc;t&eacute;s par cela. Ils se mettent joyeusement &agrave; la t&acirc;che de prouver des th&eacute;or&egrave;mes, comme les autres math&eacute;maticiens du d&eacute;partement de math, et ils occultent probablement rapidement le fait que le batiment dans lequel ils travaillent est intitul&eacute; "science informatique" &agrave; l'ext&eacute;rieur. Mais pour les hackers, l'&eacute;tiquette est un probl&egrave;me. Si ce qu'il font est appel&eacute; science, cela les fait s'imaginer qu'ils devraient agir scientifiquement. Donc au lieu de faire ce qu'ils veulent vraiment faire, c'est &agrave; dire cr&eacute;er des magnifique logiciels, les hackers dans les universit&eacute;s et les centre de recherche pense qu'ils devraient &eacute;crire des publications de recherche.</p>
<p>Dans le meilleur des cas, les publications ne sont qu'une formalit&eacute;. Les hackers &eacute;crivent des programmes cools, et ensuite &eacute;crivent une publication &agrave; ce sujet, et la publication devient un portail vers la r&eacute;alisation qu'est le logiciel. Mais souvent ce d&eacute;calage engendre des probl&egrave;mes. En commen&ccedil;ant par vouloir cr&eacute;er de belles choses, il est facile de finir par construire des choses moches mais qui sont de meilleurs sujets pour une publication.</p>
<p>Malheureusement, les belles choses ne font pas toujours les meilleurs sujets de publication. Primo, les sujets de recherches doivent &ecirc;tre originaux -- et comme quiconque a &eacute;crit une th&egrave;se le sait, le moyen d'&ecirc;tre certain d'explorer un territoire vierge est de choisir un territoire dont personne ne veut. Deuxio, la recherche doit &ecirc;tre substantielle -- et les syst&egrave;mes tordus engendrent des publications plus fournies, parce que vous pouvez &eacute;crire &agrave; propos des obstacles que vous avez d&ucirc; surmonter pour faire quelque chose. Rien n'engendre des publications plus fournies que de partir avec les mauvaises hypoth&egrave;ses. La majorit&eacute; de l'IA en est un exemple; si vous supposez que la connaissance peut &ecirc;tre repr&eacute;sent&eacute;e commune une liste d'expressions de pr&eacute;dicats logiques dont les arguments repr&eacute;sente des concepts abstraits, vous allez devoir &eacute;crire beaucoup de publications pour expliquer comment faire fonctionner cela. Comme Ricky Ricardo avait l'habitude de dire "Lucy, vous avez beaucoup d'explications &agrave; faire."</p>
<p>La mani&egrave;re de cr&eacute;er quelque chose de g&eacute;nial est souvent de faire quelques subtiles modifications &agrave; quelque chose qui existe d&eacute;j&agrave;, ou de combiner des id&eacute;es existantes d'une mani&egrave;re l&eacute;g&eacute;rement diff&eacute;rente. Il est difficile de transmettre ce genre de travaux dans une publication.</p>
<p>&nbsp;</p>
<p>Alors pourquoi les universit&eacute;s et les laboratoires de recherche continuent de juger les hackers par leurs publications ? Pour les m&ecirc;mes raisons que les "aptitudes scolaires" sont mesur&eacute;es par des tests simplistes et standards, ou que la productivit&eacute; des programmeurs est mesur&eacute;e en nombre de lignes de code. Ces tests sont faciles &agrave; appliquer, et il n'y a rien de plus tentant qu'un test facile qui d'une certaine mani&egrave;re, fonctionne.</p>
<p>Mesurer ce que les hackers essayent effectivement de faire, cr&eacute;er de magnifiques logiciels, serait beaucoup plus difficile. Vous avez besoin de <a href="http://www.paulgraham.com/taste.html">bon gout</a>&nbsp;pour juger une bonne conception. Et il n'y a pas de corr&eacute;lation, sauf peut &ecirc;tre une <a href="http://www.apa.org/journals/features/psp7761121.pdf">n&eacute;gative</a>, entre la capacit&eacute; des gens &agrave; rep&eacute;rer une bonne conception et leur confiance qu'il le peuvent.</p>
<p>Le seul test externe est le temps. Avec le temps, les belles choses tendent &agrave; s'&eacute;panouir, et les moches tendent &agrave; &ecirc;tre rejet&eacute;es. Malheureusement, le temps n&eacute;cessaire pour cela peut &ecirc;tre plus long qu'une vie. Samuel Johnson a dit qu'il fallait cent ans pour que la r&eacute;putation d'un &eacute;crivain converge. Vous devez attendre que les amis influents de l'&eacute;crivain meurent, et ensuite que tous leurs suiveurs meurent.</p>
<p>Je pense que les hackers doivent simplement se r&eacute;signer &agrave; avoir une grande part d'al&eacute;atoire dans leurs r&eacute;putations. Dans ce sens ils ne sont pas diff&eacute;rents des autres cr&eacute;ateurs. En fait, ils sont chanceux en comparaison. L'influence de la mode n'est pas tout &agrave; fait aussi grande dans le hacking que dans la peinture.</p>
<p>&nbsp;</p>
<p>Il y a pire que les gens qui comprennent mal votre travail. C'est plus dangereux si vous m&ecirc;me comprenez mal votre travail. C'est dans les domaines connexes que vous pouvez trouver des id&eacute;es. Si vous vous trouvez dans le d&eacute;partement d'informatique, il sera naturel de croire, par exemple, que le hacking est la version appliqu&eacute;e de ce que l'informatique th&eacute;orique th&eacute;orise. Pendant toutes mes &eacute;tudes sup&eacute;rieures, j'&eacute;prouvais un malaise latent &agrave; me dire que je devrais connaitre plus de th&eacute;orie, et que j'avais &eacute;t&eacute; tr&egrave;s n&eacute;gligent d'avoir oubli&eacute; toutes ces choses &agrave; trois semaines de l'examen final.</p>
<p>Maintenant j'ai r&eacute;alis&eacute; que je me trompais. Les hackers ont &agrave; peut pr&ecirc;t autant besoin de comprendre la th&eacute;orie du calcul que les peintres ont besoin de comprendre la chimie de la peinture. Vous avez besoin de savoir comment calculer la complexit&eacute; temporelle et spatiale et ce qu'est la compl&eacute;tude de Turing.Vous avez peut &ecirc;tre &eacute;galement besoin de vous souvenir au moins du concept de machine &agrave; &eacute;tat, au cas o&ugrave; vous auriez &agrave; &eacute;crire un parser ou une librairie d'expression r&eacute;guli&egrave;res. En fait les peintres doivent se souvenir de bien plus concernant la chimie de la peinture.</p>
<p>Je me suis rendu compte que les meilleurs sources d'id&eacute;es ne sont pas les autres disciplines qui ont le mot "ordinateur" dans leur nom, mais les autres disciplines occup&eacute;es par des cr&eacute;ateurs. La peinture est une source bien plus riche en id&eacute;es que la th&eacute;rie du calcul.</p>
<p>Par exemple, on m'a appris &agrave; l'universit&eacute; qu'il fallait compl&eacute;tement mettre au point un programme sur le papier avant de s'approcher d'un ordinateur. Je me suis rendu compte que je ne programmais pas comme cela. Je me suis rendu compte que j'aimais m'assoire devant mon ordinateur, pas devant une feuille de papier. Pire, &agrave; la place d'&eacute;crire patiemment un programme complet et de m'assurer qu'il &eacute;tait correct, j'avais tendance &agrave; simplement balancer du code qui &eacute;tait d&eacute;sesp&eacute;rement bugg&eacute;, et de le fa&ccedil;onner petit &agrave; petit. Le debugging, comme on me l'a appris, n'&eacute;tait qu'une sorte de rel&eacute;cture finale o&ugrave; vous pouviez corriger les erreurs d'&eacute;critures et d'&eacute;tourderies. Avec ma mani&egrave;re de travailler, on aurait dit que la programmation &eacute;tait du debugging.</p>
<p>Pendant longtemps, je me suis senti coupable &agrave; cause de &ccedil;a, tout comme je me suis senti mal parce que je ne tenais pas mon crayon comme on me l'apprenais &agrave; l'&eacute;cole &eacute;l&eacute;mentaire. Si j'avais seulement regard&eacute; les cr&eacute;ateurs d'autres disciplines, les peintres et les architectes, je me serais rendu compte qu'il y avait un nom pour ce que j'&eacute;tais en train de faire : des &eacute;bauches. Aussi loin que je sache, la mani&egrave;re avec laquelle il m'ont appris &agrave; programmer &agrave; l'universit&eacute; &eacute;tait compl&eacute;tement fausse. Vous devriez concevoir vos programmes en m&ecirc;me temps que vous les &eacute;crivez, tout comme les &eacute;crivains et les peintres et les architecte le font.</p>
<p>Ce rendre compte de cela a de r&eacute;elles cons&eacute;quences sur le conception de logiciel. Cela veut dire qu'un langage de programmation doit, avant tout, &ecirc;tre mal&eacute;able. Un langage de programmation est l&agrave; pour <a href="http://www.paulgraham.com/piraha.html">r&eacute;fl&eacute;chir</a>&nbsp;&agrave; des programmes, pas pour exprimer des programmes auxquels vous avez d&eacute;j&agrave; r&eacute;fl&eacute;chi. Ca devrait &ecirc;tre un crayon, pas un stylo. Le typage statique serait une superbe id&eacute;e si les gens &eacute;crivait effectivement des programmes &agrave; la mani&egrave;re de ce qu'on m'a appris &agrave; l'universit&eacute;. Nous avons besoin d'un langage qui nous permette de griffoner et maculer et &eacute;taler, pas un langage o&ugrave; vous devez vous assoir avec une tasse &agrave; th&eacute; remplie de types en &eacute;quilibre sur vos genoux et tenir une conversation polie &agrave; votre grand-tante stricte qu'est le compilateur.</p>
<p>&nbsp;</p>
<p>Tant qu'on est sur le sujet du typage statique, s'identifier aux cr&eacute;ateurs nous &eacute;vitera un autre probl&egrave;me qui touche les sciences : l'envie de math. Tout le monde dans les sciences croit en secret que les math&eacute;maticiens sont plus intelligents qu'ils ne le sont. Je pense que les math&eacute;maticiens le croient aussi. Dans tous les cas, le r&eacute;sultat est que les scientifiques tendent &agrave; en sorte que leur travail ait l'air le plus math&eacute;matique possible. Ca ne fait surement pas beaucoup de mal dans un domaine comme la physique, mais plus vous vous &eacute;loignez des sciences naturelles, et plus le probl&egrave;me devient s&eacute;rieux.</p>
<p>Une page de formules donne un air tellement s&eacute;rieux. (Astuce : pour impressionner encore plus, utilisez des variables grecques.) Et donc il y a une grande tentation de travailler sur les probl&egrave;mes qu'on peut traiter de mani&egrave;re formelle, plut&ocirc;t que les probl&egrave;mes qui sont, par exemple, importants.</p>
<p>Si les hackers s'identifient avec les autres cr&eacute;ateurs, comme les &eacute;crivains et les peintres, ils ne seront pas tent&eacute;s de faire cela. Les &eacute;crivains et les peintres ne souffrent pas de l'envie de math. Ils prensent qu'ils font quelque chose de compl&eacute;tement diff&eacute;rent. Comme, je crois, le pensent les hackers.</p>
<p>&nbsp;</p>
<p>Si les universit&eacute;s et les labos de recherche ne permettent pas aux hackers de faire le genre de travail qu'ils veulent faire, peut &ecirc;tre que leur place est dans les entreprises. Malheureusement, la plupart des entreprises ne laisseront pas les hackers faire ce qu'ils veulent non plus. Les universit&eacute;s et les labos de recherches obligent les hackers &agrave; &ecirc;tre des scientifiques, les entreprises les obligent &agrave; &ecirc;tre des ing&eacute;nieurs.</p>
<p>J'ai personnellement d&eacute;couvert cela seulement r&eacute;cemment. Lorsque Yahoo a achet&eacute; Viaweb, ils nous ont demand&eacute; ce que je voulais faire. Je n'ai jamais beaucoup aim&eacute; la partie business, et j'ai dit que je voulais juste hacker. Lorsque je suis arriv&eacute; &agrave; Yahoo, j'ai compris que pour eux hacking voulait dire impl&eacute;menter des logiciels, pas les concevoir. Les programmeurs &eacute;taient vus comme des techniciens qui traduisaient les visions (si tel est le mot) des product managers en code.</p>
<p>Cela semble &ecirc;tre le syst&egrave;me par d&eacute;faut dans les grandes entreprises. Ils le font parce que &ccedil;a diminue l'&eacute;cart type du r&eacute;sultat. Seulement un petit pourcentage des hackers peuvent effectivement concevoir des logiciels, et il est difficile de les trouver pour les personnes dirigeant une entreprise. Donc &agrave; la place de confier le future des logiciels &agrave; un seul hacker brillant, la plupart des entreprises font en sorte qu'il soit con&ccedil;u en groupe, et que le hackers se contente d'impl&eacute;menter la conception.</p>
<p>Si vous voulez gagner de l'argent &agrave; un certain moment, rappelez vous de cela, parce que c'est la raison pour laquelle les startups gagnent. Les grandes entreprises veulent r&eacute;duire l'&eacute;cart type des r&eacute;sultats de conception parce qu'elle veulent &eacute;viter les d&eacute;sastres. Mais lorsque vous attenuez les oscillations, vous perdez les points hauts aussi bien que les bas. Ca n'est pas un probl&egrave;me pour les grandes entreprises, parce qu'elle ne gagnent pas en faisant des supers produits. Les grandes entreprises gagnent en &eacute;tant moins nulles que les autres grandes entreprises.</p>
<p>Donc si vous vous trouvez un moyen de faire une guerre de conception avec une entreprise assez grande pour que son software soit con&ccedil;u par des directeurs produits, ils ne seront jamais capables de vous suivre. Ces opportunit&eacute;s ne sont pas facile &agrave; trouver cependant. Il est difficile d'engager une guerre de conception avec une grande entreprise, tout comme il est difficile d'engager un enemis dans son chateau en combat au corps &agrave; corps. Il serait tr&egrave;s facile d'&eacute;crire un meilleur traitement de texte que Microsoft Word, par exemple, mais Microsoft, &agrave; l'int&eacute;rieur de leur chateau du monopole du syst&egrave;me d'exploitation, ne se rendrait surement m&ecirc;me pas compte que vous l'auriez fait.</p>
<p>Les champs de bataille des guerres de conception sont les nouveaux march&eacute;s, o&ugrave; personne n'a encore r&eacute;ussi &agrave; &eacute;tablir des fortifications. C'est l&agrave; que vous pouvez gagner beaucoup en prenant l'approche courageuse de la conception, et en ayant les m&ecirc;me personnes qui &agrave; la fois conceoivent et impl&eacute;mentent le prduit. Microsoft eux m&ecirc;me ont fait cela au d&eacute;but. Comme Apple. Et Hewlett-Packard. Je soup&ccedil;conne que quasiment toute les startups &agrave; succ&eacute;s l'ont fait.</p>
<p>&nbsp;</p>
<p>Donc une mani&egrave;re de construire des logiciels g&eacute;niaux est de d&eacute;marrer votre propre startup. Il y a deux probl&egrave;mes avec cela, cependant. L'un est que dans une startup il y a beaucoup &agrave; faire en plus d'&eacute;crire des logiciels. A Viaweb je me consid&eacute;rais chan&ccedil;eux si j'arrivais &agrave; hacker un quart de mon temps. Et les choses que j'avais &agrave; faire les trois autres quarts du temps allait du p&eacute;nible au terrifiant. J'ai un benchmark pour cela, parce qu'&agrave; une occasion j'ai d&ucirc; quitter une r&eacute;union du conseil pour me faire soigner des caries. Je me souviens &ecirc;tre assis sur le fauteuil du dentiste, attendant la fraise, et me sentir comme si j'&eacute;tais en vacances.</p>
<p>L'autre probl&egrave;me avec les startup est que l'intersection entre le genre de logiciels qui rapportent de l'argent et le genre qui sont int&eacute;ressant &agrave; &eacute;crire est petite. Les languages de programmation sont int&eacute;ressants &agrave; &eacute;crire, et le premier produit de Microsoft en &eacute;tait un en fait, mais personne ne voudra payer pour un langage de programmation maintenant. Si vous voulez faire de l'argent, vous aurez tendance &agrave; devoir travailler sur des probl&egrave;mes qui sont trop vilains pour que quiconque veuille les r&eacute;soudre gratuitement.</p>
<p>Tous les cr&eacute;ateurs font face &agrave; ce probl&egrave;me. Les prix sont d&eacute;termin&eacute;s par l'offre et la demande, et il n'y a tout simplement pas autant de demande pour les choses sur lesquelles il est amusant de travailler que sur les choses qui r&eacute;solvent les probl&egrave;mes terre &agrave; terre des diff&eacute;rents clients. Jouer dans une pi&egrave;ce de th&eacute;atre hors Broadway ne paye tout simplement pas autant que de porter un d&eacute;guisement de Gorille dans une cabine pour quelqu'un &agrave; une foire commerciale. Ecrire des livres ne paye pas autant que d'&eacute;crire des copies de publicit&eacute;s qui finiront aux ordures. Et hacker des langages de programmation ne paye pas aussi bien que de trouver comment connecter la base de donn&eacute;e historique d'une entreprise &agrave; leur serveur web.</p>
<p>&nbsp;</p>
<p>Je pense que la r&eacute;ponse &agrave; ce probl&egrave;me, dans le cas du logiciel, est un concept connu de presque tous les cr&eacute;ateurs : le job de jour. Cette expression &agrave; commenc&eacute;e avec les musiciens, qui se produisent la nuit. Plus g&eacute;n&eacute;ralement, &ccedil;a veut dire que vous avez une sorte de travail que vous faites pour l'argent, et une autre par passion.</p>
<p>Presque tous les cr&eacute;ateurs ont un&nbsp;job&nbsp;de jour au d&eacute;but de leur carri&egrave;re. Il est c&eacute;l&eacute;bre que les peintres et les &eacute;crivains en ont. Si vous &ecirc;tes chanceux vous pouvez trouver un&nbsp;job&nbsp;de jour qui est tr&egrave;s proche de votre vrai travail. Les musiciens semble souvent travailler dans des magasins de disques. Un hacker qui travaille sur un langage de programmation ou un syst&egrave;me d'exploitation pourrait &eacute;galement &ecirc;tre en mesure de trouver un job de jour qui l'utilise. [1]</p>
<p>Lorsque je dis que la r&eacute;ponse pour les hackers est d'avoir un job de jour, et de travailler sur de beaux softwares &agrave; c&ocirc;t&eacute;, je ne propose pas cela comme une nouvelle id&eacute;e. C'est la raison d'&ecirc;tre du hacking open-source. Ce que je dis c'est l'open-source est probablement le bon mod&egrave;le, parce qu'il a &eacute;t&eacute; ind&eacute;pendament confirm&eacute; par tous les autres cr&eacute;ateurs.</p>
<p>Ca me semble tr&egrave;s surprenant qu'un employeur soit r&eacute;calcitrant &agrave; laisser les hackers travailler sur des projest open-source. A Viaweb, nous aurions &eacute;t&eacute; r&eacute;calcitrant &agrave; embaucher quiconque ne le faisait pas. Lorsque nous faisions passer des entretiens &agrave; des programmeurs, la chose &agrave; laquelle nous faisions le plus attention &eacute;tait de savoir quel &eacute;tait le genre de logiciels qu'ils &eacute;crivaient dans leur temps libre. Vous ne pouvez pas faire quelque chose vraiment bien sans aimer le faire, et si vous aimer le hacking, in&eacute;vitablement vous travaillerez sur vos projets personnels. [2]</p>
<p>&nbsp;</p>
<p>Compte tenu que les hackers sont des cr&eacute;ateurs plut&ocirc;t que des scientifiques, le bon endroit pour trouver des m&eacute;taphores n'est pas dans les sciences, mais aupr&egrave;s des autres sortes de cr&eacute;ateurs. Qu'est ce que peut encore nous apprendre la peinture &agrave; propos du hacking ?</p>
<p>Une chose qu'on peut apprendre, ou en tout cas confirmer, de l'exemple de la peinture est comment apprendre &agrave; hacker. On apprend &agrave; peindre principalement en le faisant. Idem pour le hacking. La plupart des hackers n'apprenne pas &agrave; hacker en suivant des cours de programmations &agrave; l'universit&eacute;. Ils apprennent &agrave; hacker en &eacute;crivant leurs propres programmes &agrave; 13 ans. M&ecirc;me &agrave; l'universit&eacute;, vous apprenez principalement &agrave; hacker en hackant. [3]</p>
<p>Comme les peintres laissent une trace de leur travail derri&egrave;re eux, on peut les voir apprendre en faisant. Si vous observez le travail d'un peintre par ordre chronologique, vous verrez que chaque peinture est construite sur des choses qui ont &eacute;t&eacute; apprises lors des pr&eacute;c&eacute;dentes. Lorsqu'il y a quelque chose dans une peinture qui fonctionne vraiment bien, vous pouvez souvent en trouver la version 1 en plus petit dans une peinture plus ancienne.</p>
<p>Je pense que la plupart des cr&eacute;ateurs travaillent de cette mani&egrave;re. Les &eacute;crivains et les architectes le semblent aussi. Peut &ecirc;tre qu'il serait bon pour les hackers d'agir plut&ocirc;t comme les peintres, et de r&eacute;guli&egrave;rement red&eacute;marrer de z&eacute;ro, plut&ocirc;t que de continuer &agrave; travailler pendant des ann&eacute;es sur un projet, et d'essayer d'incorporer toutes leurs derni&egrave;res id&eacute;es comme &eacute;volutions.</p>
<p>Le fait que les hackers apprennent &agrave; hacker en faisant est un autre indice d'&agrave; quel point le hacking est diff&eacute;rent des sciences. Les scientifiques n'apprennent pas les sciences en les pratiquant, mais en faisant des exp&eacute;riences et des hypoth&eacute;ses. Les scientifiques commencent par faire du travail parfait, dans le sens o&ugrave; ils essayent juste de reproduire le travail que quelqu'un d'autre a d&eacute;j&agrave; faire pour eux. Tout &agrave; la fin, ils arrivent au point o&ugrave; ils peuvent faire du travail original. A la diff&eacute;rence des hackers qui, depuis le d&eacute;but, font du travail original; qui est juste tr&egrave;s mauvais. Donc les hackers commencent originaux, et deviennent bons, et les scientifiques commencent bons, et deviennent originaux.</p>
<p>L'autre moyen d'apprendre pour les cr&eacute;ateurs est par l'exemple. Pour un peintre, un mus&eacute;e est une librairie de r&eacute;f&eacute;rence de techniques. Pendant des si&egrave;cles l'apprentissage traditionel des peintres &agrave; consister &agrave; copier des oeuvres de grands ma&icirc;tres, parce que la copie vous oblige &agrave; regarder dans le d&eacute;tail la mani&egrave;re dont la peinture est faite.</p>
<p>Les &eacute;crivains font cela aussi. Benjamin Franklin a appris &agrave; &eacute;crire en r&eacute;sumant les points dans les essais de Addison et Steel et ensuite en essayant de les reproduires. Raymond Chandler a fait la m&ecirc;me chose avec les histoires de d&eacute;tectives.</p>
<p>Les hackers, de m&ecirc;me, peuvent apprendre &agrave; programmer en regarder des bons programmes-- pas seulement ce qu'ils font, mais le code source aussi. Un des avantages les moins m&eacute;diatis&eacute;s du mouvement open-source est qu'il a simplifier l'apprentissage de la programmation. Lorsque j'ai appris &agrave; programmer, nous devions principalement nous appuyer sur des exemples dans des livres. Le gros morceaux de code disponible &agrave; l'&eacute;poque &eacute;tait Unix, mais m&ecirc;me cela n'&eacute;tait pas open-source. La plupart des gens qui en lisait les sources lisaient des photocopies pirates du livre de John Lion, lequel, bien qu'&eacute;crit en 1977 n'a pas &eacute;t&eacute; autoris&eacute; &agrave; la publication avant 1996.</p>
<p>&nbsp;</p>
<p>Un autre exemple que nous pouvons prendre de la peinture est la mani&egrave;re avec laquelle les peintures sont construites par am&eacute;liorations successives. Les peintures commencent d'habitude avec un croquis. Progressivement les d&eacute;tails sont ajout&eacute;s. Mais &ccedil;a n'est pas qu'une technique d'ajout. Parfois le plan de d&eacute;part se r&eacute;v&egrave;le faux. D'innombrables peintures, lorsque vous les observ&eacute;e aux rayons X, se r&eacute;v&egrave;lent contenir des membres qui ont &eacute;t&eacute; d&eacute;plac&eacute;s ou traits de visage qui ont &eacute;t&eacute; ajust&eacute;s.</p>
<p>Voici un cas o&ugrave; nous pouvons apprendre de la peinture. Je pense que le hacking devrais fonctionner de cette mani&egrave;re aussi. Il est irr&eacute;aliste d'esp&egrave;rer que les sp&eacute;cifications d'un programme soient parfaites. Vous serez plus &agrave; l'aise si vous admettez ceci d&egrave;s le d&eacute;but, et que vous &eacute;criviez des programmes de mani&egrave;re &agrave; permettre aux sp&eacute;cifications de changer &agrave; la vol&eacute;e.</p>
<p>(L'organisation des grandes entreprises rend cela tr&egrave;s difficile &agrave; faire, voici donc une autre point o&ugrave; les startups ont un avantage.)</p>
<p>Aujourd'hui, sans doute tout le monde connait les danger de l'optimisation pr&eacute;matur&eacute;e. Je pense que nous devrions &ecirc;tre tout aussi inquiet de la conception pr&eacute;matur&eacute;e-- d&eacute;cider trop t&ocirc;t ce que notre programme devrait faire.</p>
<p>De bons outils peuvent nous aider &agrave; &eacute;viter ce danger. Un bon langage de programmation devrait, comme la peinture &agrave; l'huile, nous permettre de changer d'avis plus simplement. Le typage dynamique est un gain ici parce que vous n'avez pas &agrave; vous engager sur des repr&eacute;sentations sp&eacute;cifiques des donn&eacute;es d&egrave;s le d&eacute;but. Mais la clef de la flexibilit&eacute;, je pense, est de rendre le langage tr&egrave;s <a href="http://www.paulgraham.com/power.html">abstrait</a>. Le programme le plus facile &agrave; modifier est celui qui est tr&egrave;s court.</p>
<p>&nbsp;</p>
<p>Ceci r&eacute;sonne comme un paradoxe, mais une peinture extraordinaire doit &ecirc;tre encore meilleure que ce qu'elle doit &ecirc;tre. Par exemple, lorsque L&eacute;onard a peint le portrait de Ginevra de'Benci &agrave; la Gallerie Nationale, il mit un gen&eacute;vrier derri&egrave;re sa t&ecirc;te. Il peint avec minutie chacune de ses feuilles. Beaucoup de peintre auraient pu penser que cela &eacute;tait juste quelque chose &agrave; mettre en fond pour encadrer sa t&ecirc;te. Que personne ne regarderait cela d'aussi pr&ecirc;t.</p>
<p>Pas L&eacute;onard. Le travail qu'il fournissait pour une partie d'une peinture ne d&eacute;pendait pas de la distance &agrave; laquelle il imaginait qu'on la regarderait. Il &eacute;tait comme Michael Jordan. Implacable.</p>
<p>L'acharnement est toujours un succes parce que, dans l'ensemble, les d&eacute;tails invisibles deviennent visibles. Lorsque les gens passent devant le portrait de Ginevra de' Benci, il capte souvent imm&eacute;diatement leur attention, avant m&ecirc;me qu'il regarde l'&eacute;critau et l'explication qui indique L&eacute;onard de Vinci. Tous ces d&eacute;tails invisibles se combinent pour produire quelque chose de tout simplement ahurissant, comme un milier de voix &agrave; peine audibles qui chantent &agrave; l'unisson.</p>
<p>Les excellents logiciels, eux aussi, exigent une d&eacute;votion fanatique &agrave; la beaut&eacute;. Si vous regardez &agrave; l'int&eacute;rieur de bons logiciels, vous trouverez des parties que personnes n'est suppos&eacute; voir et qui sont magnifiques. Je ne pr&eacute;tends pas &eacute;crire des excellents logiciels, mais je sais que lorsqu'il s'agit de code je me comporte d'une mani&egrave;re qui me vaudrait une prescription de m&eacute;dicament si je l'utilisais dans la vie de tous les jours. Ca me rend fou de voir du code qui est mal indent&eacute;, ou qui utilise des noms de variables affreux.</p>
<p>Si un hacker n'&eacute;tait qu'un simple impl&eacute;menteur, transformant une specification en code, alors il pourrait juste travailler d'un bout &agrave; l'autre comme quelqu'un qui creuse un foss&eacute;. Mais si un hacker est un createur, nous devons tenir compte de l'inspiration.</p>
<p>En hacking, comme en peinture, le travail arrive par cycle. Parfois vous &ecirc;tes excit&eacute; par un nouveau projet et vous voulez travailler seize heures par jours dessus. D'autres fois rien ne semble int&eacute;ressant.</p>
<p>Pour faire du bon travail vous devez prendre tenir compte de ces cycles, parce vous &ecirc;tes sensible &agrave; la mani&egrave;re dont vous leurs r&eacute;agissez. Lorsque vous conduisez une voiture avec transmission manuelle sur une coline, vous devez parfois r&eacute;trograder pour &eacute;viter de caller. De la m&ecirc;me mani&egrave;re, r&eacute;trograder &eacute;vite parfois &agrave; l'ambition de caller. En peinture tout comme en hacking il y a des t&acirc;ches tellement ambitieuses qu'elles en sont sont terrifiantes, et d'autres qui sont confortablement routini&egrave;res. C'est une bonne id&eacute;e de conserver des t&acirc;ches faciles pour les moment o&ugrave; vous auriez caller autrement.</p>
<p>En hacking, cela peut lit&eacute;ralement signifier garder des bugs. J'aime le debugging : c'est le moment unique ou le hacking est aussi simple que les gens le pensent. Vous avez un probl&egrave;me compl&eacute;tement conscrit, et tout ce que vous avez &agrave; faire est de le r&eacute;soudre. Votre programme est suppos&eacute; faire x. A la place il fait y. O&ugrave; va-t'il de travers ? Vous savez que vous allez gagner &agrave; la fin. C'est aussi relaxant que de peindre un mur.</p>
<p>&nbsp;</p>
<p>L'exemple de la peinture peut nous apprendre &agrave; non seulement &agrave; g&eacute;rer notre propre travail, mais aussi &agrave; travailler ensemble. Beaucoup d'oeuvres du pass&eacute; sont le travail de beaucoup de mains, m&ecirc;me si il se peut qu'il n'y ait qu'un nom sur le mur qui la soutient au mus&eacute;. L&eacute;onard &eacute;tait un apprenti &nbsp;&agrave; l'atelier de Verrocchio et a peint l'un des anges dans son <a href="http://www.paulgraham.com/baptism.html">Bapt&ecirc;me du christ</a>. Ce genre de chose &eacute;tait la r&egrave;gle, pas l'exception. Michelange a &eacute;t&eacute; consid&eacute;r&eacute; particuli&egrave;rement d&eacute;vou&eacute; pour avoir insister &agrave; peindre lui m&ecirc;me tous les personnages du plafond de la chapelle Sistine.</p>
<p>Aussi loin que je sache, lorsque les peintres travaillent ensemble sur une peinture, ils ne travaillent jamais sur les m&ecirc;me parties. Il &eacute;tait commun pour un ma&icirc;tre de peindre les personnages principaux et pour les assistants de peindre le fond et les autres. Mais vous n'aviez jamais un type qui paignait sur le travail des autres.</p>
<p>Je pense que cela est &eacute;galement le bon mod&egrave;le de collaboration pour le logiciel. Ne le poussez pas trop loin. Lorsqu'un morceau de code est hack&eacute; par trois ou quatres personnes, n'appartenant &agrave; aucun de ceux-ci, il finira comme une pi&egrave;ce commune. Il aura tendance &agrave; &ecirc;tre morne et abandonn&eacute;, et &agrave; accumuler la salet&eacute;. La bonne mani&egrave;re de collaborer est, je pense, de diviser les projets en modules pr&eacute;cisement d&eacute;finis, chacun avec un propri&eacute;taire connu, et avec des interfaces entre eux qui soient aussi bien con&ccedil;ues et, si possible, aussi flexibles qu'un langage de programmation.</p>
<p>&nbsp;</p>
<p>Comme la peinture, la plupart des logiciels sont destin&eacute;s &agrave; des humains. Et donc les hackers, comme les peintres, doivent avoir de l'empathie pour des choses vraiment g&eacute;niales. Vous devez &ecirc;tre capable de voir les choses du point de vue de l'utilisateur.</p>
<p>Lorsque j'&eacute;tais un enfant on me disait tout le temps de regarder les choses du point de vue de quelqu'un d'autre. Ce que cela voulait dire en pratique &eacute;tait de faire ce que quelqu'un d'autre voulait plut&ocirc;t que ce que je voulais. Cela biens&ucirc;r donna une mauvaise r&eacute;putation &agrave; l'empathie, et je me fis un principe de ne pas la cultiver.</p>
<p>Et bien, qu'est ce que j'avais tord. Il s'est r&eacute;v&eacute;l&eacute; que de regarder les choses depuis le point de vue des autres est pratiquement le secret du succ&egrave;s. Ca ne veut pas n&eacute;cessairement dire se sacrifier. Loin de l&agrave;. Comprendre ce que pense quelqu'un autre n'implique pas que vous agissiez dans son inter&ecirc;t; dans certains situation-- pendant la guerre, par exemple-- Vous voulez faire exactement l'oppos&eacute;. [4]</p>
<p>La plupart des cr&eacute;ateurs font des choses pour un public humain. Et pour int&eacute;resser un public vous devez comprendre ce dont il a besoin. Presque toutes les plus grandes peintures sont des peinture de personnes, parce que, par exemple,&nbsp;ce sont les gens qui int&eacute;ressent les gens.</p>
<p>L'empathie est probablement la diff&eacute;rence la plus importante entre un bon hacker et un hacker g&eacute;nial. Certains hackers sont tr&egrave;s intelligents, mais en ce qui concerne l'empathie sont pratiquement solipsistes. C'est difficile pour de telles personnnes de concevoir des logiciels g&eacute;niaux [5], parce qu'ils ne peuvent pas voir les choses du point de vue de l'utilisateur.</p>
<p>Une bonne mani&egrave;re de dire &agrave; quel point des gens sont empathiques et de les regarder expliquer un probl&egrave;me technique &agrave; quelqu'un sans formation technique. Nous connaissons tous des gens qui, bien qu'intelligents, sont juste comiques lorsqu'ils font cela. Si &agrave; une soir&eacute;e repas quelqu'un leur demande ce qu'est un langage de programmation, ils diront quelque chose comme "Ah, un langage de haut niveau est celui utilis&eacute; par le compilateur pour g&eacute;n&eacute;rer le code machine." Langage de haut niveau ? Compilateur ? Code machine ? Quelqu'un qui ne sait pas ce qu'est un langage de programmation ne sait &eacute;videment pas ce que ces choses sont non plus.</p>
<p>Une chose que le logiciel doit faire est de s'expliquer soit-m&ecirc;me. Donc pour &eacute;crire de bon logiciels vous devez comprendre &agrave; quel point les utilisateurs en comprennent peu. Il vont essayer le logiciel sans pr&eacute;paration, et il vaut mieux qu'il fasse ce qu'ils ont devin&eacute; qu'il faisait, parce qu'ils ne vont pas lire le manuel. Le meilleur syst&egrave;me que j'ai vu selon ce crit&egrave;re est le premier Machintosh, en 1985. Il faisait ce que les logiciels ne font quasiment jamais : il fonctionnait tout de suite. [6]</p>
<p>Le code souce, lui aussi, devrait s'expliquer lui-m&ecirc;me. Si je pouvais amener les gens &agrave; se souvenir d'une seule citation &agrave; propos de la programmation, &ccedil;a serait celle au d&eacute;but de <em>Structure and Interpretation of Computer Programs</em>.</p>
<p style="padding-left: 30px;">Les programmes devraient &ecirc;tre &eacute;crit pour que les gens puissent les lire, et seulement accessoirement que les machines les ex&eacute;cutent.</p>
<p>Vous devez avoir de l'empathie non seulement pour vos utilisateurs, mais &eacute;galement pour vos lecteurs. C'est dans votre inter&ecirc;t, parce que vous serez l'un d'eux. Beaucoup de hackers ont &eacute;crit un programme et ont d&ucirc; y revenir six mois plus tard pour se rendre compte qu'ils n'avaient aucune id&eacute;e de comment est ce qu'il fonctionnait. Je connais plusieurs personnes qui ont ont jur&eacute; de ne plus utiliser Perl apr&egrave;s de telles exp&eacute;riences. [7]</p>
<p>Le manque d'empathie est associ&eacute; &agrave; l'intelligence, au point que &ccedil;a en soit une sorte de mode &agrave; certains endroits. Mais je ne pense pas qu'il ait une corr&eacute;lation. Vous pouvez &ecirc;tre bon en math et en sciences naturelles sans avoir &agrave; apprendre l'empathie, et les gens dans ces mati&egrave;res sont plut&ocirc;t intelligents, donc les deux qualit&eacute;s sont devenues associ&eacute;es. Mais il y a &eacute;galement beaucoup d'imb&eacute;ciles qui ne sont pas empathiques. Ecoutez seulement aux personnes qui appellent pour poser des questions dans les talk shows. Ils posent leur question d'une mani&egrave;re tellement tordue que le pr&eacute;sentateur est souvent oblig&eacute; de reformuler la question pour eux.</p>
<p>&nbsp;</p>
<p>Donc, si le hacking fonctionne comme la peinture et l'&eacute;criture, est-ce aussi cool ? Apr&egrave;s tout, vous n'avez qu'une seule vie. Autant la passer &agrave; travailler sur quelque chose de g&eacute;nial.</p>
<p>Malheureusement, la question est difficile &agrave; r&eacute;pondre. Il y a toujours un grand d&eacute;lais avant le prestige. C'est comme la lumi&egrave;re d'une &eacute;toile lointaine. La peinture a du prestige maintenant gr&acirc;ce au travail g&eacute;nial que des gens ont fait il y a cinq si&egrave;cles. A cette &eacute;poque, personne ne pensait que ces peintures &eacute;taient aussi importantes que nous le pensons aujourd'hui. Ca aurait sembl&eacute; tr&egrave;s &eacute;trange aux gens de cette &eacute;poque que Federico da Montefeltro, le Duke of Urbino, serait un jour principalement connu comme le type avec le dr&ocirc;le de nez dans une <a href="http://www.paulgraham.com/montefeltro.html">peinture</a> de Piero della Francesca.</p>
<p>Donc bien que j'admette que le hacking n'ait pas l'air aussi cool que la peinture maintenant, nous devrions nous souvenir que la peinture elle m&ecirc;me n'avait pas l'air aussi cool pendant son age d'or que maintenant.</p>
<p>Ce qu'on peut dire avec une certaine certitude est que c'est l'&acirc;ge d'or du hacking. Dans la plupart des domaines les grandes oeuvres sont faites t&ocirc;t. Les peintures faites entre 1430 et 1500 sont toujours insurpass&eacute;es. Shakespeare apparu en m&ecirc;me temps que le th&eacute;atre professionel naissait, et a pouss&eacute; le milieu si loin que depuis, tout dramaturge a du vivre dans son ombre. Albrecht Durer fit m&ecirc;me chose avec la sculpture, et Jane Austen avec les romans.</p>
<p>Encore et encore nous assistons au m&ecirc;me sch&eacute;ma. Une nouvelle mati&egrave;re apparait, les gens en sont tellement enthousisathes qu'ils explorent la plupart de ses possibilit&eacute;s pendant les premi&egrave;res g&eacute;n&eacute;rations. Le hacking semble &ecirc;tre dans cette phase maintenant.</p>
<p>La peinture n'&eacute;tait pas, &agrave; l'&eacute;poque de L&eacute;onard, aussi cool que son travail l'a rendue. Le hacking deviendra cool ou pas suivant ce que nous arrivons &agrave; faire avec cette nouvelle mati&egrave;re.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Notes</strong></p>
<p>[1] Le plus grand tord qu'a fait la photographie &agrave; la peinture est peut &ecirc;tre qu'elle a tu&eacute; les meilleurs jobs de jour. La plupart des grands peintres de l'histoire sont subvenus &agrave; leurs besoins en peignant des portraits.</p>
<p>[2] On m'a dit que Microsoft d&eacute;conseille &agrave; ses employ&eacute;s de contribuer &agrave; des projest open-source, m&ecirc;me dans leur temps libre. Mais maintenant une telle proportions des meilleurs hackers travaillent sur ldes projets open-source que l'effet principal de cette politique pourrait &ecirc;tre de s'assurer de ne pas embaucher les programmeurs de premi&egrave;re classe.</p>
<p>[3] Ce que vous apprenez &agrave; propos de la programmation &agrave; l'universit&eacute; est tr&egrave;s semblable &agrave; ce que vous apprenez &agrave; propos des livres ou des v&ecirc;tements ou des rencontres : qu'est ce que vous aviez mauvais gout au lyc&eacute;e.</p>
<p>[4] Voici un exemple d'empathie appliqu&eacute;e. A Viaweb, si nous ne parvenions pas &agrave; choisir entre deux alternatives, nous nous demandions, qu'est ce que nos concurrent d&eacute;testeraient le plus ? A un moment, un concurrent a ajout&eacute; une fonctionalit&eacute; &agrave; leur logiciel qui &eacute;tait globalement inutile, mais comme c'&eacute;tait une des rares qu'ils avaient et pas nous, ils en firent beaucoup de bruit dans la presse. Nous aurions pu essayer d'expliquer que cette fonctionalit&eacute; &eacute;tait inutile, mais nous avons d&eacute;cid&eacute; que &ccedil;a &eacute;nerverait plus notre concurrent si nous l'impl&eacute;mentions simplement, nous avons donc hack&eacute; notre propre version en une apr&egrave;s midi ce jour l&agrave;.</p>
<p>[5] Sauf les &eacute;diteurs de texte et les compilateurs. Les hackers n'ont pas besoin d'empathie pour concevoir ceux-ci, parce qu'ils en sont eux m&ecirc;me des utilisateurs typiques.</p>
<p>[6] Enfin, presque. Ils ont quelque peut d&eacute;pass&eacute; la quantit&eacute; de RAM disponible, entrainant beaucoup de swap disque p&eacute;nible, mais cela pouvait &ecirc;tre corrig&eacute; apr&egrave;s quelques mois en achetant un lecteur de disque suppl&eacute;mentaire.</p>
<p>[7] La mani&egrave;re de rendre les programmes facile &agrave; lire n'est pas de les remplir de commentaires. Je pousserais la citation d'Abelson et Sussman un pas plus loin. Les langages de programmation devraient &ecirc;tre con&ccedil;us pour exprimer des algorithmes, et seulement accessoirement pour que les machines les ex&eacute;cutent. Un bon langage de programmation devrait &ecirc;tre plus efficace pour expliquer un programme que l'Anglais. Les commentaires ne devraient &ecirc;tre n&eacute;cessaires que lorsqu'il y a une sorte de bricolage dont vous devez mettre en garde le lecteur, tout comme il n'y a des fl&egrave;ches sur la route qu'aux virages serr&eacute;s et innattendus.</p>
<p><strong>Merci</strong> &agrave; Trevor Blackwell, Robert Morris, Dan Giffin et Lisa Randall pour avoir lu les &eacute;bauches de ceci, et &agrave; Henry Leitnet et Larry Finkelstein pour m'avoir invit&eacute; &agrave; parler.</p>
</blockquote>
<p>Fixes and improvements are welcome.</p>

</div>

]]></content>
  </entry>
  
</feed>
