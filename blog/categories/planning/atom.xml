<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: planning | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/planning/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-10-03T15:30:17+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 2]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2/"/>
    <updated>2018-09-27T19:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-2</id>
    <content type="html"><![CDATA[<p><em>How to improve a factual business case for a refactoring to make it even more compelling to business people.</em>Â </p>

<p>In last post, I explained how to make a business case for a large scale refactoring using real numbers. Numbers are great, but they won&rsquo;t get us sponsorship by themselves. We need to understand them. We need to make sure they make sense. We need to make sure they are backing our refactoring up. In the end, we might need to improve them.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/refactoring-trim-teaser.jpeg" alt="Drawing of a hammer removing the G from refactoring written with stones. Trimming a refactoring is an effective way to increase its value, and make the business case better." /></p>

<p>This is the thirteenth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>What If Payback Period is too long?</h2>

<p>If payback period is close enough, then great, we can go out and pitch the refactoring. Most of the time though, large scale refactorings take quite some time to payback.</p>

<h3>Product Life Expectancy</h3>

<p>The first thing to do is to put this in the perspective of the company&rsquo;s or product&rsquo;s life expectancy. Imagine a product which is 10 years old and expected to cash-in for another 10 years. In this context, a refactoring that pays for itself in 1 year <em>is</em> a great opportunity!</p>

<blockquote><p>ðŸ’¡ The longer the life expectancy of your product, the more refactoring you should invest in!</p></blockquote>

<p>Picking the age of the product as its life expectancy is realistic most of the time. New products have low life expectancy, but legacy systems seem to last forever!</p>

<h3>Split the refactoring!</h3>

<p>A strategy to reduce the payback period is to split this large scale refactoring. Can we make it smaller, more focused, or find sub steps that pay for themselves faster? Here again, <a href="/blog/categories/incremental-software-development/">incremental refactoring techniques</a> will be critical.</p>

<h3>Did we do an error?</h3>

<p>It&rsquo;s also possible that we did an error in the business case computation. Sampling and logging are error-prone techniques.</p>

<p>Is the iteration we took for sample is representative enough of the future work ? In doubt, we can re-do the sampling or the computation. Using better data leads to a better conclusion.</p>

<p>There are also other costs we did not take into account to be able to stick to man.hours. Let&rsquo;s have a look at these.</p>

<h2>Ideas for Improvements</h2>

<h3>Convert to Money</h3>

<p>If we have access to money numbers, we should be able to improve the figures with new costs.</p>

<p>First, we&rsquo;ll need the average wage of team members to convert our figures in real money.</p>

<p>If we have the figure, we can add the image cost of a bug to the non-refactoring cost.</p>

<p>Finally, if we have the revenue per feature, we can add the opportunity cost to the refactoring cost. Opportunity cost is the cost of not working on features !</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/money.jpg" alt="Stacks of coins. If we have access to the good figures, it is possible to make the business case for large scale refactoring with real money instead of man.hours." /></p>

<h3>Use a similar refactoring</h3>

<p>Did someone do a similar refactoring in the past? If so, we can use it to improve your estimates about:</p>

<ul>
<li>Refactoring time</li>
<li>Productivity improvement</li>
<li>Time saved on bugs and support.</li>
</ul>


<h3>Is it a good idea in the end?</h3>

<p>Are the numbers still arguing against the refactoring? Maybe it&rsquo;s not such a great idea afterwards &hellip; We ought not to argue for something of dubious value, our credibility is at stake.</p>

<p>At this point, it might be a good idea to look for another improvement to do. Maybe there is other code to refactor or a new productivity tool to build.</p>

<blockquote><p>ðŸ’¡ Avoiding bad moves is a key benefit of making a business case for large scale refactoring!</p></blockquote>

<h2>Other References</h2>

<p>I&rsquo;m fond of this way of prioritizing software. It&rsquo;s the way out of bickering about best practices, and towards sustainable pace. If you want to learn more about this, here are 2 helpful references :</p>

<ul>
<li>A blog post <a href="https://www.scrum.org/resources/blog/making-tech-debt-visible">Making Technical Debt Visible</a> . It explains how to use the scrum sprint backlog to display the cost of technical debt.</li>
<li>A PluralSight course <a href="https://www.pluralsight.com/courses/making-business-case-for-best-practices">Making the Business Case for Best Practices</a>. It&rsquo;s just great. It contains a ton of practices to help us to get realistic numbers and estimates.</li>
</ul>


<p><a href="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/making-the-business-case.jpg"><img src="http://philippe.bourgau.net/imgs/2018-09-18-making-the-business-case-for-a-large-scale-refactoring-part-2/making-the-business-case-small.jpg" alt="Visual notes from the Plural Sight course &quot;Making the Business Case for Best Practices&quot;. It contains many techniques that can be used for large scale refactoring" /></a><div class="image-credits">Visual notes from <a href="https://www.pluralsight.com/courses/making-business-case-for-best-practices">Making the Business Case for Best Practices</a></div><br></p>

<h2>Next post</h2>

<p>This is the thirteenth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. We&rsquo;re reaching the end ! In <a href="http://eepurl.com/dxKE95">next week&rsquo;s post</a>, I&rsquo;ll go over Business Partnership. Practices we can put in place once we have build a lot of trust with business people. Stay tuned !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the business case for a large scale refactoring - Part 1]]></title>
    <link href="http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1/"/>
    <updated>2018-09-20T08:58:00+02:00</updated>
    <id>http://philippe.bourgau.net/making-the-business-case-for-a-large-scale-refactoring-part-1</id>
    <content type="html"><![CDATA[<p><em>With a bit of discipline, we can make a factual business case for a large scale refactoring that business people won&rsquo;t resist.</em></p>

<p>The <a href="/presenting-a-large-scale-refactoring-as-a-business-opportunity/">previous 2 articles</a> were about how to present large scale refactorings to business people. This might already get us a lot closer to having our large scale refactoring prioritized. Unfortunately, many times this won&rsquo;t be enough. Hopefully, we can add something to make the point to business people : numbers !</p>

<p>Business people love numbers. Presented well, they make decisions a lot easier to take. Making a business case is about estimating the costs of doing versus not doing a refactoring.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/legacy-vs-refactoring.jpg" alt="Drawing of legacy and a refactoring plan in a balance. Making a business case for a large scale refactoring is all about estimating the costs of both options" /></p>

<p>This is the twelfth post in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for large scale refactorings</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<h2>Before anything</h2>

<p>Before we start any computation, we need to know what we are talking about. This means that as a team, we must agree and specify enough the refactoring we want to do. A small group design session might be useful at this point.</p>

<blockquote><p>ðŸ’¡ We must detail precisely what refactoring we want before making a business case for it.</p></blockquote>

<h2>Refactoring Cost</h2>

<p>We pay for a refactoring only once, when we do it. The cost of the refactoring is the time it will take to do it. We can do a team estimate on the refactoring and see the numbers.</p>

<p>From my experience large scale refactoring estimates are pretty inaccurate. If the team is having a hard time agreeing on estimates, it&rsquo;s a warning! Recipes against this are :</p>

<ul>
<li>Do a bit more design to better define the refactoring</li>
<li>Take a safety margin for your estimation. Times 2 is not a bad ratio to start with (cf. the risk management section of <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art of Agile</a>)</li>
</ul>


<p><a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1536837799&amp;sr=8-1&amp;keywords=the+art+of+agile"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/art-of-agile.jpg" alt="Cover of the book The Art of Agile Development. It contains a chapter about risk management which can be useful to make realistic long term estimates of a large scale refactoring" /></a></p>

<p>Eventually, be sure to convert your estimates in man.hours. If you don&rsquo;t, it will be difficult to compare this with the non-refactoring cost.</p>

<h2>Non-Refactoring Cost</h2>

<p>Contrary to the previous one, this cost is recurring. We&rsquo;ll only compute it for a single period of time, let&rsquo;s say an iteration. It also works fine with a month, a week or whatever.</p>

<blockquote><p>ðŸ’¡ The cost of not doing a refactoring is the sum of all the waste work generated by the current code.</p></blockquote>

<p>The non-refactoring can be computed like:</p>

<p><code>
non-refactoring cost = Bug fix time + Support time + Lower productivity
</code></p>

<h3>Bug fixes &amp; Support time</h3>

<p>Bad code generates bugs and support time. By doing the refactoring well, we&rsquo;ll almost kill these wasteful activities.</p>

<p>We want to get the real amount of time the team is spending on bug fixes and support time related to our refactoring. Hopefully, our ticketing software might already contain enough time tracking data. That&rsquo;s what I used when we did <a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-3/">our improvement kata</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/types-of-tasks-small.jpg" alt="Distribution of the different kind of tasks over sprints that we extracted from Jira when we did the improvement kata. Finding where the time went is useful when making a business case for a large scale refactoring" /></p>

<p>If not, we&rsquo;ll unfortunately need to do a bit of manual time tracking for a while. It should be fine to cover a few days, and extrapolate for a longer period. Unbelievably, some people made time tracking fun by <a href="https://code.joejag.com/2018/lego-workstream-visualisation.html">using Lego Blocks</a>!</p>

<p><a href="https://code.joejag.com/2018/lego-workstream-visualisation.html"><img src="http://philippe.bourgau.net/imgs/2018-09-17-making-the-business-case-for-a-large-scale-refactoring-part-1/lego_1.jpg" alt="Joe Wright's team has had success logging time with lego blocks. Logging is time is crucial to estimate the non-refactoring cost when making a business plan" /></a><div class="image-credits">By <a href="https://twitter.com/vanschoo">Nancy Van Schooenderwoert</a></div><br></p>

<h3>Lower productivity</h3>

<p>Bad code also makes us slow! By doing this large scale refactoring, we should get a productivity boost.</p>

<p>Here again, we are only going to measure for an iteration, and extrapolate for the future. If we are working with iterations, we should have an &lsquo;estimation&rsquo; meeting of some sort. At the end of it, we should have selected a list of &lsquo;task&rsquo; for next iteration.</p>

<p>Next time you go through this meeting, we&rsquo;ll need to estimate these tasks twice.</p>

<ol>
<li>Do a normal estimation</li>
<li>Now, imagine we did the refactoring. Re-estimate.</li>
</ol>


<p>The difference between the estimates is the non-refactoring productivity loss.</p>

<p><code>
productivity loss = normal estimation - estimation after refactoring
</code></p>

<h2>Payback Period</h2>

<p>We need to convert everything in man.hours. We should now have figures for both total refactoring and recurring non-refactoring cost.</p>

<p><code>
payback period = refactoring cost / non-refactoring cost
</code></p>

<p>The payback period is the refactoring cost divided by the non-refactoring cost. It&rsquo;s the time after which the refactoring will pay for itself.</p>

<h2>To be continued</h2>

<p>We&rsquo;re done with computations. <a href="/making-the-business-case-for-a-large-scale-refactoring-part-2/">Next week</a>, I&rsquo;ll go over what to do with these numbers. We want to make business case for this large scale refactoring an unmissable offer!</p>

<p>This is the twelfth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactorings</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental Software Development Strategies for Large Scale Refactoring #1 : Constant Merciless Refactoring]]></title>
    <link href="http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/"/>
    <updated>2018-08-02T08:31:00+02:00</updated>
    <id>http://philippe.bourgau.net/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring</id>
    <content type="html"><![CDATA[<p><em>Here&rsquo;s everything you need to find the time for constant merciless refactoring &hellip; without asking for the permission!</em></p>

<p><a href="/incremental-software-development-techniques-for-large-scale-refactorings/">My previous post</a> advocated incremental software development for large scale refactorings. It&rsquo;s less risky and it prevents tunnel effects. Most of all, it&rsquo;s a lot easier to convince business people of engaging in a refactoring this way.</p>

<p>It&rsquo;s one thing to understand why it&rsquo;s the way to go, but it&rsquo;s another to be able to do it ! In this post, I&rsquo;ll start by explaining how to find the time to do constant <a href="http://www.extremeprogramming.org/rules/refactor.html">merciless refactoring</a>.</p>

<p>This is the sixth post in <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">a series about how to get sponsorship for large scale refactoring</a>. If you haven&rsquo;t, I encourage you to start from <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/recurring-cleanup.jpg" alt="Constant Merciless Refactoring illustrated as a recurring cleanup activity" /></p>

<h2><del>Steal</del> Take the time for constant merciless refactoring</h2>

<blockquote><p>If it hurts, do it more often ! <a href="https://martinfowler.com/bliki/FrequencyReducesDifficulty.html">Wisdom of the internet</a></p></blockquote>

<p>As a child, I used to be a very untidy kid. Every few week, my room would get in a real mess, and my mum would order me to clean all this mess. I would then lose 1 or 2 hours tidying my room up. She used to tell me that if I kept things tidy as I used them, I would not have to lose this time. From the top of my 10 years old, I would judge this advice as nonsense.Â </p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/messy-bedroom.jpg" alt="This is the kind of mess my bedroom used to be in, when I was a kid, before I learned the virtues of constant merciless refactoring" /></p>

<p>Fast forward a few years, I am myself a parent and I&rsquo;ve been working with legacy code for many years. These years have taught me how much I was wrong &hellip;</p>

<blockquote><p>ðŸ’¡ The easiest refactorings to negotiate are the ones we don&rsquo;t have to talk about !</p></blockquote>

<p>The more refactoring we embed in &lsquo;Business As Usual&rsquo;, the more we&rsquo;ll do, and the less we&rsquo;ll argue with the business. We can wonder if this is still &lsquo;professional&rsquo; ? In <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1533190334&amp;sr=8-1&amp;keywords=the+art+of+agile">The Art Of Agile Development</a>, <a href="http://www.jamesshore.com/">James Shore</a> explains that managing technical debt is the key to long term productivity. (Details in the <a href="http://www.jamesshore.com/Agile-Book/risk_management.html">Risk Management section of his book</a>). As developers, <em>we</em> are the only experts in the code, the responsibility to keep it clean falls on us.</p>

<blockquote><p>Never ask the permission to do a good job ! <a href="http://docondev.com/">Doc Norton</a></p></blockquote>

<p>There&rsquo;s more to constant merciless refactoring ! It also keeps us in a good position to accept new features or refactorings later down the road.</p>

<p>Following are the 3 practices that make up constant merciless refactoring.</p>

<h2>Yesterday&rsquo;s weather and slack time</h2>

<p>20 years ago, a promises of agile software development was to stick to a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>. When we are working with a flavor of <a href="https://www.scrum.org/">Scrum</a>, we can rely on it&rsquo;s literature to inject some <a href="http://www.jamesshore.com/Agile-Book/slack.html">slack time</a>. Â Slack time is buffer time at the end of every iteration. We should not plan any work during the slack, to accommodate with the unexpected. It&rsquo;s a way to deliver on forecasts, whatever happens.</p>

<p>In short, if your velocity chart looks something like that :</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/velocity.jpg" alt="Drawing of a fluctuating team velocity. This is often the result of not enough constant merciless refactoring" /></p>

<p>Scrum tells us to plan what you delivered in your worst iteration for the next one ! When things will work bad, we&rsquo;re still pretty likely to deliver what we wanted. When things work well, we&rsquo;ll have time to tackle refactoring.</p>

<p>There&rsquo;s a lot more to say about slack time. How to take some when you are using <a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> ? How to make sure you keep some when your velocity becomes pretty stable ? How to do you increase your velocity in the long term ? (I guess I&rsquo;ll have to write a full blog post about this some day.)</p>

<h2>The Boy Scout Rule</h2>

<p>I already blogged about the <a href="http://www.informit.com/articles/article.aspx?p=1235624&amp;seqNum=6">Boy Scout Rule</a>. Here is how <a href="https://blog.cleancoder.com/">Uncle Bob</a> wrote it :</p>

<blockquote><p>Always leave the file you are editing a little better than you found it. Bob Martin</p></blockquote>

<p>Following this simple rule goes a long way to keep the code clean and ready for larger refactorings. It works arm in arm with Yesterday&rsquo;s weather principle. The extra time we take for clean up impacts our capacity to plan stories and features. This creates time to keep on doing the boy scout rule in future iterations.</p>

<p>How &lsquo;clean&rsquo; the code should be is a team decision. Coding conventions and a static code analyzer are very important to track the boy scout rule. I learned that code reviews, pairing, mobbing and <a href="/blog/categories/team-randori-series/">coding dojos</a> are great to agree on coding conventions.</p>

<h2>Embedding refactoring in features</h2>

<p>The Test Driven Development loop goes as Red-Green-Refactor.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/red-green-refactor.jpg" alt="TDD's Red-Green-Refactor loop. Itself highlighting Constant Merciless Refactoring as a recurring activity" /></p>

<p>The same loop goes on at larger scale for Acceptance or Feature Test. When repeated many times, the loop could as well be Refactor &ndash; Red &ndash; Green. In fact, it&rsquo;s a lot easier to refactor when you know what feature you want to build than at the end of the previous one. (Nat Pryce <a href="http://natpryce.com/articles/000780.html">wrote about that</a> in more details)</p>

<blockquote><p>ðŸ’¡ &ldquo;Disguise&rdquo; refactoring as first technical sub tasks of features to get them prioritized.</p></blockquote>

<p>All this to say, we should start our features with the pre-requisite refactoring ! We should not build features on shaky foundations. We should also impact our estimates. In fact, it&rsquo;s a lot easier to justify to business people at that moment. We don&rsquo;t need to mention &lsquo;refactoring&rsquo; or &lsquo;clean up&rsquo;. We can use technical sub-tasks to track these technical refactorings. Technical sub-tasks are the team&rsquo;s and don&rsquo;t need to be understandable by business people.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-08-02-incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/tech-tasks-sea-level.jpg" alt="Technical tasks drawn &quot;Under the sea&quot; and visible to devs only. This leaves them room to do constant merciless refactoring" /></p>

<h2>To be continued</h2>

<p>Finding the time for constant merciless refactoring is one thing, but how do we fit the work in these short slots ? In the <a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">next post</a>, I&rsquo;ll continue about how to actually work in baby steps.</p>

<p>This was the sixth post about <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">how to get sponsorship for large scale refactoring</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to convince your business of sponsoring a large scale refactoring]]></title>
    <link href="http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/"/>
    <updated>2018-06-28T06:14:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring</id>
    <content type="html"><![CDATA[<p>Whenever I present or suggest a good practice to dev teams, I often get the same remark. Here is how it goes :</p>

<blockquote><ul>
<li><p>That&rsquo;s a great idea and we would love to do this, but our code is in such a mess that we cannot !</p></li>
<li><p>Maybe you should start doing more refactoring then !</p></li>
<li><p>We would like to, but we don&rsquo;t have the time. We are fire fighting all the time.</p></li>
</ul>
</blockquote>

<p>It&rsquo;s a bit like the old adage of the lumberjack that is too busy to cut wood to sharpen his axe&hellip; The sad part here, is that most of the time, developers know they would be a lot faster if they could clean up their code. Unfortunately, they are usually not given the time.</p>

<h2>How do we end up in this silly situation ?</h2>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-15-how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/why-are-large-scale-refactorings-not-prioritized.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-15-how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/why-are-large-scale-refactorings-not-prioritized-small.jpg" alt="Drawing of a '5 whys' mind map explaining why it is difficult to get sponsorship for a large scale refactoring" /></a></p>

<h3>Only developers see the bad code</h3>

<p>As I&rsquo;ve <a href="/the-size-of-code/">already been joking about</a>, code is invisible. Mess in the code even more so, especially to people who don&rsquo;t code. The code could look like that and no one would notice.</p>

<p><a href="https://en.wikipedia.org/wiki/Diogenes_syndrome"><img src="http://philippe.bourgau.net/imgs/2018-06-15-how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/Syllogomanie-Puteaux.jpg" alt="Inside of a kitchen from someone suffering from Diogenes syndrome" /></a></p>

<div class="image-credits">By [A Tourist](http://commons.wikimedia.org/w/index.php?title=User:Un_Touriste&amp;action=edit&amp;redlink=1) - Private photography [CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0), [Link](https://commons.wikimedia.org/w/index.php?curid=15988115)</div>


<br>


<p>If someone put his own office in that state, he would get fired, but not for the source code. The good side is that we, developers, are safe, we can continue to wreak chaos without fear ! That&rsquo;s pretty weird when we think that this is what we ship to customers &hellip;</p>

<blockquote><p>ðŸ’¡ Is <a href="https://en.wikipedia.org/wiki/Diogenes_syndrome">Diogenes syndrome</a> for source code a recognized pathology ?</p></blockquote>

<p>Business might also not see bad code because that&rsquo;s the only thing they&rsquo;re used to ! Maybe they&rsquo;ve always been working in dysfunctional organizations that systematically create crappy code. Slow teams, late deliveries and fire fighting might be business as usual for them. From this point of view, trying to improve code is a pure waste of time and energy. The same goes for large scale refactorings.</p>

<p>The worse part of all this is that if devs don&rsquo;t have the time to keep their code clean, it will only get worse. This will reinforce the view that software delivery is slow and that there is nothing to do about it !</p>

<h3>Business has been burnt in the past !</h3>

<p>Bad experiences are another reason why business is unwilling to sponsor refactoring. Did someone sell them an unrealistic productivity boost that turned in a never-ending tunnel project ? Badly managed large scale refactorings deliver late, create no value, and a lot of bugs. At one company I worked for, business gave devs 1 full year (!) to clean up the code &hellip; We took 2 !! Meanwhile, the CEO had to dilute the stocks a bit to keep the boat afloat ! I&rsquo;d think twice before giving this kind of mandate myself.</p>

<p>Performing a large scale refactoring is not easy, and involves specific skills. These skills are about refactoring in baby steps, alongside feature delivery.</p>

<p>Usually, people acquire these skills through hard won experience &hellip; Unfortunately for us, our industry is not very nice to experienced engineers &hellip; It&rsquo;s a lot easier to hire a fresh grad who knows the latest javascript framework than a 2 decades engineer. (Who, BTW, could learn this framework in 2 weeks &hellip;) It&rsquo;s also a lot harder for the junior developer to succeed in negotiating a refactoring.</p>

<p>Again the twist of fate is that junior engineers are a lot more likely to start a submarine latest-framework.js rewrite supposed to solve all maintenance issues &hellip; which will only make things worse.</p>

<h2>Overestimate, only as last resort</h2>

<p>A quick fix is to systematically overestimate to get enough time to refactor. As any other &lsquo;submarine&rsquo; initiative, I would recommend it only in last resort, after you&rsquo;ve tried every other possible technique &hellip; and just before you quit.</p>

<p>Hiding things to the business people kills trust and hides problems. Trust and collaboration is what you need to get the business to sponsor large scale refactorings ! Plus, if ever you mess up (as submarine initiative often do) you&rsquo;ll be the only one to blame &hellip;</p>

<p>That said, &lsquo;overestimating&rsquo; so that you can write clean code is ok. It&rsquo;s not overestimating, it&rsquo;s estimating to do a good job.</p>

<blockquote><p>ðŸ’¡ We should never ask the permission to do a good job. (<a href="https://www.youtube.com/watch?v=SfWCRl75Kas">Doc Norton</a>)</p></blockquote>

<h2>To be continued</h2>

<p>You might wonder what these other techniques are ! That&rsquo;s exactly what I&rsquo;ll go through with the next posts. This was the first one in a <a href="/blog/categories/large-scale-refactoring-sponsorship-series/">series about how to get sponsorship for a large scale refactoring</a>. The series will cover topics like :</p>

<ol>
<li> <a href="/how-to-convince-your-business-to-sponsor-a-large-scale-refactoring/">How to convince your business of sponsoring a large scale refactoring</a></li>
<li><a href="/why-we-need-badass-developers-to-perform-large-scale-refactorings/">Why we need Badass developers to perform large scale refactorings</a></li>
<li><a href="/5-mistakes-badass-developers-never-do/">5 mistakes badass developers never do</a></li>
<li><a href="/principles-that-will-make-you-become-a-badass-developer/">Principles That Will Make You Become a Badass Developer</a></li>
<li><a href="/incremental-software-development-techniques-for-large-scale-refactorings/">Incremental Software Development for Large Scale Refactoring</a></li>
<li><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-1-constant-merciless-refactoring/">Incremental Software Development Strategies for Large Scale Refactoring #1 : Constant Merciless Refactoring</a></li>
<li><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-2-baby-steps/">Incremental Software Development Strategies for Large Scale Refactoring #2 : Baby Steps</a></li>
<li><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-3-manage-it/">Incremental Software Development Strategies for Large Scale Refactoring #3 : Manage it !</a></li>
<li><a href="/incremental-software-development-strategies-for-large-scale-refactoring-number-4-a-pattern-language/">Incremental Software Development Strategies for Large Scale Refactoring #4 : a Pattern Language</a></li>
<li><a href="/presenting-a-large-scale-refactoring-as-a-business-opportunity/">Presenting a large scale refactoring as a business opportunity</a></li>
<li><a href="/effective-warning-signals-to-get-sponsorship-for-a-large-scale-refactoring/">5 Effective warning signals that will get you sponsorship for a large scale refactoring</a></li>
<li><a href="/making-the-business-case-for-a-large-scale-refactoring-part-1/">Making the business case for a large scale refactoring &ndash; Part 1</a></li>
<li><a href="/making-the-business-case-for-a-large-scale-refactoring-part-2/">Making the business case for a large scale refactoring &ndash; Part 2</a></li>
<li>Building a business partnership</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Dream Lean Software Development Tool (Lean Software Development part 9)]]></title>
    <link href="http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9/"/>
    <updated>2015-12-14T20:49:00+01:00</updated>
    <id>http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9</id>
    <content type="html"><![CDATA[<p>Current software project tracking tools suck !</p>

<p><img src="http://philippe.bourgau.net/imgs/2015-12-14-my-dream-lean-software-development-tool-lean-software-development-part-9/it-sucks.jpg" alt="A stamp that writes &quot;SUCKS&quot;" /></p>

<p>By writing <a href="/the-flow-book-summary-lean-software-development_part_1/">this series of posts</a>, I realized that they should help us to prioritize rather than just serving as a nice GUIs on top of a ticket database.</p>

<p>Let&rsquo;s take the story of developer Joe as an example. Joe is working for Megacorp, where he makes a good living, but feels like a small cog in the machine. He has lost the thrill of programming &hellip; He&rsquo;s still staying informed about latest trends in software world, but his job involves aging technologies. He knows that if he wants to remain in the course, he has to change gears. One day, he decides to do something <em>now</em>, and starts a side project in the hope of someday making a living out of it.</p>

<p>He does not have a large amount of money to invest in his project, so he decides to bootstrap his product using <a href="http://theleanstartup.com/">Lean Startup</a>. He reads and understands that there is a lot of different kind of activities to do if he wants to realize his dream : experiments, marketing, sales, design, coding &hellip;</p>

<p>Unfortunately, he&rsquo;s so tired of programming boring stuff that he contracted the developer bias : he starves to code cool things again ! He knows the rest is important, he tries to do some of it, but he just doesn&rsquo;t realize how <em>much</em> needs to be done. So, without realising it, he wastes a lot of time coding something that people eventually don&rsquo;t buy. After 1 or 2 years of hard work, a working product but no users, he eventually quits, quite depressed &hellip;</p>

<p>I guess you don&rsquo;t want to be Joe ! I know you&rsquo;ll think it won&rsquo;t happen to you &hellip; believe me, it can, <a href="rip-mes-courses-dot-fr/">I learned it the hard way</a> !</p>

<p>Now suppose you had a tool that estimates the expected values of all different tasks :</p>

<ul>
<li>By applying <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulations</a> to probabilistic value and size ranges, it could compute which features we should work on first. As a side effect, this could give us some release date estimates for a feature, depending on its position in the backlog.</li>
<li>By having explicit experiment tasks with target value or size ranges, it could compute the value of information and prioritize experiments versus other tasks.</li>
<li>Crossing informations from IDEs, VCS, Quality Trackers and CIs, it could detect technical debt items (aka. productivity opportunities), compute their values in the long run, and prioritize them with other tasks.</li>
<li>If we found a way to integrate marketing, sales and design tasks, any kind of activity could be stored in the backlog, valued and prioritized.</li>
</ul>


<p>Here is what the backlog could look like :</p>

<p><img src="http://philippe.bourgau.net/imgs/2015-12-14-my-dream-lean-software-development-tool-lean-software-development-part-9/mockup.jpg" alt="A mockup of the backlog view of such a product" /></p>

<p>All different kind of activities (developments, marketing, experiments, refactorings) would fit in the backlog. The system would estimate the value of every task for Joe, advising him what to work on first. It would make it obvious just how much market experiments are important when starting ! With such a tool, he is a lot more likely to build his new life.</p>

<p>The good thing with such a tool is that it could be built by feeding itself. <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">Eating its own dog&rsquo;s food</a> has always been the nice thing about writing software tools.</p>

<p>I&rsquo;d like to know, what do you think of the idea ? Would you use such a tool ? Is it worth me spending my nights building it ?</p>

<p>This was 9th and last part of my <a href="/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 8 was <a href="/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/">How I&rsquo;ll Measure the Lean Startup Value of Information in My Next Side Project</a>.</p>
]]></content>
  </entry>
  
</feed>
