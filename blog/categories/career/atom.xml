<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: career | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/career/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-10-03T20:15:22+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Is There Any Room For The Not-Passionate Developer ?]]></title>
    <link href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/"/>
    <updated>2016-07-26T06:53:00+00:00</updated>
    <id>http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer</id>
    <content type="html"><![CDATA[<p><a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/ref=sr_1_1?ie=UTF8&amp;qid=1470025727&amp;sr=8-1&amp;keywords=the+passionate+programmer"><img class="center" src="/imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/passionate-programmer.jpg" title="The cover of The Passionate Programmer book" ></a></p>

<p>In <a href="https://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&amp;qid=1469597091&amp;sr=8-1&amp;keywords=rework">Rework</a>, <a href="https://basecamp.com/">Basecamp</a> guys David Heinemeier Hansson and Jason Fried advise to <a href="https://signalvnoise.com/posts/902-fire-the-workaholics">&ldquo;Fire the workaholics&rdquo;</a>, while in <a href="https://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296/ref=sr_1_1?ie=UTF8&amp;qid=1469801854&amp;sr=8-1&amp;keywords=zero+to+one">Zero to One</a> Peter Thiel argues that great working conditions (as described within Google for example) result from 10x technological advantages, not the other way round.</p>

<p>Back in 1983, Bill Gates said :</p>

<blockquote><p>You have to think it’s a fun industry. You’ve got to go home at night and open your
mail and find computer magazines or else you’re not going to be on the same
wavelength as the people [at Microsoft].</p></blockquote>

<p>Where do we stand now ? Do you need to live and breath programming to remain a good developer ?</p>

<h2>What about the 40h per week rule ?</h2>

<p><img class="center" src="/imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/productivity.jpg" title="A graph of the productivity when working overtime" ></p>

<p>Studies have repeatedly demonstrated that 40h per week is the most productive work load, but in <a href="https://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017930">Outliers, the Story of Success</a> Malcolm Gladwell explains that getting fast to the 10000 hours of practice is a required road to success. As my Aïkido professor says, the more you practice, the better you get &hellip;</p>

<p>In <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1469801992&amp;sr=1-1&amp;keywords=soft+skills+the+software+developer%27s+life+manual">Soft Skills: The software developer&rsquo;s life manual</a> John Somnez also makes the point for hard work, that while he long believed that smart work would be enough, it&rsquo;s only when he put more in that he managed to drastically change his career.</p>

<p>During an <a href="http://calacanis.com/2008/03/07/how-to-save-money-running-a-startup-17-really-good-tips/">argument</a>, DHH argued in favor of work life balance whereas Jason Calacanis said that working in a startup had to be an all-in activity. In the end, they agreed that what matters is passion.</p>

<p>From my own experience, whenever I work on something I am passionate about :</p>

<ul>
<li>I am more productive</li>
<li>I feel energized rather than dulled by the work</li>
</ul>


<p>When I look around me, all the great developers I know are passionate and putting in more than 40 hours per week in programming. I also noticed that passion and efforts have always been pretty good indicators of future skills.</p>

<p>But then, how do passionate people manage to remain productive when working more than 40 hours per week ?</p>

<h2>What about the under the shower idea ?</h2>

<p>In <a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050">Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers)</a> (which is a great book BTW), Andy Hunt explains that our R-mode works in the background, and needs time away from the task at hand to come up with &ldquo;out of the box&rdquo; creative solutions.</p>

<p>XP argues for a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>, but at the same time, Uncle Bob says that we should put in 60 hours (40 for employer, and 20 for yourself) of work per week to become and remain &lsquo;professionals&rsquo; (I guess that&rsquo;s from <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_2?ie=UTF8&amp;qid=1470026034&amp;sr=8-2&amp;keywords=the+clean+code">The Clean Coder</a> if I remember correctly).</p>

<p>On my side, 6 to 8 solid hours of pair-programming on the same subject is the most I can do before becoming a <a href="http://c2.com/cgi/wiki?NetNegativeProducingProgrammer">Net Negative Producing Programmer</a>. But I can do more programming per day if I work on a side project at the same time though !</p>

<p>I guess that&rsquo;s how passionate people do it, they have different topics outside of their main work :</p>

<ul>
<li>they read books about programming</li>
<li>they have their own <a href="http://www.sideprojectbook.com/">side projects</a></li>
<li>they read articles about programming</li>
<li>they might maintain a programming blog</li>
<li>they might attend, organize or speak at meetup</li>
</ul>


<p>Most of the time, this does not make for more work, but rather for more learning. If I&rsquo;ve noticed that all the great programmers around me are passionate and strive to improve at their craft, I&rsquo;ve also noticed that overworked workaholics usually aren&rsquo;t very productive.</p>

<h2>Special challenges for mums and dads</h2>

<p>I think that Bill Gates 1983 statement still holds. If you are not passionate about programming, you&rsquo;ll have a hard time remaining and succeeding as a programmer in the long run.</p>

<p>The great thing about all this passion is that we can experience an energized work environment, always bubbling with change and novelty. On the flip side, keeping up with all is not always easy.</p>

<p>As we developers gain more experience, we tend to loose patience with everything that just feels as a pain in the ass, and will want :</p>

<ul>
<li>Powerful languages and technologies</li>
<li>An efficient working environment</li>
<li>Smart colleagues</li>
</ul>


<p>Unfortunately, that might also be the moment in your life when you become a parent, and you&rsquo;ll want  a stable income to sustain your family and some time to spend with your kids.</p>

<p>That is when things get tricky. Neither can you jump ship for the next cool and risky startup where you&rsquo;ll do great things, nor can you find enough time moonlighting to improve your skills &hellip; To add pain to injury, even with 10 years of experience in various languages and technologies, most companies won&rsquo;t look at your resume unless it contains good keywords &hellip; It looks like the developer&rsquo;s version of  <a href="https://www.amazon.com/Innovators-Dilemma-Revolutionary-Change-Business/dp/0062060244/ref=sr_1_sc_1?ie=UTF8&amp;qid=1470024448&amp;sr=8-1-spell&amp;keywords=the+innovator%27s+dilemns">The Innovator&rsquo;s Dilemna</a> !</p>

<p>Lack of passion and parenthood might partially explain why people stop being developers after a while. I can quickly think of 2 bad consequences of this :</p>

<ul>
<li>We tend to reinvent the wheel quite a lot (I&rsquo;m looking at you, .js frameworks &hellip;)</li>
<li>We might be meta ignoring (ignoring that we ignore) people skills that could make us all more efficient</li>
</ul>


<p><em><a href="http://www.inside.com.tw/2016/08/05/is-there-any-room-for-the-not-passionate-developer">Chinese translation</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Years of Blogging About Software]]></title>
    <link href="http://philippe.bourgau.net/5-years-of-blogging-about-software/"/>
    <updated>2016-06-27T04:04:00+00:00</updated>
    <id>http://philippe.bourgau.net/5-years-of-blogging-about-software</id>
    <content type="html"><![CDATA[<p>5 years ago, I started blogging. I started really casually, my posts were personal reminders and notes rather than real well thought of articles. Nevertheless, it did me great good :</p>

<ul>
<li>I&rsquo;ve been invited to talk at meetups</li>
<li>I&rsquo;ve had the joy of seeing some articles being tweeted many times</li>
<li>I received interesting job offers from all over the world</li>
</ul>


<p>6 months ago, after reading <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?ie=UTF8&amp;qid=1467000033&amp;sr=8-1&amp;keywords=soft+skills">Soft Skills: The software developer&rsquo;s life manual</a>, I set up the practice of writing at least one article per week, and here is my (very encouraging) graph of sessions since then:</p>

<p><img class="center" src="/imgs/2016-06-27-5-years-of-blogging-about-software/analytics.jpg" title="The steadily increase curve of the sessions on my blog per month" ></p>

<h1>Excuses Why Not To Blog</h1>

<p>Here is a collection of the (bad) excuses you&rsquo;ll often hear people say for not blogging :</p>

<blockquote><p>I don&rsquo;t know how to write &hellip;</p></blockquote>

<p>Blogging regularly is actually a pretty good way to improve your writing skills. As usual, the key is to fake it until you make it.</p>

<blockquote><p>I&rsquo;m not into this social media stuff &hellip;</p></blockquote>

<p>You don&rsquo;t need to share anything personal on your software blog. In the end, your blog is a professional tool.</p>

<blockquote><p>I don&rsquo;t have anything interesting to say &hellip;</p></blockquote>

<p>They are others in the same situation as you who would like to see more posts about the kind of uninteresting things you just discovered. Wouldn’t you have liked someone to have written the newby article about « how to do XXX » you just spent 3 days to crack ?</p>

<blockquote><p>I don&rsquo;t have the time &hellip;</p></blockquote>

<p>Make it ! Time is never found, it is made. In the end, it’s just a matter of prioritization.</p>

<p>Obviously, there are other totally valid reasons why not to blog, but I&rsquo;ll assume you&rsquo;re able to recognize those.</p>

<h1>Why Would You Blog ?</h1>

<p>On the other side, if you jump into blogging, you can expect a lot of returns :</p>

<ul>
<li>First thing is that you&rsquo;ll obviously gain more visibility. I&rsquo;ve got readers from all over the world, and my articles are sometimes re-tweeted many times.</li>
<li>You&rsquo;ll improve your writing skills. Writing skills turn out to be unexpectedly important for <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">software writers</a> !</li>
<li>In order to lay down your ideas about something, you&rsquo;ll need to dig a bit more into. It is said to be the last step to learning.</li>
<li>It can act as a personal documentation. I used to write mine as a how-to notepad on which I could refer later on.</li>
<li>If you have a day job, you can re-post your articles there. You should gain extra visibility and expose the company to new ideas.</li>
</ul>


<h1>How to start</h1>

<p>Once you&rsquo;ve decided that you want to blog, starting should not be an issue.</p>

<h2>Pick a platform</h2>

<p>There are a lot of blogging platforms out there. For programmers, I would recommend a few though :</p>

<p><img class="center" src="/imgs/2016-06-27-5-years-of-blogging-about-software/platforms.jpg" title="Logos of my recommended blogging platforms" ></p>

<table>
<thead>
<tr>
<th>Platform </th>
<th> Pros </th>
<th> Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://octopress.org/">Octopress</a> </td>
<td> Free, Open Source, Github hosting, static HTML generation, markdown &amp; Git based, made for programmers </td>
<td> Theming can be rocky</td>
</tr>
<tr>
<td><a href="https://medium.com/">Medium</a>    </td>
<td> Free, no setup, good looking, simple to use </td>
<td> It&rsquo;s a private company, so it could close some day ! It happened to <a href="http://www.posterous.com">postero.us</a> (I remember, I was there …)</td>
</tr>
<tr>
<td><a href="https://posthaven.com/">Posthaven</a> </td>
<td> Created by the founders of postero.us, sustainable, guarantees to keep it live for ever, can post by email ! </td>
<td> Nothing special for programmers, 5$ / month</td>
</tr>
<tr>
<td><a href="https://logdown.com/">Logdown</a>   </td>
<td> Looks like a hosted version of Octopress, without the hassle ! </td>
<td> 50$/year</td>
</tr>
</tbody>
</table>


<p>Then, it&rsquo;s up to you !</p>

<h2>Start with how-to articles</h2>

<p>When I started my blog, it was mostly has a personal how-to reference. It allowed me to come back to it and find out how I did something last time. I thought that if it was important to me, it must be important to others as-well !</p>

<h2>Blog regularly</h2>

<p>Blogging every week made a huge difference to me. My traffic went from erratic to steadily increasing. I am currently observing a 11% traffic increase per month. This means that it nearly quadruples every year : I&rsquo;m not going to stop now !</p>

<h2>Integrate with the web</h2>

<p>This boils down to social networks and analytics. Obviously, you&rsquo;ll want to use Google Analytics to see how people are reading your content. I&rsquo;m using the venerable <a href="https://feedburner.google.com">Feedburner</a> to automatically post my new articles on <a href="https://twitter.com">twitter</a>. There&rsquo;s an option to use your post categories as hashtags, be sure to make it works, it brings a lot of traffic.</p>

<p>It&rsquo;s all up to you now !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Keep Up With Software Technologies]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-up-with-software-technologies/"/>
    <updated>2016-05-30T04:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-up-with-software-technologies</id>
    <content type="html"><![CDATA[<p>Since I started to program professionally 15 years ago, a lot of things have changes. A lot of technologies appeared and became mainstream while others fell out of fashion.</p>

<p>As software developers, it is really challenging to stay fit and productive in new technologies. I cannot obviously say that I am an expert in all new technologies, but I can say that I can get up to speed in a pretty short time in nearly all.</p>

<p>If there is a single reason for that I strongly believe it is because &ldquo;I studied my classics&rdquo; !</p>

<p><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/outdated.jpg" title="An outdated computed covered in spider webs" ></p>

<h2>How does it work</h2>

<p>At the same time I started to program all day long for my living, I also started to read a lot of programming books on my spare time. This allowed me to learn at night and practice at day, setting everything in my brain.</p>

<p>This might come as a surprise, but I never read a lot of books about the technologies I was using. I&rsquo;d rather study fundamental programming books. These contain a lot of transportable knowledge, unlike in most books about a particular technology.</p>

<p>I believe this is a pretty good use of time since it made me a better programmer and also greatly reduced the time I need to master most new technologies. I can now easily relate them to some more general concept I learned before.</p>

<p>For example, I never read a book about UI. By the time I had to do some UI programming, I had absolutely no issue getting up to speed on the topic. I had already seen quite some UI code examples in other books, I knew that most UI frameworks are built from a set of Object Oriented patterns. Coming from a different perspective, I was even able to suggest improvements to the code that UI experts had not thought of.</p>

<p>That&rsquo;s not to say that I never read books about a particular technology, sometimes, that&rsquo;s just what you need to start something new. But when I do, I usually find them quite easy to read and digest. And I tend to skip things I intuitively understand and use them as cookbooks containing recipes for particular problems rather than end to end walk-through.</p>

<h2>My books</h2>

<h3><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer">The Pragmatic Programmer: From Journeyman to Master</a></h3>

<p><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/the-pragmatic-programmer.jpg" title="Cover of the pragmatic programmer book" ></a></p>

<p>As a young programmer this book made me understand that my job was not only about writing code, but about building maintainable systems. It provided me with tools to do so, 10 years later, I can still remember &ldquo;The power of plain text&rdquo;. This is also the book that made me have a first look into Ruby :).</p>

<h3><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code">Refactoring: Improving the Design of Existing Code</a></h3>

<p><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/refactoring.jpg" title="Cover of the refactoring book" ></a></p>

<p>Here is the theory behind all automated IDE refactorings. Reading this book had a profound influence on my coding style. The examples made me understand the difference between readable and unreadable code &hellip; It&rsquo;s also the foundation for any kind of incremental design and architecture. That&rsquo;s the book that got me started with TDD.</p>

<h3><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></h3>

<p><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/ddd.jpg" title="Cover of the DDD book" ></a></p>

<p>This book teaches good object oriented programming. Some say it is tough to read, but it&rsquo;s definitely worth doing so. Among other things, it explains how to use functional programming concept in your object oriented project, by separating Value Objects and Entities for example.</p>

<h3><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6">The C Programming Language</a></h3>

<p><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/c.jpg" title="Cover of the C book" ></a></p>

<p>With around 250 pages, it&rsquo;s pretty difficult to find a programming book with a greater value/page ratio. This one will teach you all there is to learn about C, and help you understand everything that was built on top of C (and that&rsquo;s quite a lot &hellip;)</p>

<h3><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp">Structure and Interpretation of Computer Programs</a></h3>

<p><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/sicp.jpg" title="Cover of the SICP book" ></a></p>

<p>Compared to C, Lisp is at the other side of the language spectrum. Learning C and Lisp gives the ability to put nearly anything in contrast to these 2 languages. Lisp is dynamic, functional and meta. It can be morphed into nearly anything and SICP teaches how to do so. There&rsquo;s a Lisp practice that is invaluable to any programmer : use your language to express your problem as simply as possible. SICP teaches that.</p>

<h3><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming">Programming Erlang: Software for a Concurrent World</a></h3>

<p><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/erlang.jpg" title="Cover of the Erlang book" ></a></p>

<p>Neither the C book nor SICP deals with distribution and concurrency. That&rsquo;s what this book does. I had never programmed distributed systems before reading this book. After I read it, I learned how to code for distribution in a maintainable way. The lessons taught by Erlang are applicable in many languages.</p>

<h2>Not the best books</h2>

<p>I did not and will never read all programming books available. There might be newer books that treat the same subjects better, but these books are the ones that taught me the most about our craft. My point is that learning fundamentals and things far away from our daily technologies will teach us more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How We Decentralized Our Company's Training Program]]></title>
    <link href="http://philippe.bourgau.net/how-we-decentralized-our-companys-training-program/"/>
    <updated>2016-04-18T05:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-we-decentralized-our-companys-training-program</id>
    <content type="html"><![CDATA[<p>Maybe your company too has a development program you can use to track and organize your training path. That&rsquo;s already great ! It is often not perfect though. Sometimes, the initiative in itself can feel like an afterthought. Some other times, the process is completely left to the employee and his manager, with varying results, from great to forced upon everyone.</p>

<p><img class="center" src="/imgs/2016-04-18-how-we-decentralized-our-companys-training-program/learning.jpg" title="A &lsquo;learning&rsquo; word cloud" ></p>

<h2>How did we rebuild this program in our team</h2>

<p>As you might remember if you read my <a href="/blog/categories/selforganizing/">previous posts</a>, we started a self organization initiative using a <a href="https://management30.com/product/workouts/delegation-employee-engagement/">delegation board</a>. When we tried to decentralize <a href="/how-to-deal-with-the-incentive-system-in-an-agile-team/">the end of year evaluation</a>, we started discussing the subjects of personal development. We decided to have a dedicated workshop about this subject</p>

<h2>Guiding principles</h2>

<p>In our company, the development program allows a manager to assign specific learning goals to his collaborators, and anyone can also create his own goals to justify going to specific trainings. Starting from that, we agreed that the development program should be used to help anyone in the team to improve skills that are interesting for both the company and the employee. If the employee is interested in something completely unrelated to work, then he should obviously tackle that in his own time. If the company needs its employee to acquire some immediate mandatory skills, then that should be part of the daily job and subject to the end of year evaluation.</p>

<p>The idea is to try to find a win-win combinations, were employees are motivated to work their best at a company that they know helps them to full-fill their long term goals.</p>

<h2>What did we came us with ?</h2>

<p><img class="center" src="/imgs/2016-04-18-how-we-decentralized-our-companys-training-program/mentor-mentee.jpg" title="A lion and a lion cub side by side" ></p>

<p>This workshop was quite effective :</p>

<ul>
<li>First of all, everyone is responsible for his own development, it&rsquo;s a chance offered by the company. It cannot be forced unto people.</li>
<li>It is based on volunteer mentorship : everyone should have regular meetings with his mentor to asses his progress on his long term goal, to try to get feedback and ideas about how to move forward. We started by saying that the team leader is the default mentor, but anyone can find another mentor at any moment.</li>
<li>The process starts with the search for a long term goal. Examples are &ldquo;I want to be an agile coach&rdquo;, or &ldquo;I want to be a performance expert&rdquo;</li>
<li>With the help of the mentor if needed, the long term goal should be split in yearly objectives and tracked using <a href="http://fr.slideshare.net/HenrikJanVanderPol/how-to-outperform-anyone-else-introduction-to-okr">OKRs</a></li>
<li>Everyone is free to track his progress has he wishes. Visual tracking makes the discussion with the mentor a lot easier. We have been looking at tools to track OKRs but it was surprisingly difficult to find one that suited our use. Most are enterprisy tools with manager-managee relationships. We just wanted simple personal tracking tools. For my part, I adapted a <a href="https://trello.com/b/MPM4rspd/okrs">Trello</a> board I found on the internet.</li>
</ul>


<h2>Conclusion</h2>

<p>After doing a few months of this, I can say that this has a positive aspect on motivation, people told me that they felt more in control of their destiny. Something else I noted, is that junior developers need help and guidance. They often don&rsquo;t really know what they want to do in a few years, so they really need a mentor to help them find out the what and the how. The other side of this is that a team obviously needs senior developers to act as mentor &hellip; among other things.</p>
]]></content>
  </entry>
  
</feed>
