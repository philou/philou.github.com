<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: career | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/career/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-06-08T05:15:57+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Keep Up With Software Technologies]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-up-with-software-technologies/"/>
    <updated>2016-05-30T04:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-up-with-software-technologies</id>
    <content type="html"><![CDATA[<p>Since I started to program professionnaly 15 years ago, a lot of things have changes. A lot of technologies appeared and became mainstream while others fell out of fashion.</p>

<p>As software developers, it is really challenging to stay fit and productive in new technologies. I cannot obviously say that I am an expert in all new technologies, but I can say that I can get up to speed in a pretty short time in nearly all.</p>

<p>If there is a single reason for that I strongly believe it is because &ldquo;I studied my classics&rdquo; !</p>

<p><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/outdated.jpg" title="An outdated computed covered in spider webs" ></p>

<h2>How does it work</h2>

<p>At the same time I started to program all day long for my living, I also started to read a lot of programmming books on my spare time. This allowed me to learn at night and practice at day, setting everything in my brain.</p>

<p>This might come as a suprize, but I never read a lot of books about the technologies I was using. I&rsquo;d rather study fundamental programming books. These contain a lot of transposable knowledge, unlike in most books about a particular technology.</p>

<p>I believe this is a pretty good use of time since it made me a better programmer and also greatly reduced the time I need to master most new technologies. I can now easily relate them to some more general concept I learned before.</p>

<p>For example, I never read a book about UI. By the time I had to do some UI programming, I had absolutely no issue getting up to speed on the topic. I had already seen quite some UI code examples in other books, I knew that most UI frameworks are built from a set of Object Oriented patterns. Coming from a different perspective, I was even able to suggest improvements to the code that UI experts had not thought of.</p>

<p>That&rsquo;s not to say that I never read books about a particular technology, sometimes, that&rsquo;s just what you need to start something new. But when I do, I usually find them quite easy to read and digest. And I tend to skip things I intuitively understand and use them as cookbooks containing receipes for particular problems rather than end to end walkthrough.</p>

<h2>My books</h2>

<h3><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer">The Pragmatic Programmer: From Journeyman to Master</a></h3>

<p><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/the-pragmatic-programmer.jpg" title="Cover of the pragmatic programmer book" ></a></p>

<p>As a young programmer this book made me understand that my job was not only about writing code, but about building maintainable systems. It provided me with tools to do so, 10 years later, I can still remember &ldquo;The power of plain text&rdquo;. This is also the book that made me have a first look into Ruby :).</p>

<h3><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code">Refactoring: Improving the Design of Existing Code</a></h3>

<p><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/refactoring.jpg" title="Cover of the refactoring book" ></a></p>

<p>Here is the theory behind all automated IDE refactorings. Reading this book had a profound influence on my coding style. The examples made me understand the difference between readable and unreadable code &hellip; It&rsquo;s also the foundation for any kind of incremental design and architecture. That&rsquo;s the book that got me started with TDD.</p>

<h3><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></h3>

<p><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/ddd.jpg" title="Cover of the DDD book" ></a></p>

<p>This book teaches good object oriented programming. Some say it is tough to read, but it&rsquo;s definitely worth doing so. Among other things, it explains how to use functionnal programming concept in your object oriented project, by separating Value Objects and Entities for example.</p>

<h3><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6">The C Programming Language</a></h3>

<p><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/c.jpg" title="Cover of the C book" ></a></p>

<p>With around 250 pages, it&rsquo;s pretty difficult to find a programming book with a greater value/page ratio. This one will teach you all there is to learn about C, and help you understand everything that was built on top of C (and that&rsquo;s quite a lot &hellip;)</p>

<h3><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp">Structure and Interpretation of Computer Programs</a></h3>

<p><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/sicp.jpg" title="Cover of the SICP book" ></a></p>

<p>Compared to C, Lisp is at the other side of the language spectrum. Learning C and Lisp gives the ability to put nearly anything in contrast to these 2 languages. Lisp is dynamic, functionnal and meta. It can be morphed into nearly anything and SICP teaches how to do so. There&rsquo;s a Lisp practice that is invaluable to any programer : use your language to express your problem as simply as possible. SICP teaches that.</p>

<h3><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming">Programming Erlang: Software for a Concurrent World</a></h3>

<p><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/erlang.jpg" title="Cover of the Erlang book" ></a></p>

<p>Neither the C book nor SICP deals with distribution and concurrency. That&rsquo;s what this book does. I had never programmed distributed systems before reading this book. After I read it, I learned how to code for distribution in a maintainable way. The lessons taughts by Erlang are applicable in many languages.</p>

<h2>Not the best books</h2>

<p>I did not and will never read all programming books available. There might be newer books that treat the same subjects better, but these books are the ones that taught me the most abour our craft. My point is that learning fundamentals and things far away from our daily technologies will teach us more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How We Decentralized Our Company's Training Program]]></title>
    <link href="http://philippe.bourgau.net/how-we-decentralized-our-companys-training-program/"/>
    <updated>2016-04-18T05:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-we-decentralized-our-companys-training-program</id>
    <content type="html"><![CDATA[<p>Maybe your company too has a development program you can use to track and organize your training path. That&rsquo;s already great ! It is often not perfect though. Sometimes, the initiative in itself can feel like an afterthought. Some other times, the process is completely left to the employee and his manager, with varying results, from great to forced upon everyone.</p>

<p><img class="center" src="/imgs/2016-04-18-how-we-decentralized-our-companys-training-program/learning.jpg" title="A &lsquo;learning&rsquo; word cloud" ></p>

<h2>How did we rebuild this program in our team</h2>

<p>As you might remember if you read my <a href="/blog/categories/selforganizing/">previous posts</a>, we started a self organization initiative using a <a href="https://management30.com/product/workouts/delegation-employee-engagement/">delegation board</a>. When we tried to decentralize <a href="/how-to-deal-with-the-incentive-system-in-an-agile-team/">the end of year evaluation</a>, we started discussing the subjects of personal development. We decided to have a dedicated workshop about this subject</p>

<h2>Guiding principles</h2>

<p>In our company, the development program allows a manager to assign specific learning goals to his collaborators, and anyone can also create his own goals to justify going to specific trainings. Starting from that, we agreed that the development program should be used to help anyone in the team to improve skills that are interesting for both the company and the employee. If the employee is interested in something completely unrelated to work, then he should obviously tackle that in his own time. If the company needs its employee to acquire some immediate mandatory skills, then that should be part of the daily job and subject to the end of year evaluation.</p>

<p>The idea is to try to find a win-win combinations, were employees are motivated to work their best at a company that they know helps them to full-fill their long term goals.</p>

<h2>What did we came us with ?</h2>

<p><img class="center" src="/imgs/2016-04-18-how-we-decentralized-our-companys-training-program/mentor-mentee.jpg" title="A lion and a lion cub side by side" ></p>

<p>This workshop was quite effective :</p>

<ul>
<li>First of all, everyone is responsible for his own development, it&rsquo;s a chance offered by the company. It cannot be forced unto people.</li>
<li>It is based on volunteer mentorship : everyone should have regular meetings with his mentor to asses his progress on his long term goal, to try to get feedback and ideas about how to move forward. We started by saying that the team leader is the default mentor, but anyone can find another mentor at any moment.</li>
<li>The process starts with the search for a long term goal. Examples are &ldquo;I want to be an agile coach&rdquo;, or &ldquo;I want to be a performance expert&rdquo;</li>
<li>With the help of the mentor if needed, the long term goal should be split in yearly objectives and tracked using <a href="http://fr.slideshare.net/HenrikJanVanderPol/how-to-outperform-anyone-else-introduction-to-okr">OKRs</a></li>
<li>Everyone is free to track his progress has he wishes. Visual tracking makes the discussion with the mentor a lot easier. We have been looking at tools to track OKRs but it was surprisingly difficult to find one that suited our use. Most are enterprisy tools with manager-managee relationships. We just wanted simple personal tracking tools. For my part, I adapted a <a href="https://trello.com/b/MPM4rspd/okrs">Trello</a> board I found on the internet.</li>
</ul>


<h2>Conclusion</h2>

<p>After doing a few months of this, I can say that this has a positive aspect on motivation, people told me that they felt more in control of their destiny. Something else I noted, is that junior developers need help and guidance. They often don&rsquo;t really know what they want to do in a few years, so they really need a mentor to help them find out the what and the how. The other side of this is that a team obviously needs senior developers to act as mentor &hellip; among other things.</p>
]]></content>
  </entry>
  
</feed>
