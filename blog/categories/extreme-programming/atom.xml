<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: extreme programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/extreme-programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-08-08T13:29:54+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sustainable productivity in eXtreme Programming]]></title>
    <link href="http://philippe.bourgau.net/sustainable-productivity-in-extreme-programming/"/>
    <updated>2017-10-27T18:21:00+02:00</updated>
    <id>http://philippe.bourgau.net/sustainable-productivity-in-extreme-programming</id>
    <content type="html"><![CDATA[<p><a href="http://extremeprogramming.org/">eXtreme programming</a> will not improve your short term productivity. But it will drastically improve your long term productivity.</p>

<p>My <a href="/are-software-developers-overworked-or-undecided/">last post</a> detailed how prioritization and Work In Progress limits are the keys to less work and higher productivity.</p>

<blockquote><p>XP is an experiment in answer to the question, &ldquo;How would you program if you had enough time?‚Äù <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1509114442&amp;sr=8-1&amp;keywords=xp+explained">Kent Beck</a></p></blockquote>

<p><img src="http://philippe.bourgau.net/imgs/2017-10-27-sustainable-productivity-in-extreme-programming/cost-of-change-over-time.jpg" alt="Cost of changes over time, for traditional and XP ways of building software" /><div class="image-credits">From <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1510040835&amp;sr=8-1&amp;keywords=extreme+programming+explained">&ldquo;Extreme Programming Explained: Embrace Change&rdquo;</a> by Kent Beck</div></p>

<h2>The best jam is made in old jars</h2>

<p>As I was writing the post, I could not stop thinking :</p>

<blockquote><p>Once again, XP has been addressing these WIP and prioritization issues for 20 years now !</p></blockquote>

<p>Let&rsquo;s see exactly how.</p>

<h3>WIP limitation</h3>

<p>XP has a drastic way to reduce WIP by 2 : pair programming. Instead of 6 developers taking on 6 stories at the same time, they only tackle 3. I won&rsquo;t dive into the ton of other advantages to pair programming here. If you want to learn more, these <a href="http://philippe.bourgau.net/blog/categories/pair-programming/">blog posts</a> might help.</p>

<p>Although it is now seen as a Scrum practice, Planning Game was part of original XP. Sticking to a basic planning game will give room for slack at the end of iterations. The trick is to leave the <a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2">infamous focus factor</a> away.</p>

<blockquote><p>üí° A simple planning game will give room for slack.</p></blockquote>

<p>Suppose a team member takes vacations for a sprint. The team should deliver less user stories that sprint. They&rsquo;ll have less story points to schedule on next sprint. This leaves room for slack and long term improvements such as refactoring, learning &hellip; If half the team goes on holiday, that&rsquo;s a different story, adapt your schedule with gut feeling.</p>

<p>A funny aspect of this is that XP teams are now the most likely to switch to the more extreme <a href="https://twitter.com/hashtag/noestimates">#NoEstimates</a>.</p>

<h3>Priorities</h3>

<p>XP&rsquo;s on-site customer is a straightforward way to work only on the most valuable features. Who better than an end user would be able to make this estimation ?</p>

<p>The YAGNI (<a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">You Ain&rsquo;t Gonna Need It</a>) and simple design principles avoid building unnecessary features. TDD&rsquo;s strict point of not writing code before a failing test prevents over-engineering.</p>

<h2>Modern XP</h2>

<iframe src="https://player.vimeo.com/video/221024846" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>In this wonderful talk from <a href="http://rachelcdavies.github.io/">Rachel C. Davies</a>, she presents how her team has been improving XP for 15 years. She explains how they organize as 2 mobs and 1 solo. At any moment, one mob is working on stories. The other mob works on important long term technical improvements. The solo does some learning. This is an even greater WIP reduction technique than pair programming.</p>

<p>Having a dev doing learning all the time is a form of continuous slack. If the team feels that they cannot deliver something by an important date, he can join the mob to help them.</p>

<p>There&rsquo;s even more to this learning. It can be about anything. Developers work on their technical skills, but they also learn about the domain. Little by little this turns them into domain experts. Guess what : domain experts are great at optimizing value !</p>

<blockquote><p>üí° With time and efforts, developers can become domain experts !</p></blockquote>

<h2>Afterthoughts</h2>

<p>Unfortunately, there is no easy way to prove the long term productivity of XP. We cannot split the world to run the same project with and without XP. Another difficulty is that after a years of XP, work remains smooth and sustainable. Nothing like crunch mode. People used to the hero culture are hard to convince that they can be more productive by doing less.</p>

<p>Hopefully, lean theory and gut feeling of programmers who have switched to XP can back up my claims.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobbing around the world for 48h ... who's in ?]]></title>
    <link href="http://philippe.bourgau.net/mobbing-around-the-world-for-48h-dot-dot-dot-whos-in/"/>
    <updated>2017-10-12T19:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/mobbing-around-the-world-for-48h-dot-dot-dot-whos-in</id>
    <content type="html"><![CDATA[<p>In <a href="https://www.infoq.com/presentations/distributed-teams-remote-collaboration">Far From the mobbing crowd</a> the <a href="https://cucumber.io/">Cucumber</a> guys explain how they combined <a href="https://en.wikipedia.org/wiki/Mob_programming">mob programming</a> and remote work. <a href="https://twitter.com/mattwynne?lang=fr">Matt</a> and <a href="https://twitter.com/tooky?lang=fr">Steve</a> also explain that a mob is both resilient and fast. They explain that they sometimes have to leave the mob for 15 minutes or so. When they come back the code has changed a lot ! It&rsquo;s as if the mob continues no matter who&rsquo;s in.</p>

<p>One of them then suggests an idea.¬†</p>

<blockquote><p>With enough people around the world, we could run a mob that never stops!</p></blockquote>

<p><img src="http://philippe.bourgau.net/imgs/2017-10-12-mobbing-around-the-world-for-48h-dot-dot-dot-whos-in/mob-drawing.jpg" alt="A drawing of a mob walking around a binary world" /></p>

<h2>What&rsquo;s the point ?</h2>

<p>In <a href="https://zapier.com/learn/remote-work/">The Ultimate Guide To Remote Work</a> the <a href="https://zapier.com/">Zapier</a> team explains how to take advantage of time zones and remote work. We can get a feature done faster by having a pair of programmers from different time zones work on it ! Instead of a single day of work in 24h, you get 2 ! We could get features in half the time.</p>

<p><a href="https://zapier.com/learn/remote-work/"><img src="http://philippe.bourgau.net/imgs/2017-10-12-mobbing-around-the-world-for-48h-dot-dot-dot-whos-in/ultimate-guide-remote-work.png" alt="The cover of The Ultimate Guide To Remote Work" /></a></p>

<p>In Lean Management, the time to get a feature is called the cycle time. A short cycle time has a lot of benefits. You get feedback faster. The needs of the users have less risk of changing. You&rsquo;ll get less interruptions, which increases your focus and effectiveness.</p>

<p>Zapier found that time zones and remote work can divide the cycle time by 2. This is already a major improvement. Let&rsquo;s replace this pair of programmers by a mob ! The cucumber guys explain that 4 hours of mobbing is about the most someone can do in a single day. With a mob of 5 people at any time, that&rsquo;s around :</p>

<p><em>24/4 * 5 = 30</em></p>

<p>30 developers working on the same feature, full time !</p>

<p>What would be the effect of this on cycle time ? I don&rsquo;t expect it to cut the cycle time by 30, but from my experience with pairing, I&rsquo;d still expect a drastic reduction. Imagine a complex feature that you estimated to 30 days to finish. Could it be done in less than a week ?</p>

<p>Working on a single story at a time, we could forget merges and complex CIs ! More generally, it would lead to an important Work In Progress (WIP) reduction. Very related to cycle time, reducing the WIP also brings a lot of improvements. One of the most important is an increased throughput. <a href="https://developers.soundcloud.com/blog/deliver-software-faster-by-managing-work-in-progress-not-by-adding-overtime">Here</a> is a great article detailing the benefits of reducing the WIP.</p>

<blockquote><p>üí° Mob programming reduces WIP and cycle time</p></blockquote>

<p>And what about the team structure ? Could a team of 30 be effective in this setting ? 7 is the magic count for a team size. If we could grow past this number, we could imagine completely new org charts :</p>

<ul>
<li>More decentralized</li>
<li>More resilient¬†</li>
<li>Less synchronization and coordination overhead</li>
</ul>


<p><a href="https://www.infoq.com/presentations/distributed-teams-remote-collaboration"><img src="http://philippe.bourgau.net/imgs/2017-10-12-mobbing-around-the-world-for-48h-dot-dot-dot-whos-in/far-from-mobbing-crowd.jpg" alt="A screen capture of 'Far from the mobbing crowd'" /></a></p>

<h2>Let&rsquo;s try it !</h2>

<p>As any new idea, it&rsquo;s also very likely to fail miserably &hellip; The communication overhead could turn out overwhelming. The mob might not be resilient to frequent changes after all. It could work but not bring any reduction to cycle time. There is a ton of reasons for this to fail.</p>

<p>The best way to find out is to try !</p>

<blockquote><p>üí° Stupid ideas that work become great ideas. [<a href="https://ronjeffries.com/articles/tricks/pick-something-stupid/">XP moto</a>]</p></blockquote>

<p>We just need to find enough people spread around the world to give it a try. Could we do 48 hours straight of mobbing and go twice around the globe ?</p>

<p>We would need people distributed across all time zones. Pairing and incremental design would be de-facto practices. It would work better with people used to XP.</p>

<p>We&rsquo;d need at least a mob of 3 doing 5h of mobbing per day for 2 days. That would be :</p>

<p><em>24/5*3 = 15</em></p>

<p>We could go with 15 people but 30 would be ideal. Once we have enough volunteers, we&rsquo;ll have to agree on a few other things :</p>

<ul>
<li>A date for the experiment</li>
<li>A subject we can all understand</li>
<li>Technologies and tools to use</li>
<li>A time-schedule</li>
</ul>


<p>There&rsquo;s nothing impossible here !</p>

<h2>Call for volunteers</h2>

<p>If you want to participate, leave a comment below or contact me through <a href="https://twitter.com/pbourgau">twitter</a>. I&rsquo;ll keep you updated about the status of the experiment.</p>

<p>One last thing &hellip; as you&rsquo;ve guessed this is an experiment, not paid work. Anything we would produce will be open sourced on <a href="https://github.com/">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throwing code away frequently]]></title>
    <link href="http://philippe.bourgau.net/throwing-code-away-frequently/"/>
    <updated>2017-09-01T06:56:00+02:00</updated>
    <id>http://philippe.bourgau.net/throwing-code-away-frequently</id>
    <content type="html"><![CDATA[<p>Here is the main feedback I got about my previous post <a href="/extreme-extreme-programming-2017/">eXtreme eXtreme Programming</a>.</p>

<blockquote><p>What do you actually mean by throwing code away ? Does it mean stoping unit testing and refactoring ?</p></blockquote>

<p><img src="http://philippe.bourgau.net/imgs/2017-09-01-throwing-code-away-frequently/shredder.jpeg" alt="A drawing of a shredder destroying some code" /></p>

<p>So I guess it deserves a bit of explanation.</p>

<h2>What is it all about ?</h2>

<p>When programming, I don&rsquo;t throw code away a lot. I tend to rely on my automated tests to change the code I already have. That might be a problem.</p>

<p>As with everything, there is no one size fits all. We should choose the best practice for our current situation. Same thing applies for incremental changes versus rewriting.</p>

<p>TDD makes incremental changes cost effective, and as such, is a key to get out of the Waterfall.</p>

<p>The idea of throwing code away frequently is to make rewriting cost effective, so we can do it more often.</p>

<h2>Why would we want to do so ?</h2>

<p>In &ldquo;<a href="https://blog.codinghorror.com/when-understanding-means-rewriting/">When Understanding means Rewriting"</a>, Jeff Atwood explains that reading code can be more difficult than writing it. There is a point where rewriting is going to be cheaper than changing.</p>

<p>The more unit test you have, the later you reach that point. The more technical debt you take, and the sooner. The bigger the part to rewrite, the more risky it becomes.</p>

<p>Let&rsquo;s imagine you knew a safe way to rewrite the module you are working on. You could be faster by taking more technical debt and writing less unit tests ! Mike Cavaliere framed it as<br/>
<a href="http://mikecavaliere.com/throw-away-your-code/">F**k Going Green: Throw Away Your Code</a>.</p>

<p>This would be great for new features, that might be removed if they don&rsquo;t bring any value. It would also be a good way to get rid of technical debt. Naresh Jain also makes the point that without tests, you&rsquo;ll have to keep things simple (<a href="https://blogs.agilefaqs.com/2008/10/07/throwing-away-code/">here</a> and <a href="https://fr.slideshare.net/nashjain/the-decline-and-fall-of-agile-antifragile-mindset-to-rescue">here</a>) !</p>

<p>Wait a minute, isn&rsquo;t that <a href="https://en.wikipedia.org/wiki/Cowboy_coding">cowboy coding</a> ?</p>

<h2>How to make it work</h2>

<p><a href="/extreme-extreme-programming-2017/"><img src="http://philippe.bourgau.net/imgs/2017-09-01-throwing-code-away-frequently/xxp.jpg" alt="A graph with all the practices from my previous article eXtreme eXtreme Programming" /></a></p>

<h3>How to ensure quality without unit tests ?</h3>

<p>TDD and unit testing is a cornerstone of XP. If we remove it, we need something else to build quality in. Could Mob Programming and Remote teams do the trick ?</p>

<p>&ldquo;Given enough eyeballs, all bugs are shallow&rdquo;. Pair programming and code reviews catch a lot more bugs than solo programming. Only a few bugs are likely to pass through the scrutiny of the whole team doing mob programming.</p>

<p>What about Remote ? Martin Fowler <a href="https://martinfowler.com/articles/remote-or-co-located.html">explains</a> that remote teams perform better by hiring the best. Skills of programmers have been known for a long time as a main driver of software quality.</p>

<p><a href="http://www.construx.com/10x_Software_Development/Origins_of_10X_%E2%80%93_How_Valid_is_the_Underlying_Research_/"><img src="http://philippe.bourgau.net/imgs/2017-09-01-throwing-code-away-frequently/ProductivityVariation.jpg" alt="People vs methodology impact on productivity" /></a><div class="image-credits">Photo from Steve McConnell on <a href="http://www.construx.com/10x_Software_Development/Origins_of_10X_%E2%80%93_How_Valid_is_the_Underlying_Research_/">Construx</a></div></p>

<p>Finally, the Cucumber team <a href="https://cucumber.io/blog/2015/12/21/the-mob-rules-ok">reported</a> that Mob Programming works well for remote teams.</p>

<h3>How to make this safer ?</h3>

<p>Even with the best team, mistakes will happen. How can we avoid pushing a rewrite that crashes the whole system ?</p>

<p>The main answer to that is good continuous deployment. We should deploy to a subset of users first. We should be able to rollback straight away if things don&rsquo;t work as expected.</p>

<p>As the system grows, <a href="https://en.wikipedia.org/wiki/Microservices">microservices</a> can keep continuous deployment under control. We can deploy, update and roll them back independently. By nature, microservices also reduce the scope of the rewrite. That alone, as we said earlier, makes rewrites safer.</p>

<p>As a last point, some technologies make building microservice systems easier and incremental. The <a href="https://stackoverflow.com/questions/16779162/what-kind-of-virtual-machine-is-beam-the-erlang-vm">Erlang VM</a>, for example, with first class actors, is one these. Time to give <a href="https://www.erlang.org/">Erlang</a> and <a href="https://elixir-lang.org/">Elixir</a> a try !</p>

<h3>Is this always a good idea ?</h3>

<p>There are good and bad situations.</p>

<p>For example, a lean startup or data driven environment seems a good fit. Suppose your team measures the adoption of new features before deciding to keep or ditch them. You&rsquo;d better not invest in unit tests straight away.</p>

<p>On the other side, software for a complex domain will be very difficult to rewrite flawlessly. I have worked in the finance industry for some years, I know what a complex domain is. I doubt I could rewrite a piece of intricate finance logic without bugs. I would stick to <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> and unit testing in these areas.</p>

<h3>How to dip your toe</h3>

<p>Here is how I intend to dip <em>my</em> toe. I won&rsquo;t drop automated testing completely yet. What I could do instead (and that I already did on side projects) is to start with end to end tests only.</p>

<p>From there every time I want to change a piece of code, I have many options :</p>

<ul>
<li>Add a new end to end test and change the code.</li>
<li>If the code is too much of a mess, I can rewrite it from scratch. I&rsquo;ll have the safety of the end to end tests.</li>
<li>If I see that the module is stabilizing, has not been rewritten for a while, and yields well to modifications. I could start splitting end to end tests into unit tests, and embark on the TDD road.</li>
</ul>


<p>Maybe later, when I have a team doing mob programming to find my mistakes, we&rsquo;ll skip the end to end tests.</p>

<h2>Other interesting links</h2>

<ul>
<li><a href="http://corgibytes.com/blog/2016/11/01/throwaway-code/">Throwaway Code</a> by M. Scott Ford</li>
<li><a href="http://wiki.c2.com/?RewriteCodeFromScratch">Rewrite Code From Scratch</a> on c2 wiki</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eXtreme eXtreme Programming (2017)]]></title>
    <link href="http://philippe.bourgau.net/extreme-extreme-programming-2017/"/>
    <updated>2017-08-25T07:01:00+02:00</updated>
    <id>http://philippe.bourgau.net/extreme-extreme-programming-2017</id>
    <content type="html"><![CDATA[<p>What would <a href="http://www.extremeprogramming.org/">XP</a> look like if it was invented today ?</p>

<p>A few days ago, I stumbled upon these two talks that got me thinking about this question.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cGuTmOUdFbo" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/h62n09XtS-A" frameborder="0" allowfullscreen></iframe>


<p>So I looked deeper into the question, while sticking to the same <a href="http://www.extremeprogramming.org/values.html">values</a> and principles. Here is what I came up with.</p>

<h2>Practices</h2>

<h3>Continuous Deployment</h3>

<p>Why should we only deliver at every iteration in 2017 ? <a href="https://blog.newrelic.com/2016/02/04/data-culture-survey-results-faster-deployment/">Lot&rsquo;s of companies</a> demonstrated how to deploy every commit to safely production. Amazon for example, <a href="http://www.zdnet.com/article/how-amazon-handles-a-new-software-deployment-every-second/">deploys new software every second</a> !</p>

<h3><a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a>++</h3>

<p>As a team starts doing continuous deployment, devs get more and more involved in ops. This privileged view on the users&rsquo;s behaviour can turn devs into product experts. Why not push the logic further and make them <em>the</em> product guys as well ?</p>

<h3>Test in prod</h3>

<p>Continuous deployement opens up many opportunities. Deploying safely requires bulletproof rollbacks. Once devs take care of product, code and ops they can shortcut testing and directly <a href="https://www.theguardian.com/info/developer-blog/2016/dec/05/testing-in-production-how-we-combined-tests-with-monitoring">test in prod</a> with some users ! Rollback remains an option at any time.</p>

<h3><a href="http://www.jamesshore.com/Agile-Book/no_bugs.html">#NoBugs</a></h3>

<p>That seems like wishful thinking. The idea is to fix bugs as soon as they appear, but also to prevent them in the first place. Continuous Deployment requires great engineering practices, which enable this way of working. A story cannot be &ldquo;finished&rdquo; until test in prod is over, and bugs fixed.</p>

<h3>Kanban</h3>

<p>At its core, <a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a way to limit the work in progress. It&rsquo;s almost a side effect of the previous practices. <a href="https://medium.com/quality-functions/the-zero-bug-policy-b0bd987be684">#noBugs almost kills interruptions for rework</a>. On top of that, devs have full control on their end to end work, so why would they multitask ?</p>

<h3>#NoBacklog</h3>

<p>In <a href="https://gettingreal.37signals.com/">Getting Real</a>, basecamp guys said that their <a href="https://gettingreal.37signals.com/ch05_Start_With_No.php">default answer to any new feature request was &ldquo;No&rdquo;</a>. Only after the same thing got asked many times would they start thinking of it. Maintaining a long backlog is a waste of time. Dumping backlog items but the current ones saves time. Important ideas will always come up again later.</p>

<h3>#NoEstimates</h3>

<p>This one is famous already. <a href="https://www.thoughtworks.com/insights/blog/how-estimating-story-counts-worked-us">Some teams</a> have saved time by using story count instead of story points. What&rsquo;s the point anyway if the team is already :</p>

<ul>
<li>working as best as it can</li>
<li>on the most important thing</li>
<li>and deploying as soon as possible</li>
</ul>


<h3>Data Driven</h3>

<p>This is how to drive the system evolution. Instead of relying on projects, backlogs and predictions, use data. Data from user logs and interviews proves if a new feature is worth building or dumping. Exploring logs of internal tools can help to continuous improve.</p>

<h3>Lean startup &amp; Hackathons</h3>

<p>Incremental improvements, in either product or organization, is not enough. As <a href="http://timharford.com/">Tim Hardford</a> explained in <a href="https://www.amazon.com/gp/product/1250007550/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1250007550&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=1f1a29f9454328c6606e12b40399eb06">Adapt</a>, survival requires testing completely new ideas. <a href="https://en.wikipedia.org/wiki/Lean_startup">Lean startup</a> &amp; <a href="https://en.wikipedia.org/wiki/Hackathon">hackathons</a> experiments can do just that.</p>

<p><a href="https://www.amazon.com/gp/product/1250007550/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1250007550&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=1f1a29f9454328c6606e12b40399eb06"><img src="http://philippe.bourgau.net/imgs/2017-08-25-extreme-extreme-programming-2017/adapt.jpg" alt="The cover of the Adapt book" /></a></p>

<h3><a href="/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">Improvement kata</a></h3>

<p><a href="https://en.wikipedia.org/wiki/Toyota_Kata#The_Improvement_Kata">Improvement kata</a> is a way to drive long term continuous improvement. It&rsquo;s the main tool for that at Toyota (read <a href="https://www.amazon.com/gp/product/0071635238/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0071635238&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=93a84b0867a3e0f3dd915d87cba78b90">Toyota Kata</a> to learn more). It provides more time to think of the problem than a retrospective. It also fits perfectly in a data driven environment.</p>

<h3>Mob programming</h3>

<p>Pair programming is great for code quality and knowledge sharing. <a href="https://en.wikipedia.org/wiki/Mob_programming#cite_note-8">Mob programming</a> is the more extreme version of pairing where <em>all</em> the team codes together.</p>

<h3><a href="/throwing-code-away-frequently/">Throw code away frequently</a></h3>

<p>An alternative to refactoring with unit tests is throwaway and rewrite once it gets too bad. Companies have been doing that for years. I worked at a bank that used to throwaway and rewrite individual apps that were part of a larger system. It can be a huge waste of money if these sub systems are too large. Scaling down to individual classes or microservices could make this cost effective.</p>

<h3>Remote</h3>

<p>With access to a wider pool of talents, <a href="https://martinfowler.com/articles/remote-or-co-located.html">remote teams usually perform better</a>. It also makes everybody&rsquo;s life easier. Finally, teams have reported that mob &amp; remote programming <a href="https://www.infoq.com/presentations/distributed-teams-remote-collaboration">work great together</a>.</p>

<h2>Afterthought</h2>

<p>What&rsquo;s striking from this list is that it&rsquo;s not that far from the original XP ! For example, continuous deployment and generalists have always been part of it. Another point is that is not science fiction ! I found many teams reporting success with these practices on the internet ! A well-oiled XP team might very well get there through continuous improvement.</p>

<p>The more I look at it, the more XP stands as a unique lighthouse in the foggy Agile landscape.</p>

<p>As for me, I&rsquo;m not sure I&rsquo;d dare to swap TDD &amp; refactoring for throwaway &amp; rewrite. I&rsquo;m particularly worried about the complex domain specific heart of systems. Nothing prevents from using both strategies for different modules though.</p>

<p>I should give it a try on a side project with a microservice friendly language, such as Erlang or Elixir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to start learning the tao of incremental code refactoring today]]></title>
    <link href="http://philippe.bourgau.net/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/"/>
    <updated>2017-07-21T08:05:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-start-learning-the-tao-of-incremental-code-refactoring-today</id>
    <content type="html"><![CDATA[<p>In my <a href="/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">last post</a>, I explained why incremental refactoring techniques will make you both more productive and relaxed.</p>

<p>As anything worth its salt, the path to full mastery is long and requires dedication. The good news is that you&rsquo;ll start to feel the benefits long before you are a master.</p>

<h2>Dedicated Practice</h2>

<p>The quickest thing that will get you up to speed is dedicated practice. Take some time to do some exercices outside of any &lsquo;production&rsquo; code.</p>

<h3>TDD Coding Katas</h3>

<p>The most famous practice to learn TDD also works very well to learn refactoring. That shouldn&rsquo;t be a surprise as incremental refactoring is an integral part of TDD.</p>

<p>There are many ways to do your first coding kata. You could find a coding dojo near you (ask <a href="https://www.meetup.com/">meetup.com</a>). Or you could find motivated colleagues to start one at your company &hellip; I wrote in more details about how to attend a coding dojo in <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">this post</a>.</p>

<p><a href="https://www.amazon.com/gp/product/919811803X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=919811803X&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=340ea938a5e4f00178676804ac6c2278"><img src="http://philippe.bourgau.net/imgs/2017-07-21-how-to-start-learning-the-tao-of-incremental-code-refactoring-today/coding-dojo.jpg" alt="Emily Bache's Coding Dojo book cover" /></a></p>

<p>You can also practice katas on your own. My friend <a href="https://twitter.com/tpierrain">Thomas Pierrain</a> rehearses the same katas to discover deeper insights.</p>

<h3>Refactoring Golf</h3>

<p>The goal of incremental refactoring is to keep the code production ready all the time. Smaller commits is one happy consequence of that.</p>

<p>You can stretch your refactoring muscles by doing coding katas and keeping the code compiling all the time. You&rsquo;ll need to master your IDE and its automated refactoring. Most of all, it will shift your attention from the goal to the path !</p>

<p>I learned at <a href="https://www.spaconference.org/spa2017/">SPA conference</a> that we call this &lsquo;Refactoring golf&rsquo;. The name comes from Golf contests, <a href="http://wiki.c2.com/?PerlGolf">popular in the Perl community</a>. Their goal is to write the shortest program possible to do a specific goal. The goal of a Refactoring Golf is to go from code A to code B in the fewest transformations possible.</p>

<p>They are a few <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=refactoring+golf&amp;type=">refactoring golf repos on Github</a>, I tried one and found it fun ! Give it a try too !</p>

<h2>Study some theory</h2>

<p>Real mastery does not come by practice alone. Studying theory alongside practice yields deeper insights. Theory enables to put your practice into perspective and to find ways to improve it. It saves you from getting stuck in bad habits. It also saves you from having to rediscover everything by yourself.</p>

<h3>Develop your design taste</h3>

<p>In <a href="http://www.paulgraham.com/taste.html">Taste for Makers</a> Paul Graham explains why taste for is fundamental to programming. Taste is what allows you to judge if code is nice or bad in a few seconds. Taste is subjective, intuitive and fast, unlike rules which are objective but slower. Expert designers use taste to pinpoint issues and good points in code on the spot.</p>

<p>Within the fast TDD &ndash; Refactoring loop, taste is the tool of choice to drive the design. Guess what : we can all improve our design taste !</p>

<p><a href="https://blog.codinghorror.com/code-smells/">Code smells</a> are the first things to read about to improve your design taste. Once you know them well enough, it will be possible to spot things that might need refactoring as you code.</p>

<p>Spotting problems is nice, but finding solutions is better ! <a href="https://en.wikipedia.org/wiki/Software_design_pattern">Design Patterns</a> are just that &hellip; There has been a lot of controversy around Design Patterns. If overusing them leads to bloated code, using them to fix strong smells makes a lot of sense. There is even a book about the subject :</p>

<p><a href="https://www.amazon.com/gp/product/0321213351/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321213351&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=d79d093008fb9e77f75ea2089d6cbdae"><img src="http://philippe.bourgau.net/imgs/2017-07-21-how-to-start-learning-the-tao-of-incremental-code-refactoring-today/refactoring-to-patterns.jpg" alt="Joshua Kerievsky's Refactoring To Patterns book cover" /></a></p>

<p>Finally, there&rsquo;s a third and most common way to improve our design taste. It&rsquo;s to read code ! The more code we read, the better our brain becomes at picking small clues about what nice and what is not. It&rsquo;s important to read clean code but also bad code. To read code in different languages. Code built on different frameworks.¬†</p>

<p>So, read code at work, read code in books, read code in open source libraries, good code, legacy code &hellip;</p>

<h3>Learn your refactorings</h3>

<p>As with most topics in programming there is a reference book about refactoring. It&rsquo;s Martin Fowlers&rsquo;s <a href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=73fc09a5a451402a7036509ae62e8c66">Refactoring, improving the design of existing code</a>. Everything is in there, smells, unit testing and a repository of refactoring walkthroughs.</p>

<p><a href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=73fc09a5a451402a7036509ae62e8c66"><img src="http://philippe.bourgau.net/imgs/2017-07-21-how-to-start-learning-the-tao-of-incremental-code-refactoring-today/refactoring.jpg" alt="Martin Fowler's refactoring book cover" /></a></p>

<p>The book is said to be a difficult read, but the content is worth gold. If you have the grit, give it a try ! At the end, you should understand how your IDE does automated refactoring. You should also be able to perform all the refactorings that your IDE does not provide by hand ! This will enlarge your refactoring toolbox, and help you to drive larger refactorings from A to B.</p>

<h2>Develop a refactoring attitude</h2>

<p>Practice makes perfect. Whatever our refactoring skill, there is something to learn by practicing more.</p>

<h3>Make it a challenge</h3>

<p>As you are coding, whenever you find a refactoring to do to your code, make it a challenge to perform it in baby steps. Try to keep the code compiling and the tests green as much as possible.</p>

<p>When things go wrong, revert instead of pushing forward. Stop and think, try to find a different path.</p>

<p>If you are pairing, challenge your pair to find a safer track.</p>

<p>This might delay you a bit at first, but you&rsquo;ll also be able to submit many times per day. You&rsquo;ll see that your refactoring muscles will grow fast. You should see clear progress in only 1 or 2 weeks.</p>

<h3>Team up against long refactorings</h3>

<p>If your team prioritizes a user story that will need some re-design, try to agree on a refactoring plan. The idea is to find a coarse grain path that will allow you to commit and deliver many times. This plan might also help you to share the work on the story.</p>

<p>Having to question and explain your assumptions will speed up your learning.¬†</p>

<h2>Legacy code</h2>

<p>Refactoring is most useful with bad legacy code. Unfortunately, it also where it is the most difficult. Next week&rsquo;s blog post will be about what we can do to learn how to refactor legacy code.</p>

<p>That was my second post in this mini-series about refactoring. First one was <a href="/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">7 Reasons Why Learning Refactoring Techniques Will Improve Your Life as a Software Engineer</a>. The third and last is <a href="/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/">10 things to know that will make you great at refactoring legacy code</a></p>
]]></content>
  </entry>
  
</feed>
