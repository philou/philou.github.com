<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2013-05-09T08:31:52+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[If new cucumber transform breaks everyhing ...]]></title>
    <link href="http://philippe.bourgau.net/if-new-cucumber-transform-breaks-everyhing-dot-dot-dot/"/>
    <updated>2013-05-08T08:36:00+02:00</updated>
    <id>http://philippe.bourgau.net/if-new-cucumber-transform-breaks-everyhing-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>After reading <a href="http://pragprog.com/book/hwcuc/the-cucumber-book">The cucumber book</a> I decided to add clever cucumber transforms but steps started to fail all over the place ... Even completly unrelated scenarios were failing ...</p>

<p>I should have read the <a href="https://github.com/cucumber/cucumber/wiki/Step-Argument-Transforms">Cucumber transforms doc page</a> and particularly the "Transforms wisdom" section before anything, it would have been a real time saver. To summarise, when a step is executed, all transforms regexps are tried on the step captures, and the first matching transform is applied ! Inlining the transform global inside the step regex removes duplication, but in no way does it imply which transform will be applied !</p>

<p>For example</p>

<p>```ruby
CAPTURE_NUMBER = Transform /<sup>.*$/</sup> do |digits|
  Float(digits)
end</p>

<p>When /<sup>I</sup> withdraw (#{CAPTURE_NUMBER}) from "([<sup>"]+)"$/</sup> do |amount, bank_name|
  bank = Bank.find_by_name(bank_name)
  bank.withdraw(amount)
end
```</p>

<p>will match the bank name with CAPTURE_NUMBER, and you'll get an "invalid value for Float" error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stub around a call to the original method with rspec ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-stub-around-a-call-to-the-original-method-with-rspec/"/>
    <updated>2013-04-19T07:05:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-stub-around-a-call-to-the-original-method-with-rspec</id>
    <content type="html"><![CDATA[<p>Rspec mocks now features a 'and_call_original' method to create simple proxy mocks. But how could we build more complex proxies ?</p>

<p>For the sake of the subject, let's take an example that is not a testing best practice, but that everybody will understand. Suppose you want to simulate a faulty network in your tests. You'd like to stub Net::HTTP.get so that it raises errors from time to time. Here is what you could do</p>

<p><code>ruby
i = 0
original_get = Net::HTTP.method(:get)
Net::HTTP.stub(:get) do |*args, &amp;block|
  i = i+1
  raise RuntimeError.new("network down") if i%3 == 0
  original_get.call(*args, &amp;block)
end
</code></p>

<p>Note the block is taken into account, in this example, it does not matter so much, but forgetting it can bring up really strange issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The poor man's memory profiling]]></title>
    <link href="http://philippe.bourgau.net/the-poor-mans-memory-profiling/"/>
    <updated>2013-02-01T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/the-poor-mans-memory-profiling</id>
    <content type="html"><![CDATA[<p>While working on <a href="http://www.mes-courses.fr">www.mes-courses.fr</a>, a background scheduled task that was running fine on heroku started to fail with out of memory errors. After searching a bit, I discovered that the inputs had changed, and that the memory consumption of my task was linearly correlated to the size of the inputs.</p>


<p>So I tried to setup an automatic test to verify that the memory consumption of my task would remain small enough for it to run on <a href="http://www.heroku.com">heroku</a>. This is what I wanted to do :</p>


<ul>
<li>write a unit test for this</li>
<li>run the task once to warm up the memory</li>
<li>run the task once for some small sample input and note the peak memory usage</li>
<li>run the task once for some large sample input and note the peak memory usage</li>
<li>check that the memory usages are very close, whatever the size of the inputs</li>
</ul>


<p>Everything there is quite straightforward, appart from "note the peak memory usage". Here is what I came up with</p>


<ul>
<li>note the initial memory usage</li>
<li>start a thread that garbage collects and notes the memory usage every 10 ms</li>
<li>process the data</li>
<li>tell the thread to stop</li>
<li>memory usage is the difference between the maximum and initial memory usages</li>
</ul>


<p>Here is the code in ruby, but it can be easily translated to any language (I did it for C# once)</p>


<p>
<script src="https://gist.github.com/4696311.js"></script>
</p>


<p>Unfortunately in ruby, memory usage is not directly available without <a href="http://philippe.bourgau.net/how-to-install-a-patched-ruby-interpreter-wit">patching and rebuilding the interpreter</a>, but allocated objects count is available, and it's actually enough for our purpose.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows licker like with C#]]></title>
    <link href="http://philippe.bourgau.net/windows-licker-like-with-c/"/>
    <updated>2012-11-07T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/windows-licker-like-with-c</id>
    <content type="html"><![CDATA[<p>In <a href="http://www.growing-object-oriented-software.com/">Growing object-oriented software guided by tests</a>&nbsp;they use a java library called <a href="http://code.google.com/p/windowlicker/">Window Licker</a>&nbsp;to pilot a gui running in&nbsp;test thread. Next time I started a new project, I&nbsp;wanted to apply the techniques I had learned in the book. As the project was in C#, I searched for a C# equivalent of Window Licker. I did not find any, but it turned out to be really simple to create an equivalent.</p>


<p>Here is the user test code I wanted to be able to write (inside a <a href="http://www.specflow.org">SpecFlow</a> step) :</p>


<p>
```c#
[Given(@"TheUserEntersHisEmail""(.*)""")]
public void GivenTheUserEntersHisEmail(string email)
{
  User.Enters(ScenarioContext.Current.UserForm().EmailTextBox, email);
}
```
</p>


<p>Here UserForm is an extension method I added to the ScenarioContext that is responsible for returning the current user form.</p>


<p>As you have noticed, the various gui components must be&nbsp;exposed through some kind of public api. What I did was to expose the main gui window as a property on the application top level object, and then have properties to access all the sub windows and the controls that the tests needed to access. It kind of breaks encapsulation, but it allows to keep the tests working during refactoring !</p>


<p>Eventually, I had to write the User class, and it turned out to be really simple :</p>


<p>
```c#
static class User
{
  internal static void Enters(TextBox textBox, string text)
  {
    textBox.Invoke(new MethodInvoker(() => textBox.Text = text));
  }
}
```
</p>


<p>That's it, all that was needed was to ask the thread of the control to update the text !</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stub_model and mock_model]]></title>
    <link href="http://philippe.bourgau.net/stubmodel-and-mockmodel/"/>
    <updated>2012-04-16T00:00:00+02:00</updated>
    <id>http://philippe.bourgau.net/stubmodel-and-mockmodel</id>
    <content type="html"><![CDATA[<p>I decided to stop using stub_model and mock_model. I do not use them enough to get fluent with them. Everytime I have to deal with them, something breaks in an unexpected way. I just decided to stand with good old stubs.</p>


<p>I am also thinking of switching to RR (double ruby) and to use proxy objects to get simplify mocking even further. Did you try it ?</p>

]]></content>
  </entry>
  
</feed>
