<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-02-29T21:15:57+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How We Started Exploratory Testing]]></title>
    <link href="http://philippe.bourgau.net/how-we-started-exploratory-testing/"/>
    <updated>2016-01-08T18:18:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-we-started-exploratory-testing</id>
    <content type="html"><![CDATA[<p>Manual testing is important. Here is how we got to love exploratory testing.</p>

<p>{% img center /imgs/2016-01-08-how-we-started-exploratory-testing/explore.jpg A map and a telescope for exploration %}</p>

<h2>Initial situation</h2>

<p><a href="http://www.murex.com">At work</a> we are building a risk computation engine for the financial markets. It uses a DSL to describe the exact computations to estimate the risk on the data it knows. This in itself is already complex enough to justify the heavy investment in automated testing we did.</p>

<p>With 90% of automated test coverage, Cucumber scenarios to verify quality, everything should just work &hellip; shouldn&rsquo;t it ?</p>

<h2>First try at exploratory testing</h2>

<p><a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1452279644&amp;sr=8-1&amp;keywords=the+art+of+agile+development">{% img center /imgs/2016-01-08-how-we-started-exploratory-testing/art-of-agile-development.jpg The cover of the Art Of Agile Development %}</a></p>

<p>In <a href="http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1452279644&amp;sr=8-1&amp;keywords=the+art+of+agile+development">The art of agile development</a>, James Shore details the practice of exploratory testing as a great way of both :</p>

<ul>
<li>improving the quality of the product by finding bugs</li>
<li>improving the process</li>
</ul>


<p>That&rsquo;s why we gave it a try. Here is the recipe for an exploratory session :</p>

<ol>
<li>Book 1 hour for the full team to do exploratory testing</li>
<li>Prepare a downloadable zip with all the material required to run and test your software</li>
<li>Ask everyone to pick a particular aspect of the system to test during this session</li>
<li>Record bugs when you find one</li>
<li>Spend 30 minutes just after the session to filter duplicate bugs and make sure they are well described</li>
</ol>


<p>Obviously, we also added our special sauce</p>

<ol>
<li>We were to do exploratory testing in pairs, as we do programming, to find more bugs</li>
<li>We gamified it by granting a price to the pair that finds the most bugs. Do you remember how I brought <a href="/how-to-setup-a-weekly-fruit-basket-in-no-time/">fruits for sale in the office</a> ? It turns out we are slowly earning money with the fruits &hellip; enough for the price to be 5 fruits each for the wining pair !</li>
</ol>


<p>This transformed developers into ferocious testers ! I guarantee that with such incentives you&rsquo;ll find bugs &hellip; as we did.</p>

<p><a href="/how-to-setup-a-weekly-fruit-basket-in-no-time/">{% img center /imgs/2016-01-08-how-we-started-exploratory-testing/fruits-basket.jpg Our weekly fruit basket at work %}</a></p>

<h2>Doing it systematically</h2>

<p>We took some time to fix all these bugs during a few sprints. And did another exploratory testing session a few months after &hellip;</p>

<p>As we were still finding bugs in the second session, we decided to make them part of the every sprint. As we got better at testing, a lot of bugs started to get uncovered ! So much that we had to change something.</p>

<h2>Improving our process</h2>

<p>We meet in retrospective and here is what we decided :</p>

<ol>
<li>Fix all bugs before working on any other story (obviously, automated tests are added in the process)</li>
<li>Classify what exactly is a bug. For example, for us, a bug is something that used to work or silently returns bad results or corrupts the data</li>
<li>Add exploratory testing by another pair to our definition of done</li>
</ol>


<p>The number of bugs we find during exploratory testing sessions is starting to decrease. We hope that we&rsquo;ll soon be able to do exploratory testing on the fly, as part of our daily work and to completely remove the specific sessions.</p>

<h2>Benefits</h2>

<p>Exploratory testing brought us a lot.</p>

<ul>
<li>Obviously, the product is a lot more solid</li>
<li>We are surely saving time that would have been lost if the bugs had been uncovered by the users</li>
<li>Fixing the bugs forced us to fix some technical debt : bugs often came from areas of the code that we were not so proud or confident of</li>
</ul>


<p>Exploratory testing is a nobrainer. All teams should do it.</p>

<p>So, in the end, as in the old days, we are back to regular manual testing &hellip; but only for exploration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance is a feature]]></title>
    <link href="http://philippe.bourgau.net/performance-is-a-feature/"/>
    <updated>2015-01-19T06:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/performance-is-a-feature</id>
    <content type="html"><![CDATA[<p>Now that is a widespread title for blog articles ! Just <a href="https://www.google.fr/search?sourceid=chrome-psyapi2&amp;ion=1&amp;espv=2&amp;ie=UTF-8&amp;q=performance%20is%20a%20feature">search Google</a>, and you&rsquo;ll find &ldquo;Performance is a feature&rdquo; in <a href="http://blog.codinghorror.com/performance-is-a-feature/">Coding Horror</a> and <a href="http://coffeeonthekeyboard.com/performance-is-a-feature-623/">others</a>.</p>

<p><a href="http://www.motorstown.com/50701-dragster-jet.html">{% img center /imgs/2015-01-19-performance-is-a-feature/dragster.jpg A Dragster at full speed %}</a></p>

<h1>What&rsquo;s in it for us ?</h1>

<p>If performance is indead a feature, then it can be managed like any feature :</p>

<ul>
<li><p>It should result from use cases</p>

<blockquote><p>During use case X, the user should not wait more than Y seconds for Z</p></blockquote></li>
<li><p>It can be split into user stories</p></li>
</ul>


<blockquote><ul>
<li>Story 1: During use case X, the user should not wait more than 2*Y seconds for Z</li>
<li>Story 2: During use case X, the user should not wait more than Y seconds for Z</li>
</ul>
</blockquote>

<ul>
<li>They can be prioritized against other stories</li>
</ul>


<blockquote><ul>
<li>Let&rsquo;s forget about performance for now and deliver functionality A as soon as ready, we&rsquo;ll speed things up later.</li>
<li>Let&rsquo;s fix basic performance constraints for use case X for now, every story will have to comply with these constraints later.</li>
</ul>
</blockquote>

<ul>
<li>The performance on these use cases should be automatically tested and non regressed</li>
</ul>


<blockquote><ul>
<li>If we slow things too much and these tests breaks, we&rsquo;ll have to optimize the code.</li>
<li>But as long as we don&rsquo;t break the tests, it&rsquo;s ok to unoptimize the code !</li>
</ul>
</blockquote>

<p>Maybe that&rsquo;s a chance to stop performance related gut feeling quarrels !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling agile practices and elephant taming]]></title>
    <link href="http://philippe.bourgau.net/enabling-agile-practices-and-elephant-taming/"/>
    <updated>2014-06-15T21:37:00+00:00</updated>
    <id>http://philippe.bourgau.net/enabling-agile-practices-and-elephant-taming</id>
    <content type="html"><![CDATA[<p>Everybody knows about the agile software development promise &ldquo;Regularly and continuously deliver value&rdquo;. This is how it is supposed to work :</p>

<ul>
<li>Iterative</li>
<li>Focusing on what is needed now</li>
<li>Release as soon as possible</li>
<li>Planning small stories according to the team&rsquo;s velocity</li>
</ul>


<p>{% img center /imgs/2014-06-15-enabling-agile-practices-and-elephant-taming/squirrel.jpg A business A squirrel jumping from one tree to another (source mayamumu.centerblog.net) %}</p>

<p>It all seems common sense and simple. Especialy for people who don&rsquo;t code. That&rsquo;s not the whole story though, let&rsquo;s have a look at a few variations :</p>

<p>Suppose a team uses <a href="http://www.scrum.org">Scrum</a> but does not do any automated testing. As soon as the software will be used, bugs will create havoc in the planning. The velocity will quickly fall, within a few monthes, the team won&rsquo;t be able to add any value. Surely, things could be improved with some rewrite and upfront design &hellip; this does not sound like Scrum anymore.</p>

<p>Now let&rsquo;s suppose that another team is also using Scrum, uses automated tests, but <a href="/sprints-are-not-sprints/">missunderstood Sprint</a> and KISS for quick-and-dirty-coding. Hopefully, this team won&rsquo;t get too many bugs in production ! Unfortunately, any change to the source code will trigger hundreds of test failures : again, the velocity will decrease. I&rsquo;ve been in such projects, in about 2 years, the team got really slow, and might eventually drop their test suit &hellip;</p>

<p>These two examples show that automated testing improves the situation, but also that it is not enough ! There are quite a few agile practices that are in fact <em>enabling</em> practices. These are the practices that are required for the process to accomplish the agile promise described at the begining of this article. Most come from <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> and have been reincarnated through <a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship</a>. That&rsquo;s what Kent Beck meant when he said that XP practices reinforce each other. Here are a few examples :</p>

<p>For example let&rsquo;s take <strong>coding standards</strong> and <strong>pair programming</strong> which really seem to be a programmer choice.
It turns out that they help to achieve <strong>collective code ownership</strong>.
Which in turn helps to get &lsquo;switchable&rsquo; team members.
Which helps to make good team estimates.
Which is required to have have a reliable <strong>velocity</strong>.
Which is a must have to regularly <strong>deliver value</strong> on commitment !</p>

<p>It turns out that all of the other original <a href="http://www.extremeprogramming.org/rules.html">XP practices</a> help to achieve the agile promise.</p>

<p>{% img center /imgs/2014-06-15-enabling-agile-practices-and-elephant-taming/elephant-in-the-room.jpg A business meeting with a real elephant in the room %}</p>

<p>After a lot of time spent writing software, I now tend to think of the code as the elephant in the room. It directly or indirectly constrains every decision that is make. Recognize and tame your elephant or you&rsquo;ll get carted away &hellip;</p>

<p>&hellip; or dragged away &hellip;</p>

<p>&hellip; or trampled &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber_tricks gem : my favorite Gherkin and Cucumber tricks]]></title>
    <link href="http://philippe.bourgau.net/cucumber-tricks-gem-my-favorite-gherkin-and-cucumber-tricks/"/>
    <updated>2014-06-12T06:28:00+00:00</updated>
    <id>http://philippe.bourgau.net/cucumber-tricks-gem-my-favorite-gherkin-and-cucumber-tricks</id>
    <content type="html"><![CDATA[<p>I just compiled my Gherkin and Cucumber goodies into a gem. It&rsquo;s called <a href="https://rubygems.org/gems/cucumber_tricks">cucumber_tricks</a> and the source code can be found on <a href="https://github.com/philou/cucumber_tricks">github</a>. It&rsquo;s also tested on <a href="https://travis-ci.org/philou/cucumber_tricks">travis</a> and documented in details on <a href="https://www.relishapp.com/philou/cucumber-tricks/docs">relish</a>.</p>

<p>The goal of all these tricks is to be able to write more natural english scenarios. Here is an extract from the readme of the gem, which explains what it can do :</p>

<h3>Use pronouns to reference previously introduced items</h3>

<p>foo.feature</p>

<p><code>gherkin
Given the tool 'screwdriver'
When this tool is used
</code></p>

<p>steps.rb</p>

<p>```ruby
A_TOOL = NameOrPronounTransform(&lsquo;tool&rsquo;, &lsquo;hammer&rsquo;)</p>

<p>Given /^(#{A_TOOL})$/ do |tool|
  &hellip;
end
```</p>

<h3>Use the same step implementation to handle an inline arg as a 1-cell table</h3>

<p>steps.rb</p>

<p>```ruby
GivenEither /^the dog named &ldquo;(.*)&rdquo;$)$/,</p>

<pre><code>        /^the following dogs$/ do |dogs_table|
</code></pre>

<p>  &hellip;
end
```</p>

<p>foo.feature</p>

<p><code>gherkin
Given the dog "Rolphy"
...
Given the following dogs
  | Rex  |
  | King |
  | Volt |
</code></p>

<h3>Add default values to the hashes of a table</h3>

<p>foo.feature</p>

<p><code>gherkin
Given the following dogs
  | names | color |
  | Rex   | white |
  | King  | Sand  |
</code></p>

<p>steps.rb</p>

<p>```ruby
Given /^the following dogs$$/ do |dogs|
  hashes = dogs.hashes_with_defaults(&lsquo;names&rsquo;, &lsquo;tail&rsquo; => &lsquo;wagging&rsquo;, &lsquo;smell&rsquo; => &lsquo;not nice&rsquo;)</p>

<h1>hashes.each do |hash|</h1>

<h1>expect(hash[&lsquo;smell&rsquo;]).to eq(&lsquo;not nice&rsquo;)</h1>

<h1>end</h1>

<p>  &hellip;
end
```</p>

<h3>Define named lists from a table</h3>

<p>foo.feature</p>

<p><code>gherkin
Given the following dishes
  | Spaghetti Bolognaise | =&gt; | Spaghetti | Bolognaise sauce |       |         |
  | Burger               | =&gt; | Bread     | Meat             | Salad | Ketchup |
</code></p>

<p>steps.rb</p>

<p>```ruby
Given /^the following dishes$$/ do |dishes|
  name_2_dishes = dishes.hash_2_lists</p>

<h1>expect(name_2_dishes[&lsquo;Burger&rsquo;]).to eq([&lsquo;Bread&rsquo;,&lsquo;Meat&rsquo;,&lsquo;Salad&rsquo;,&lsquo;Ketchup&rsquo;])</h1>

<p>  &hellip;
end
```</p>

<p>Visit <a href="https://www.relishapp.com/philou/cucumber-tricks/docs">relish</a> for more detailed documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My new gem for creating rspec proxies]]></title>
    <link href="http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies/"/>
    <updated>2014-05-23T06:20:00+00:00</updated>
    <id>http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies</id>
    <content type="html"><![CDATA[<p>I already wrote a lot about test proxies (<a href="/how-to-stub-around-a-call-to-the-original-method-with-rspec/">here</a>, <a href="/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">here</a> and <a href="/my-humble-advices-about-how-to-write-maintainable-tests/">here</a>).</p>

<p>I just took the time to transform my previous gist in a full fledged ruby gem. It&rsquo;s called &ldquo;rspecproxies&rdquo; and it can be found <a href="https://github.com/philou/rspecproxies">on github</a>. It&rsquo;s fully tested, documented and there&rsquo;s a usage section in the readme to help anyone get started.</p>

<p>Here are the pain points proxies try to fix :</p>

<ul>
<li>Without mocks, it is sometimes just awfully painfull to write the test (do you really want to start a background task just to get a completion ratio ?)</li>
<li>With classic stubs, you sometimes have to stub things you are not interested in in your test, you end up with unmaintainable extra long stub setup</li>
</ul>


<p>Let&rsquo;s have a look at a few examples of tests with proxies :</p>

<ul>
<li>Verify actual load count without interfering in any behaviour</li>
</ul>


<p>```ruby
it &lsquo;caches users&rsquo; do
  users = User.capture_results_from(:load)</p>

<p>  controller.login(&lsquo;joe&rsquo;, &lsquo;secret&rsquo;)
  controller.login(&lsquo;joe&rsquo;, &lsquo;secret&rsquo;)</p>

<p>  expect(users).to have_exactly(1).items
end
```</p>

<ul>
<li>Use proxies to stub an object that does not yet exist</li>
</ul>


<p>```ruby
it &lsquo;rounds the completion ratio&rsquo; do
   RenderingTask.proxy_chain(:load, :completion_ratio) {|s| s.and_return(0.2523) }</p>

<p>   renderingController.show</p>

<p>   expect(response).to include(&lsquo;25%&rsquo;)
end
```</p>

<p>I&rsquo;d really love to see more code tested with proxies, it makes the whole testing so much more natural. As with any testing techniques, we get more thorough testing from the ease of writing the test.</p>
]]></content>
  </entry>
  
</feed>
