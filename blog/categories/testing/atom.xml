<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-06-22T17:51:53+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speed up the TDD feedback loop with better assertion messages]]></title>
    <link href="http://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/"/>
    <updated>2017-05-29T06:37:00+02:00</updated>
    <id>http://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages</id>
    <content type="html"><![CDATA[<p>There is a rather widespread <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> practice to have a <a href="https://softwareengineering.stackexchange.com/questions/7823/is-it-ok-to-have-multiple-asserts-in-a-single-unit-test">single assertion per test</a>. The goal is to have faster feedback loop while coding. When a test fails, it can be for a single reason, making the diagnostic faster.</p>

<p>The same goes with the test names. When a test fails, a readable test name in the report simplifies the diagnostic. Some testing frameworks allow the use of plain strings as test names. In others, people use <a href="https://en.wikipedia.org/wiki/Naming_convention_(programming">underscores</a>#Multiple-word_identifiers) instead of <a href="https://en.wikipedia.org/wiki/Camel_case">CamelCase</a> in test names.</p>

<p><img src="../imgs/2017-05-29-speed-up-the-tdd-feedback-loop-with-better-assertion-messages/rubymine.jpg" alt="RubyMine test report" /></p>

<h2>A 4th step in TDD: Fail, <em>Fail better</em>, Pass, Refactor</h2>

<h3>First, make it fail</h3>

<p>Everyone knows that Test Driven Development starts by making the test fail. Let me illustrate why.</p>

<p>A few years ago, I was working on a <a href="https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29">C#</a> project. We were using TDD and <a href="https://github.com/nunit/nunit">NUnit</a>. At some point, while working on a story, I forgot to make my latest test fail. I wrote some code to pass this test, I ran the tests, and they were green. When I was almost done, I tried to plug all the parts together, but nothing was working. I had to start the debugger to understand what was going wrong. At first, I could not understand why the exact thing I had unit tested earlier was now broken. After more investigation I discovered that I had forgotten to make my test public. NUnit only runs public tests &hellip;</p>

<p>If I had made sure my test was failing, I would have spotted straightaway that it was not ran.</p>

<h3>Then make it fail &hellip; better !</h3>

<p>I lived the same kind of story with wrong failures many times. The test fails, but for a bad reason. I move on to implement the code to fix it &hellip; but it still does not pass ! Only then do I check the error message and discover the real thing to fix. Again, it&rsquo;s a transgression to baby steps and to the <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a> principle. If the tests is small, that might not be too much of an issue. But it can be if the test is big, or if the real fix deprecates all the premature work.</p>

<h3>Strive for explicit error message</h3>

<p>The idea is to make sure to have good enough error messages before moving on to the &ldquo;pass&rdquo; step.</p>

<p><a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests"><img src="../imgs/2017-05-29-speed-up-the-tdd-feedback-loop-with-better-assertion-messages/growing.jpg" alt="Cover of GOOSGT" /></a></p>

<p>There&rsquo;s nothing groundbreaking about this practice. It&rsquo;s not a step as explicit as the other 3 steps of TDD. The first place I read about this idea was in <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests">Growing Object Oriented Software Guided By Tests</a>.</p>

<h2>How to improve your messages</h2>

<h3>Readable code</h3>

<p>Some test frameworks print out the failed assertion code to the test failure report. Others, especially in dynamic languages, use the assertion code itself to deduce an error message. If your test code is readable enough, your error messages might be as well !</p>

<p>For example, with <a href="https://www.ruby-lang.org">Ruby</a> <a href="http://rspec.info/">RSpec</a> testing framework :</p>

<p><code>ruby
it "must have an ending" do
  expect(Vote.new(team: @daltons)).to be_valid
end
</code></p>

<p>Yield the following error :</p>

<p>```
expected #<Vote ...> to be valid, but got errors: Ending can&rsquo;t be blank</p>

<p>```</p>

<h3>Pass in a message argument</h3>

<p>Sometimes, readable code is not enough to provide good messages. All testing frameworks I know provide some way to pass in a custom error message. That&rsquo;s often a cheap and straightforward way to clarify your test reports.</p>

<p>```ruby
  it &ldquo;should not render anything&rdquo; do</p>

<pre><code>post_create
expect(response.code).to eq(HTTP::Status::OK.to_s),
                         "expected the post to succeed, but got http status #{response.code}"
</code></pre>

<p>  end
```</p>

<p>Yields</p>

<p><code>
expected the post to succeed, but got http status 204
</code></p>

<h3>Define your own matchers</h3>

<p>The drawback with explicit error message is that they harm code readability. If this becomes too much of an issue, one last solution is the use of <a href="https://objectpartners.com/2013/09/18/the-benefits-of-using-assertthat-over-other-assert-methods-in-unit-tests/">test matchers</a>. A test matcher is a class encapsulating assertion code. The test framework provides a fluent api to bind a matcher with the actual and expected values. Almost all test framework support some flavor of these. If not, or if you want more, there are libraries that do :</p>

<ul>
<li><a href="http://joel-costigliola.github.io/assertj/index.html">AssertJ</a> is a fluent assertion library for Java. You can easily extend it with your own assertions (ie. matchers)</li>
<li><a href="http://n-fluent.net/">NFluent</a> is the same thing for .Net.</li>
</ul>


<p>As an example, in a past side project, I defined an <a href="https://github.com/philou/mes-courses/blob/master/spec/support/include_all_matcher.rb">include_all</a> rspec matcher that verifies that many elements are present in a collection. It can be used that way :</p>

<p><code>ruby
expect(items).to include_all(["Tomatoes", "Bananas", "Potatoes"])
</code></p>

<p>It yields error messages like</p>

<p><code>
["Bananas", "Potatoes"] are missing
</code></p>

<p>A custom matcher is more work, but it provides both readable code and clean error messages.</p>

<h2>Other good points of matchers</h2>

<p>Like any of these 3 tactics, matchers provide better error messages. Explicit error messages, in turn, speed up the diagnostic on regression. In the end, faster diagnostic means easier maintenance.</p>

<p>But there&rsquo;s more awesomness in custom test matchers !</p>

<h3>Adaptive error messages</h3>

<p>In a custom matcher, you have to write code to generate the error message. This means we can add logic there ! It&rsquo;s an opportunity to build more detailed error messages.</p>

<p>This can be particularly useful when testing recursive (tree-like) structures. A few years ago, I wrote an rspec matcher library called <a href="https://github.com/philou/xpath-specs">xpath-specs</a>. It checks html views for the presence of recursive XPath. Instead of printing</p>

<p><code>
Could not find //table[@id="grades"]//span[text()='Joe'] in ...
</code></p>

<p>It will print</p>

<p><code>
Could find //table[@id="grades"] but not //table[@id="grades"]//span[text()='Joe'] in ...
</code></p>

<p>(BTW, I&rsquo;m still wondering if testing views this way is a good idea &hellip;)</p>

<h3>Test code reuse</h3>

<p>One of the purpose of custom test matchers is to be reusable. That&rsquo;s a good place to factorize assertion code. It is both more readable and more organized than extracting an assertion method.</p>

<h3>Better coverage</h3>

<p>I noticed that custom matcher have a psychological effect on test coverage ! A matcher is a place to share assertion code. Adding thorough assertions seems legitimate, contrary to repeating them inline.</p>

<h3>Avoids mocking</h3>

<p>We often resort to mocks instead of side effect tests because it&rsquo;s a lot shorter. A custom matcher encapsulates the assertion code. It makes it OK to use a few assertions to test for side effects, which is usually preferable to mocking.</p>

<p>For example, here is a matcher that checks that our remote service API received the correct calls, without doing any mocking.</p>

<p>```ruby
RSpec::Matchers.define :have_received_order do |cart, credentials|
  match do |api|</p>

<pre><code>not api.nil? and
api.login == credentials.email and
api.password == credentials.password and
cart.lines.all? do |cart_line|
  cart.content.include?(cart_line.item.remote_id)
end
</code></pre>

<p>  end</p>

<p>  failure_message do |api|</p>

<pre><code>"expected #{api.inspect} to have received order #{cart.inspect} from #{credentials}"
</code></pre>

<p>  end
end
```</p>

<h2>Care about error messages</h2>

<p>Providing good error messages is a small effort compared to unit testing in general. At the same time, it speeds up the feedback loop, both while coding and during later maintenance. Imagine how easier it would be to analyze and fix regressions if they all had clear error messages !</p>

<p>Spread the word ! Leave comments in code reviews, demo the practice to your pair buddy. Prepare a team coding dojo about custom assertion matchers. Discuss the issue in a retro !</p>

<p><img src="../imgs/2017-05-29-speed-up-the-tdd-feedback-loop-with-better-assertion-messages/just-do-it.jpg" alt="'Just Do It' written on a board" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20 Bad Excuses For Not Writing Unit Tests]]></title>
    <link href="http://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests/"/>
    <updated>2017-05-23T06:08:00+02:00</updated>
    <id>http://philippe.bourgau.net/20-bad-excuses-for-not-writing-unit-tests</id>
    <content type="html"><![CDATA[<blockquote><p>I guess we always find excuses to keep on with our bad habits, don&rsquo;t we ? <em><a href="http://www.goodreads.com/quotes/797048-i-guess-we-always-find-excuses-to-keep-on-with">Stephen King</a></em></p></blockquote>

<ol>
<li>I don&rsquo;t have the time. <em>But you&rsquo;ll have the time to fix the bugs &hellip;</em></li>
<li>I don&rsquo;t know how to write tests. <em>No problem, anyone can <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">learn</a>.</em></li>
<li>I&rsquo;m sure the code is working now. <em><a href="https://www.brainyquote.com/quotes/quotes/e/edsgerdijk204340.html">The competent programmer is fully aware of the limited size of his own skull &hellip;</a></em></li>
<li>This code is not testable. <em>Learn or refactor.</em></li>
<li>It&rsquo;s (UI|DB) code, we don&rsquo;t test it. <em>Because it never crashes ?</em></li>
<li>Because I need to refactor first &hellip; and I need tests to refactor ! <em>Damn, you&rsquo;ve fallen into the test deadlock !</em></li>
<li>It&rsquo;s multithreaded code, it&rsquo;s impossible to test. <em>Because it&rsquo;s fully tederministic ?</em></li>
<li>The QA department is already testing the code. <em>Is that working well ?</em></li>
<li>I should not test my own code, I&rsquo;ll be biased. <em>Start testing other people&rsquo;s code right now then !</em></li>
<li>I&rsquo;m a programmer, not a tester. <em><a href="https://softwareengineering.stackexchange.com/questions/159572/as-a-professional-developer-is-it-acceptable-to-not-write-unit-tests">Professional programmers write tests</a>.</em></li>
</ol>


<p><img src="../imgs/2017-05-23-20-bad-excuses-for-not-writing-unit-tests/stronger_than_excuses_quote.jpg" alt="A quote 'Be Stronger Than Your Excuses'" /><div class="image-credits">From <a href="https://todayiwillbefit.com/2013/10/30/excuses-suck-top-10-bad-excuses-to-not-exercise/">todayiwillbefit.com</a></div></p>

<ol>
<li>I&rsquo;m using a REPL, it replaces unit tests. <em>Sure, and you&rsquo;re running your REPL buffers on the CI ? and keeping your them for the next time someone modifies your code.</em></li>
<li>My type system is strong enough to replace tests. <em>Does it detect when you use &lsquo;+&rsquo; instead of &lsquo;*&rsquo; ?</em></li>
<li>We don&rsquo;t have the tooling to write unit tests. <em><a href="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks">Get one</a>.</em></li>
<li>Tests aren&rsquo;t run automatically anyway. <em><a href="https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software">Install a Continuous Integration Server</a>.</em></li>
<li>I&rsquo;m domain expert developer, writing tests is not my job. <em>Creating bugs isn&rsquo;t either !</em></li>
<li>We&rsquo;d rather switch to the <a href="http://www.paulgraham.com/avg.html">Blub language</a> first ! <em>You&rsquo;re right, let&rsquo;s do neither then !</em></li>
<li>We don&rsquo;t test legacy code. <em>Specifically because it is <a href="https://en.wikipedia.org/wiki/Legacy_code">legacy code</a>.</em></li>
<li>Adding tests for every production code we write is insane ! <em>As shipping untested code is unprofessional.</em></li>
<li>I find more issues doing manual testing. <em><a href="/how-we-started-exploratory-testing/">Exploratory Testing</a> is a valuable testing, even more so on top of automated tests.</em></li>
<li>Because my teammates don&rsquo;t run them. <em>Time for a <a href="/most-scrum-teams-are-not-agile/">retrospective</a>.</em></li>
</ol>


<p><img src="../imgs/2017-05-23-20-bad-excuses-for-not-writing-unit-tests/just-do-it.jpg" alt="'Just Do It' written on a board" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From apprentice to master, how to learn TDD (Test Driven Development)]]></title>
    <link href="http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/"/>
    <updated>2017-05-15T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development</id>
    <content type="html"><![CDATA[<p>I started to learn <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> a long time ago. Since then, even though I&rsquo;m still not a master, it&rsquo;s been my most useful programming skill, by far. TDD is the first trick every new programmer should learn. It made my whole career as a developer easier.</p>

<p>I&rsquo;ve been working as a professional software engineer for more than 15 years, including around 10 years in the trading industry. Only once did I need to work on week ends or late into the night to fix emergency issues. I believe I largely owe this work-life balance to the high test coverage that TDD ensures by design.</p>

<p>TDD also enables safe refactoring. Refactoring enables <a href="/incremental-architecture-a-cure-against-architecture-astronauts/">incremental design</a> which lets you decide late. Deciding late is how you make your customers happy by accepting late changes. Deciding late is how take up-front design easy, and improve your code as you go. Deciding late is how you build trustful and harmonious relationships with the stakeholders of your project.</p>

<p>Finally, writing tests before the code is both easier and more fun. Among compilation errors and never ending customer demands, the recurring green barre tastes like pure candy to the poor programmer !</p>

<p><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/road.jpg" alt="A long winding road" /><div class="image-credits">From <a href="https://fr.pinterest.com/explore/winding-road/">Pinterest winding road catalog</a></div></p>

<h2>The TDD Road</h2>

<p>Here are the steps I took to learn TDD.</p>

<h3>Learn the principles</h3>

<p>The principles of Test Driven Development are fairly basic. 5 minutes is enough to know them forever :</p>

<ol>
<li>Write a failing test</li>
<li>Make it pass by doing the simplest thing possible</li>
<li>Refactor your code while keeping the tests passing</li>
<li>Repeat until your acceptance test is green</li>
</ol>


<p>TDD newbies might ask a few questions like :</p>

<ul>
<li>Is making the code compile in step 1 or 2 ? Honestly, that does not matter. Write the test as if you had the code, then make it compile, make sure it fails, and continue.</li>
<li>How much should I refactor ? It often takes a good amount of experimentation to find your good balance. If you don&rsquo;t refactor enough, you going to drown in dirty code. If you refactor too much, you&rsquo;re going to waste your time (<a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a>). As a rule of thumb, <a href="https://martinfowler.com/bliki/BeckDesignRules.html">Kent Beck&rsquo;s</a> rules on simple design are a very good starting point :</li>
</ul>


<p><a href="https://martinfowler.com/bliki/BeckDesignRules.html"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/beck-rules.jpg" alt="A visual graph of Kent Beck's rules of simple design" /></a><div class="image-credits"><a href="https://martinfowler.com/bliki/BeckDesignRules.html">From Martin Fowler : Beck Design Rules</a></div></p>

<h3>Find your tools</h3>

<p>Back in 2003, after reading <a href="TODO">Martin Fowler</a>&rsquo;s <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080119&amp;sr=1-1&amp;keywords=martin+fowler+refactoring">Refactoring: Improving the Design of Existing Code</a> book, I decided to give TDD a serious try. I was using C++ at work but we did not even have a nightly build. I had to download and setup <a href="https://en.wikipedia.org/wiki/CppUnit">CppUnit</a> on my own. As solo endeavor, this was a required step to get into TDD.</p>

<p>Find and setup a tool. Which one should be rather obvious, if your team already uses a unit test framework, stick to it, otherwise, pick the most standard for your language, ex : <a href="http://junit.org/">JUnit</a> for <a href="https://www.java.com">Java</a> (you might as well start searching for a new job where they use a unit testing tool).</p>

<h3>Train at a TDD coding dojo</h3>

<p><a href="http://codingdojo.org/">Coding dojos</a> were first invented as a tool to <a href="http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/">learn TDD</a>. They were started by two french eXtreme Programmers <a href="https://ut7.fr/">Emmanuel Gaillot</a> and <a href="http://institut-agile.fr/">Laurent Bossavit</a>. It happens that I live in Paris, and that Emmanuel came to work as a contractor at the same company I was. I learned that he was organizing a weekly coding dojo open to any developer. That&rsquo;s how I started attending coding dojos. Looking back, the TDD skills I learned at the coding dojo are just enormous !</p>

<p>If you are serious about learning TDD, attend coding dojos. Whether you find one in your city (ask <a href="https://www.meetup.com/">meetup.com</a>) or in your company does not really matter. If you cannot find any, just start one at work ! Send a public call for interested people (use wiki, mail, posters or whatever), book a room and start hacking ! <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo">Emily Bache&rsquo;s Coding Dojo Handbook</a> seems a very good reference about how to start a coding dojo (Disclaimer : I did not read the book, I only know it by reputation.)</p>

<p><a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/coding-dojo.jpg" alt="Cover of The Coding Dojo Handbook" /></a></p>

<h3>Use it</h3>

<p>If you&rsquo;re a professional programmer, you must be spending most of your time writing code. Take this opportunity to use TDD. You&rsquo;ll be slowed down a bit at the beginning, but as both your code and your skills improve, you&rsquo;ll get your time back manyfold.</p>

<p>I remember one of my first professional use of TDD was to write a small parser. A few weeks later I was asked to make it faster. Having tests around it made it easy to optimize it without breaking it.</p>

<h3>Deliberate practice</h3>

<p>In <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1494910468&amp;sr=1-1&amp;keywords=the+first+20+hours">The first 20 hours</a>, Josh Kaufman explains that deliberately practicing specific topics is a more time effective way of learning than simply crunching hours of practice.</p>

<p>My friend <a href="https://twitter.com/tpierrain">Thomas Pierrain</a> is used to regularly practice short 30 minutes katas to sharpen his programming skills. Katas can be found at <a href="http://codingdojo.org/KataCatalogue/">codingdojo.org</a>, at <a href="http://cyber-dojo.org/">cyber-dojo.org</a> or in <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo">The Coding Dojo Handbook</a>.</p>

<h3>Read</h3>

<p>Meanwhile I was doing all this, I also spent a lot of time reading on the subject. At the time, there was a lot of things about TDD in the <a href="http://wiki.c2.com/">C2 Wiki</a>, so I spent a lot of time there. Since then, I stumbled upon a few books that helped me to understand some aspects of TDD :</p>

<ul>
<li>Kent Beck&rsquo;s classic <a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080564&amp;sr=1-1&amp;keywords=tdd+by+example">TDD by example</a> remains a great reference for beginners</li>
<li>I got very useful advices from <a href="https://www.amazon.com/Test-Driven-Development-Practical-Guide/dp/0131016490/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1494911486&amp;sr=1-3&amp;keywords=test+driven+practical+guide">TDD, a practical guide</a> especially the section about UI testing, which really saved me at some point</li>
<li>Finally, <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests">Growing Object Oriented Software Guided By Tests</a> is now a classic about what is called &ldquo;The London school of testing&rdquo;, which uses mocks as a design tool. Definitely a must read.</li>
</ul>


<p><a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/growing.jpg" alt="Cover of GOOSGT" /></a></p>

<h3>Practice advanced topics</h3>

<p>The TDD road goes on forever, testing has a lot of tricky topics. Once you&rsquo;ve mastered the basics, it&rsquo;s quite interesting to explore and practice more complex subjects. Here are a few things worth trying out :</p>

<ul>
<li>Use automated IDE refactorings to keep the code compiling all the way through a kata</li>
<li>Do the same kata twice, using <a href="/flavours-of-tdd/">top-down and bottom-up</a> styles</li>
<li>Do refactoring katas to learn how to work with legacy code</li>
<li>Do UI katas, to learn how to test the UI</li>
<li>Learn how to deal with DB</li>
<li>Learn how to handle remote services</li>
</ul>


<p>If needed, invent your own katas to deliberately practice these topics and others.</p>

<h2>The pitfalls</h2>

<p>As any road worth walking, the TDD path is not linear and smooth. Before fully mastering TDD, you&rsquo;ll regularly wonder if you&rsquo;re on the right track. As any practice, TDD has pitfalls. I&rsquo;ve fell into some quite a few times. I guess that&rsquo;s part of the learning process.</p>

<h3>Emerging Design</h3>

<p>There&rsquo;s always been a lot of misunderstanding around this topic.</p>

<p>Bad smells in your code make your tests harder to write. If adding a test is painful, that&rsquo;s an indication that something could be improved in your design. It&rsquo;s then up to you to know what. Once you&rsquo;ve figured out what you want to change, use your existing tests to refactor your design first. Only then, add this new test.</p>

<p>As you can see, the tests will give you more feedback about the design of your code, but they won&rsquo;t tell you what to do. That&rsquo;s where your coding skills will help. This is particularly true about algorithms. Don&rsquo;t expect a good algorithm to magically appear as you do the simplest-thing-that-could-possibly-work &hellip;</p>

<p>As with any rules, there are exceptions. At times, you&rsquo;ll walk into a problem which emerging design is great. For example, I&rsquo;ve done the <a href="http://agilekatas.co.uk/katas/RomanNumerals-Kata">Arab to Romans</a> kata many times, and that repeatedly doing the simplest-thing-that-could-possibly-work yields a good solution.</p>

<h3>Mocks</h3>

<p><a href="https://en.wikipedia.org/wiki/Mock_object">Mocks</a> are useful at times, but be careful not to overuse them. I already <a href="http://localhost:4000/blog/categories/mocking/">wrote about mocks</a>. Too much mocking makes your test suite brittle, ineffective and difficult to maintain ! I&rsquo;ve been bitten hard by this one on a personal <a href="https://github.com/philou/mes-courses">side project</a>, the day I decided to get rid of all the mocks, I shrank the test code size by 25%. Since then I learned about alternate techniques such as :</p>

<ul>
<li><a href="http://www.natpryce.com/articles/000714.html">Test data builders</a> which allow to easily build test data</li>
<li><a href="https://martinfowler.com/bliki/ValueObject.html">Value objects</a> that are immutable and don&rsquo;t need mocking</li>
<li><a href="/my-new-gem-for-creating-rspec-proxies/">test spies and proxies</a> as a way to mock and track calls while still calling the real code</li>
<li><a href="http://localhost:4000/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">in-memory fake implementations</a> which make the tests independent and fast without unmaintainable proliferation of mock setup</li>
</ul>


<p>As an indicator, less than 5% of my tests use mocks.</p>

<h3>Metrics</h3>

<p>In his <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">keynote at RailsConf 2014</a> DHH explains the danger of testing metrics.</p>

<p><a href="https://www.youtube.com/watch?v=9LfmrkyP81M"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/dhh.jpg" alt="DHH's keynote at RailsConf 2014" /></a></p>

<p>By using TDD correctly, you should get a high code coverage as a side effect. If you get below 80%, you must be doing something wrong. The other metric you should keep an eye on is the total build time. Original <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> had the <a href="http://www.jamesshore.com/Agile-Book/ten_minute_build.html">10 minutes build rule</a> which states that if your build + tests takes more than 10 minutes, you should refactor it.</p>

<p>That&rsquo;s it ! Things like 100% test coverage or test ratio are complete nonsense.</p>

<h2>Pushing it even further</h2>

<p>My promise, at the beginning of this post, was that Test Driven Development would make your life as a developer easier. Now let&rsquo;s imagine that your whole team or company was using TDD. It&rsquo;s a foundation on which to build a sustainable agile organization.</p>

<p>The mastery of automated testing at organization scale is a key element to continuous delivery, making releasing software a non-event, and as stress-free as possible.</p>

<p>Full adoption of TDD can yield to <a href="/incremental-architecture-a-cure-against-architecture-astronauts/">incremental architecture</a> which delivers features faster, by skipping the conflictual arguments about supposed future needs.</p>

<p>Finally, TDD can simplify your processes and tooling. Team-wide TDD results in a steady flow of features on top of which it is easier to create simple and effective processes and tools.</p>

<p>The road is long, sinuous and at times rocky, but so are the rewards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to mock your browser's timezone with Jasmine and MomentJS]]></title>
    <link href="http://philippe.bourgau.net/how-to-mock-your-browsers-timezone-with-jasmine-and-momentjs/"/>
    <updated>2017-03-30T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-mock-your-browsers-timezone-with-jasmine-and-momentjs</id>
    <content type="html"><![CDATA[<p>Last week, I&rsquo;ve been working at adding a distributed countdown to my <a href="https://github.com/philou/planning-poker">Online Planning Poker App</a>. As our team works from Paris and Beirut, I wanted to unit test that it would work well through different timezones. I found a surprisingly simple solution.</p>

<h2>What Google told me</h2>

<p>I first searched Google to see how to do it. I found 2 answers that looked promising :</p>

<ul>
<li><a href="https://balanceiskey.github.io/2016/01/27/mocking-timezones.html">You can use moment-timezone to mock timezones in Jasmine</a> which I unfortunately did not manage to use</li>
<li><a href="http://stackoverflow.com/questions/12220717/how-to-mock-the-browsers-timezone">How to mock the browser&rsquo;s timezone?</a> which seemed a bit of hack</li>
</ul>


<p>Known results for such a simple situation were disappointing !</p>

<h2>What I ended up with</h2>

<p>After a good deal of dabbling around, I eventually found a pretty simple solution using <a href="https://jasmine.github.io/">Jasmine</a> and <a href="https://momentjs.com/timezone/">Moment Timezone</a> :</p>

<p><code>javascript
jasmine.clock().install();
...
jasmine.clock().mockDate(moment.tz("2017-03-23 10:00:00", "Europe/Paris").toDate())
</code></p>

<p>Obviously, the drawback is that it implies setting both the timezone <em>and the time</em>. This should be ok in most of unit tests though, but might be an issue in some cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 minutes hack to speed up RSpec in Rails 5 using in-memory SQLite]]></title>
    <link href="http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite/"/>
    <updated>2017-01-25T07:53:00+01:00</updated>
    <id>http://philippe.bourgau.net/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite</id>
    <content type="html"><![CDATA[<p>Here is the story : you have a <a href="http://rubyonrails.org/">Rails 5</a> app that uses <a href="http://rspec.info/">RSpec</a>, but your RSpec suite is getting slower and slower to run. You&rsquo;ve already considered some solutions :</p>

<ul>
<li>Use <a href="https://sqlite.org/">SQLite</a> in memory for your test env.</li>
</ul>


<p><code>yaml
test:
  adapter: sqlite3
  database: ":memory:"
</code></p>

<p>That&rsquo;s the most straightforward thing to do, but unfortunately, if you are sharing your test env with <a href="https://cucumber.io/">Cucumber</a>, you might want to use a production like DB with Cucumber (<a href="https://www.postgresql.org/">PostgreSQL</a> or whatever). So unless you are ready to setup a new env for cucumber (which I tried and don&rsquo;t recommend) you&rsquo;re stuck.</p>

<ul>
<li>Use mocks. That&rsquo;s surely going to work, it&rsquo;s going to make your test hell of a lot faster ! It will also make your tests a lot more fragile and more expensive to maintain &hellip; If you want to read more about why I think mocks are a bad idea, just have a look at <a href="/blog/categories/mocking/">these posts</a>.</li>
</ul>


<h2>The hack</h2>

<p>Here is a third alternative, I&rsquo;ve <a href="/simplest-way-to-speed-up-rspec-with-in-memory-sqlite-db/">already written about it</a>, but here it comes updated and tested for Rails 5 :</p>

<ol>
<li>Don&rsquo;t change anything to your <code>config/database.yml</code></li>
<li>Obviously, you&rsquo;ll need to add <code>sqlite3</code> to your <code>Gemfile</code></li>
<li>At the beginning of your <code>spec/rails_helper.rb</code>, replace</li>
</ol>


<p>``` ruby</p>

<h1>Checks for pending migration and applies them before tests are run.</h1>

<h1>If you are not using ActiveRecord, you can remove this line.</h1>

<p>ActiveRecord::Migration.maintain_test_schema!
```</p>

<p>with</p>

<p>``` ruby</p>

<h1>In order to keep the same RAILS_ENV for rspec and cucumber, and to make rspec</h1>

<h1>faster, patch the connection to use sqlite in memory when running rspec</h1>

<p>ActiveRecord::Base.establish_connection(adapter: &lsquo;sqlite3&rsquo;, database: &lsquo;:memory:&rsquo;)
ActiveRecord::Schema.verbose = false
load &ldquo;#{Rails.root.to_s}/db/schema.rb&rdquo;
```</p>

<p>That&rsquo;s it ! Run your specs &hellip; not bad for a 5 minutes investment !</p>

<h4>Rails 5.1 (2017-03-29 Edit)</h4>

<p>My fresh hack started to fail on Rails 5.1 ! If <code>schema.rb</code> is generated with the Postgres adapter, it is now incompatible with this injected Sqlite adapter. Here is a patch that removes the glitches :</p>

<p>```ruby</p>

<h1>In order to keep the same RAILS_ENV for rspec and cucumber, and to make rspec</h1>

<h1>faster, patch the connection to use sqlite in memory when running rspec</h1>

<p>ActiveRecord::Base.establish_connection(adapter: &lsquo;sqlite3&rsquo;, database: &lsquo;:memory:&rsquo;)
ActiveRecord::Schema.verbose = false</p>

<h1>load db agnostic schema by default. Needed to remove the &ldquo;, id: :serial&rdquo; from</h1>

<h1>the table definitions to make it load on sqlite</h1>

<p>eval(<code>cat #{Rails.root.to_s}/db/schema.rb | sed 's/,[^:]*: :serial\//g'</code>)
```</p>

<p>I admit this is getting a bit crappy, and I don&rsquo;t know how long it is going to work &hellip;</p>

<h2>One more thing &hellip;</h2>

<p>If you need even more speed, you can now run your specs in parallel in different processes ! Each in-memory SQLite DB is bound to its process, so unlike a real PostgreSQL dev DB, you won&rsquo;t get any conflicts between your tests ;&ndash;)</p>
]]></content>
  </entry>
  
</feed>
