<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-09-21T12:46:37+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A coding dojo exercises plan towards refactoring legacy code]]></title>
    <link href="http://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/"/>
    <updated>2018-06-14T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-coding-dojo-exercises-plan-towards-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>My current job <a href="http://www.murex.com">at work</a> is technical coach. I&rsquo;m available for teams that need help to adopt incremental coding practices.</p>

<h2>Problems with refactoring legacy code</h2>

<p>A few months ago, a team which was struggling with a lot of legacy code asked for help. As you might know if you read my blog, I&rsquo;m a big fan of <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development (TDD)</a> because it has made my <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">life as a developer so much more easy</a>. I&rsquo;m so used to TDD now, that even if I don&rsquo;t have tests yet (as is the case when refactoring legacy code), TDD helps me :</p>

<ul>
<li>To stick to baby steps which are a lot less likely to fail than larges changes.</li>
<li>Write testable code. I know what testable code looks like, and when refactoring, I&rsquo;ll try to change it towards that.</li>
</ul>


<p>That&rsquo;s why we started to run regular, all team, <a href="http://philippe.bourgau.net/blog/categories/team-randori-series/">coding dojo randoris</a>. It was nice for the <a href="/why-you-should-start-a-team-coding-dojo-randori-right-now/">team dynamics</a>, and the people where learning a lot of technical skills. I also got the feedback that they where not able to apply this directly on their day to day job though. After a bit more discussion, I understood that they did not know where this was going, what to expect, and when !</p>

<blockquote><p>💡 Test Driven Development also teaches you what testable code looks like.</p></blockquote>

<h2>The coding dojo exercices</h2>

<p>It turned out that a coding dojo exercises plan was enough to answer their questions. This is what it looks like.</p>

<h3>Drawing</h3>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/Coding-Dojo-Hulk.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/Coding-Dojo-Hulk-small.jpg" alt="An illustrated Coding Dojo Exercises plan leading to the mastery of Legacy Code Refactoring" /></a></p>

<h3>Mind Map</h3>

<p>Here is another, more concrete, version, with sample names of katas we can find online.</p>

<p><a href="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/TDD_Kata_Plan.jpg"><img src="http://philippe.bourgau.net/imgs/2018-06-04-a-coding-dojo-exercises-plan-towards-refactoring-legacy-code/TDD_Kata_Plan-small.jpg" alt="An mind map of Coding Dojo Exercises plan leading to the mastery of Legacy Code Refactoring" /></a></p>

<h3>Text</h3>

<p>It starts with simple greenfield katas :</p>

<ul>
<li><a href="http://codingdojo.org/kata/FizzBuzz/">Fizz Buzz</a></li>
<li><a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numerals</a></li>
<li><a href="http://codingdojo.org/kata/Bowling/">Bowling</a></li>
</ul>


<p>It goes on to intermediate katas, where we can use TDD to do design :</p>

<ul>
<li><a href="http://kata-log.rocks/mars-rover-kata">Mars Rover</a></li>
<li><a href="http://codingdojo.org/kata/PokerHands/">Poker Hands</a></li>
<li><a href="http://codingdojo.org/kata/TradingCardGame/">trading card game</a></li>
</ul>


<p>From then on, it&rsquo;s possible to tackle advanced katas and styles :</p>

<ul>
<li>Refactoring fresh code

<ul>
<li>Continue design katas on 2 or more sessions</li>
<li>Always compile Constraint</li>
</ul>
</li>
<li>Bottom-up TDD

<ul>
<li><a href="http://codingdojo.org/kata/GameOfLife/">Game of Life</a></li>
<li>Median of a list of lists (with no concatenation)</li>
<li><a href="http://codingdojo.org/kata/LangtonAnt/">Langton ant</a></li>
</ul>
</li>
<li>Top-Down TDD

<ul>
<li><a href="http://codingdojo.org/kata/Potter/">Kata Potter</a></li>
<li><a href="http://codingdojo.org/kata/NumberToLCD/">LCD</a></li>
</ul>
</li>
<li>TDD on algorithms

<ul>
<li><a href="http://codingdojo.org/kata/Diamond/">Diamond</a></li>
<li><a href="http://codingdojo.org/kata/Lags/">Kata Lags</a></li>
<li><a href="http://codingdojo.org/kata/Anagram/">anagrams</a></li>
</ul>
</li>
</ul>


<p>All this opens the gate to legacy code refactoring katas :</p>

<ul>
<li><a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">Gilded Rose</a></li>
<li><a href="https://github.com/emilybache/Racing-Car-Katas">Race Car Katas</a></li>
<li><a href="https://github.com/jbrains/trivia">Ugly trivia game</a></li>
<li>Others from <a href="http://kata-log.rocks">http://kata-log.rocks</a></li>
</ul>


<p>At that point, the team can <a href="https://en.wikipedia.org/wiki/Mob_programming">mob</a> to refactor production code :</p>

<ul>
<li>Real life, static analysis issue, mob programming session</li>
<li>Real life, code smell, mob programming session</li>
<li>Real life, larger mob Refactoring</li>
</ul>


<h2>What changed in practice ?</h2>

<p>We wanted to split the teamwork and the coding dojos exercises. The team is now doing mob programming sessions on their usual stories twice a week (I&rsquo;ll blog about that someday). But also doing regular coding dojos exercises in pairs.</p>

<p>Even if they did not go through all the TDD katas yet, mobbing on real stories helps the team to take on legacy code.</p>

<blockquote><p>Given enough eyeballs, all bugs are shallow. Linus&rsquo;s Law</p></blockquote>

<p>Working in pairs on the code katas allows them to be more engaged in the exercises. In the end, it brings faster learning.</p>

<blockquote><p>💡 A mix of Coding Dojos in pairs and Mob Programming sessions is a good way to teach TDD in a Legacy Code context.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When is testing using mocks still a good idea ?]]></title>
    <link href="http://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea/"/>
    <updated>2018-06-07T06:29:00+02:00</updated>
    <id>http://philippe.bourgau.net/when-is-testing-using-mocks-still-a-good-idea</id>
    <content type="html"><![CDATA[<p>In the previous 7 articles of <a href="/blog/categories/how-to-avoid-mocks-series/">this series</a>, I&rsquo;ve tried my best get rid of mocks. I&rsquo;m pretty sure that using these techniques will get you a long way out of <a href="/careless-mocking-considered-harmful/">mock hell</a>. Excessive mocking leads to unmaintainable tests. Unmaintainable tests lead to low coverage. Low coverage ultimately leads to legacy code. If you haven&rsquo;t already, I encourage you to start reading from <a href="/careless-mocking-considered-harmful/">the beginning</a>.</p>

<p>One question remains though : Is it realistic to get rid of <em>all</em> mocks ? An even better question would be : Are mocks always bad ? Are there situations when mocking is the best choice ?</p>

<h2>When mocking still makes sense</h2>

<p>Let&rsquo;s to through a few examples.</p>

<h3>Testing a generic wrapper</h3>

<p>A few years ago, I had to write a service for an enterprise system. As any service, I had to ensure that it was returning nice errors. We decided to capture and wrap all errors from a few &lsquo;gate&rsquo; points in the code. We built a generic wrapper that did only delegation plus exception wrapping. In this case, it made a lot more sense to test this with a mocking framework.</p>

<p>```ruby</p>

<p>context ServiceErrorWrapper do</p>

<p> specify &lsquo;converts all kinds of exceptions&rsquo; do
   failing_object = object_double(&ldquo;Failing object&rdquo;)
   allow(failing_object).to receive(:long_computation).and_raise(Exception.new(&ldquo;Something terrible happened&rdquo;))</p>

<p>   expect{ ServiceErrorWrapper.new(failing_object).long_computation }.to raise_error(ServiceError).with_message(&ldquo;Something terrible happened&rdquo;)
 end</p>

<p> # &hellip;
end</p>

<p>```</p>

<p>Not only did we reuse the wrapper many times in my service. We also ended up using it in other services as well !</p>

<h3>Injecting a hand written in-memory fake</h3>

<p>As you might have noticed, in <a href="/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/">the previous article</a>, I recommended to use an in-memory fake instead of mocks. By nature, an in-memory fake is a kind of mock. Even if it is not defined by a mocking framework. (I actually think that by making mocking so easy, mocking frameworks often do more harm than good.)</p>

<blockquote><p>💡 By making mocking so easy, mocking frameworks often do more harm than good.</p></blockquote>

<p>Still, I used <code>const_stub(...)</code> to inject the in-memory fake.</p>

<p>```ruby</p>

<p>config.before(:each) do  </p>

<p>  stub_const(&ldquo;TwitterClient::Client&rdquo;, FakeTwitterClient.new)  </p>

<p>end  </p>

<p>```</p>

<p>I did this for 2 reasons :</p>

<ul>
<li>Production code can continue to use a straightforward constant</li>
<li>I don&rsquo;t risk forgetting to remove the mock at the end of its lifecycle, the framework does this for me</li>
<li>As I&rsquo;m injecting the same fake for all tests, there is not much risk of test conflict (for the moment)</li>
</ul>


<h3>Testing a cache</h3>

<p>The &ldquo;raison d'être&rdquo; of a cache is to avoid doing something twice. It should also return the same results as if it was not there. This is by nature almost impossible to test with state based assertions. Mock frameworks are great for this situation though. Here is an example :</p>

<p>```ruby</p>

<p>context &ldquo;UsersController&rdquo; do
 it &lsquo;caches users&rsquo; do
   expect(User).to receive(:load).once.and_return(User.new(name: &ldquo;Joe&rdquo;))</p>

<p>   controller.login(&lsquo;Joe&rsquo;, &lsquo;secret&rsquo;)
   controller.login(&lsquo;Joe&rsquo;, &lsquo;secret&rsquo;)
 end
end
```</p>

<p>The assertion could not be more explicit, we are checking that the expensive load was only done once.</p>

<h3>Legacy code</h3>

<p><a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"><img src="http://philippe.bourgau.net/imgs/2018-06-01-when-is-testing-using-mocks-still-a-good-idea/legacy-code.jpg" alt="Michael C.Feathers explains that testing using mocks is a key practice in &quot;Working Effectively with Legacy Code&quot;" /></a></p>

<p>In <a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052">Working Effectively with Legacy Code</a> <a href="https://michaelfeathers.silvrback.com/">Michael Feathers</a> explains how to exploit <a href="http://www.informit.com/articles/article.aspx?p=359417&amp;seqNum=2">&ldquo;seams&rdquo;</a> in the code to put it under test. Mocking is straightforward way to inject behavior through a seam.</p>

<p>Mocking is a pretty good starting point but we need to be careful and keep a few things in mind. Legacy or not, we must not forget that too many mocks will make tests unmaintainable !</p>

<ul>
<li>It&rsquo;s a good idea to refer to a target design or architecture blueprint to know where to inject mocks. (I&rsquo;ll write a post about this one day). This increases the chances to replace them with an in-memory fake later down the road.</li>
<li>Plan to replace the mocks with a better design as soon as possible.</li>
</ul>


<h3>It depends &hellip;</h3>

<p>As with anything in software, there is no absolute rule about mocking. Even if I prefer not to 99% of the time, there are situation when testing using mocks is the thing to do. Knowing the risks, it&rsquo;s up to you to decide !</p>

<h2>If using a mock, prefer spy / proxies</h2>

<p><img src="http://philippe.bourgau.net/imgs/2018-06-01-when-is-testing-using-mocks-still-a-good-idea/proxy-plug.jpg" alt="Spies and proxies make testing using mocks less intrusive" /></p>

<p>As I explained in previous posts, mocks duplicate behavior. If we could use mocks without duplicating behavior, they would do less harm.</p>

<p>It turns out there is a flavor of mocks for that : <a href="https://martinfowler.com/articles/mocksArentStubs.html">spies</a> and <a href="https://relishapp.com/rspec/rspec-mocks/docs/configuring-responses/calling-the-original-implementation">overlooked proxies</a>. Proxies do the real thing but also record the calls and return values. It&rsquo;s as non-intrusive as mocks can be.</p>

<blockquote><p>💡 Proxy mocks are as unintrusive as mocks can be.</p></blockquote>

<p>For example, here is how our cache test would look like using a proxy :</p>

<p>```ruby</p>

<p>context &ldquo;UsersController&rdquo; do
 it &lsquo;caches users&rsquo; do
   allow(User).to receive(:load).and_call_original</p>

<p>   controller.login(&lsquo;Joe&rsquo;, &lsquo;secret&rsquo;)
   controller.login(&lsquo;Joe&rsquo;, &lsquo;secret&rsquo;)</p>

<p>   expect(User).to have_received(:load).once
 end
end
```</p>

<p>It&rsquo;s more verbose, but simpler. Most mock frameworks provide some form of spy or proxies. A few years ago, I also wrote <a href="http://philou.github.io/rspecproxies">rspecproxies</a>, a wrapper on top of <a href="http://rspec.info/">rspec</a> to make this easier.</p>

<h2>This is the end</h2>

<p>This was the 8th and last post in a series about how to avoid mocks. Before closing here is a list of other references about the topic.</p>

<ul>
<li>In the <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">RailsConf 2014 keynote</a>, <a href="https://twitter.com/dhh">DHH </a> explains how mocking made their test harness unreliable.</li>
<li><a href="https://martinfowler.com/articles/is-tdd-dead/">Is TDD dead</a> is a well known online discussion about the Classic vs Mockist TDD approach</li>
<li>Have a look at what <a href="https://blog.cleancoder.com/">Uncle Bob</a> says about <a href="http://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html">When To Mock</a></li>
<li>For JS expert <a href="https://medium.com/@_ericelliott">Eric Elliott</a>, <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a">Mocking is a Code Smell</a></li>
<li>In this talk  <a href="https://skillsmatter.com/skillscasts/9971-testable-software-architecture-with-aslak-hellesoy">Testable Architecture talk</a>, <a href="https://twitter.com/aslak_hellesoy">Aslak Hellesøy</a> explains how to build a full architecture for fast tests</li>
<li><a href="http://www.jamesshore.com/">James Shore</a> recently published a full pattern language entitled <a href="http://www.jamesshore.com/Blog/Testing-Without-Mocks.html">Testing Without Mock</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get rid of mock maintenance with full fledged in-memory fakes]]></title>
    <link href="http://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/"/>
    <updated>2018-05-31T19:15:00+02:00</updated>
    <id>http://philippe.bourgau.net/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes</id>
    <content type="html"><![CDATA[<p><a href="/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/">Last week&rsquo;s post</a> was about how <a href="http://alistair.cockburn.us/Hexagonal+architecture">hexagonal architecture</a> results in fast, mock-free tests around your core domain. Unfortunately, that does not remove all mocks, yet it groups them in the same, less critical, zone. In last week&rsquo;s code sample, this was the controller. I concluded that at least, this was easier to manage. Let&rsquo;s see how.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-28-get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/in-memory-fake.jpg" alt="Hand written 'In-memory fake' with memory replaced by a RAM board" /></p>

<p>This is the 7th post in <a href="/blog/categories/how-to-avoid-mocks-series/">a series about avoiding mocks</a>. If you haven&rsquo;t, you might start from <a href="/careless-mocking-considered-harmful/">the beginning</a>.</p>

<h2>Mock concentration</h2>

<p>Let&rsquo;s get back to the <a href="/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/">last post</a>&rsquo;s code sample. As a reminder, it&rsquo;s a very basic TODO app built on <a href="https://rubyonrails.org/">Rails</a>. I extracted the domain part, the tasks, in a core domain area. This allowed to push all mocks out of this section. A consequence though, is that all mocks gathered in the controller test. Here is the controller code :</p>

<p>```ruby</p>

<p>require &lsquo;core/task&rsquo;
require &lsquo;infrastructure/task_repo&rsquo;</p>

<p>class TasksController &lt; ApplicationController
 before_action :set_task, only: [:show, :edit, :update, :destroy]</p>

<p> # GET /tasks
 def index
   @tasks = Infrastructure::TaskRepo.all
 end</p>

<p> # GET /tasks/1
 def show
 end</p>

<p> # GET /tasks/new
 def new
   @task = Core::Task.new
 end</p>

<p> # GET /tasks/1/edit
 def edit
 end</p>

<p> # POST /tasks
 def create
   begin
     @task = Core::Task.new(task_params)
     Infrastructure::TaskRepo.save(@task)</p>

<p>     redirect_to task_url(@task.db_id), notice: &lsquo;Task was successfully created.&rsquo;</p>

<p>   rescue ArgumentError
     render :new
   end
 end</p>

<p> # PATCH/PUT /tasks/1
 def update
   begin
     @task.update(task_params)
     Infrastructure::TaskRepo.save(@task)</p>

<p>     redirect_to task_url(@task.db_id), notice: &lsquo;Task was successfully updated.&rsquo;</p>

<p>   rescue ArgumentError
     render :edit
   end
 end</p>

<p> # DELETE /tasks/1
 def destroy
   Infrastructure::TaskRepo.delete(@task)
   redirect_to tasks_url, notice: &lsquo;Task was successfully destroyed.&rsquo;
 end</p>

<p> private
   def set_task
     @task = Infrastructure::TaskRepo.load(params[:id])
     @task.notify_when_done do |task|
       TwitterClient::Client.update(task.description)
     end
   end</p>

<p>   # Never trust parameters from the scary internet, only allow the white list through.
   def task_params
     params.permit(:description, :done)
   end
end</p>

<p>```</p>

<p>The controller is now dealing both with the Twitter connection and the database. This is visible in the controller test :</p>

<p>```ruby</p>

<p>require &lsquo;rails_helper&rsquo;</p>

<p>RSpec.describe TasksController, type: :controller do</p>

<p> before :each do
   allow(TwitterClient::Client).to receive(:update)
 end</p>

<p>  # &hellip;</p>

<p> describe &ldquo;PUT #update&rdquo; do
   context &ldquo;with valid params&rdquo; do
     let(:new_attributes) {
       {done: true}
     }</p>

<p>     it &ldquo;updates the requested task&rdquo; do
       task = Task.create! valid_attributes
       put :update, params: new_attributes.merge(id: task.to_param)
       task.reload
       expect(task).to be_done
     end</p>

<p>     it &ldquo;tweets about completed tasks&rdquo; do
       task = Task.create! valid_attributes</p>

<p>       expect(TwitterClient::Client).to receive(:update).with(task.description)</p>

<p>       put :update, params: {id: task.to_param, done: true}
     end</p>

<p>     it &ldquo;redirects to the task&rdquo; do
       task = Task.create! valid_attributes
       put :update, params: valid_attributes.merge(id: task.to_param)
       expect(response).to redirect_to(task_url(task.id))
     end
   end</p>

<p>   # &hellip; </p>

<p>  end
end</p>

<p>```</p>

<p>We need to <a href="https://blog.pragmatists.com/test-doubles-fakes-mocks-and-stubs-1a7491dfa3da">stub out</a> the twitter API for most tests. We are also still using a mock to verify that the tweet is sent. Finally, as we can see from the test execution times, we are still using the database in some tests.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-28-get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/test-timings.jpg" alt="Screen capture of the tests execution time" /></p>

<p>If the project grew large this would become an issue. Sadly, mocking is often the fix people jump on &hellip;</p>

<blockquote><p>💡 Mocking is the unfortunate quick fix to slow tests.</p></blockquote>

<p>From a mocking point of view, our current controller test can seem worse than before ! There&rsquo;s something pretty effective we can do though !</p>

<h2>In memory fakes</h2>

<p>Instead of stubbing and mocking in every test, let&rsquo;s write a full fledged in-memory <a href="https://blog.pragmatists.com/test-doubles-fakes-mocks-and-stubs-1a7491dfa3da">fake</a> that does the job we need. We could then install it once and for all, and forget about it !</p>

<p>Actually, this is nothing new. This is exactly what Rails provides out of the box with <code>ActionMailer::Base.delivery_method = :test</code>.</p>

<p>Here&rsquo;s how we could do the same thing for our Twitter Client.</p>

<h6>spec/rails_helper.rb</h6>

<p>```ruby</p>

<p>class FakeTwitterClient
 def initialize
   @tweets = []
 end</p>

<p> attr_accessor :tweets</p>

<p> def update(message)
   @tweets.push(message)
 end
end</p>

<p>RSpec.configure do |config|</p>

<p>  # &hellip;
 config.before(:each) do
   stub_const(&ldquo;TwitterClient::Client&rdquo;, FakeTwitterClient.new)
 end
end
```</p>

<h6>spec/controllers/tasks_controller_spec.rb</h6>

<p>```ruby</p>

<p>it &ldquo;tweets about completed tasks&rdquo; do
 task = Task.create! valid_attributes</p>

<p> put :update, params: {id: task.to_param, done: true}</p>

<p> expect(TwitterClient::Client.tweets).to include(task.description)
end
```</p>

<p>Simple isn&rsquo;t it ?</p>

<h2>Wait a sec &hellip;</h2>

<p>There&rsquo;s a catch though &hellip; How do we make sure that this fake is behaving the same way as the real thing ?</p>

<p>Let&rsquo;s run the same tests on both ! We could mimic the twitter API in our fake, but that might not be a great idea. Do you remember the moto &ldquo;Always wrap your 3rd parties&rdquo; ? It takes all its meaning here, for 2 reasons.</p>

<p>The first is to make faking easier. We can build a minimal wrapper API that is just enough for our use. By keeping this interface small, we&rsquo;ll make it a lot easier to fake.</p>

<p>The second reason is that we can write real integration tests on the 3rd party through this wrapper. They&rsquo;d look like ordinary unit tests, except that they&rsquo;d end up calling the real 3rd party in a sandbox. They are usually pretty slow, but as 3rd parties don&rsquo;t change everyday, that&rsquo;s ok. We can ensure up-front that integration will go well. As a bonus, we can be very fast to detect and contain changes to online services. (I&rsquo;m looking at you <a href="https://en.wikipedia.org/wiki/Web_scraping">Scrappers</a>!)</p>

<p>Here is what it would look like for our Twitter client :</p>

<h6>lib/infrastructure/twitter_client.rb</h6>

<p>```ruby</p>

<p>class FakeTwitterClient
 def initialize
   @tweets = []
 end</p>

<p> attr_accessor :tweets</p>

<p> def tweet(message)
   @tweets.push(message)
 end</p>

<p> def search_tweets(text)
   @tweets.select {|tweet| tweet.include?(text) }
 end
end</p>

<p>class RealTwitterClient
 def initialize(&amp;block)
   @client = Twitter::REST::Client.new(&amp;block)
 end</p>

<p> def tweet(message)
   @client.update(message)
 end</p>

<p> def search_tweets(text)
   @client.search(&ldquo;from:test_user #{text}&rdquo;)
 end
end</p>

<p>```</p>

<p>As you can see, we renamed <code>update</code> to <code>tweet</code> in the wrapper. We&rsquo;d have to update the calls accordingly. Let&rsquo;s look at the tests.</p>

<h6>spec/lib/Infrastructure/twitter_client_spec.rb</h6>

<p>```ruby</p>

<p>require &lsquo;rails_helper&rsquo;
require &lsquo;infrastructure/twitter_client&rsquo;
require &lsquo;securerandom&rsquo;</p>

<p>RSpec.shared_examples &ldquo;a twitter client&rdquo; do |new_client_instance|
 let(:client) { new_client_instance }
 it &ldquo;sends tweets&rdquo; do
   token = SecureRandom.uuid
   message = &ldquo;Philippe was here #{token}&rdquo;
   client.tweet(message)</p>

<p>   expect(client.search_tweets(token)).to include(message)
 end
end</p>

<p>context FakeTwitterClient do
 it_behaves_like &ldquo;a twitter client&rdquo;, FakeTwitterClient.new
end</p>

<p>context RealTwitterClient, integration: true, speed: :slow do
 it_behaves_like &ldquo;a twitter client&rdquo;, (RealTwitterClient.new do |config|
   config.consumer_key        = &ldquo;TEST_CONSUMER_KEY&rdquo;
   config.consumer_secret     = &ldquo;TEST_CONSUMER_SECRET&rdquo;
   config.access_token        = &ldquo;TEST_ACCESS_TOKEN&rdquo;
   config.access_token_secret = &ldquo;TEST_ACCESS_SECRET&rdquo;
 end)
end</p>

<p>```</p>

<p>We had to add a search method to our interface for the sake of testing. This should remain &ldquo;For testing only&rdquo;. We&rsquo;d also adapt the controller test to use this <code>search_tweets</code> method.</p>

<p>Let&rsquo;s look at where we stand now. We&rsquo;re injecting each mock only once. Tests are fast yet straightforward, almost as if they were testing the real thing. Doing so, we&rsquo;ve split our system in cohesive parts and we&rsquo;ve wrapped our 3rd parties. We&rsquo;ve actually done a lot more than removing mocks ! <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a">Mocking really is a design smell</a>.</p>

<blockquote><p>💡 Merciless mock hunting will improve the design of your system !</p></blockquote>

<h2>Last word about implementation</h2>

<p>Sometimes, this 3rd party wrapper can become pretty complicated. Try to reuse as much of it as possible between the real and the fake. For example, an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>, like ActiveRecord for example, is a wrapper around the database. Reimplementing a fake ORM would be real challenge. We&rsquo;re far better <a href="/5-minutes-hack-to-speed-up-rspec-in-rails-5-using-in-memory-sqlite/">plugin it on top of SQLite</a> instead !</p>

<h2>References</h2>

<p>Smart people have already spoken and written about this subject. If you want to learn more, I recommend that you have a look at <a href="https://twitter.com/aslak_hellesoy">Aslak Hellesøy</a>&rsquo;s <a href="https://skillsmatter.com/skillscasts/9971-testable-software-architecture-with-aslak-hellesoy">Testable Architecture talk</a>. <a href="http://www.jamesshore.com/">James Shore</a>, the author of <a href="https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675/ref=sr_1_1?ie=UTF8&amp;qid=1527568833&amp;sr=8-1&amp;keywords=the+art+of+agile+development">The Art of Agile Development</a>, also wrote a pattern language called <a href="http://www.jamesshore.com/Blog/Testing-Without-Mocks.html">Testing Without Mock</a>.</p>

<h2>Next week</h2>

<p>This was the 7th blog post in <a href="/blog/categories/how-to-avoid-mocks-series/">a series about how to avoid mocks</a>. Hopefully, I&rsquo;m reaching the end ! <a href="/when-is-testing-using-mocks-still-a-good-idea/">Next week&rsquo;s post</a> should be the last in series, and deal with a few remaining points. What to do when you really need a mock ? What about mocking and legacy code ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid mocks and test your core domain faster with Hexagonal Architecture]]></title>
    <link href="http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/"/>
    <updated>2018-05-24T06:43:00+02:00</updated>
    <id>http://philippe.bourgau.net/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture</id>
    <content type="html"><![CDATA[<p>As I&rsquo;ve written in my last few posts, we can get a long way to avoid mocks with small scale coding best practices. Unfortunately, when systems reach a certain size, we need something at architecture scale.</p>

<p>This is the 6th post of a <a href="/blog/categories/how-to-avoid-mocks-series/">series about avoiding mocks</a>. If you haven&rsquo;t, you can start by <a href="/careless-mocking-considered-harmful/">the beginning</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-24-avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/hexagonal-building.jpg" alt="A drawing of a hexagon-shaped building" /></p>

<h2>Why do we end up with mocks in large systems ?</h2>

<p>A few years ago, I joined a team working in a legacy system. We wanted to apply <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> and refactoring. As expected, adding tests legacy code proved a real challenge. With a lot of effort we could manage to add a few. Unfortunately, this did not seem to have any positive effect on our maintainability ! The tests we were writing all involved a lot of mocking. The system was such a large mass of spaghetti code that there was no clear place to mock. We were actually mocking where it seemed the easiest on a test by test basis. We were making progress at small scale, but the big picture was not improving at all !</p>

<p>Large systems are beasts with many faces. They  involve a lot of IOs. They write and read data from the disk and databases. They call 3rd parties and remote services.</p>

<p>As we test these large systems, we&rsquo;ll need to stub out these IOs. Even if the tests are fast enough, we usually don&rsquo;t want to call external services for real. Most of the time though, tests are slow. That&rsquo;s 2 reasons why end up adding some mocks.</p>

<p>Here comes the nasty part. These large systems are so complex that we, developers, don&rsquo;t have the full picture. When we test, we tend to mock at different places, depending on our knowledge. This is bad for maintenance. Mocks duplicate production code behavior. When many different mocks are in place to isolate an external dependency, we end up with &lsquo;n&rsquo; versions of the code. That&rsquo;s a nightmare to refactor !</p>

<blockquote><p>💡 When many different mocks are in place to isolate an external dependency, we end up with &lsquo;n&rsquo; versions of the code !</p></blockquote>

<h2>Hexagonal architecture to the rescue</h2>

<p><a href="http://alistair.cockburn.us/Hexagonal+architecture">Alistair Cockburn</a> coined the term. The idea is pretty simple :  isolate a piece of code from all dependencies. This is particularly useful for the core functional areas. With this in place, it becomes straightforward (and fast) to test the core domain logic.</p>

<p>To main techniques to isolate a piece of code from any dependency are :</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency injection</a></li>
<li><a href="https://en.wikipedia.org/wiki/Observer_pattern">Observers</a></li>
<li><a href="https://en.wikipedia.org/wiki/Adapter_pattern">Adapters</a></li>
</ul>


<p>It&rsquo;s also possible to split a system in many &lsquo;hexagons&rsquo; and glue them together with adapters at startup. If you want to learn more on this style of architecture, have a look into the <a href="https://www.infoq.com/articles/ddd-contextmapping">Domain Driven Design lore</a>. This community has been building systems this way for years now.</p>

<h2>Enough talk, show me the code !</h2>

<p>This post was the occasion to try to inject a Hexagonal Architecture and a dash of DDD in a Rails application. There&rsquo;s one caveat though : DDD shines on complex systems. Unfortunately, large and complex systems make very poor didactic examples. The following code highlights the gains about mocking. We would not use DDD for such a small app in real life.</p>

<h3>The starting point</h3>

<p>I chose a simple TODO app. I started by generating a scaffold for a Task with a description and a done/not-done status. As third party interaction, completing a task sends an automatic tweet. Here is the only specific code I wrote on top of the Rails scaffold :</p>

<h6>app/models/task.rb</h6>

<p>```ruby
class Task &lt; ApplicationRecord
  include ActiveModel::Dirty</p>

<p>  validates :description, presence: true</p>

<p>  before_save :tweet_if_done</p>

<p>  private
  def tweet_if_done</p>

<pre><code>if done_changed?
  TwitterClient::Client.update(self.description)
end
</code></pre>

<p>  end
end
```</p>

<p>Thanks Jason Charnes for the <a href="https://jasoncharnes.com/changed-attributes-rails/">change attribute technique</a>.</p>

<h6>spec/models/task_spec.rb</h6>

<p>```ruby
require &lsquo;rails_helper&rsquo;</p>

<p>RSpec.describe Task, type: :model do</p>

<p>  it &ldquo;is valid with all attributes set&rdquo; do</p>

<pre><code>expect(Task.create(description: "Finish presentation", done: false)).to be_valid
</code></pre>

<p>  end</p>

<p>  it &ldquo;requires a description&rdquo; do</p>

<pre><code>expect(Task.create(description: nil, done: false)).to be_invalid
expect(Task.create(description: "", done: false)).to be_invalid
</code></pre>

<p>  end</p>

<p>  it &ldquo;tweets when a task is finished&rdquo; do</p>

<pre><code>task = Task.create(description: "Wash the car", done: false)

expect(TwitterClient::Client).to receive(:update).with("Wash the car")

task.done = true
task.save
</code></pre>

<p>  end
end
```</p>

<p>This is pretty simple and to the point !</p>

<h3>5 years later</h3>

<p>Now let&rsquo;s imagine that the app grew to tens of thousands of lines. We added a lot of features to the app, which transformed the TODO domain into a very complex thing. Now suppose that, for the sake of maintenance, we want to isolate the domain logic into its own hexagon. Unlike traditional Rails ActiveRecords, we want to make it independent from the database. We also want it to be independent from the Twitter API.</p>

<p>Here is what the code might look like.</p>

<h6>lib/core/task.rb</h6>

<p>First, we have a core task class, independent from anything else. The Core module is our hexagon.</p>

<p>```ruby
module Core
  class Task</p>

<pre><code>attr_reader :description
attr_accessor :db_id

def initialize(attributes = {})
  @description= "What do you need to do ?"
  @done = false
  @done_subscribers = []

  self.update(attributes)
end

def done?
  @done
end

def mark_as_done
  @done = true
  @done_subscribers.each {|proc| proc.call(self) }
end

def update(attributes={})
  self.description= attributes[:description] unless attributes[:description].nil?
  self.mark_as_done if attributes[:done]
end

def notify_when_done(&amp;proc)
  @done_subscribers.push(proc)
end

def description=(desc)
  raise ArgumentError.new("Task description cannot be blank") if desc.blank?

  @description = desc
end
</code></pre>

<p>  end
end
```</p>

<p>As we can see, it contains only domain logic and nothing else.</p>

<h6># spec/lib/core/task_spec.rb</h6>

<p>Here is the corresponding test, fast, mock-free and independent from the database and any external system.</p>

<p>```ruby
require &lsquo;rails_helper&rsquo;
require &lsquo;core/task&rsquo;</p>

<p>context &lsquo;Task&rsquo; do</p>

<p>  let(:task) { Core::Task.new}</p>

<p>  specify &lsquo;is not done by default&rsquo; do</p>

<pre><code>expect(task).not_to be_done
</code></pre>

<p>  end</p>

<p>  specify &lsquo;comes with a default description&rsquo; do</p>

<pre><code>expect(task.description).not_to be_blank
</code></pre>

<p>  end</p>

<p>  specify &lsquo;it can be initialized from a hash&rsquo; do</p>

<pre><code>task = Core::Task.new(description: "Old description", done: true)

expect(task.description).to eq("Old description")
expect(task).to be_done
</code></pre>

<p>  end</p>

<p>  specify &lsquo;can have a custom description&rsquo; do</p>

<pre><code>task.description= "Clean up the house"
expect(task.description).to eq("Clean up the house")
</code></pre>

<p>  end</p>

<p>  specify &lsquo;forbids empty descriptions&rsquo; do</p>

<pre><code>expect{task.description = nil }.to raise_error(ArgumentError)
expect{task.description = "" }.to raise_error(ArgumentError)
</code></pre>

<p>  end</p>

<p>  specify &lsquo;can be done&rsquo; do</p>

<pre><code>task.mark_as_done
expect(task).to be_done
</code></pre>

<p>  end</p>

<p>  specify &lsquo;publishes when done&rsquo; do</p>

<pre><code>done_task = nil
task.notify_when_done {|t| done_task = t}

task.mark_as_done

expect(done_task).to be(task)
</code></pre>

<p>  end</p>

<p>  specify &lsquo;can be updated with a hash&rsquo; do</p>

<pre><code>task.update(description: "New description", done: true)

expect(task.description).to eq("New description")
expect(task).to be_done
</code></pre>

<p>  end</p>

<p>  specify &lsquo;has no DB id by default&rsquo; do</p>

<pre><code>expect(task.db_id).to be_nil
</code></pre>

<p>  end
end
```</p>

<h6># lib/infrastructure/task_repo.rb</h6>

<p>To read and save with the database, we now go through an adapter. This is not considered to be part of our core domain.</p>

<p>```ruby
module Infrastructure
  class TaskRepo</p>

<pre><code>def self.all
  Task.all.map do |db_task|
    from_db(db_task)
  end
end

def self.load(db_id)
  from_db(Task.find(db_id))
end

def self.save(task)
  if task.db_id.nil?
    db_task = Task.create!(to_db_attributes(task))
    task.db_id = db_task.id
  else
    db_task = Task.find(task.db_id)
    db_task.update!(to_db_attributes(task))
  end
  task
end

def self.delete(task)
  unless task.db_id.nil?
    db_task = Task.find(task.db_id)
    db_task.destroy!
    task.db_id = nil
  end
end

private

def self.to_db_attributes(task)
  {description: task.description, done: task.done?}
end

def self.from_db(db_task)
  result = Core::Task.new
  result.db_id = db_task.id
  result.description = db_task.description
  result.mark_as_done if db_task.done?
  result
end
</code></pre>

<p>  end
end
```</p>

<h6># app/controllers/tasks_controller.rb</h6>

<p>Finally, all the pieces interact together in the controller. This controller basically does what the previous version was, it&rsquo;s just using different classes. Obviously, we&rsquo;ll need to adapt the views and the tests.</p>

<p>```ruby
require &lsquo;core/task&rsquo;
require &lsquo;infrastructure/task_repo&rsquo;</p>

<p>class TasksController &lt; ApplicationController
  before_action :set_task, only: [:show, :edit, :update, :destroy]</p>

<p>  # GET /tasks
  def index</p>

<pre><code>@tasks = Infrastructure::TaskRepo.all
</code></pre>

<p>  end</p>

<p>  # GET /tasks/1
  def show
  end</p>

<p>  # GET /tasks/new
  def new</p>

<pre><code>@task = Core::Task.new
</code></pre>

<p>  end</p>

<p>  # GET /tasks/1/edit
  def edit
  end</p>

<p>  # POST /tasks
  def create</p>

<pre><code>begin
  @task = Core::Task.new(task_params)
  Infrastructure::TaskRepo.save(@task)

  redirect_to task_url(@task.db_id), notice: 'Task was successfully created.'

rescue ArgumentError
  render :new
end
</code></pre>

<p>  end</p>

<p>  # PATCH/PUT /tasks/1
  def update</p>

<pre><code>begin
  @task.update(task_params)
  Infrastructure::TaskRepo.save(@task)

  redirect_to task_url(@task.db_id), notice: 'Task was successfully updated.'

rescue ArgumentError
  render :edit
end
</code></pre>

<p>  end</p>

<p>  # DELETE /tasks/1
  def destroy</p>

<pre><code>Infrastructure::TaskRepo.delete(@task)
redirect_to tasks_url, notice: 'Task was successfully destroyed.'
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def set_task
  @task = Infrastructure::TaskRepo.load(params[:id])
  @task.notify_when_done do |task|
    TwitterClient::Client.update(task.description)
  end
end

# Never trust parameters from the scary internet, only allow the white list through.
def task_params
  params.permit(:description, :done)
end
</code></pre>

<p>end
```</p>

<p>The main gain here is that our core domain, our most valuable asset is now easy to test without mocks. This means that we are able to write and execute fast tests for this area of the code. This puts us in a great position to increase our competitive advantage in our core business !</p>

<blockquote><p>💡 By keeping your tests around your core domain fast, Hexagonal Architecture increases your competitive advantage.</p></blockquote>

<p>As you can see, we are now wiring everything together at the controller level. We could later build a facade to isolate the controller from the inside of our domain. A <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">presenter</a> might do, but it seemed over-engineered, even in this made up example. (I&rsquo;ll post something about that some day)</p>

<h2>Next post</h2>

<p>As we can deduce from the controller code above, we still have to use fakes or mocks when testing the controller. The good thing though is that this is now more local which already makes mocking less of an issue. If a mock is used in less tests, it&rsquo;s easier to use the same mock everywhere ! This is a great opportunity for simplifying test setup, as we&rsquo;ll see in the <a href="/get-rid-of-mocking-maintenance-with-full-fledged-in-memory-fakes/">next post about in-memory fakes</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Custom Assertion Matchers will keep mocks away]]></title>
    <link href="http://philippe.bourgau.net/how-custom-assertion-matchers-will-keep-mocks-away/"/>
    <updated>2018-05-17T06:47:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-custom-assertion-matchers-will-keep-mocks-away</id>
    <content type="html"><![CDATA[<p>I cannot write a <a href="/blog/categories/how-to-avoid-mocks-series/">series about avoiding mocks</a> without mentioning Custom Assertion Matchers. If you don&rsquo;t know what custom assertions are, here is pseudo code that uses a custom assertion :</p>

<p><code>
assert.that(actual, VerifiesMyCustomAssertion(withCustomProperties))
</code></p>

<p>For more details, have a look at these examples for your preferred language : <a href="http://joel-costigliola.github.io/assertj/assertj-core-custom-assertions.html">Java</a>, <a href="https://relishapp.com/rspec/rspec-expectations/docs/custom-matchers">Ruby</a> or <a href="http://tonylukasavage.com/blog/2014/05/29/custom-assertions-in-should-dot-js/">Javascript</a>.</p>

<p><img src="http://philippe.bourgau.net/imgs/2018-05-15-how-custom-assertion-matchers-will-keep-mocks-away/matchers.jpg" alt="A drawing of a box of matches, branded 'Matchers' on top" /></p>

<p>That custom assertion matchers have an effect on mock usage might seem puzzling at first. Let me explain. Us, mere human developers, get lured into mocking when tests become too complicated. By keeping the tests simpler, Custom Assertion Matchers help use to avoid mocks. It&rsquo;s a bit like why test data builders keep mocks at bay.</p>

<blockquote><p>💡 We get lured into mocking when tests become too complicated</p></blockquote>

<p>I already blogged about <a href="/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/">the benefits of Custom Assertion Matchers</a>. Here I&rsquo;m going to dive in their advantages against mocking.</p>

<p>This is the fifth post in a <a href="/blog/categories/how-to-avoid-mocks-series/">series about how to avoid mocks</a>. If you haven&rsquo;t yet, I recommend you to start from <a href="/careless-mocking-considered-harmful/">the beginning</a>.</p>

<h2>Why would we end up with mocks when we don&rsquo;t have matchers ?</h2>

<p>Let&rsquo;s walkthrough a small story. Suppose we are building an e-commerce website. When someone passes an order, we want to notify the analytics service. Here is some very simple code for that.</p>

<p>```ruby
class AnalyticsService</p>

<p> def initialize<br/>
   @items = []<br/>
 end</p>

<p> attr_reader :items</p>

<p> def order_passed(customer, cart)<br/>
   cart.each do |item|<br/>
     @items.push(customer: customer, item: item)<br/>
   end<br/>
 end<br/>
end</p>

<p>class Order<br/>
 def initialize(customer, cart, analytics)<br/>
   @customer = customer<br/>
   @cart = cart<br/>
   @analytics = analytics<br/>
 end</p>

<p> def pass<br/>
   # launch order processing and expedition</p>

<p>   @analytics.order_passed(@customer, @cart)<br/>
 end</p>

<p>end</p>

<p>describe &lsquo;Order&rsquo; do</p>

<p> it &ldquo;notifies analytics service about passed orders&rdquo; do<br/>
   cart = [&ldquo;Pasta&rdquo;,&ldquo;Tomatoes&rdquo;]<br/>
   analytics = AnalyticsService.new<br/>
   order = Order.new(&ldquo;Philippe&rdquo;, cart, analytics)</p>

<p>   order.pass</p>

<p>   expect(analytics.items).to include(customer: &ldquo;Philippe&rdquo;, item: &ldquo;Pasta&rdquo;)<br/>
   expect(analytics.items).to include(customer: &ldquo;Philippe&rdquo;, item: &ldquo;Tomatoes&rdquo;)<br/>
 end<br/>
end
```</p>

<p>Let&rsquo;s focus on the tests a bit. We first notice that the verification section is large and difficult to understand.  Looking in more details, it knows too much about the internals of AnalyticsService. We had to make the items accessor public just for the sake of testing. The test even knows how the items are stored in a list of hashes. If we were to refactor this representation, we would have to change the tests as well.</p>

<p>We could argue that responsibility-wise, our test should only focus on Order. It makes sense for the test to use a mock to verify that the Order calls AnalyticsService as expected. Let&rsquo;s see what this would look like.</p>

<p>```ruby
it &ldquo;notifies analytics service about passed orders&rdquo; do<br/>
 cart = [&ldquo;Pasta&rdquo;,&ldquo;Tomatoes&rdquo;]<br/>
 analytics = AnalyticsService.new<br/>
 order = Order.new(&ldquo;Philippe&rdquo;, cart, analytics)</p>

<p> expect(analytics).to receive(:order_passed).with(&ldquo;Philippe&rdquo;, cart)</p>

<p> order.pass<br/>
end
```</p>

<p>Sure, the test code is simpler. It&rsquo;s also better according to good design principles. The only glitch is that we now have a mock in place with all the problems I described <a href="/careless-mocking-considered-harmful/">before</a>.</p>

<p>This might not (yet) be a problem in our example but, for example, the mock &lsquo;cuts&rsquo; the execution of the program. Suppose that someday, the Order starts expecting something from the AnalyticsService. We&rsquo;d then need to &lsquo;simulate&rsquo; the real behavior in our mock. This would make the test very hard to maintain.</p>

<h2>Matchers to the rescue</h2>

<p>Let&rsquo;s see how a matcher could help us here. The idea is to improve on the first &lsquo;state checking&rsquo; solution to make it better than the mock one. We&rsquo;ll extract and isolate all the state checking code in a custom matcher. By factorizing the code in a single matcher, we&rsquo;ll reduce duplication. The matcher remains too intimate with the object, but as it is now unique and well named, it&rsquo;s less of a problem. Plus, as always with matchers, we improved readability.</p>

<p>```ruby
RSpec::Matchers.define :have_been_notified_of_order do |customer, cart|<br/>
 match do |analytics|<br/>
   cart.each do |item|<br/>
     return false unless analytics.items.include?(customer: customer, item: item)<br/>
   end<br/>
   true<br/>
 end<br/>
end</p>

<p>describe &lsquo;Order&rsquo; do<br/>
 it &ldquo;notifies analytics service about passed orders&rdquo; do<br/>
   cart = [&ldquo;Pasta&rdquo;,&ldquo;Tomatoes&rdquo;]<br/>
   analytics = AnalyticsService.new<br/>
   order = Order.new(&ldquo;Philippe&rdquo;, cart, analytics)</p>

<p>   order.pass</p>

<p>   expect(analytics).to have_been_notified_of_order(&ldquo;Philippe&rdquo;, cart)<br/>
 end<br/>
end
```</p>

<p>Here is how we could summarize the pros and cons of each approach :</p>

<table>
<thead>
<tr>
<th></th>
<th> Assert state          </th>
<th> Mocks                              </th>
<th> Matchers </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 👎 duplicated code    </td>
<td>👎 duplicates the program behavior</td>
<td>❤️ customizable error messages|</td>
</tr>
<tr>
<td></td>
<td>👎 breaks encapsulation</td>
<td>                                   </td>
<td>❤️ more readable|</td>
</tr>
<tr>
<td></td>
<td>                       </td>
<td>                                    </td>
<td>👎 intimacy with the asserted object|</td>
</tr>
<tr>
<td></td>
<td>                       </td>
<td>                                    </td>
<td>❤️ factorizes the assertion code|</td>
</tr>
</tbody>
</table>


<h2>Design improvements</h2>

<p>Depending on your situation, you might find further design improvements. In our example, a publish-subscribe pattern might do. A better design is likely to fix the encapsulation problem of the matcher. Here again, the custom assertion matchers will help. In most cases, it will be enough to change the implementation of the matchers only.</p>

<blockquote><p>💡 Custom assertion matchers make refactoring easier by factorizing test assertions.</p></blockquote>

<h2>Summary of small-scale techniques</h2>

<p>I&rsquo;m done with small scale mock avoiding techniques. To summarize, the first thing to do is to push for more and more <a href="/how-immutable-value-objects-fight-mocks/">immutable value objects</a>. Not only does it help us to avoid mocks, but it will also provides many benefits for production code. Practices like <a href="/how-to-use-test-data-builders-to-avoid-mocks-and-keep-your-tests-clear/">Test Data Builders</a> and Custom Assertion Matchers simplify dealing with Immutable Value Objects in tests. They also help to keep tests small and clean, which is also a great thing against mocks.</p>

<h2>Next post</h2>

<p>In the following posts, I&rsquo;ll look into architecture scale techniques to avoid mocks. I&rsquo;ll start with <a href="/avoid-mocks-and-test-your-core-domain-faster-with-hexagonal-architecture/">Hexagonal architecture</a>.</p>
]]></content>
  </entry>
  
</feed>
