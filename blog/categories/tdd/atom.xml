<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-05-25T08:06:03+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From apprentice to master, how to learn TDD (Test Driven Development)]]></title>
    <link href="http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/"/>
    <updated>2017-05-15T06:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/from-apprentice-to-master-how-to-learn-tdd-test-driven-development</id>
    <content type="html"><![CDATA[<p>I started to learn <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> a long time ago. Since then, even though I&rsquo;m still not a master, it&rsquo;s been my most useful programming skill, by far. TDD is the first trick every new programmer should learn. It made my whole career as a developer easier.</p>

<p>I&rsquo;ve been working as a professional software engineer for more than 15 years, including around 10 years in the trading industry. Only once did I need to work on week ends or late into the night to fix emergency issues. I believe I largely owe this work-life balance to the high test coverage that TDD ensures by design.</p>

<p>TDD also enables safe refactoring. Refactoring enables <a href="/incremental-architecture-a-cure-against-architecture-astronauts/">incremental design</a> which lets you decide late. Deciding late is how you make your customers happy by accepting late changes. Deciding late is how take up-front design easy, and improve your code as you go. Deciding late is how you build trustful and harmonious relationships with the stakeholders of your project.</p>

<p>Finally, writing tests before the code is both easier and more fun. Among compilation errors and never ending customer demands, the recurring green barre tastes like pure candy to the poor programmer !</p>

<p><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/road.jpg" alt="A long winding road" /><div class="image-credits">From <a href="https://fr.pinterest.com/explore/winding-road/">Pinterest winding road catalog</a></div></p>

<h2>The TDD Road</h2>

<p>Here are the steps I took to learn TDD.</p>

<h3>Learn the principles</h3>

<p>The principles of Test Driven Development are fairly basic. 5 minutes is enough to know them forever :</p>

<ol>
<li>Write a failing test</li>
<li>Make it pass by doing the simplest thing possible</li>
<li>Refactor your code while keeping the tests passing</li>
<li>Repeat until your acceptance test is green</li>
</ol>


<p>TDD newbies might ask a few questions like :</p>

<ul>
<li>Is making the code compile in step 1 or 2 ? Honestly, that does not matter. Write the test as if you had the code, then make it compile, make sure it fails, and continue.</li>
<li>How much should I refactor ? It often takes a good amount of experimentation to find your good balance. If you don&rsquo;t refactor enough, you going to drown in dirty code. If you refactor too much, you&rsquo;re going to waste your time (<a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a>). As a rule of thumb, <a href="https://martinfowler.com/bliki/BeckDesignRules.html">Kent Beck&rsquo;s</a> rules on simple design are a very good starting point :</li>
</ul>


<p><a href="https://martinfowler.com/bliki/BeckDesignRules.html"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/beck-rules.jpg" alt="A visual graph of Kent Beck's rules of simple design" /></a><div class="image-credits"><a href="https://martinfowler.com/bliki/BeckDesignRules.html">From Martin Fowler : Beck Design Rules</a></div></p>

<h3>Find your tools</h3>

<p>Back in 2003, after reading <a href="TODO">Martin Fowler</a>&rsquo;s <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080119&amp;sr=1-1&amp;keywords=martin+fowler+refactoring">Refactoring: Improving the Design of Existing Code</a> book, I decided to give TDD a serious try. I was using C++ at work but we did not even have a nightly build. I had to download and setup <a href="https://en.wikipedia.org/wiki/CppUnit">CppUnit</a> on my own. As solo endeavor, this was a required step to get into TDD.</p>

<p>Find and setup a tool. Which one should be rather obvious, if your team already uses a unit test framework, stick to it, otherwise, pick the most standard for your language, ex : <a href="http://junit.org/">JUnit</a> for <a href="https://www.java.com">Java</a> (you might as well start searching for a new job where they use a unit testing tool).</p>

<h3>Train at a TDD coding dojo</h3>

<p><a href="http://codingdojo.org/">Coding dojos</a> were first invented as a tool to <a href="http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/">learn TDD</a>. They were started by two french eXtreme Programmers <a href="https://ut7.fr/">Emmanuel Gaillot</a> and <a href="http://institut-agile.fr/">Laurent Bossavit</a>. It happens that I live in Paris, and that Emmanuel came to work as a contractor at the same company I was. I learned that he was organizing a weekly coding dojo open to any developer. That&rsquo;s how I started attending coding dojos. Looking back, the TDD skills I learned at the coding dojo are just enormous !</p>

<p>If you are serious about learning TDD, attend coding dojos. Whether you find one in your city (ask <a href="https://www.meetup.com/">meetup.com</a>) or in your company does not really matter. If you cannot find any, just start one at work ! Send a public call for interested people (use wiki, mail, posters or whatever), book a room and start hacking ! <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo">Emily Bache&rsquo;s Coding Dojo Handbook</a> seems a very good reference about how to start a coding dojo (Disclaimer : I did not read the book, I only know it by reputation.)</p>

<p><a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/coding-dojo.jpg" alt="Cover of The Coding Dojo Handbook" /></a></p>

<h3>Use it</h3>

<p>If you&rsquo;re a professional programmer, you must be spending most of your time writing code. Take this opportunity to use TDD. You&rsquo;ll be slowed down a bit at the beginning, but as both your code and your skills improve, you&rsquo;ll get your time back manyfold.</p>

<p>I remember one of my first professional use of TDD was to write a small parser. A few weeks later I was asked to make it faster. Having tests around it made it easy to optimize it without breaking it.</p>

<h3>Deliberate practice</h3>

<p>In <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1494910468&amp;sr=1-1&amp;keywords=the+first+20+hours">The first 20 hours</a>, Josh Kaufman explains that deliberately practicing specific topics is a more time effective way of learning than simply crunching hours of practice.</p>

<p>My friend <a href="https://twitter.com/tpierrain">Thomas Pierrain</a> is used to regularly practice short 30 minutes katas to sharpen his programming skills. Katas can be found at <a href="http://codingdojo.org/KataCatalogue/">codingdojo.org</a>, at <a href="http://cyber-dojo.org/">cyber-dojo.org</a> or in <a href="https://www.amazon.com/Coding-Dojo-Handbook-Emily-Bache/dp/919811803X/ref=sr_1_1?ie=UTF8&amp;qid=1494908749&amp;sr=8-1&amp;keywords=coding+dojo">The Coding Dojo Handbook</a>.</p>

<h3>Read</h3>

<p>Meanwhile I was doing all this, I also spent a lot of time reading on the subject. At the time, there was a lot of things about TDD in the <a href="http://wiki.c2.com/">C2 Wiki</a>, so I spent a lot of time there. Since then, I stumbled upon a few books that helped me to understand some aspects of TDD :</p>

<ul>
<li>Kent Beck&rsquo;s classic <a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080564&amp;sr=1-1&amp;keywords=tdd+by+example">TDD by example</a> remains a great reference for beginners</li>
<li>I got very useful advices from <a href="https://www.amazon.com/Test-Driven-Development-Practical-Guide/dp/0131016490/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1494911486&amp;sr=1-3&amp;keywords=test+driven+practical+guide">TDD, a practical guide</a> especially the section about UI testing, which really saved me at some point</li>
<li>Finally, <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests">Growing Object Oriented Software Guided By Tests</a> is now a classic about what is called &ldquo;The London school of testing&rdquo;, which uses mocks as a design tool. Definitely a must read.</li>
</ul>


<p><a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/growing.jpg" alt="Cover of GOOSGT" /></a></p>

<h3>Practice advanced topics</h3>

<p>The TDD road goes on forever, testing has a lot of tricky topics. Once you&rsquo;ve mastered the basics, it&rsquo;s quite interesting to explore and practice more complex subjects. Here are a few things worth trying out :</p>

<ul>
<li>Use automated IDE refactorings to keep the code compiling all the way through a kata</li>
<li>Do the same kata twice, using <a href="/flavours-of-tdd/">top-down and bottom-up</a> styles</li>
<li>Do refactoring katas to learn how to work with legacy code</li>
<li>Do UI katas, to learn how to test the UI</li>
<li>Learn how to deal with DB</li>
<li>Learn how to handle remote services</li>
</ul>


<p>If needed, invent your own katas to deliberately practice these topics and others.</p>

<h2>The pitfalls</h2>

<p>As any road worth walking, the TDD path is not linear and smooth. Before fully mastering TDD, you&rsquo;ll regularly wonder if you&rsquo;re on the right track. As any practice, TDD has pitfalls. I&rsquo;ve fell into some quite a few times. I guess that&rsquo;s part of the learning process.</p>

<h3>Emerging Design</h3>

<p>There&rsquo;s always been a lot of misunderstanding around this topic.</p>

<p>Bad smells in your code make your tests harder to write. If adding a test is painful, that&rsquo;s an indication that something could be improved in your design. It&rsquo;s then up to you to know what. Once you&rsquo;ve figured out what you want to change, use your existing tests to refactor your design first. Only then, add this new test.</p>

<p>As you can see, the tests will give you more feedback about the design of your code, but they won&rsquo;t tell you what to do. That&rsquo;s where your coding skills will help. This is particularly true about algorithms. Don&rsquo;t expect a good algorithm to magically appear as you do the simplest-thing-that-could-possibly-work &hellip;</p>

<p>As with any rules, there are exceptions. At times, you&rsquo;ll walk into a problem which emerging design is great. For example, I&rsquo;ve done the <a href="http://agilekatas.co.uk/katas/RomanNumerals-Kata">Arab to Romans</a> kata many times, and that repeatedly doing the simplest-thing-that-could-possibly-work yields a good solution.</p>

<h3>Mocks</h3>

<p><a href="https://en.wikipedia.org/wiki/Mock_object">Mocks</a> are useful at times, but be careful not to overuse them. I already <a href="http://localhost:4000/blog/categories/mocking/">wrote about mocks</a>. Too much mocking makes your test suite brittle, ineffective and difficult to maintain ! I&rsquo;ve been bitten hard by this one on a personal <a href="https://github.com/philou/mes-courses">side project</a>, the day I decided to get rid of all the mocks, I shrank the test code size by 25%. Since then I learned about alternate techniques such as :</p>

<ul>
<li><a href="http://www.natpryce.com/articles/000714.html">Test data builders</a> which allow to easily build test data</li>
<li><a href="https://martinfowler.com/bliki/ValueObject.html">Value objects</a> that are immutable and don&rsquo;t need mocking</li>
<li><a href="/my-new-gem-for-creating-rspec-proxies/">test spies and proxies</a> as a way to mock and track calls while still calling the real code</li>
<li><a href="http://localhost:4000/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">in-memory fake implementations</a> which make the tests independent and fast without unmaintainable proliferation of mock setup</li>
</ul>


<p>As an indicator, less than 5% of my tests use mocks.</p>

<h3>Metrics</h3>

<p>In his <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">keynote at RailsConf 2014</a> DHH explains the danger of testing metrics.</p>

<p><a href="https://www.youtube.com/watch?v=9LfmrkyP81M"><img src="../imgs/2017-05-15-from-apprentice-to-master-how-to-learn-tdd-test-driven-development/dhh.jpg" alt="DHH's keynote at RailsConf 2014" /></a></p>

<p>By using TDD correctly, you should get a high code coverage as a side effect. If you get below 80%, you must be doing something wrong. The other metric you should keep an eye on is the total build time. Original <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> had the <a href="http://www.jamesshore.com/Agile-Book/ten_minute_build.html">10 minutes build rule</a> which states that if your build + tests takes more than 10 minutes, you should refactor it.</p>

<p>That&rsquo;s it ! Things like 100% test coverage or test ratio are complete nonsense.</p>

<h2>Pushing it even further</h2>

<p>My promise, at the beginning of this post, was that Test Driven Development would make your life as a developer easier. Now let&rsquo;s imagine that your whole team or company was using TDD. It&rsquo;s a foundation on which to build a sustainable agile organization.</p>

<p>The mastery of automated testing at organization scale is a key element to continuous delivery, making releasing software a non-event, and as stress-free as possible.</p>

<p>Full adoption of TDD can yield to <a href="/incremental-architecture-a-cure-against-architecture-astronauts/">incremental architecture</a> which delivers features faster, by skipping the conflictual arguments about supposed future needs.</p>

<p>Finally, TDD can simplify your processes and tooling. Team-wide TDD results in a steady flow of features on top of which it is easier to create simple and effective processes and tools.</p>

<p>The road is long, sinuous and at times rocky, but so are the rewards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flavors of TDD]]></title>
    <link href="http://philippe.bourgau.net/flavours-of-tdd/"/>
    <updated>2016-09-20T20:54:00+02:00</updated>
    <id>http://philippe.bourgau.net/flavours-of-tdd</id>
    <content type="html"><![CDATA[<p>During the years doing some coding dojos with the same circle of people, I came up with my own style of practicing <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. Lately, I had the chance to do a pair programming session with someone I did not know. That made me realize that they are in fact even more ways to practice TDD than I thought.</p>

<h2>Mockist vs Classisist</h2>

<p>A lot has already been written (and discussed) about these two approaches. I myself have already <a href="/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">blogged</a> about the subject, I even gave a <a href="/how-not-to-use-mocks-my-talk-at-paris-rb/">talk</a> about it. From my own point of view, I believe that the inconvenients of making mocking the default far outweights the benefits. I&rsquo;m not saying that mocks aren&rsquo;t useful from time to time, but rather that they should remain the exception.</p>

<h2>Top-Down vs Bottom-Up</h2>

<p>That&rsquo;s the reason why I wrote this post. This is the main difference I found between my style and my pair&rsquo;s. Let me explain.</p>

<p><img class="center" src="/imgs/2016-09-20-flavours-of-tdd/topdown-vs-bottomup.jpg" title="Top-Down vs Bottom-Up" ></p>

<h3>Top-Down</h3>

<p>Doing TDD top-down means starting with high level end to end tests, implementing the minimum to make it work, refactor and repeat. A bit like BDD, the point is to focus on the expected behavior, and avoid writing useless things. The bad point is that the refactoring part can get pretty difficult. On real life code, strictly following top-down would mean writing a feature test first, passing it with a quick and dirty implementation, to then spend hours trying to refactor all that mess &hellip; good luck !</p>

<p>Here is another example, from coding dojos this time. Having had success with the top-down approach during previous dojos, we once intentionally tried to code <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#">Conway&rsquo;s Game of Life</a> using a top-down approach. We did so by writing high level tests that were checking special patterns (gliders &hellip;). That was a nightmare ! It felt like trying to reverse engineer the rules of the game from real use cases. It did not bring us anywhere.</p>

<p><img class="center" src="/imgs/2016-09-20-flavours-of-tdd/glider.gif" title="Conway&rsquo;s game of life gliders" ></p>

<h3>Bottom-Up</h3>

<p>At the other side of the spectrum, you can do bottom-up TDD. This means unit testing and implementing all the small bricks you think you&rsquo;ll need to provide the expected overall feature. The idea is to avoid tunnels and to get fast feedback on what you are coding. The bad side is that you might be coding something that will end up being unnecessary. Be careful, if you find yourself spending a lot of time building up utility classes, you might be doing too much bottom-up implementation.</p>

<p>The <a href="http://codingdojo.org/cgi-bin/index.pl?KataRomanNumerals">Numerals to Romans Kata</a> is a good exercise to fail at bottom-up. Every time I did this exercise during a coding dojo, people new to it would start to come up with complicated ways to do it (often involving complex array manipulation). Compared to that, applying disciplined bottom-up TDD brings a <a href="https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/Algorithm-Roman-Numeral-Converter">brutally effective solution for Numerals to Romans</a>.</p>

<h2>Mixed approach</h2>

<p>Both approaches have their pros and cons. I really believe developers who are serious about TDD should master both, and learn when to apply each. In fact, as often, the best approach lies somewhere in the middle. Here&rsquo;s my recipe :</p>

<ol>
<li>Start with a high level feature test</li>
<li>try to make it pass &hellip;</li>
<li>&hellip; (usually) fail</li>
<li>rollback or shelve your test and draft implementation</li>
<li>build a brick</li>
<li>unshelve</li>
<li>try to make it pass &hellip;</li>
<li>&hellip; and so one until the high level test finally passes.</li>
</ol>


<p>In fact, it&rsquo;s a lot like the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> for building features instead of refactoring.</p>

<h2>Practice in dojos</h2>

<p>It&rsquo;s possible to intentionally practice this in coding dojos as well. Most kata should be OK, as long as the group agrees to fix it using this particular approach up front.</p>

<p>If during the dojo, you&rsquo;ve just written a test, suddenly realize that it won&rsquo;t be easy to get it passing, and that you&rsquo;ve got the elements spread out in your code, this is the time ! Comment the test, get the green bar, refactor, uncomment the test, try to make it pass, repeat &hellip; Eventually, you&rsquo;ll have all the bricks to make it easy to pass your test.</p>

<p><img class="center" src="/imgs/2016-09-20-flavours-of-tdd/cargo-cult.jpg" title="Cargo Cult : People thought that by building something that looks like a plane, they would be able to fly" ></p>

<p>Some might say this is not &lsquo;pure&rsquo; TDD, but that sounds like cargo cult to me ! As long as you make sure you are not building useless stuff, and that you keep the feedback loop as short as possible, you&rsquo;re on the right track.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecProxies now supports .to receive(xxx)... syntax]]></title>
    <link href="http://philippe.bourgau.net/rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax/"/>
    <updated>2016-08-23T04:47:00+02:00</updated>
    <id>http://philippe.bourgau.net/rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/2016-08-23-rspecproxies-now-supports-to-receive-xxx-dot-dot-dot-syntax/test_probes.jpg" title="Hardware test probes" ></p>

<p>Pure mocks are dangerous. They let defect go through, give a false sense of security and are difficult to maintain.</p>

<p>I&rsquo;ve already talked about it <a href="/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">before</a> but since then, <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">DHH announced that he was quitting TDD</a>, the <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead ?</a> debate took place, and the conclusion is that <a href="https://www.thoughtworks.com/insights/blog/mockists-are-dead-long-live-classicists">mockist are dead</a>.</p>

<p>They are still times when mocks feel much simpler than any other things. For example, imagine your process leaks and crashes after 10 hours, the fix is to pass an option to a thirdparty, how would you test this in a fast test ? That&rsquo;s exactly the kind of situation where using test proxies saves you from mocks. A test proxy defers everything to the real object but also features unintrusive hooks and probes that you can use in your test. If you want a code example, check <a href="https://github.com/philou/mes-courses/commit/2c9fce17f9b59d0b3828f309015c07b17cceddf4?diff=split">this commit</a>, where I refactored a rails controller test from mocks to a RSpecProxies (v0.1).</p>

<p>I created RSpecProxies <a href="/my-new-gem-for-creating-rspec-proxies/">a while ago</a>, a while ago, and it&rsquo;s syntax made it alien to the RSpec work, it needed an update. <a href="http://rspec.info">RSpec</a> now supports basic proxying with partial stubs, spies, the <code>and_call_original</code> and the <code>and_wrap_original</code> methods. <a href="https://github.com/philou/rspecproxies">RSpecProxies 1.0</a> is a collection of hooks built on top of these to make proxying easier, with a syntax that will be familiar to RSpec users.</p>

<h2>Before original hook</h2>

<p>This hook is triggered before a call a method. Suppose you want to simulate a bad connection :</p>

<p>```ruby
it &lsquo;can simulate unreliable connection&rsquo; do
  i = 0
  allow(Resource).to receive(:get).and_before_calling_original { |*args|</p>

<pre><code>i += 1
raise RuntimeError.new if i % 3 == 0
</code></pre>

<p>  }</p>

<p>  resources = Resource.get_at_least(10)</p>

<p>  expect(resources.size).to eq(10)
end
```</p>

<h2>After original hooks</h2>

<p>RSpecProxies provides the same kind of hook after the call :</p>

<p>``` ruby
it &lsquo;can check that the correct data is used (using and_after_calling_original&rsquo; do
  user = nil
  allow(User).to receive(:load).and_after_calling_original { |result| user = result }</p>

<p>  controller.login(&lsquo;joe&rsquo;, &lsquo;secret&rsquo;)</p>

<p>  expect(response).to include(user.created_at.to_s)
end
```</p>

<p>Here we are capturing the return value to use it later in the test. For this special purpose, RSpecProxies also provides 2 other helpers :</p>

<p>``` ruby</p>

<h1>Store the latest result in @user of self</h1>

<p>allow(User).to receive(:load).and_capture_result_into(self, :user)</p>

<h1>Collect all results in the users array</h1>

<p>users = []
allow(User).to receive(:load).and_collect_results_into(users)
```</p>

<h2>Proxy chains</h2>

<p>RSpec mocks provides the <code>message_chain</code> feature to do build chains of stubs. RSpecProxy provides a very similar proxy chain concept. The main difference is that it creates proxies along the way, and not pure stubs. Pure stubs assume that you are mocking everything, but as our goal is to mock as little as possible, using proxies makes more sense.</p>

<p>When using a mockist approach, the message chain is a bad smell because it makes your tests very brittle by depending on a lot of implementation. In contrast, proxy chains are meant to be used where they are the simplest way to inject what you need, without creating havoc.</p>

<p>For example, suppose you want to display the progress of a very slow background task. You could mock a lot of your objects to have a fast test, of if you wanted to avoid all the bad side effects of mocking, you could run the background task in your test, and have a slow test &hellip; Or, you could use a chain of proxies :</p>

<p>``` ruby
it &lsquo;can override a deep getter&rsquo; do
  allow(RenderingTask).to proxy_message_chain(&ldquo;load.completion_ratio&rdquo;) { |e| e.and_return(0.2523) }</p>

<p>  controller.show</p>

<p>  expect(response).to include(&lsquo;25%&rsquo;)
end
```</p>

<p>Here the simplest thing to do is just to override a small getter, because from a functionnal point of view, that&rsquo;s exactly what we want to test.</p>

<h2>Last word</h2>

<p>The code is on <a href="https://github.com/philou/rspecproxies">github</a>, v1.0.0 is on <a href="https://rubygems.org/gems/rspecproxies/versions/0.1.0">rubygems</a>, it requires Ruby v2.2.5 and RSpec v3.5, the license is MIT, help in any form are welcome !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My new gem for creating rspec proxies]]></title>
    <link href="http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies/"/>
    <updated>2014-05-23T06:20:00+02:00</updated>
    <id>http://philippe.bourgau.net/my-new-gem-for-creating-rspec-proxies</id>
    <content type="html"><![CDATA[<p>I already wrote a lot about test proxies (<a href="/how-to-stub-around-a-call-to-the-original-method-with-rspec/">here</a>, <a href="/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">here</a> and <a href="/my-humble-advices-about-how-to-write-maintainable-tests/">here</a>).</p>

<p>I just took the time to transform my previous gist in a full fledged ruby gem. It&rsquo;s called &ldquo;rspecproxies&rdquo; and it can be found <a href="https://github.com/philou/rspecproxies">on github</a>. It&rsquo;s fully tested, documented and there&rsquo;s a usage section in the readme to help anyone get started.</p>

<p>Here are the pain points proxies try to fix :</p>

<ul>
<li>Without mocks, it is sometimes just awfully painfull to write the test (do you really want to start a background task just to get a completion ratio ?)</li>
<li>With classic stubs, you sometimes have to stub things you are not interested in in your test, you end up with unmaintainable extra long stub setup</li>
</ul>


<p>Let&rsquo;s have a look at a few examples of tests with proxies :</p>

<ul>
<li>Verify actual load count without interfering in any behaviour</li>
</ul>


<p>```ruby
it &lsquo;caches users&rsquo; do
  users = User.capture_results_from(:load)</p>

<p>  controller.login(&lsquo;joe&rsquo;, &lsquo;secret&rsquo;)
  controller.login(&lsquo;joe&rsquo;, &lsquo;secret&rsquo;)</p>

<p>  expect(users).to have_exactly(1).items
end
```</p>

<ul>
<li>Use proxies to stub an object that does not yet exist</li>
</ul>


<p>```ruby
it &lsquo;rounds the completion ratio&rsquo; do
   RenderingTask.proxy_chain(:load, :completion_ratio) {|s| s.and_return(0.2523) }</p>

<p>   renderingController.show</p>

<p>   expect(response).to include(&lsquo;25%&rsquo;)
end
```</p>

<p>I&rsquo;d really love to see more code tested with proxies, it makes the whole testing so much more natural. As with any testing techniques, we get more thorough testing from the ease of writing the test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My humble advices about how to write maintainable tests]]></title>
    <link href="http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests/"/>
    <updated>2014-02-04T06:10:00+01:00</updated>
    <id>http://philippe.bourgau.net/my-humble-advices-about-how-to-write-maintainable-tests</id>
    <content type="html"><![CDATA[<p>I love writing automated tests &hellip; or rather, I hate having to work in untested code. I find it makes my life unnecessarily stressful. On the other hand, the cost of maintaining badly written tests can sometimes outweigh their benefits. This is usually the moment where the team resorts to manual testing, and gets back to the ways of &lsquo;the good old days&rsquo;. Personally, I don&rsquo;t like the good old days when we had to stay up all night <del>to add even more mess</del> to fix something for an important deadline.</p>

<p>Here is how I try to make my tests as maintainable as possible :</p>

<ul>
<li>Write the tests before the code, it gets a (short) time to get used to, but after that, it&rsquo;s just a lot more fun. Just try it for a while</li>
<li>Write tests with no side effects, otherwise, it will not be possible to run your tests alone, or in a different order ! So don&rsquo;t use globals</li>
<li>Write readable tests : did you ever had to fix a test that you cannot figure out the intent ? A lot of the other points just help writing more readable tests</li>
<li>Write small tests : they are usually faster to run, allow you to test more edge cases, and make a better job at pinpointing the actual faulty code. The receipe for writing short tests is to follow the given-when-then pattern :

<ul>
<li>start your test by setting the context (given)</li>
<li>do the thing you actually want to test (when)</li>
<li>verify that it did what you wanted (then)</li>
</ul>
</li>
<li>Remove code duplication from your tests, in the same way as you would in production code. This will help you when you&rsquo;ll want to modify that constructor that is used in 764 test files &hellip;</li>
<li>Use test data builders. This will avoid duplicated and long context setup at the beginning of every test. Don&rsquo;t use factory methods or the object mother pattern, it just does not scale. In java, this usually means <a href="http://www.natpryce.com/articles/000714.html">rollying your own</a>, in ruby, just use <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a></li>
<li>Use custom assertion objects. This will avoid duplicated and complicated verification code at the end of every test. It will also help to improve assertion messages. In ruby, this comes built in <a href="http://rspec.info/">rspec</a> and its <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/define-matcher">matcher dsl</a>. Lately, in Java I have been using <a href="https://github.com/alexruiz/fest-assert-2.x">Fest Assert</a></li>
<li>Use the extended red &ndash;> red with explicit error message &ndash;> green &ndash;> refactor in place of the shorter red &ndash;> green &ndash;> refactor. By spending some time to improve your assertion messages, you&rsquo;ll eventually save time to understand what broke when the test fails</li>
<li>As <a href="http://philippe.bourgau.net/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">I already wrote about</a>, only use mocks to

<ul>
<li>speed up a test that is too slow</li>
<li>cut off a dependency to an unavailable subsystem</li>
<li>simplify an overly complex test setup</li>
</ul>
</li>
<li>Use constructor based dependency injection. It&rsquo;s straightforward, low tech, and simplifies test setup</li>
<li>As there is no need to mock immutable data structures, I found that using immutable classes for values simplifies tests</li>
<li>Usually use hand coded mocks. Hand coded mocks become difficult to maintain when the code becomes too tangled, they can help me to know that I am doing something wrong (not mocking at the correct place, testing implementation, not doing enough refactoring &hellip;). On the contrary, mock framework make this so easy that I usually miss the issue completely until it is too late</li>
<li>Except when your mocking framework provides object proxing and automatic unmocking. Ruby&rsquo;s <a href="http://rr.github.io/rr/">RR</a> provides this. Both features can be really useful when needed.</li>
<li>Use existing mocks when possible. For example, <a href="http://www.sqlite.org/">Sqlite</a> in memory database : it speeds up the tests, removes the need for any environment setup, and is usually very simple to setup</li>
<li>Last of all, listen to your tests : if they get difficult to write, they might be a design improvement opportunity lying somewhere</li>
</ul>


<p>All in all there is nothing new here. A lot of things come from <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1391579113&amp;sr=8-1&amp;keywords=growing+object-oriented+software+guided+by+tests">GOOS</a> others from <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=pd_bxgy_b_text_y">Clean Code</a>, the mocking &lsquo;requirements&rsquo; come from <a href="http://blog.rubybestpractices.com/posts/gregory/052-issue-20-thoughts-on-mocking.html">an article from Gregory Brown</a>, I found others from my own experience and from a lot of other sources I cannot remember now &hellip;</p>

<p>Happy testing !</p>
]]></content>
  </entry>
  
</feed>
