<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: large scale | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/large-scale/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-06-19T06:25:22+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reducing the risks of large organization changes with the Mikado Method - part 3]]></title>
    <link href="http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/"/>
    <updated>2018-02-22T08:53:00+01:00</updated>
    <id>http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3</id>
    <content type="html"><![CDATA[<p>In the <a href="/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/">previous posts</a>, I presented how to use the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> to large organization changes. Drawn from the programming world, this technique keeps a low transformation <a href="https://en.wikipedia.org/wiki/Work_in_process">WIP</a>. In theory, this should reduce risk and the time to see return on investment. Let&rsquo;s see the pros and cons in more detail.</p>

<p><img src="../imgs/2018-01-24-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/mikado-weighter.jpg" alt="A weighting machine comparing big bang and midado" /></p>

<h2>An experiment culture</h2>

<p>A first interesting point is the &ldquo;Try &ndash; Revert&rdquo; attitude. No one is signing with his blood that the change will have to succeed ! It&rsquo;s liberating for everyone to have to try its best instead of having to succeed at all costs. In fact, it&rsquo;s an opportunity to show a &ldquo;right to fail&rdquo; mindset. (You can read more about the topic <a href="/blog/categories/agile-transformations-fail-series/">here</a>). It&rsquo;s a clear message that leaders are proponents of experiments.</p>

<blockquote><p>ðŸ’¡ Transforming large organization with the Mikado Method shows a &ldquo;right to fail&rdquo; mindset.</p></blockquote>

<p>The flip side of that, is that people might not like to try Scrum 7 times before adopting it definitely. Plus switching process every month will not be very productive. Here is what we can do about these problems.Â </p>

<p>As I read in <a href="https://www.amazon.com/Freedom-Inc-Employees-Business-Productivity/dp/0307409384/ref=sr_1_sc_1?ie=UTF8&amp;qid=1516857037&amp;sr=8-1-spell&amp;keywords=isac+getz">Freedom, Inc.</a> &ldquo;It&rsquo;s not that people don&rsquo;t like to change, its that they don&rsquo;t like to <em>be</em> changed !&rdquo;. If a transformation teams manages all the change initiative top down, people will hate it. Hopefully, the mikado graph is a unique collaboration tool. Start by presenting the method and sharing a blank graph. Ask everyone to build it together. Then let the teams handle their own part of the graph. Here is an example. Suppose a team needs to be able to integrate every hour. Add this goal to the mikado, and hand the responsibility to get there to this team. As <a href="https://www.ted.com/talks/dan_pink_on_motivation?language=en#t-195602">Daniel Pink</a> said, autonomy and mastery are key motivators.</p>

<p>We should also pay special attention to how we name mikado (sub) goals. If the general goal is to adopt <a href="https://less.works/">LeSS</a>, jumping in and out of LeSS will be very painful ! Instead of &ldquo;How&rdquo; goals, we should use specific &ldquo;What&rdquo; goals. For example, we could replace &ldquo;Adopting LeSS&rdquo; with &ldquo;All teams integrate in less than 10 minutes&rdquo;. It is a lot easier (and faster) to try to integrate in 10 minutes for a day. In one day, we should know if it works, and if not, what&rsquo;s blocking. In this case, experiments will be standard improvement items in the backlogs of teams. Teams could try to integrate every 10 minutes by hand for example !</p>

<p><a href="http://noop.nl/2015/06/success-and-failure.html"><img src="../imgs/2018-01-24-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/celebration-grid.jpg" alt="The Management 3.0 celebration grid poster" /></a><div class="image-credits"><a href="http://noop.nl/2015/06/success-and-failure.html">Original Poster</a> By Jurgen Appelo</div></p>

<h2>Reduced WIP</h2>

<p>In fact, it lets people work on smaller changes, one at a time. I can think of two direct advantages of small changes. First, it does not disrupt the rest of the organization, letting it deliver as it used to. Second, it&rsquo;s a lot less stressful for the people, who then have more energy to focus on the experiment.</p>

<p>Another point is that less things are being changed at the same time. After reverting previous attempts, less parts of the organization are being changed. There&rsquo;ll be no teams halfway in the change waiting for fixes to their impediments. As usual, reducing WIP brings many advantages :</p>

<ul>
<li>It requires less coaches, as they will only concentrate on areas where they can drive the change to its end.</li>
<li>It removes the synchronization overhead of different teams working on the same problem.</li>
</ul>


<h2>What about speed ?</h2>

<p>I can hear you think &ldquo;But that&rsquo;s going to take forever !&rdquo; It is quite the opposite. Here is why :</p>

<ul>
<li>The first completed changes will be root problems. Focusing on these will bring general improvement to all the organization. The state of the rest of the organization does not matter. The path you used to discover this root problem does not matter either. Fixing this root problem is likely to bring improvement to all the teams !</li>
<li>As the graph unravels, we can use it to start independent change initiatives in parallel ! This is a classic way to speed up code refactoring that transposes to organizations. The graph gives you a clear map of which problems are independent. Perform changes that won&rsquo;t conflict in parallel.</li>
<li>There are quick wins also. You don&rsquo;t need to be dogmatic about reverting. Suppose you tried something that brought improvement, but that uncovers a deeper problem. If the people felt an improvement and prefer to continue the new way, let them !</li>
</ul>


<blockquote><p>ðŸ’¡ Transforming large organization with the Mikado Method helps to parallelize work.</p></blockquote>

<p>Granted, if the goal is just to move to &ldquo;Agile&rdquo;, then it might be slower than switching all teams to &ldquo;Agile method X&rdquo;. This is only faster on paper though. If you want more details about why becoming agile takes time, I encourage you to read these <a href="/blog/categories/agile-transformations-fail-series/">other blog posts</a>. Plus, as I said above we should prefer &ldquo;What&rdquo; goals.</p>

<h2>Continuous improvement</h2>

<p>One final advantage I see with this technique is that it&rsquo;s sustainable. As it&rsquo;s a lot less stressful than a typical large re-org, it is possible to keep it going all the time ! It&rsquo;s a gateway to continuous improvement. It&rsquo;s no wonder Toyota (see <a href="https://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/ref=sr_1_1?ie=UTF8&amp;qid=1516857324&amp;sr=8-1&amp;keywords=toyota+kata">Toyota Kata</a>) people say that the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a> is their main management tool !</p>

<p><a href="https://www.amazon.com/Mikado-Method-Ola-Ellnestam/dp/1617291218/ref=sr_1_1"><img src="../imgs/2018-01-24-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/mikado-method-cover.jpg" alt="The cover of the 'Mikado Method' book" /></a></p>

<h2>Closing thought</h2>

<p>It&rsquo;s funny how two practices like the Mikado Method and the Improvement Kata are the same idea ! I also noticed similarities with thefirst <a href="https://blog.hubspot.com/sales/habits-of-highly-effective-people-summary">&ldquo;Be Proactive&rdquo; practice</a> of Stephen R. Covey&rsquo;s <a href="https://www.amazon.com/Habits-Highly-Effective-People-Powerful/dp/1451639619/ref=sr_1_3?ie=UTF8&amp;qid=1516857434&amp;sr=8-3&amp;keywords=7+habits+of+highly+effective+people">7 habits of highly effective people</a>. Could it be the same idea again ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reducing the risks of large organization changes with the Mikado Method - part 2]]></title>
    <link href="http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/"/>
    <updated>2018-02-15T06:45:00+01:00</updated>
    <id>http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2</id>
    <content type="html"><![CDATA[<p>In the <a href="/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/">previous post</a>, I presented both large scale code and organization changes. I highlighted how they face similar difficulties of huge <a href="https://en.wikipedia.org/wiki/Work_in_process">Work In Progress</a>. Let&rsquo;s see how programmers deal with these problems.</p>

<p><img src="../imgs/2018-01-22-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/mind-your-wip.jpg" alt="A drawing of a wipe, with the text &quot;Mind your WIP&quot;" /></p>

<h2>The mikado method algorithm</h2>

<p>The <a href="https://mikadomethod.wordpress.com/">mikado method</a> is a programming technique to perform large <a href="https://en.wikipedia.org/wiki/Code_refactoring">code refactoring</a> one step at a time. It fixes the problematic situation we raised at the beginning of these posts. It enables developers to integrate their work with their teammates' continuously. It allows to build features and do the refactoring in parallel. Developers can also pause a mikado refactoring for a while if needed. On top of all this, it makes it easier for the full team to collaborate on the same refactoring.</p>

<blockquote><p>ðŸ’¡ Developers can pause a Mikado Method refactoring for a while if needed.</p></blockquote>

<p>Here is how it goes, but you can get a more detailed (and technical) description <a href="/10-things-to-know-that-will-make-you-great-at-refactoring-legacy-code/">here</a>.</p>

<ol>
<li>Try to do the change you want</li>
<li>If it the tests pass, great, you&rsquo;re done</li>
<li>Otherwise, add a node for the change you wanted to do in your mikado graph</li>
<li>Write down the errors you faced</li>
<li>Revert your change</li>
<li>Recurse from 1 for every error</li>
<li>Draw a dependency arrow from the nodes of errors to the node of your initial change</li>
</ol>


<p>The catch is that developers should revert the work they could not finish to move on !</p>

<h2>How to apply it to an organization change</h2>

<p>In some way, the Mikado Method is very similar to the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">improvement kata</a>. The flow of the Improvement kata goes on like that :</p>

<ol>
<li>Determine a target condition</li>
<li>Try to work with the target condition in place</li>
<li>If it works, you&rsquo;re done</li>
<li>Otherwise, understand the main impediment, and revert to the old way of doing things</li>
<li>Work to remove the impediment</li>
<li>Start again from step 2</li>
</ol>


<p>Have a look at <a href="http://philippe.bourgau.net/how-we-used-the-improvement-kata-to-gain-25-percent-of-productivity-part-1/">these blog posts</a> for a more practical presentation of the improvement kata.</p>

<blockquote><p>ðŸ’¡ The Mikado Method and the Improvement Kata are more than similar.</p></blockquote>

<p>Granted, the Mikado method and the improvement kata look similar. They are in fact more than similar. The improvement kata does not prescribe how you should fix your impediments. What&rsquo;s not explicit is that we can use it recursively to fix impediments ! That makes it almost identical to the Mikado Method, but for organization instead of code. It won&rsquo;t be a surprise to know that some companies have used the improvement kata for that. For example, <a href="https://www.amazon.com/Practical-Approach-Large-Scale-Agile-Development/dp/0321821726?pd_rd_wg=UdZ7n&amp;pd_rd_r=ea4d5912-c825-432a-b633-ac6822a475f4&amp;pd_rd_w=rQ1LZ&amp;ref_=pd_gw_psimh&amp;pf_rd_r=0N5KT332R3TD0DWK8FM0&amp;pf_rd_p=a1e8e44e-a6a8-5785-afd0-7f174f0d74f9">HP used it to drive its Laser Jet team transformation</a>. Others have already used the <a href="http://nomad8.com/organisational-change-with-mikado/">Mikado Method for organization transformation</a>.</p>

<p><a href="http://nomad8.com/organisational-change-with-mikado/"><img src="../imgs/2018-01-22-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/orga-mikado-post-its.jpg" alt="Extract of the orga mikado graph used by the Sandy Mamoli" /></a><div class="image-credits"><a href="http://nomad8.com/organisational-change-with-mikado/">Original Post</a> by Sandy Mamoli</div></p>

<p>Suppose your organization wants to move to full Continuous Integration(TODO). It could start by trying to integrate all their devs in 10 minutes on a small group of teams. If it works, fine, other large teams can try it as well. Let&rsquo;s see what to do if it fails though. Thanks to a <a href="/blog/categories/retrospectives/">retrospective</a> teams understand that they need to master CI themselves first. In this case, they could revert large scale CI, and have one of the teams try to do continuous integration. If it works, fine, another team can try it too. If it does not, they&rsquo;ll do a post-mortem of some sort to understand the root issue, and work on it. For example, here the main impediment could be a coupled architecture. The fun thing would be to apply the Mikado Method to do this refactoring ðŸ˜‰.</p>

<p>As with the Mikado Method, it is possible to draw an organization change Mikado graph along the way :</p>

<p><img src="../imgs/2018-01-22-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/sample-mikado.png" alt="The mikado graph for the story above" /></p>

<p>The graph is a living artifact. As we try and revert new experiments, we should expand and collapse the graph. This creates a global and shared view of the state of the change. Needless to say that this is great for collaboration.</p>

<h2>To be continued (again)</h2>

<p>This was part 2 of a <a href="/blog/categories/mikado-method-organization-series/">series on applying the Mikado Method to organization changes</a>. I&rsquo;ll end this series up with <a href="/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-3/">next post</a>, where I&rsquo;ll go through the pros and cons of the approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reducing the risks of large organization changes with the Mikado Method - part 1]]></title>
    <link href="http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/"/>
    <updated>2018-02-08T11:53:00+01:00</updated>
    <id>http://philippe.bourgau.net/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1</id>
    <content type="html"><![CDATA[<p>Large scale agile transformations are often painful, stressful and &hellip; failed ! Mixing the <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">Improvement Kata</a> and the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> can make them more successful.</p>

<p><img src="../imgs/2018-01-21-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/mikado.jpg" alt="A drawing of entangled mikado sticks" /></p>

<p>The Mikado Method is a programming technique to reduce the risks of large code changes. Let&rsquo;s see how to apply it to organization changes.</p>

<h2><a href="https://dzone.com/articles/if-it-aint-broke-dont-fix-it">&ldquo;If it&rsquo;s not broke, don&rsquo;t touch it !&rdquo;</a></h2>

<p>A lot of programmers have learned this maxim the hard way. Here is how it goes.</p>

<p>It all starts with a shitty piece of code that gets into everyone&rsquo;s way as soon as they have to deal with it. It&rsquo;s badly written, difficult to understand, and very difficult to change. One day, a brave programmer suggests to rewrite or revamp it so that it gets easy to work with. This is not a small task, but after some discussion and negotiation, he gets a &lsquo;go&rsquo; from his team.</p>

<p>A few hours in this refactoring, he discovers that he needs to adapt other pieces of the code before he moves on. He leaves his work in progress as it is, and starts to change these pre-requisites. Unfortunately, these too have pre-requisite. Little by little, he builds up <a href="https://en.wikipedia.org/wiki/Work_in_process">work in progress</a>(WIP) on different parts of the code. He still has nothing working though ! He&rsquo;s beginning to have troubles keeping track of all his WIP. On top of that, he&rsquo;s wasting time integrating the work done by his colleagues with his WIP. As days pass by with nothing to show, his team begins to doubt that he&rsquo;ll be able to bring this to its end ! The situation as a whole accumulates an awful lot of stress on the developer. In the end, it is pretty likely that the team will abandon the whole thing.</p>

<blockquote><p>ðŸ’¡ By never changing the code, programmers make it even harder to change</p></blockquote>

<p>The problem with this maxim is that by never changing the code, programmers make it even harder to change. In the end, this makes new features too expensive to build, which is pretty bad for the business.</p>

<p>Let&rsquo;s see how this related to large organization changes.</p>

<h2>The typical large scale agile transformation</h2>

<p>It all starts when a leader decides that Agile is the way to go. It could be because everyone is doing it or that he got convinced by someone. It could also be because consultants sold him a 10% productivity increase. The reason does not matter. What matters is that in a few months, all the company should switch to an Agile method. Large groups of people will have to switch to <a href="https://www.agilealliance.org/glossary/scrum-of-scrums/">Scrum of Scrum</a>, <a href="https://less.works/">LeSS</a>, <a href="http://www.scaledagileframework.com/">SAFe</a> or any other framework. Even if the transformation is split in product teams, these will still be big.</p>

<p>One great thing about these frameworks is that they show problems. After a few sprints people discover that they have troubles delivering incrementally. After analysis, they understand another deeper problem. Examples : bad management, legacy code, outdated tooling, bad underlying processes &hellip; As Agile is the new <a href="https://sourcemaking.com/antipatterns/golden-hammer">Golden Hammer</a>, the teams responsible of these problems in turn jump to Agile X method. Unfortunately, these too might fall into deeper problems &hellip; and the pattern repeats itself. Meanwhile, the top down transformation team sticks its own objectives. It continues to onboard new product teams to Agile, fueling the mess that is spreading.</p>

<p><img src="../imgs/2018-01-21-reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-1/hammer.jpg" alt="A golden hammer" /></p>

<p>At any moment, a very large proportion of the people in the company are in a state of transformation. This is pretty bad for productivity. What is even worse is that they are all facing the same root problems. They are all blocked in a sub-optimal state, impeded by the root problems. Following agile principles, they all start similar initiatives to workaround these issues ! They then need to coordinate with other teams, to avoid duplicate efforts. On top of that, as agile newbies, all these teams need coaches to help them at the same time.</p>

<blockquote><p>ðŸ’¡ Large scale Agile transformations are too often stressful for everyone &hellip;</p></blockquote>

<p>Needless to say that this situation is pretty stressful for everyone. It costs a lot, in productivity and consulting, for results yet to come. Despite reassurance that things will get better, the leader&rsquo;s trust is eroding.</p>

<p>The story ends bad when it goes on for too long. When the leader loses faith in the initiative, he cancels it, and goes back to the old ways. That&rsquo;s what we call the <a href="https://www.google.fr/search?q=agile+hangover">Agile hangover</a> : &ldquo;We tried it, but it was a mess. It does not work for us.&rdquo;</p>

<h2>To be continued</h2>

<p>As you can see, the two situations have a lot in common. Programmers have invented the Mikado Method to deal with large scale code changes. This was the first post of a <a href="/blog/categories/mikado-method-organization-series/">series about the Mikado Method and large scale organization changes</a>. In <a href="/reducing-the-risks-of-large-organization-changes-with-the-mikado-method-part-2/">next post</a>, we&rsquo;ll detail this technique, and see how to apply it on organization changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Agile transformations usually don't work - part 4 - Transparency]]></title>
    <link href="http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-4-transparency/"/>
    <updated>2018-02-01T09:45:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-4-transparency</id>
    <content type="html"><![CDATA[<p>This is the fourth and last post in a <a href="/blog/categories/agile-transformations-fail-series/">series about making large organizations more agile</a>. I encourage you to <a href="/why-agile-transformations-usually-dont-work-part-1-the-situation/">start with the beginning</a>.</p>

<p>In the previous posts, I presented why large scale &ldquo;Agile&rdquo; transformation usually fail. Part of the solution is about giving people the time to learn and a safe environment. That&rsquo;s not enough though.</p>

<p><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-4-transparency/squirrel-with-helmet.jpg" alt="A squirrel with a helmet" /></p>

<h2>Provide the data</h2>

<p>I explained how <a href="https://en.wikipedia.org/wiki/Management_by_objectives">Management by Objectives</a> harms experimentation. I presented alternatives like Salary Formula, Badge Based Compensation and Merit Money.</p>

<p>An interesting commonality between these compensation practices is that they are transparent. When all this is public, people know what to do if they want to increase their income. For example : get a badge by learning something new, or collaborate with others to get monkey money. That&rsquo;s great, but they should also know how to increase the profits to get a bigger cake for everyone !</p>

<p>Management By Objectives is not only about compensation. It also cascades business objectives all the way down to everyone in the company. If we get rid of MBO, people still need to know what is important.</p>

<p>Let me introduce Objectives and Key Results, aka <a href="https://en.wikipedia.org/wiki/OKR">OKRs</a>. Intel invented OKRs. Nowadays, among many other companies, Google is famous for using them.</p>

<p><a href="http://upraise.io/blog/difference-mbo-okr/"><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-4-transparency/MBO_OKR.jpg" alt="A visual comparision of MBO and OKRs" /></a></p>

<blockquote><p>ðŸ’¡ OKRs have nothing to do with compensation !</p></blockquote>

<p>OKRs match this experimentation mindset. OKR objectives should be ambitious, with room for overachievement. OKRs also provide Key Results, which let people measure how well they are doing ! As OKRs are public, teams get a full understanding of the context of their actions.</p>

<p>To max out the value of OKRs, we should make as much data public as possible. Financial figures can really help teams to know if they are doing a good job.</p>

<p>The end result is that teams can take informed decisions. They can measure the impact of their work at their scale, but also on the full organization.</p>

<h2>Compelling mission</h2>

<p>A last good point of OKRs is that they make very good higher level backlog items. Both <a href="https://www.scrumalliance.org/community/articles/2014/march/stories-versus-themes-versus-epics">Team Epics</a> and full products can be OKRs. Even the company&rsquo;s mission can be an OKR. Check Toyota&rsquo;s mission, for example, &ldquo;Better cars for more people&rdquo;. This provides invaluable guidance for everyone to take day to day decisions.</p>

<p>In fact, a clear and motivating company mission statement is not only good but mandatory. Without it, people will go in all direction, resulting in very slow progress. It&rsquo;s an absolute pre-requisite for self organization to work. This is particularly a challenge for <a href="https://en.wikipedia.org/wiki/Business-to-business">business-to-business</a> companies. One symptom is when developers succumb to <a href="https://dev.to/tra/expert-resum-driven-development">Resume Driven Development</a>.</p>

<blockquote><p>ðŸ’¡ Self organization does not work without a clear and compelling mission.</p></blockquote>

<h2>To summarize</h2>

<p>Organization&rsquo;s initiatives to become agile fast are doomed. They can at best expect small productivity and visibility improvements.</p>

<p>The benefits of being agile include lasting continuous improvement and business resiliency. Unfortunately, this cannot happen in a day. The road starts with the following :</p>

<ul>
<li>Creating a safe environment by getting the compensation issues out of the picture</li>
<li>Providing a clear goal and all the data people need to take informed decisions</li>
<li>Finally, leave the time for the people to learn</li>
</ul>


<p>I discovered another fun fact while looking for references. People from lean manufacturing have been <a href="http://blog.maskell.com/?p=2306">arguing the same thing</a> for decade ! The good news though, is that we ripe improvements all along the way !</p>

<p>This was the last post of a series about making large organizations more agile. Next week, I&rsquo;ll present an idea to apply the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> to refactor organizations one step at a time !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Agile transformations usually don't work - part 3 - What to do]]></title>
    <link href="http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-3-what-to-do/"/>
    <updated>2018-01-25T09:43:00+01:00</updated>
    <id>http://philippe.bourgau.net/why-agile-transformations-usually-dont-work-part-3-what-to-do</id>
    <content type="html"><![CDATA[<p>This is the third post in a <a href="/blog/categories/agile-transformations-fail-series/">series about making large organizations more agile</a>. I encourage you to <a href="/why-agile-transformations-usually-dont-work-part-1-the-situation/">start with the beginning</a>.</p>

<p>Let&rsquo;s summarize the previous posts. Large scale &ldquo;Agile&rdquo; transformation programs usually fall short of their promise. One reason is that leaders forget to provide a safe context to learn.</p>

<p><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-3-what-to-do/donkey-carrot-stick.jpg" alt="A kid trying to drive a donkey with a carrot and a stick" /></p>

<h2>What should we do ?</h2>

<p>First, we should take the time ! Rome wasn&rsquo;t built in a day. The road to an agile organization is a never ending path. We should also remember what we are after :</p>

<ul>
<li>Super fast adaptation to business changes through massive decentralization</li>
<li>Low process overhead thanks to people&rsquo;s buy-in</li>
<li>Continuous innovation in both products and organization, relying on everyone&rsquo;s creativity</li>
</ul>


<p>This is far more ambitious than a mere 5% productivity increase !</p>

<h2>Be patient for people to learn</h2>

<p>The goal is for people to be able to take bigger decisions on the spot. No one can learn this in a few hours. All over the company, people will have to improve their problem solving skills. They might also need to learn how to do root cause analysis. They&rsquo;ll need to take into account the point of views of other people in the organization. Some will need to beef up their communication skills as well. All will need to master new collaboration practices to stay up to date with what is going on.</p>

<blockquote><p>ðŸ’¡ An organization cannot be agile if all decisions have to go up and down the management ladder.</p></blockquote>

<p>That&rsquo;s a lot, and it takes time. The visible part of the iceberg, the collaboration practices, can be setup in a few weeks. But it won&rsquo;t yield much until the people are bold enough to take decisions by themselves.</p>

<p>First, I need to have a word about the workload in this section. If people are <a href="http://barryoreilly.com/2017/05/31/busy-to-death/">Busy to Death</a>, They won&rsquo;t have the time to learn. They won&rsquo;t even have the mood to think. Again, lasting productivity goes through sustainable pace. Slack time or a 20% policy are very good investments here !</p>

<p>Communication skills alone take months or years to improve. A communication training campaign can help to make the company ready to be more agile. In a previous team, new joiners used to attend a <a href="https://en.wikipedia.org/wiki/Nonviolent_Communication">Non-Violent Communication</a> training. Being transparent a constructive is a foundation of an agile organization.</p>

<p><a href="https://www.amazon.com/Five-Dysfunctions-Team-Leadership-Fable/dp/0787960756/ref=sr_1_2?ie=UTF8&amp;qid=1515736081&amp;sr=8-2&amp;keywords=five+dysfunctions+of+a+team"><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-3-what-to-do/5-dysfunctions-of-a-team.jpg" alt="Pyramid of the 5 dysfunctions of a team book&quot;" /></a></p>

<p>Finally, root cause analysis and problem solving skills take practice to get around. Some organizations, used to <a href="https://en.wikipedia.org/wiki/Carrot_and_stick">carrots and sticks</a>, have been avoiding this for years ! Good coaches can teach this to teams. People first need to learn that it&rsquo;s OK to look into problems and to experiment solutions though. That&rsquo;s where a safe environment helps.</p>

<h2>The Safe environment enhancer</h2>

<p>If people remain afraid to fail, they won&rsquo;t do enough experiments. As a result, they&rsquo;ll learn slower. They&rsquo;ll also keep delegating more decisions ! The organization won&rsquo;t become very agile. Sure, leaders will get small productivity and predictability improvements. Unfortunately, exclusive focus on these puts innovation in danger.</p>

<p>People should have the means to experiment. By far the greatest experimentation killer is carrots and stick management. If people live in fear of losing their job, we have no chance of becoming more agile.</p>

<blockquote><p>ðŸ’¡ Encouraging experimentation while sticking to compensation by objectives is schizophrenic.</p></blockquote>

<p>The situation is only slightly better with <a href="https://en.wikipedia.org/wiki/Management_by_objectives">management by objectives</a>. One of the reason is that as people start to expect their bonus, they also start to fear not having it next year ! We&rsquo;re back at the fear problem. There&rsquo;s a more direct issue with MBO though. A good experiment should be ambitious and have a high likelihood of failure. Unfortunately, people will negotiate unambitious objectives, to secure their bonus. In the end, people do far too few bold experiments and don&rsquo;t raise problems to safeguard their bonuses. Eventually, both people and the organization fail to learn.</p>

<p><a href="https://www.amazon.com/Punished-Rewards-Trouble-Incentive-Praise/dp/0618001816"><img src="../imgs/2018-01-11-why-agile-transformations-usually-dont-work-part-3-what-to-do/punished-by-rewards.jpg" alt="Cover of the book &quot;Punished by rewards&quot;" /></a></p>

<p>Instead of using MBO, we need to find a different way to deal with compensation. The management 3.0 literature has plenty of ideas for that. For example :</p>

<ul>
<li><a href="https://management30.com/practice/salary-formula/">Salary formula</a>. Some companies, like <a href="https://buffer.com/">Buffer</a> use a <a href="https://buffer.com/salary">transparent formula</a> to compute everyone&rsquo;s compensation. This base salary is independent from any subjective performance evaluation. On top <a href="https://open.buffer.com/transparent-pay-revolution/">boosting motivation</a>, it provides plenty of room for experimentation.</li>
</ul>


<blockquote><p><a href="https://qz.com/169147/applications-have-doubled-to-the-company-that-discloses-its-salaries/">After disclosing employee salaries, Buffer was inundated with resumes</a></p></blockquote>

<ul>
<li><a href="https://www.holacracy.org/badge-based-compensation-app/">Badge-based compensation</a>. Holocracy describes how to take valuable skills into account in a salary formula. To get a badge on a topic, you need to be recognized by the people who already own this badge. Examples of badges can be &ldquo;UX Expert&rdquo; or &ldquo;Senior Software Engineer&rdquo;.</li>
<li><a href="https://management30.com/practice/merit-money/">Merit money</a>. Company profits redistribution to employees should be both motivating and fair. Instead of typical yearly bonuses, merit money is a crowd-sourced money allocation scheme. Everyone regularly receives a fixed amount of monkey money. You should give some back to a colleague who helped you. You could also give some to acknowledge someone else&rsquo;s great job. Every month a lottery is played to know if employees should receive their share of profits. If so, everyone gets his share in proportion with the monkey money they received. Otherwise, profits accumulate until the next lottery.</li>
</ul>


<p>We could worry that dropping MBO will drop people&rsquo;s motivation as well. It turns out it&rsquo;s the exact opposite ! Check out <a href="https://www.youtube.com/watch?v=LFlvor6ZHdY">this talk</a> by Daniel Pinks to understand how bonuses kill motivation.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LFlvor6ZHdY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<h2>To be continued</h2>

<p>This was part 3 of a <a href="/blog/categories/agile-transformations-fail-series/">series of posts on making large organizations more agile</a>. We&rsquo;re almost at the end. <a href="/why-agile-transformations-usually-dont-work-part-4-transparency/">The last post</a> will dig into how to provide the data to everyone.</p>
]]></content>
  </entry>
  
</feed>
