<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hiring | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/hiring/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-10-03T15:30:17+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make hiring everyone's business]]></title>
    <link href="http://philippe.bourgau.net/make-hiring-everyones-business/"/>
    <updated>2016-03-21T21:05:00+01:00</updated>
    <id>http://philippe.bourgau.net/make-hiring-everyones-business</id>
    <content type="html"><![CDATA[<p>Let me tell you a typical hiring story. A bit more than 10 years ago, I was contractor at a bank on a C++ front office application. The system had initially been well engineer, but it had been <del>stuffed together</del> merged with another system that had a completely different architecture. Ha, and there were no automated tests. As you&rsquo;d guess, we had quite our dose of bugs, and maintaining this application was not easy.</p>

<p><img src="http://philippe.bourgau.net/imgs/2016-03-21-make-hiring-everyones-business/now-hiring.jpg" alt="A 'Now Hiring' sign" /></p>

<p>The manager wanted to hire a C++ programmer to beef up the team. Along with the division&rsquo;s architect he was conducting interviews to find just that guy. A few weeks later, he found a known C++ &amp; Windows local expert. A few weeks later, the team unanimously declared that we could not work with him because he was both pretentious and incompetent.</p>

<p>I&rsquo;m pretty sure every developer already witnessed a similar story.</p>

<h2>Managers do the hiring</h2>

<p>This is the usual practice. The motivation is that managers have more experience so they should be better at it, and also that it alleviates developers from non-programming work. As we saw in the introduction story, there are issues with this approach too :</p>

<ul>
<li>it&rsquo;s pretty bad for the team &lsquo;fit&rsquo; : there is no team building here. You often end up with a collection of individual working at the same place rather than with a real team.</li>
<li>during these interviews, the candidate only interacts with a particular type of profiles, who can tell how he&rsquo;ll be doing with more junior team members for example ?</li>
<li>as usual, this administrative work removes some programming from the manager&rsquo;s time. That&rsquo;s often not a good bargain</li>
<li>it decreases the team sense of control, as it is being &lsquo;forced&rsquo; to work with someone they did not choose. This makes it harder for them to take responsibility of what they are trying to achieve.</li>
</ul>


<h2>How we self organized hiring</h2>

<p>As I already explained in a <a href="/stop-feeling-like-a-kid-everytime-you-ask-a-day-off/">previous post</a> we engaged in various self delegation initiative by doing a <a href="https://management30.com/product/workouts/delegation-employee-engagement/">delegation board</a>. During this meeting, we identified hiring as something that could be self delegated.</p>

<p>In order to fix that, we started a workshop for 1 hour per day with a sub group of the team. We started with a brainstorming, then we voted, and finally presented our proposition to the rest of the team, which actually validated it. The whole thing lasted for one week (5 hours).</p>

<p><a href="http://dilbert.com"><img src="http://philippe.bourgau.net/imgs/2016-03-21-make-hiring-everyones-business/dilbert.jpg" alt="A Dilbert cartoon about hiring based on internet profile" /></a></p>

<h2>What we decided for hiring</h2>

<p>Here is the process we have decided to follow to handle hiring team members</p>

<ol>
<li>First, everyone in the team is responsible to speak up when he thinks we need to hire someone, during our retrospectives for example</li>
<li>To handle new applications, we have prepared an online interview. It contains open questions and online coding exercises, on <a href="http://www.cyber-dojo.org/">cyber-dojo</a>, which allows us to track all the candidates iterations</li>
<li>We do a round robin to find out who will follow the candidate through the hiring process. This means taking notes, organizing interviews, keeping the rest of the team up to date.</li>
<li>When a candidate passes the online interview, we will receive him for an technical and general interview with 2 people from the team.</li>
<li>All the team will then meet the candidate for a coffee break, in order to know if he will fit in the team</li>
<li>We&rsquo;ll then play the <a href="https://rework.withgoogle.com/print/guides/6053596147744768/">Google hiring committee</a> until we reach a consensus</li>
<li>When in doubt, we&rsquo;ll do extra interviews, and repeat</li>
</ol>


<p>That&rsquo;s just what we came up with, if you start this road, you might well come up with a very different process.</p>

<h2>One more thing</h2>

<p>It&rsquo;s great to have a selective hiring, but you&rsquo;ll also need to improve the input of the hiring pipeline, but that&rsquo;s <a href="/great-developers-are-free/">another story</a> &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Developers Are Free]]></title>
    <link href="http://philippe.bourgau.net/great-developers-are-free/"/>
    <updated>2015-12-31T12:24:00+01:00</updated>
    <id>http://philippe.bourgau.net/great-developers-are-free</id>
    <content type="html"><![CDATA[<p>For many reasons. But mostly because they are key to efficiently growing a software organization.</p>

<p><img src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/cat-codes-for-food.jpg" alt="A funny picture sleeping on a keyboard, with the mention 'Will code for food'" /></p>

<h2>A tale of 2 teams</h2>

<p>Let&rsquo;s have a look at 2 software teams in the world of corporate finance.</p>

<h3>The junior in-house team</h3>

<p><a href="http://www.lefigaro.fr/emploi/2013/12/07/09005-20131207ARTFIG00309-bruit-temperature-air8230-les-salaries-reserves-sur-l-open-space.php"><img src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/open-space.jpg" alt="A big corporate open space" /></a></p>

<p>One is an in-house software development team in a large bank. The project already has a bad reputation among developers.The bank has difficulties to hire so the team is constituted of 10 rather junior developers. Unfortunately, without guidance and long term vision, the quality of the code suffers. It looks like an ad-hoc composition of various technologies, glue code, and reinvented frameworks. The overall result is a barely good enough product that costs a small fortune in maintenance and support. The user experience is awful, which make it difficult to the team leaders and the users to collaborate effectively. As a result of all this, the project is suffering from high turnover. Managing this project is really challenging &hellip; and kind of depressing.</p>

<h3>The experienced software team</h3>

<p><a href="http://www.personalized-software.ie/aboutus"><img src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/experienced-team.jpg" alt="An experienced software team" /></a></p>

<p>Now let&rsquo;s imagine the same product developed at a software house. It&rsquo;s been on the market for a while now, but new features are regularly added to it at a good pace. The product is solid and the users are happy using it. The structure of the team is completely different : 5 developers, mainly experienced, coming from various backgrounds. As a result, the team builds on all their different expertises to build real competitive advantages. They tend to get into healthy debates about a lot of things, such as :</p>

<ul>
<li>Should we re-use or re-write ?</li>
<li>Is this gold plating or plain technical debt ?</li>
<li>Which technology should we use to build this ?</li>
</ul>


<p>In the end, that makes the product even better. The human side of the team is also completely different. These experienced developers have all been exposed to the big picture during their careers, and they know things like :</p>

<ul>
<li>&lsquo;Business talk&rsquo; and so they can discuss product topics with the product managers</li>
<li>The best way to go through chores at work is to do them right now</li>
<li>Enough management, testing, ops to make the team self organized</li>
</ul>


<p>The single junior developer in the team tends to mimic this model, and has ease finding mentors, to teach him their trade and to give him career counsels.</p>

<p>As a result, the product and the team remain healthy, and keep providing benefits to all stakeholders.</p>

<h2>Benefits of experienced teams</h2>

<p>First, from a purely short term financial point of view, it&rsquo;s a no brainer ! Even if you pay experienced developers twice as much as juniors, the costs will still be on par. But the difference in created value is huge !</p>

<p>Let&rsquo;s then have a look at the longer term, organizational aspect of things. Obviously, managing such teams requires a lot less work ! Both because of their size and because experienced developers tends to manage themselves very well &hellip; Promoting self-organized &amp; cross-functionnal teams is a great opportunity to reduce the management cost and friction, making the organization more reactive and cost efficient in the long run.</p>

<h2>What is an experienced developer ?</h2>

<p>Obviously, I&rsquo;ve worked with people that were experienced on paper, but not in practice. I <a href="http://www.jrothman.com/htp/interview/2004/12/whats-a-year-of-experience/">read</a> that repeating 10 times the same year of work only amounts to 1 year of experience.</p>

<p>If I was asked to give a definition, I&rsquo;d say that experienced developers have worked on different kind of systems (embedded, web, client, server &hellip;) using different technologies (Java, Ruby, C, Spring, Rails, Javascript &hellip;). Their experiences need not be professional, I&rsquo;ve seen a physics teacher that hacked himself into a great hacker through side projects and open source. Speaking of the subject, good developers always spent a lot of time learning, reading, doing side projects and contributing to open source. Some can be found in local user groups and online programming communities.</p>

<h2>So How do you get them ?</h2>

<p>I can only think of 3 obvious ways :</p>

<ul>
<li>train them</li>
<li>keep them</li>
<li>hire them</li>
</ul>


<p>I&rsquo;m pretty sure training them will not be an issue if you already have enough of them. So that brings us to the 2 other points.</p>

<p><a href="https://www.prestashop.com/blog/en/guided-visit-prestashops-new-paris-headquarters/"><img src="http://philippe.bourgau.net/imgs/2015-12-31-great-developers-are-free/prestashop.jpg" alt="The prestashop offices in Paris" /></a></p>

<p>Lot&rsquo;s of articles have been written about attracting and keeping the best developers. Some companies even made it <a href="http://www.joelonsoftware.com/articles/HighNotes.html">their differentiating point</a>. Here are a few links :</p>

<ul>
<li>In his post <a href="http://avc.com/2012/02/the-management-team-guest-post-from-joel-spolsky/">&ldquo;The Management Team&rdquo;</a> Joel Splosky details the inverted pyramid model</li>
<li>Joel Spolsky&rsquo;s (again) <a href="http://www.joelonsoftware.com/articles/DevelopmentAbstraction.html">Development Abstraction Layer</a> explains all the physical environment that makes programmers happy at work</li>
<li><a href="http://qz.com/169147/applications-have-doubled-to-the-company-that-discloses-its-salaries/">After disclosing employee salaries, Buffer was inundated with resumes</a> when <a href="http::/www.buffer.com">buffer.com</a> publicly disclosed <a href="https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/">their salary formula</a>, the number of applications the company received doubled</li>
<li>Spotify organizes <a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/">Hack Weeks</a> where  the company stops for a while to invent new things</li>
<li>Google summarizes it &ldquo;Do Cool Things That Matters&rdquo; in their long advertises <a href="http://www.google.com/about/careers/lifeatgoogle/">Life At Google</a></li>
</ul>


<p>These are just a few examples and are by no way the only things that motivate developers. To summarize, provide the best working conditions (careful, that not money), and communicate a lot about it.</p>

<h2>Hiring is too important to be left to HR</h2>

<p><a href="https://management30.com/product/workouts/">Jurgen Appelo</a> said</p>

<blockquote><p>Management is too important to be left to managers.</p></blockquote>

<p>I guess the same thing can be said about hiring.</p>

<p>Engineers are absolutely required to take the main role when hiring other engineers. Companies that seriously want to have the best developers on board are spending substantial engineering time on hiring. Here are some well known examples :</p>

<ul>
<li><a href="http://www.google.com/about/careers/lifeatgoogle/hiringprocess/">Google</a> is known to conduct around 9 interviews before hiring someone</li>
<li>In its <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf">Handbook for New Employee</a> Valve explicitly states that hiring is your most important role</li>
</ul>


<h2>Endword</h2>

<p>As <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> said about quality, in <a href="http://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1451733851&amp;sr=8-1&amp;keywords=peopleware">Peopleware</a> :</p>

<blockquote><p>Great developers are free, but only for those who are willing to pay for them</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining GitHub For New Hires]]></title>
    <link href="http://philippe.bourgau.net/mining-github-for-new-hires/"/>
    <updated>2015-08-19T05:30:00+02:00</updated>
    <id>http://philippe.bourgau.net/mining-github-for-new-hires</id>
    <content type="html"><![CDATA[<h2>In search of an experienced software engineer</h2>

<p>We have been trying to hire such a profile for the last year &hellip; The position is hopefully filled now. During that year, we have tried to mine <a href="https://github.com/">github</a> for candidates. Here is how we did it.</p>

<p><img src="http://philippe.bourgau.net/imgs/2015-08-19-mining-github-for-new-hires/github.png" alt="Github's banner" /></p>

<p>Software engineers, especially experienced, are known to be hard to find. Over the past months, we had steadily been improving our hiring process :</p>

<ul>
<li>By regularly rewriting and optimizing our job post</li>
<li>By posting it on Twitter</li>
<li>By defining a precise interview template</li>
</ul>


<p>We went from very few applications to :</p>

<ul>
<li>More applications</li>
<li>More experienced candidates</li>
<li>Regular interviews</li>
<li>Effective interviews</li>
</ul>


<p>Unfortunately, we were still not interviewing candidates as skilled as we would have liked to. We were convinced that we were offering a great job : the project is very interesting, and the team is a dream to work in.</p>

<h2>How could we reach more great devs ?</h2>

<p>Someday, I played with <a href="https://github.com/">github</a>&rsquo;s Rest Api and I managed to write a short ruby script that finds the contributors to a given project that are living near Paris (France).</p>

<p>```ruby
require &lsquo;rubygems&rsquo;
require &lsquo;rest_client&rsquo;
require &lsquo;json&rsquo;</p>

<p>RestClient.proxy = &ldquo;<a href="http://proxy:3128">http://proxy:3128</a>&rdquo;</p>

<p>def github_get(resource)
  JSON.parse(RestClient.get(&ldquo;<a href="https://api.github.com#">https://api.github.com#</a>{resource}&rdquo;, params: {</p>

<pre><code>                          access_token: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
                          per_page: 200}))
</code></pre>

<p>end</p>

<p>repo = ARGV[0]</p>

<p>puts &ldquo;searching for #{repo} contributors in France&rdquo;</p>

<p>contributors = github_get(&ldquo;/repos/#{repo}/contributors&rdquo;)
logins_locations = contributors.map do |user|
  begin</p>

<pre><code>login = user['login']
location = github_get("/users/#{login}")['location']
{login: login, location: location}
</code></pre>

<p>  rescue Exception => e</p>

<pre><code>puts "could not see details of #{login} #{e}"
{login: login }
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;Here are all the contributors&rdquo;
puts logins_locations
french_contributors = logins_locations.select do |login_location|
  location = login_location[:location]
  location != nil and</p>

<pre><code>(location.downcase.include?('france') or
 location.downcase.include?('paris'))
</code></pre>

<p>end</p>

<p>puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;
puts &ldquo;Here are all the frenchcontributors&rdquo;
puts french_contributors
```</p>

<h2>What&rsquo;s next ?</h2>

<p>We eventually filled the position before following our github experiment. We might continue some day though ! Here is a list of improvements I thought of :</p>

<ul>
<li>Gather a list of projects that overlap with what we are building</li>
<li>Search for repositories using some keyword or regular expression</li>
<li>List github users that contributed to such projects, that live near us and that know java</li>
<li>Use more complex algorithms to find best candidates (<a href="http://www.hackdiary.com/2010/02/10/algorithmic-recruitment-with-github/">Algorithmic Recruitment With GitHub</a>)</li>
<li>Spend more time socializing on GitHub (<a href="http://www.sourcecon.com/news/2014/01/21/the-complete-guide-to-recruiting-and-sourcing-candidates-on-github/">The Complete Guide To Recruiting And Sourcing Candidates On GitHub</a>)</li>
</ul>


<p>It really looks like if software is eating recruitment &hellip;</p>
]]></content>
  </entry>
  
</feed>
