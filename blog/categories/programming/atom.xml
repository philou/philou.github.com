<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-06-14T03:46:45+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Legacy Code Coverall Day]]></title>
    <link href="http://philippe.bourgau.net/legacy-code-coverall-day/"/>
    <updated>2016-06-06T04:16:00+00:00</updated>
    <id>http://philippe.bourgau.net/legacy-code-coverall-day</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/2016-06-06-legacy-code-coverall-day/miners.jpg" title="Miners going to work in Coveralls" ></p>

<p>Some days, coding feels like speleology or mining &hellip; Dealing with weird and undocumented old logic can even some time be <a href="https://www.quora.com/How-do-you-keep-your-sanity-while-working-on-a-Super-Dirty-Rotten-Spaghetti-codebase">damaging to the mind</a> ! I think we should go to work wearing the adequate protection !</p>

<p>OK, maybe we cannot start to go to work wearing a coverall everyday, but let&rsquo;s say very 21st of June is now legacy code day, the day when every developer maintaining legacy code comes to work dressed like that !</p>

<p>Obviously, that&rsquo;s a joke, but it could attract the attention of other non-coding people on the state of <em>their</em> codebase and amount of <em>their</em> technical debt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anti Ugly-Code Glasses]]></title>
    <link href="http://philippe.bourgau.net/anti-ugly-code-glasses/"/>
    <updated>2016-06-02T04:33:00+00:00</updated>
    <id>http://philippe.bourgau.net/anti-ugly-code-glasses</id>
    <content type="html"><![CDATA[<p>I think I found a way to fix the dirty code problem once and for all &hellip;</p>

<p>In <a href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy">The Hitchhiker&rsquo;s Guide to the Galaxy</a> Zaphod Beeblebrox has some anti panic glasses. They feature some special danger detection mechanism that turns them opaque black to save their bearer from panicking.</p>

<p><img class="center" src="/imgs/2016-06-02-anti-ugly-code-glasses/zaphod.jpg" title="Zaphod Beeblebrox" ></p>

<p><em>(It turns out that Zaphod has two heads &hellip;)</em></p>

<p>In 2016, it&rsquo;s shocking that some many hours are lost by poor developers reading ugly code.</p>

<p>Let&rsquo;s build anti ugly-code glasses ! We&rsquo;d just need an IDE or editor plugin, connect it to <a href="http://www.sonarqube.org/">Sonar</a> in order to get the quality of the current file, and if too bad, shut the glasses black !</p>

<p>Finally the killer feature for augmented reality glasses !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Keep Up With Software Technologies]]></title>
    <link href="http://philippe.bourgau.net/how-to-keep-up-with-software-technologies/"/>
    <updated>2016-05-30T04:31:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-to-keep-up-with-software-technologies</id>
    <content type="html"><![CDATA[<p>Since I started to program professionally 15 years ago, a lot of things have changes. A lot of technologies appeared and became mainstream while others fell out of fashion.</p>

<p>As software developers, it is really challenging to stay fit and productive in new technologies. I cannot obviously say that I am an expert in all new technologies, but I can say that I can get up to speed in a pretty short time in nearly all.</p>

<p>If there is a single reason for that I strongly believe it is because &ldquo;I studied my classics&rdquo; !</p>

<p><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/outdated.jpg" title="An outdated computed covered in spider webs" ></p>

<h2>How does it work</h2>

<p>At the same time I started to program all day long for my living, I also started to read a lot of programming books on my spare time. This allowed me to learn at night and practice at day, setting everything in my brain.</p>

<p>This might come as a surprise, but I never read a lot of books about the technologies I was using. I&rsquo;d rather study fundamental programming books. These contain a lot of transportable knowledge, unlike in most books about a particular technology.</p>

<p>I believe this is a pretty good use of time since it made me a better programmer and also greatly reduced the time I need to master most new technologies. I can now easily relate them to some more general concept I learned before.</p>

<p>For example, I never read a book about UI. By the time I had to do some UI programming, I had absolutely no issue getting up to speed on the topic. I had already seen quite some UI code examples in other books, I knew that most UI frameworks are built from a set of Object Oriented patterns. Coming from a different perspective, I was even able to suggest improvements to the code that UI experts had not thought of.</p>

<p>That&rsquo;s not to say that I never read books about a particular technology, sometimes, that&rsquo;s just what you need to start something new. But when I do, I usually find them quite easy to read and digest. And I tend to skip things I intuitively understand and use them as cookbooks containing recipes for particular problems rather than end to end walk-through.</p>

<h2>My books</h2>

<h3><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer">The Pragmatic Programmer: From Journeyman to Master</a></h3>

<p><a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1464666382&amp;sr=8-1&amp;keywords=the+pragmatic+programmer"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/the-pragmatic-programmer.jpg" title="Cover of the pragmatic programmer book" ></a></p>

<p>As a young programmer this book made me understand that my job was not only about writing code, but about building maintainable systems. It provided me with tools to do so, 10 years later, I can still remember &ldquo;The power of plain text&rdquo;. This is also the book that made me have a first look into Ruby :).</p>

<h3><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code">Refactoring: Improving the Design of Existing Code</a></h3>

<p><a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1464666776&amp;sr=8-1&amp;keywords=refactoring+improving+the+design+of+existing+code"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/refactoring.jpg" title="Cover of the refactoring book" ></a></p>

<p>Here is the theory behind all automated IDE refactorings. Reading this book had a profound influence on my coding style. The examples made me understand the difference between readable and unreadable code &hellip; It&rsquo;s also the foundation for any kind of incremental design and architecture. That&rsquo;s the book that got me started with TDD.</p>

<h3><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></h3>

<p><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1464666833&amp;sr=8-1&amp;keywords=domain+driven+design+eric+evans"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/ddd.jpg" title="Cover of the DDD book" ></a></p>

<p>This book teaches good object oriented programming. Some say it is tough to read, but it&rsquo;s definitely worth doing so. Among other things, it explains how to use functional programming concept in your object oriented project, by separating Value Objects and Entities for example.</p>

<h3><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6">The C Programming Language</a></h3>

<p><a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=pd_sim_14_2?ie=UTF8&amp;dpID=41qX6YdIJ7L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR122%2C160_&amp;refRID=035C81Y95A0A1C6K25F6"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/c.jpg" title="Cover of the C book" ></a></p>

<p>With around 250 pages, it&rsquo;s pretty difficult to find a programming book with a greater value/page ratio. This one will teach you all there is to learn about C, and help you understand everything that was built on top of C (and that&rsquo;s quite a lot &hellip;)</p>

<h3><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp">Structure and Interpretation of Computer Programs</a></h3>

<p><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1464666981&amp;sr=1-1&amp;keywords=sicp"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/sicp.jpg" title="Cover of the SICP book" ></a></p>

<p>Compared to C, Lisp is at the other side of the language spectrum. Learning C and Lisp gives the ability to put nearly anything in contrast to these 2 languages. Lisp is dynamic, functional and meta. It can be morphed into nearly anything and SICP teaches how to do so. There&rsquo;s a Lisp practice that is invaluable to any programmer : use your language to express your problem as simply as possible. SICP teaches that.</p>

<h3><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming">Programming Erlang: Software for a Concurrent World</a></h3>

<p><a href="http://www.amazon.com/Programming-Erlang-Concurrent-Pragmatic-Programmers/dp/193778553X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1464667113&amp;sr=1-2&amp;keywords=erlang+programming"><img class="center" src="/imgs/2016-05-30-how-to-keep-up-with-software-technologies/erlang.jpg" title="Cover of the Erlang book" ></a></p>

<p>Neither the C book nor SICP deals with distribution and concurrency. That&rsquo;s what this book does. I had never programmed distributed systems before reading this book. After I read it, I learned how to code for distribution in a maintainable way. The lessons taught by Erlang are applicable in many languages.</p>

<h2>Not the best books</h2>

<p>I did not and will never read all programming books available. There might be newer books that treat the same subjects better, but these books are the ones that taught me the most about our craft. My point is that learning fundamentals and things far away from our daily technologies will teach us more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining GitHub For New Hires]]></title>
    <link href="http://philippe.bourgau.net/mining-github-for-new-hires/"/>
    <updated>2015-08-19T05:30:00+00:00</updated>
    <id>http://philippe.bourgau.net/mining-github-for-new-hires</id>
    <content type="html"><![CDATA[<h2>In search of an experienced software engineer</h2>

<p>We have been trying to hire such a profile for the last year &hellip; The position is hopefully filled now. During that year, we have tried to mine <a href="https://github.com/">github</a> for candidates. Here is how we did it.</p>

<p><img class="center" src="/imgs/2015-08-19-mining-github-for-new-hires/github.png" title="Github&rsquo;s banner" ></p>

<p>Software engineers, especially experienced, are known to be hard to find. Over the past months, we had steadily been improving our hiring process :</p>

<ul>
<li>By regularly rewriting and optimizing our job post</li>
<li>By posting it on Twitter</li>
<li>By defining a precise interview template</li>
</ul>


<p>We went from very few applications to :</p>

<ul>
<li>More applications</li>
<li>More experienced candidates</li>
<li>Regular interviews</li>
<li>Effective interviews</li>
</ul>


<p>Unfortunately, we were still not interviewing candidates as skilled as we would have liked to. We were convinced that we were offering a great job : the project is very interesting, and the team is a dream to work in.</p>

<h2>How could we reach more great devs ?</h2>

<p>Someday, I played with <a href="https://github.com/">github</a>&rsquo;s Rest Api and I managed to write a short ruby script that finds the contributors to a given project that are living near Paris (France).</p>

<p>```ruby
require &lsquo;rubygems&rsquo;
require &lsquo;rest_client&rsquo;
require &lsquo;json&rsquo;</p>

<p>RestClient.proxy = &ldquo;<a href="http://proxy:3128">http://proxy:3128</a>&rdquo;</p>

<p>def github_get(resource)
  JSON.parse(RestClient.get(&ldquo;<a href="https://api.github.com#">https://api.github.com#</a>{resource}&rdquo;, params: {</p>

<pre><code>                          access_token: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
                          per_page: 200}))
</code></pre>

<p>end</p>

<p>repo = ARGV[0]</p>

<p>puts &ldquo;searching for #{repo} contributors in France&rdquo;</p>

<p>contributors = github_get(&ldquo;/repos/#{repo}/contributors&rdquo;)
logins_locations = contributors.map do |user|
  begin</p>

<pre><code>login = user['login']
location = github_get("/users/#{login}")['location']
{login: login, location: location}
</code></pre>

<p>  rescue Exception => e</p>

<pre><code>puts "could not see details of #{login} #{e}"
{login: login }
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;Here are all the contributors&rdquo;
puts logins_locations
french_contributors = logins_locations.select do |login_location|
  location = login_location[:location]
  location != nil and</p>

<pre><code>(location.downcase.include?('france') or
 location.downcase.include?('paris'))
</code></pre>

<p>end</p>

<p>puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;
puts &ldquo;Here are all the frenchcontributors&rdquo;
puts french_contributors
```</p>

<h2>What&rsquo;s next ?</h2>

<p>We eventually filled the position before following our github experiment. We might continue some day though ! Here is a list of improvements I thought of :</p>

<ul>
<li>Gather a list of projects that overlap with what we are building</li>
<li>Search for repositories using some keyword or regular expression</li>
<li>List github users that contributed to such projects, that live near us and that know java</li>
<li>Use more complex algorithms to find best candidates (<a href="http://www.hackdiary.com/2010/02/10/algorithmic-recruitment-with-github/">Algorithmic Recruitment With GitHub</a>)</li>
<li>Spend more time socializing on GitHub (<a href="http://www.sourcecon.com/news/2014/01/21/the-complete-guide-to-recruiting-and-sourcing-candidates-on-github/">The Complete Guide To Recruiting And Sourcing Candidates On GitHub</a>)</li>
</ul>


<p>It really looks like if software is eating recruitment &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Programmer's TODO List, Hello Personnal Kanban on Jira]]></title>
    <link href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/"/>
    <updated>2015-08-17T05:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira</id>
    <content type="html"><![CDATA[<p>Not long ago, I wrote that <a href="/real-programmers-have-todo-lists/">Real Programmers have TODO lists</a> &hellip; I was wrong, I now work without a TODO list ! So either I&rsquo;m not a real programmer anymore, or I&rsquo;m actually using TODO List v.2.0. Read on !</p>

<h2>Motivations</h2>

<p>My work has become quite varied lately. On top of programming and pairing, I am also doing quite some coaching within the team. For the whole Murex programmers community, I&rsquo;m organizing <a href="https://github.com/murex/murex-coding-dojo">Coding Dojos</a>, <a href="http://www.brownbaglunch.fr/">Brown Bag Lunches</a> and Technical Talk Video Sessions. Finaly, like all of us, I have to cope with my share of organization overhead.</p>

<p>Multitasking was starting to kill me. I was feeling exhausted at the end of the day, with the certainty that I was not getting much done &hellip;</p>

<h2>Personnal Kanban To The Rescue</h2>

<p><a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a method to organize your work relying on <a href="http://www.personalkanban.com/pk/featured/why-limit-work-in-progress/#sthash.QFI0D8l5.dpbs">Work In Progress limits</a> : it minimizes multitasking and encourages prioritization.</p>

<p>As its name suggests it, <a href="http://personalkanban.com">Personal Kanban</a> is simply applying Kanban to your own tasks. It turns out that :</p>

<ul>
<li>My team tasks are already in <a href="https://www.atlassian.com/software/jira">JIRA</a></li>
<li>Some guys have already tried to <a href="https://jira.atlassian.com/browse/JRA-13472">use JIRA as a todo list</a></li>
<li>JIRA supports Kanban boards with WIP limits and all</li>
</ul>


<h2>The Kanban Board</h2>

<p>In our team, <a href="http://bilal.eltayara.net">TAYARA Bilal</a> had already experimented the approach and asked to JIRA admins to create us a custom project for our todo lists. I piggybacked on it and created my own kanban board. Here is what it looks like.</p>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/board.png" title="Screenshot of the full JIRA board" ></p>

<h3>Mixing Project Stories And Personnal Tasks</h3>

<p>JIRA allows creating a kanban board that spans many projects ! You can simply choose multiple projects when you setup the board for the first time, or you can edit your board filter like this :</p>

<p><code>sql
project in (POPIMDB, POPABTODO) ...
</code></p>

<p>This makes it possible to see <em>all</em> of my work at a glance on the same board.</p>

<h3>Work In Progress Limit</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/wip.png" title="Zoom on the wip constraints of the JIRA column" ></p>

<p>JIRA allows WIP limits, warning me with a red background when I am multitasking or when I am getting late on my tasks</p>

<h3>Color Conventions</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/color-cards.png" title="Different colors of JIRA cards" ></p>

<p>JIRA makes it possible to assign different colors to cards, for example</p>

<ul>
<li>Red for tasks that are due soon</li>
<li>orange for cards that are due some time</li>
<li>light brown for project stories</li>
<li>green for other programming tasks</li>
<li>blue for other tasks</li>
</ul>


<h3>Swimlanes</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/swimlanes.png" title="Closup on a JIRA swimlane" ></p>

<p>JIRA has swimlanes, separating project from personal tasks</p>

<h3>Reports</h3>

<p>An extra bonus with JIRA Kanban board is that they have reports ! Here is my cumulative flow diagram for my first week of usage :</p>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/cumulative-flow.png" title="A screenshot of the JIRA cumulative flow diagram" ></p>

<h3>Configuration</h3>

<p>Here is the JQL query I used to configure it this way.</p>

<p>```sql
&mdash; board filter
project in (POPIMDB, POPABTODO) AND (Assignee = pbourgau OR Co-Assignees in (pbourgau) OR mentors in (pbourgau)) AND (status != CLOSED OR updated >= -1d) ORDER BY Rank ASC</p>

<p>&mdash; Swimlanes
priority = &ldquo;1-Very High&rdquo; &mdash; Expedite
project in (&ldquo;POP IMDB&rdquo;) and (labels not in (SLACK) OR labels is EMPTY) &mdash; IMDB Stories
&mdash; and a blank filter for Other Tasks</p>

<p>&mdash; Card Colours
duedate &lt;= 7d or priority = &ldquo;1-Very High&rdquo; &mdash; red
duedate is not EMPTY &mdash; orange
labels in (SLACK) &mdash; green
type = Task &mdash; blue
&mdash; and an empty filter for light brown
```</p>

<h2>The End Result</h2>

<p>By setting a WIP limit of 3 on the &ldquo;In Progress&rdquo; column, the following naturally happened :</p>

<ul>
<li>Once I have started a programming task, I now defer any other activity in the TODO column until I am finished. (HINT: If you get invited to meetings all the time, lock your agenda with &lsquo;Unbookable&rsquo; days when you start programming)</li>
<li>It actually pushed me into finishing the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> training I had started long ago.</li>
</ul>


<p>I also set a high WIP limit (around 10) on the TODO column, this way, I get a kind of warning that next time I finish a programming task, I should take some time off to prune the column.</p>

<p>The overall result is that I do lot less multitasking. I get the feeling of doing steadier, more efficient work.</p>

<p>If you are suffering from multitasking and decide to give it a try, I&rsquo;d love to read about your experience !</p>
]]></content>
  </entry>
  
</feed>
