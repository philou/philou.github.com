<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-01-08T09:38:13+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mining GitHub For New Hires]]></title>
    <link href="http://philippe.bourgau.net/mining-github-for-new-hires/"/>
    <updated>2015-08-19T05:30:00+00:00</updated>
    <id>http://philippe.bourgau.net/mining-github-for-new-hires</id>
    <content type="html"><![CDATA[<h2>In search of an experienced software engineer</h2>

<p>We have been trying to hire such a profile for the last year &hellip; The position is hopefully filled now. During that year, we have tried to mine <a href="https://github.com/">github</a> for candidates. Here is how we did it.</p>

<p><img class="center" src="/imgs/2015-08-19-mining-github-for-new-hires/github.png" title="Github&rsquo;s banner" ></p>

<p>Software engineers, especially experienced, are known to be hard to find. Over the past months, we had steadily been improving our hiring process :</p>

<ul>
<li>By regularly rewriting and optimizing our job post</li>
<li>By posting it on Twitter</li>
<li>By defining a precise interview template</li>
</ul>


<p>We went from very few applications to :</p>

<ul>
<li>More applications</li>
<li>More experienced candidates</li>
<li>Regular interviews</li>
<li>Effective interviews</li>
</ul>


<p>Unfortunately, we were still not interviewing candidates as skilled as we would have liked to. We were convinced that we were offering a great job : the project is very interesting, and the team is a dream to work in.</p>

<h2>How could we reach more great devs ?</h2>

<p>Someday, I played with <a href="https://github.com/">github</a>&rsquo;s Rest Api and I managed to write a short ruby script that finds the contributors to a given project that are living near Paris (France).</p>

<p>```ruby
require &lsquo;rubygems&rsquo;
require &lsquo;rest_client&rsquo;
require &lsquo;json&rsquo;</p>

<p>RestClient.proxy = &ldquo;<a href="http://proxy:3128">http://proxy:3128</a>&rdquo;</p>

<p>def github_get(resource)
  JSON.parse(RestClient.get(&ldquo;<a href="https://api.github.com#">https://api.github.com#</a>{resource}&rdquo;, params: {</p>

<pre><code>                          access_token: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
                          per_page: 200}))
</code></pre>

<p>end</p>

<p>repo = ARGV[0]</p>

<p>puts &ldquo;searching for #{repo} contributors in France&rdquo;</p>

<p>contributors = github_get(&ldquo;/repos/#{repo}/contributors&rdquo;)
logins_locations = contributors.map do |user|
  begin</p>

<pre><code>login = user['login']
location = github_get("/users/#{login}")['location']
{login: login, location: location}
</code></pre>

<p>  rescue Exception => e</p>

<pre><code>puts "could not see details of #{login} #{e}"
{login: login }
</code></pre>

<p>  end
end</p>

<p>puts &ldquo;Here are all the contributors&rdquo;
puts logins_locations
french_contributors = logins_locations.select do |login_location|
  location = login_location[:location]
  location != nil and</p>

<pre><code>(location.downcase.include?('france') or
 location.downcase.include?('paris'))
</code></pre>

<p>end</p>

<p>puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;
puts &ldquo;Here are all the frenchcontributors&rdquo;
puts french_contributors
```</p>

<h2>What&rsquo;s next ?</h2>

<p>We eventually filled the position before following our github experiment. We might continue some day though ! Here is a list of improvements I thought of :</p>

<ul>
<li>Gather a list of projects that overlap with what we are building</li>
<li>Search for repositories using some keyword or regular expression</li>
<li>List github users that contributed to such projects, that live near us and that know java</li>
<li>Use more complex algorithms to find best candidates (<a href="http://www.hackdiary.com/2010/02/10/algorithmic-recruitment-with-github/">Algorithmic Recruitment With GitHub</a>)</li>
<li>Spend more time socializing on GitHub (<a href="http://www.sourcecon.com/news/2014/01/21/the-complete-guide-to-recruiting-and-sourcing-candidates-on-github/">The Complete Guide To Recruiting And Sourcing Candidates On GitHub</a>)</li>
</ul>


<p>It really looks like if software is eating recruitment &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Programmer's TODO List, Hello Personnal Kanban on Jira]]></title>
    <link href="http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/"/>
    <updated>2015-08-17T05:46:00+00:00</updated>
    <id>http://philippe.bourgau.net/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira</id>
    <content type="html"><![CDATA[<p>Not long ago, I wrote that <a href="/real-programmers-have-todo-lists/">Real Programmers have TODO lists</a> &hellip; I was wrong, I now work without a TODO list ! So either I&rsquo;m not a real programmer anymore, or I&rsquo;m actually using TODO List v.2.0. Read on !</p>

<h2>Motivations</h2>

<p>My work has become quite varied lately. On top of programming and pairing, I am also doing quite some coaching within the team. For the whole Murex programmers community, I&rsquo;m organizing <a href="https://github.com/murex/murex-coding-dojo">Coding Dojos</a>, <a href="http://www.brownbaglunch.fr/">Brown Bag Lunches</a> and Technical Talk Video Sessions. Finaly, like all of us, I have to cope with my share of organization overhead.</p>

<p>Multitasking was starting to kill me. I was feeling exhausted at the end of the day, with the certainty that I was not getting much done &hellip;</p>

<h2>Personnal Kanban To The Rescue</h2>

<p><a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a> is a method to organize your work relying on <a href="http://www.personalkanban.com/pk/featured/why-limit-work-in-progress/#sthash.QFI0D8l5.dpbs">Work In Progress limits</a> : it minimizes multitasking and encourages prioritization.</p>

<p>As its name suggests it, <a href="http://personalkanban.com">Personal Kanban</a> is simply applying Kanban to your own tasks. It turns out that :</p>

<ul>
<li>My team tasks are already in <a href="https://www.atlassian.com/software/jira">JIRA</a></li>
<li>Some guys have already tried to <a href="https://jira.atlassian.com/browse/JRA-13472">use JIRA as a todo list</a></li>
<li>JIRA supports Kanban boards with WIP limits and all</li>
</ul>


<h2>The Kanban Board</h2>

<p>In our team, <a href="http://bilal.eltayara.net">TAYARA Bilal</a> had already experimented the approach and asked to JIRA admins to create us a custom project for our todo lists. I piggybacked on it and created my own kanban board. Here is what it looks like.</p>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/board.png" title="Screenshot of the full JIRA board" ></p>

<h3>Mixing Project Stories And Personnal Tasks</h3>

<p>JIRA allows creating a kanban board that spans many projects ! You can simply choose multiple projects when you setup the board for the first time, or you can edit your board filter like this :</p>

<p><code>sql
project in (POPIMDB, POPABTODO) ...
</code></p>

<p>This makes it possible to see <em>all</em> of my work at a glance on the same board.</p>

<h3>Work In Progress Limit</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/wip.png" title="Zoom on the wip constraints of the JIRA column" ></p>

<p>JIRA allows WIP limits, warning me with a red background when I am multitasking or when I am getting late on my tasks</p>

<h3>Color Conventions</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/color-cards.png" title="Different colors of JIRA cards" ></p>

<p>JIRA makes it possible to assign different colors to cards, for example</p>

<ul>
<li>Red for tasks that are due soon</li>
<li>orange for cards that are due some time</li>
<li>light brown for project stories</li>
<li>green for other programming tasks</li>
<li>blue for other tasks</li>
</ul>


<h3>Swimlanes</h3>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/swimlanes.png" title="Closup on a JIRA swimlane" ></p>

<p>JIRA has swimlanes, separating project from personal tasks</p>

<h3>Reports</h3>

<p>An extra bonus with JIRA Kanban board is that they have reports ! Here is my cumulative flow diagram for my first week of usage :</p>

<p><img class="center" src="/imgs/2015-08-17-bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/cumulative-flow.png" title="A screenshot of the JIRA cumulative flow diagram" ></p>

<h3>Configuration</h3>

<p>Here is the JQL query I used to configure it this way.</p>

<p>```sql
&mdash; board filter
project in (POPIMDB, POPABTODO) AND (Assignee = pbourgau OR Co-Assignees in (pbourgau) OR mentors in (pbourgau)) AND (status != CLOSED OR updated >= -1d) ORDER BY Rank ASC</p>

<p>&mdash; Swimlanes
priority = &ldquo;1-Very High&rdquo; &mdash; Expedite
project in (&ldquo;POP IMDB&rdquo;) and (labels not in (SLACK) OR labels is EMPTY) &mdash; IMDB Stories
&mdash; and a blank filter for Other Tasks</p>

<p>&mdash; Card Colours
duedate &lt;= 7d or priority = &ldquo;1-Very High&rdquo; &mdash; red
duedate is not EMPTY &mdash; orange
labels in (SLACK) &mdash; green
type = Task &mdash; blue
&mdash; and an empty filter for light brown
```</p>

<h2>The End Result</h2>

<p>By setting a WIP limit of 3 on the &ldquo;In Progress&rdquo; column, the following naturally happened :</p>

<ul>
<li>Once I have started a programming task, I now defer any other activity in the TODO column until I am finished. (HINT: If you get invited to meetings all the time, lock your agenda with &lsquo;Unbookable&rsquo; days when you start programming)</li>
<li>It actually pushed me into finishing the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> training I had started long ago.</li>
</ul>


<p>I also set a high WIP limit (around 10) on the TODO column, this way, I get a kind of warning that next time I finish a programming task, I should take some time off to prune the column.</p>

<p>The overall result is that I do lot less multitasking. I get the feeling of doing steadier, more efficient work.</p>

<p>If you are suffering from multitasking and decide to give it a try, I&rsquo;d love to read about your experience !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actors and Green Threads in Java Demystified]]></title>
    <link href="http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified/"/>
    <updated>2015-08-15T13:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified</id>
    <content type="html"><![CDATA[<p>After finishing my <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>, one of the things that most surprised me, is how simple it was to prototype the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model</a> in Java using <a href="https://en.wikipedia.org/wiki/Green_threads">Green Threads</a>.</p>

<h2>The Code</h2>

<p>First, here is the base class for all actors.</p>

<p>```java
public class Actor implements Runnable {</p>

<pre><code>private final ExecutorService threadPool;
private final ConcurrentLinkedQueue&lt;Runnable&gt; mailbox = new ConcurrentLinkedQueue&lt;&gt;();
private boolean stoped;

public Actor(ExecutorService threadPool) {
    this.threadPool = threadPool;
}

public void run() {
    if (stoped) {
        return;
    }

    Runnable nextMessage = mailbox.poll();
    if (nextMessage != null) {
        nextMessage.run();
    }
    submitContinuation();
}

public void start() {
    submitContinuation();
}

protected void stop() {
    stoped = true;
}

protected void send(Runnable runnable) {
    mailbox.add(runnable);
}

private void submitContinuation() {
    threadPool.submit(this);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>As you can see, I simply used Runnable as the type of the messages.</p>

<p>The Actor itself is Runnable, meaning that it can be submitted to the thread pool. When executed :</p>

<ol>
<li>it tries to handle a message from the mailbox if there is one.</li>
<li>It then re-submits the actor itself</li>
</ol>


<p>This ensures that only one thread is executing messages on an actor at a given time, and it also avoids spawning new thread for every new actor.</p>

<p>As an example, here is how I used this to make an actor of an existing InProcessChatRoom class.</p>

<p>```java
public interface ChatRoom {</p>

<pre><code>void broadcast(Output client, String message);
...
</code></pre>

<p>}
```</p>

<p>```java
public class InProcessChatRoom implements ChatRoom {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>```java
public class ChatRoomActor extends Actor implements ChatRoom {</p>

<pre><code>private final ChatRoom realChatroom;

public ChatRoomActor(ChatRoom realChatroom, ExecutorService threadPool) {
    super(threadPool);
    this.realChatroom = realChatroom;
    start();
}

@Override
public void broadcast(final Output client, final String message) {
    send(new Runnable() {
        @Override
        public void run() {
            realChatroom.broadcast(client, message);
        }
    });
}
...
</code></pre>

<p>}
```
ChatRoomActor is in fact some kind of proxy to use from other actors to send messages to the chat room.</p>

<p>As with any implementation of the Actors Model, the neet thing is the separation of threading and logic. That makes it so much simpler ! (You can get more detail about the complexity I am talking about by taking a look at the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>)</p>

<h2>Performances</h2>

<p>Here is a performance summary of this implementation compared to others on a &ldquo;throughput vs clients&rdquo; benchmark of the style &ldquo;Enter while others are talking&rdquo;</p>

<p><a href="https://github.com/philou/concurrency-kata"><img class="center" src="https://raw.githubusercontent.com/philou/concurrency-kata/master/enter-while-others-are-talking.png" title="Result graphs of benchmark enter while others are talking" ></a></p>

<p>Results can be disappointing compared to other implementations but the example itself is a bit misleading. The chatroom does exclusively message passing, there is not much computation to parallelize, in a different setting, the results would have been completely different.</p>

<h2>Limitations</h2>

<p>As you can see, this implementation is just a quick prototype, nothing production ready. Here are the main limitations I can think of right now :</p>

<ul>
<li>It uses <a href="https://en.wikipedia.org/wiki/Busy_waiting">Busy Waiting</a> for the next message, meaning that it consumes unnecessary resources, and that more important messages to other Actors might be delayed</li>
<li>Usually, actor messages are selected on their type rather than on their order of arrival, this is not the case here</li>
<li>The usage of the Runnable interface as base message type, though handy, opens the door to inter-thread calls that might violate the model altogether</li>
<li>There is absolutely no support of out of process actors until the messages are Serializable</li>
</ul>


<h2>Going Further</h2>

<p>I started this <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> as a training material about concurrency for colleagues at <a href="http://www.murex.com">work</a>. In the spirit of the coding kata, it&rsquo;s a git repo you can walk, explore and experiment with.</p>

<p>So if you want to learn more about different models of concurrency, you are welcome to have a look at the How-To section in the <a href="https://github.com/philou/concurrency-kata">README</a> file.</p>

<p>On my part, although it was a lot more work than I would have guessed at the beginning, I barely scratch the surface of the subject ! I could now :</p>

<ul>
<li>extract the <a href="https://fr.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> or Actor implementation and make them more robust</li>
<li>practice and present the whole kata as a 2 hours live coding session</li>
<li>prepare a hands-on training about concurrency</li>
</ul>


<p>So, if you are willing to do any of the above you are welcome to contribute !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Programmers Have Todo Lists]]></title>
    <link href="http://philippe.bourgau.net/real-programmers-have-todo-lists/"/>
    <updated>2015-04-20T05:42:00+00:00</updated>
    <id>http://philippe.bourgau.net/real-programmers-have-todo-lists</id>
    <content type="html"><![CDATA[<p>Productive programmers maintain a todo list. No Exception.</p>

<p><img class="center" src="/imgs/2015-04-20-real-programmers-have-todo-lists/programmer.jpg" title="A programmer concentrating on his code" ></p>

<h2>Why is it so important</h2>

<p>As programmers, here is the typical internal discussion we have all day long :</p>

<blockquote><p>- Why the hell am I doing this again ?<br>
&hellip; hard thinking &hellip;<br>
- Yes ! I remember now :<br>
- Encapsulate this field<br>
- In order to move it to another class<br>
- In order to move this other function there too<br>
- In order to be able to remove that other static variable<br>
- In order to refactor the login module<br>
- In order to remove the dependency between the custom search query generator and the login module<br>
- In order to refactor the query generator<br>
- In order to be able to optimize it<br>
- In order to speed up the whole website !</p></blockquote>

<p>Phew, now that&rsquo;s a list ! A 9 frame stack, all in our heads, and that&rsquo;s only a simple example. Knowing that us humans usually have around 7 &lsquo;registers&rsquo; in our brains, this makes a lot of clutter to remember.</p>

<p>Maintaining all this in a todo list frees us some brainpower !</p>

<h2>What happens when you use a todo list</h2>

<p>Quite a lot in fact :</p>

<p><img class="center" src="/imgs/2015-04-20-real-programmers-have-todo-lists/check.gif" title="A tick in a check box" ></p>

<ul>
<li>It&rsquo;s satisfying to check something as done !</li>
<li>Our programming gets better, because we can fully concentrate on it</li>
<li>We have a clear idea about what&rsquo;s done, what&rsquo;s still to be done, and why we are doing it</li>
<li>We avoid getting lost in things that don&rsquo;t really need to be done</li>
<li>We can make better choices about what to do, what to postpone, and what not to do</li>
<li>We can make more accurate estimates about the time it will take to finish the job</li>
</ul>


<p>In the end, all this makes you feel less stressed and more productive !</p>

<h2>How to do it</h2>

<p>There are many ways to maintain a todo list. Which to choose is not as important as having one. Here are my 2 design principles for a todo list system :</p>

<ul>
<li>It goes in finer details than a typical bug tracking software</li>
<li>It should help you to concentrate on the few items you can do in the coming hours</li>
</ul>


<p>For example, I am now using a simple TODAY &hellip; TOMORROW &hellip; LATER &hellip; scheme. I tend to avoid deep hierarchies as it gets in the way of my second principle. I like to keep DONE items visible to keep track of what I did for up to 1 day.</p>

<p><img class="center" src="/imgs/2015-04-20-real-programmers-have-todo-lists/org-mode.jpg" title="A screen shot of my org-mode todo list" ></p>

<p>Here is a list of tools you can use to set up a todo list :</p>

<ul>
<li>Any text editor using a simple format convention will do</li>
<li><a href="http://www.dropbox.com">Dropbox</a> or any other synchronization tool can be helpful to access it from different places</li>
<li><a href="http://orgmode.org/">Org Mode</a> of <a href="https://www.gnu.org/software/emacs/">Emacs</a> has built-in support for todo lists. It&rsquo;s a simple text file, but with color highlighting and shortcuts</li>
<li><a href="https://keep.google.com/">Google Keep</a> might do just fine for you</li>
<li><a href="https://docs.google.com">Google Docs</a> can also be useful, especially if you need to share your todo list with others (when pair programming for example)</li>
<li><a href="https://trello.com">Trello</a> is also a good one, it can even be used as a personal kanban board</li>
<li>Any other todo list tool that suits you !</li>
</ul>


<p>If you are not already using a todo list, start now and become more productive ! No excuse !</p>

<p>EDIT 2015-08-18 : <a href="/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">I am now using Personnal Kanban instead of TODO lists</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding as a living can be dangerous to your health]]></title>
    <link href="http://philippe.bourgau.net/coding-as-a-living-can-be-dangerous-to-your-health/"/>
    <updated>2014-05-05T06:49:00+00:00</updated>
    <id>http://philippe.bourgau.net/coding-as-a-living-can-be-dangerous-to-your-health</id>
    <content type="html"><![CDATA[<p><a href="https://groups.google.com/forum/#!topic/comp.lang.c++/rYCO5yn4lXw">In 1991, John F. Woods wrote</a> :</p>

<blockquote><p>Always code as if the guy who ends up maintaining your code will be a
violent psychopath who knows where you live.  Code for readability.</p></blockquote>

<p>Here is how it might go :</p>

<p><img class="center" src="/imgs/2014-05-05-coding-as-a-living-can-be-dangerous-to-your-health/psychopath-coworker.JPG" title="Simple drawing of the psychopath coworker begging his teammate for a speak &hellip; with an axe !" ></p>
]]></content>
  </entry>
  
</feed>
