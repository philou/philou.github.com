<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-07-21T08:26:43+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to start learning the tao of incremental code refactoring today]]></title>
    <link href="http://philippe.bourgau.net/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/"/>
    <updated>2017-07-21T08:05:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-start-learning-the-tao-of-incremental-code-refactoring-today</id>
    <content type="html"><![CDATA[<p>In my <a href="/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">last post</a>, I explained why incremental refactoring techniques will make you both more productive and relaxed.</p>

<p>As anything worth its salt, the path to full mastery is long and requires dedication. The good news is that you&rsquo;ll start to feel the benefits long before you are a master.</p>

<h2>Dedicated Practice</h2>

<p>The quickest thing that will get you up to speed is dedicated practice. Take some time to do some exercices outside of any &lsquo;production&rsquo; code.</p>

<h3>TDD Coding Katas</h3>

<p>The most famous practice to learn TDD also works very well to learn refactoring. That shouldn&rsquo;t be a surprise as incremental refactoring is an integral part of TDD.</p>

<p>There are many ways to do your first coding kata. You could find a coding dojo near you (ask <a href="https://www.meetup.com/">meetup.com</a>). Or you could find motivated colleagues to start one at your company &hellip; I wrote in more details about how to attend a coding dojo in <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">this post</a>.</p>

<p><a href="https://www.amazon.com/gp/product/919811803X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=919811803X&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=340ea938a5e4f00178676804ac6c2278"><img src="../imgs/2017-07-21-how-to-start-learning-the-tao-of-incremental-code-refactoring-today/coding-dojo.jpg" alt="Emily Bache's Coding Dojo book cover" /></a></p>

<p>You can also practice katas on your own. My friend <a href="https://twitter.com/tpierrain">Thomas Pierrain</a> rehearses the same katas to discover deeper insights.</p>

<h3>Refactoring Golf</h3>

<p>The goal of incremental refactoring is to keep the code production ready all the time. Smaller commits is one happy consequence of that.</p>

<p>You can stretch your refactoring muscles by doing coding katas and keeping the code compiling all the time. You&rsquo;ll need to master your IDE and its automated refactoring. Most of all, it will shift your attention from the goal to the path !</p>

<p>I learned at <a href="https://www.spaconference.org/spa2017/">SPA conference</a> that we call this &lsquo;Refactoring golf&rsquo;. The name comes from Golf contests, <a href="http://wiki.c2.com/?PerlGolf">popular in the Perl community</a>. Their goal is to write the shortest program possible to do a specific goal. The goal of a Refactoring Golf is to go from code A to code B in the fewest transformations possible.</p>

<p>They are a few <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=refactoring+golf&amp;type=">refactoring golf repos on Github</a>, I tried one and found it fun ! Give it a try too !</p>

<h2>Study some theory</h2>

<p>Real mastery does not come by practice alone. Studying theory alongside practice yields deeper insights. Theory enables to put your practice into perspective and to find ways to improve it. It saves you from getting stuck in bad habits. It also saves you from having to rediscover everything by yourself.</p>

<h3>Develop your design taste</h3>

<p>In <a href="http://www.paulgraham.com/taste.html">Taste for Makers</a> Paul Graham explains why taste for is fundamental to programming. Taste is what allows you to judge if code is nice or bad in a few seconds. Taste is subjective, intuitive and fast, unlike rules which are objective but slower. Expert designers use taste to pinpoint issues and good points in code on the spot.</p>

<p>Within the fast TDD &ndash; Refactoring loop, taste is the tool of choice to drive the design. Guess what : we can all improve our design taste !</p>

<p><a href="https://blog.codinghorror.com/code-smells/">Code smells</a> are the first things to read about to improve your design taste. Once you know them well enough, it will be possible to spot things that might need refactoring as you code.</p>

<p>Spotting problems is nice, but finding solutions is better ! <a href="https://en.wikipedia.org/wiki/Software_design_pattern">Design Patterns</a> are just that &hellip; There has been a lot of controversy around Design Patterns. If overusing them leads to bloated code, using them to fix strong smells makes a lot of sense. There is even a book about the subject :</p>

<p><a href="https://www.amazon.com/gp/product/0321213351/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321213351&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=d79d093008fb9e77f75ea2089d6cbdae"><img src="../imgs/2017-07-21-how-to-start-learning-the-tao-of-incremental-code-refactoring-today/refactoring-to-patterns.jpg" alt="Joshua Kerievsky's Refactoring To Patterns book cover" /></a></p>

<p>Finally, there&rsquo;s a third and most common way to improve our design taste. It&rsquo;s to read code ! The more code we read, the better our brain becomes at picking small clues about what nice and what is not. It&rsquo;s important to read clean code but also bad code. To read code in different languages. Code built on different frameworks. </p>

<p>So, read code at work, read code in books, read code in open source libraries, good code, legacy code &hellip;</p>

<h3>Learn your refactorings</h3>

<p>As with most topics in programming there is a reference book about refactoring. It&rsquo;s Martin Fowlers&rsquo;s <a href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=73fc09a5a451402a7036509ae62e8c66">Refactoring, improving the design of existing code</a>. Everything is in there, smells, unit testing and a repository of refactoring walkthroughs.</p>

<p><a href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=73fc09a5a451402a7036509ae62e8c66"><img src="../imgs/2017-07-21-how-to-start-learning-the-tao-of-incremental-code-refactoring-today/refactoring.jpg" alt="Martin Fowler's refactoring book cover" /></a></p>

<p>The book is said to be a difficult read, but the content is worth gold. If you have the grit, give it a try ! At the end, you should understand how your IDE does automated refactoring. You should also be able to perform all the refactorings that your IDE does not provide by hand ! This will enlarge your refactoring toolbox, and help you to drive larger refactorings from A to B.</p>

<h2>Develop a refactoring attitude</h2>

<p>Practice makes perfect. Whatever our refactoring skill, there is something to learn by practicing more.</p>

<h3>Make it a challenge</h3>

<p>As you are coding, whenever you find a refactoring to do to your code, make it a challenge to perform it in baby steps. Try to keep the code compiling and the tests green as much as possible.</p>

<p>When things go wrong, revert instead of pushing forward. Stop and think, try to find a different path.</p>

<p>If you are pairing, challenge your pair to find a safer track.</p>

<p>This might delay you a bit at first, but you&rsquo;ll also be able to submit many times per day. You&rsquo;ll see that your refactoring muscles will grow fast. You should see clear progress in only 1 or 2 weeks.</p>

<h3>Team up against long refactorings</h3>

<p>If your team prioritizes a user story that will need some re-design, try to agree on a refactoring plan. The idea is to find a coarse grain path that will allow you to commit and deliver many times. This plan might also help you to share the work on the story.</p>

<p>Having to question and explain your assumptions will speed up your learning. </p>

<h2>Legacy code</h2>

<p>Refactoring is most useful with bad legacy code. Unfortunately, it also where it is the most difficult. Next week&rsquo;s blog post will be about what we can do to learn how to refactor legacy code.</p>

<p>That was my second post in this mini-series about refactoring. First one was <a href="/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/">7 Reasons Why Learning Refactoring Techniques Will Improve Your Life as a Software Engineer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 reasons why learning refactoring techniques will improve your life as a software engineer]]></title>
    <link href="http://philippe.bourgau.net/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/"/>
    <updated>2017-07-10T09:10:00+02:00</updated>
    <id>http://philippe.bourgau.net/7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer</id>
    <content type="html"><![CDATA[<p>This post is a bold promise. Mastering incremental refactoring techniques makes our lives as software engineers more enjoyable.</p>

<p>I have already made the <a href="/from-apprentice-to-master-how-to-learn-tdd-test-driven-development/">same statement about TDD before</a>. As <a href="http://www.extremeprogramming.org/rules/refactor.html">refactoring</a> is a part of TDD, one could think I am repeating myself. At the same time, a <a href="https://blogs.msdn.microsoft.com/ericgu/2017/06/22/notdd/">recent Microsoft blog post</a> argued that refactoring is more important than TDD. Even though I&rsquo;m a TDD fan, that&rsquo;s an interesting point.</p>

<p>Incremental refactoring is key to make releases non-events ! As early as 2006, using <a href="https://en.wikipedia.org/wiki/Extreme_programming">XP</a>, we were releasing mission critical software without bugs ! We would deliver a new version of our software to a horde of angry traders and go to the movies without a sweat !</p>

<p>What&rsquo;s so special about incremental refactoring ?</p>

<h2>Avoid the tunnel effect</h2>

<p><img src="../imgs/2017-07-10-7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/tunnel.jpg" alt="A long tunnel" /></p>

<p>Mastering incremental refactoring techniques allows to break a feature down to baby steps. Not only smaller commits, but also smaller releases ! You can deploy and validate every step in production before we move to the next !</p>

<p>Small releases are also a lot easier to fix than big bang deployments. That alone is a good enough reason to deploy in baby steps.</p>

<p>There are a lot of other advantages to small deployments. Merges become straightforward. Someone can take over your work if you get sick. Finally, it&rsquo;s also easier to switch to another urgent task if you need to.</p>

<h2>Deliver early</h2>

<p>When you know that you will be able to improve your work later on, it becomes possible to stick to what&rsquo;s needed <em>now</em>. After spending some time working on a feature, it might turn out that you delivered enough value. Between enhancing this feature and starting another one, pick the most valuable. Don&rsquo;t be able to switch. Incremental refactoring, makes it easy to resume later on if it makes sense.</p>

<p>Real productivity is not measured through code, but through feature value. This explains why incremental refactoring is more productive than up-front / big-bang development.</p>

<h2>Know where you stand</h2>

<p>As you&rsquo;ll work through your feature, you&rsquo;ll have to keep track of the done and remaining steps. As you go through this todo list and deliver every successive step, you get a pretty clear idea of where you stand. You&rsquo;ll know that you&rsquo;ve done 3 out of 7 steps for example. It helps everyone to know what&rsquo;s the remaining work and when you&rsquo;ll be able to work on something else.</p>

<p><img src="../imgs/2017-07-10-7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/wool-tangled.jpg" alt="Tangled wool" /></p>

<p>A few times, I fell in the trap of features that should have taken a few hours and that lingered for days. I remember how stupid I was feeling every morning, explaining to my colleagues that it was more complex than I had thought, but that it should be finished before tomorrow &hellip; Learning incremental refactoring techniques saved me from these situations.</p>

<h2>Deliver unexpected feature</h2>

<p>Incremental refactoring techniques improves the code. As a systematic team wide effort, it keeps the code healthy and evolutive. When someone requests an unexpected feature late, you&rsquo;ll be able to deliver it.</p>

<p>This should improve your relation with product people. They will be very happy when you build their latest idea without a full redesign.</p>

<h2>Avoids rewrites</h2>

<p>Joel Spolsky wrote a long time ago that rewriting a large piece of software is the <a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/">number 1 thing not to do</a> ! All my experiences in rewriting systems have been painful and stressful.</p>

<p>It always starts very rosy. Everyone is feeling very productive with the latest tools and technologies. Unfortunately, it takes a lot of features to replace the existing system. As always with software, the time estimates for the rewrite are completely wrong. As a result, everyone starts grumbling about why this rewrite is taking so long. The fact that the legacy system is still evolving does not help either. Long story short, the greenfield project ends up cutting corners and taking technical debt pretty fast &hellip; fueling the infamous vicious circle again.</p>

<p>Incremental refactoring techniques offer an alternative. It enables to change and improve the architecture of the legacy system. It <em>looks</em> longer, but it&rsquo;s always less risky. And looking back, it&rsquo;s almost always faster as well !</p>

<h2>Ease pair programming</h2>

<p>eXtreme Programming contains a set of practices that reinforce each other. As I wrote at the beginning, refactoring goes hand in hand with TDD. <a href="/blog/categories/pair-programming/">Pair programming</a> is another practice of XP.</p>

<p><a href="http://www.extremeprogramming.org/map/code.html"><img src="../imgs/2017-07-10-7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/xp-practices.GIF" alt="Tangled wool" /></a><div class="image-credits">From <a href="http://www.extremeprogramming.org/">www.extremeprogramming.org/</a></div></p>

<p>TDD and Refactoring simplify pair programming. When a pair is doing incremental refactoring, they only need to discuss and agree on the design at hand. They know that however the design needs to evolve in the long term, they&rsquo;ll be able to refactor it. It&rsquo;s a lot easier to pair program if you don&rsquo;t have to agree on all the details of the long term design &hellip;</p>

<p>In turn, pair programming fosters <a href="http://www.extremeprogramming.org/rules/collective.html">collective code ownership</a>. Collective code ownership increases the <a href="https://en.wikipedia.org/wiki/Bus_factor">truck factor</a>. Which reduces the project risks and makes the team&rsquo;s productivity more stable. In the long run, this makes the work experience more sustainable and less stressful.</p>

<h2>Simplify remote work</h2>

<p>Refactoring will also save you from the commutes and allow you to work closer to the ones you love !</p>

<p>Refactoring techniques enable small commits. Small commits simplify code reviews, which are key to remote or distributed work. Even if you are doing <a href="/rexp-remote-extreme-programming/">remote pair programming</a>, small commits help to switch the control between buddies more often.</p>

<p><a href="https://www.amazon.com/gp/product/B00I800FFY/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00I800FFY&amp;linkCode=as2&amp;tag=pbourgau-20&amp;linkId=9873e69d645cba27701f4b3744acab0e"><img src="../imgs/2017-07-10-7-reasons-why-learning-refactoring-techniques-will-improve-your-life-as-a-software-engineer/remote-pairing.jpg" alt="Tangled wool" /></a></p>

<h2>To be continued</h2>

<p>I hope that by now I persuaded you to learn incremental refactoring techniques. My <a href="/how-to-start-learning-the-tao-of-incremental-code-refactoring-today/">next post</a> will dig into the details about how to do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get your team to do code reviews]]></title>
    <link href="http://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews/"/>
    <updated>2017-04-19T09:18:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-get-your-team-to-do-code-reviews</id>
    <content type="html"><![CDATA[<p>As software developers, we very <del>always</del> often get to work in code bases that are not perfect. In this situation we have 3 choices : leave, grumble, or make some changes ! Team wide code reviews are a recognized way to increase the quality of the code.</p>

<p>Unfortunately, installing code reviews as part of the daily work habits of a team can be very challenging. When I joined my team 3 years ago, no one was doing any kind of code reviews. With a small push here and there, I managed to get the team to adhere to a strict 4 eyes principle (full story <a href="/from-zero-to-pair-programming-hero/">here</a>).</p>

<p>Here are a few strategies that I have either used or seen that should get your team mates to do code reviews.</p>

<h2>Overall principle</h2>

<p>Even if you are at the bottom of the org chart, you have far more influence than you would first think. My favorite way of bringing change is to demonstrate a valuable practice :</p>

<ul>
<li>First, you need to be trustworthy</li>
<li>Then, do the practice you want to introduce</li>
<li>Make sure it is seen as valuable</li>
<li>Be ready to forgo the credits of the introduction of the practice</li>
<li>Keep on until people start to copy what you are doing</li>
</ul>


<p>As <a href="http://quoteinvestigator.com/2010/12/21/doing-good-selfless/">someone famous</a> said</p>

<blockquote><p>A man may do an immense deal of good, if he does not care who gets the credit</p></blockquote>

<p>I won&rsquo;t go in the details about how to be trustworthy, which could be a post of its own. Basically, putting our customers interests first, speaking the truth and avoiding to appear dogmatic can get us a long way already. <a href="https://www.amazon.fr/dp/B0050JLC9Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">The Clean Coder</a> is an excellent read on the subject.</p>

<p><a href="https://www.amazon.fr/dp/B0050JLC9Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1"><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/clean-coder.jpg" alt="Front cover of the Clean Coder book" /></a></p>

<h2>Strategies</h2>

<h3>If you have retrospectives in place</h3>

<p>In this case, you already have a place and time dedicated to discussing changes to your working agreements. Expressing your concerns about code quality (or another problem related to code reviews) and suggesting code reviews as a way to fix that problem might get a quick team buy-in.</p>

<p>If you don&rsquo;t manage to get a definitive buy-in, try to get the team to &lsquo;beta-test&rsquo; code reviews for a while. If the experiment demonstrates value, it will convert into a full fledged working agreement.</p>

<h3>If you practice collective code ownership</h3>

<p>Unfortunately, if you don&rsquo;t have retrospectives in place, or if you did not manage to get your team to discuss code reviews in retrospectives, yo&rsquo;ll need to find another way to introduce them.</p>

<p>If you have collective code ownership, it should be ok to comment on your team mates code (if not, jump directly to the next strategy). In this setting, just start to do some code reviews for others ! Make sure your reviews are helpful and &lsquo;nice&rsquo;.</p>

<p>You&rsquo;ll need to stick to doing code reviews long enough before people actually start to mimic you. Reserve some time in your daily agenda for code reviews. Your goal is to win over people, so it might be a good idea to start with a selected few at the beginning, preferably people who are more likely to jump in. If asynchronous (tool based) reviews don&rsquo;t get answered, be ready to fallback to face to face discussions : review on your own, then just ask the author for a few minutes so that you can discuss his change. When you feel someone is interested by your reviews, ask him to review your own code in return.</p>

<p>Remember to always try to get some feedback : ask people what they think of the exercise, keep note of the good points, and adapt to smooth out the rest.</p>

<p><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/collective.jpg" alt="Illustration of a team working collectively" /><div class="image-credits">Photo from <a href="https://www.emotuit.com/blog">emotuit</a></div></p>

<p>Once you won over your first team mate, involve him in your grand plan to spread the practice, explaining how much you think this could make a difference. As more and more people get convinced, the practice will eventually tacitly become part of your working conventions.</p>

<p>Depending on your context, this might take more or less time. I said it was possible, I never said it would be easy ! Grit, patience and adaptation are key here.</p>

<h3>Otherwise</h3>

<p>This is the worst starting point, basically, you have nothing yet. The strategy is very similar to the one with collective code ownership, with a different first move.</p>

<p>Instead of providing code reviews to your team mates, start by walking over to them to ask for a face to face code review of your own commits. Use the same tactic as stated before : stick to the same people at first. Once the practice starts to stick within this group, bring in a basic tool to ease up the process.</p>

<p>At some point, you should be asked to review others code, that&rsquo;s a good sign ! If not, try again with other people.</p>

<p>Continue using the same strategy as with collective code ownership and you should eventually get there !</p>

<h3>When it does not seem to stick</h3>

<p>There could be many reason why the practice is not adopted. The key for you is to understand why and to adapt your strategy. The reason is often that the perceived value is not big enough, for example :</p>

<ul>
<li>the team is not aware of its problems that reviews would fix : try to make them more visible</li>
<li>reviews are seen as too expensive or painful : try better tools or taking more on yourself</li>
<li>the team has bigger problems to fix first : spend your energy on these first !</li>
<li>reviews just don&rsquo;t work in your context (ex: your job is to write one time, throw away code) : it&rsquo;s up to you to stay or leave !</li>
</ul>


<h2>Tools</h2>

<p>There are a ton of tools and best practices to run code reviews. It&rsquo;s important that you know them, so that you know where you are going.</p>

<p>Don&rsquo;t expect to use the best tools from the start though. At the beginning, your goal is to win over your team mates. In this context, only 2 things matter :</p>

<ul>
<li>It should have almost no adoption curve, so that others start using it</li>
<li>It should have almost no maintenance cost, as you don&rsquo;t want to spend your time doing that</li>
</ul>


<p>That&rsquo;s why at the beginning, low tech tools are so great. Spending a month setting up a top notch code review system before the first review won&rsquo;t work. If your VCS has code reviews built-in, by all means use it ! Otherwise, diff in mails and face to face conversations are a good starting point. You&rsquo;ll later hook something in your VCS to automatically send mails with commit diffs &hellip;</p>

<p>As people gradually get convinced of the value of code reviews, regularly meet and discuss a better setup. This is how you&rsquo;ll introduce state of the art tools and agree on refinements such as pre or post commit reviews.</p>

<h3>Best practices</h3>

<p>As a code review champion, it&rsquo;s very important that you provide great reviews to your team mates. You must become the local expert on the subject ! You don&rsquo;t want all your efforts to be ruined because one of your reviews has been perceived as aggressive.</p>

<p><a href="https://static.rainfocus.com/oracle/oow16/sess/1473264722807001CoS2/ppt/code-reviews-vs-pull-requests.pdf"><img src="../imgs/2017-04-19-how-to-get-your-team-to-do-code-reviews/atlassian.jpg" alt="A slide from Atlassian presentation about styles of code reviews" /></a></p>

<p>There is a ton of resources on the internet about how to perform good code reviews, here are a few :</p>

<ul>
<li><a href="https://twitter.com/mariakhalusova">Maria Khalusova</a>&rsquo;s talk at Devoxx 2016 <a href="https://www.youtube.com/watch?v=-tcy4z0hszg">How to stop wasting your time and start performing useful code reviews</a></li>
<li><a href="https://medium.com/@kannonboy/">Tim Pettersen</a> from <a href="https://www.atlassian.com">Atlassian</a> talked about <a href="https://static.rainfocus.com/oracle/oow16/sess/1473264722807001CoS2/ppt/code-reviews-vs-pull-requests.pdf">Code Reviews vs Pull Request</a> at JavaOne 2016</li>
<li><a href="http://marcotroisi.com/">Marco Troisi</a> wrote an extensive blog post about <a href="http://marcotroisi.com/how-run-code-reviews-in-your-workflow/">How to run code reviews in your dev team&rsquo;s workflow</a></li>
<li><a href="https://medium.com/@mrjoelkemp">Joel Kemp</a>&rsquo;s post <a href="https://medium.com/@mrjoelkemp/giving-better-code-reviews-16109e0fdd36">Giving better code reviews</a></li>
<li>Gareth Wilson&rsquo;s post <a href="https://blog.fogcreek.com/effective-code-reviews-9-tips-from-a-converted-skeptic/">Effective Code Reviews – 9 Tips from a Converted Skeptic</a></li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p>Congratulations ! Your team will start to reap the benefits of code reviews. Keep on improving the practice !</p>

<p>To end the story, after a few months of code reviews, during a retrospective, my team (<a href="http://www.murex.com/">at work</a>) decided to take it one step further and started to do almost full time pair programming ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A seamless way to keep track of technical debt in your source code]]></title>
    <link href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"/>
    <updated>2017-04-12T08:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code</id>
    <content type="html"><![CDATA[<p>I eventually stumbled upon a way to keep track of technical debt in source code that is both straightforward and already built-in most tools : simple <code>TODO</code> comments !</p>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/todo-comment.jpg" alt="Photo of a screen displaying source code with #TODO comments" /></p>

<h2>How it happened ?</h2>

<p>Some time ago, we tried to add <a href="/a-plan-for-technical-debt-lean-software-development-part-7/"><code>@TechnicalDebt</code></a> annotations in our source code. Unfortunately, after a few month, we came to the logical conclusion that it was too complex to be effective :</p>

<ul>
<li>It involved too much ceremony, which frightened people</li>
<li>It made people uneasy to change anything around the annotation instead of sending a call to action</li>
<li>As a result, it was always out of date</li>
</ul>


<p>After a bit of discussion with my colleagues, we decided to replace all these annotations with simple <code>TODO</code> comments.</p>

<p>When the refactoring to do seems fairly obvious (but also premature) we&rsquo;ll use a straightforward <code>//TODO (example) introduce a factory</code> message. Next time a pairs gets to work on this part of the code, they get the silent opinion of their peers to help them decide what to do about this piece of the code. Other times, the code might be smelly, yet without us knowing what to do about it yet, in this case, we agreed to use <code>//TODO SMELL (example) responsibilities are not clear in this class</code> which is still a <code>TODO</code> comment, but not a clear call to action.</p>

<p>When I started my <a href="https://github.com/philou/planning-poker">current side project</a>, I naturally started to use them. They display nicely in <a href="https://codeclimate.com/github/philou/planning-poker/issues">CodeClimate</a>.</p>

<h3>The pros</h3>

<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/codeclimate.jpg" alt="Screenshot of the CodeClimate issue dashboard displaying TODO comments" /></p>

<p>The great thing about <code>TODO</code> comments is that, as a very old programming trick, they are already supported out of the box by most tools <a href="https://www.jetbrains.com/">IntelliJ</a>, <a href="https://www.sonarqube.org/">SonarQube</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="https://codeclimate.com">CodeClimate</a> and I guess many others. Only one day after I refactored to <code>TODO</code> comments, a team mate fixed one that had appeared in his IDE&rsquo;s TODO tab !</p>

<h3>The cons</h3>

<p>Some tools, IDEs in particular, tend to assume that you should fix all your <code>TODOs</code> before you commit anything. That&rsquo;s not exactly how we are using them to track lasting technical debt. So that&rsquo;s one thing you need to keep in mind.</p>

<p>Tools like Sonar on the other hand, assign a fixed remediation cost to any <code>TODO</code> you have in the code, which is usually not the case at all !</p>

<h2>How to set it up in your project</h2>

<p>As you might guess, this is pretty easy. Just start adding <code>TODO</code> comments in your code &hellip;</p>

<h3>Teamwise</h3>

<p>It is worth first validating the practice with your colleagues though. There are many ways to do that, depending on your team&rsquo;s work habits :</p>

<ul>
<li>Use your team <a href="https://slack.com/">Slack</a> (or whatever chat room you use) to share a link to this post (for example) and create a yes/no poll</li>
<li>Or if you think you need it, create some wiki page explaining the practice and detailing its rationals in your context, add a yes/no poll, and finally share this page with your team</li>
<li>Eventually, if you think that this topic deserves it, setup a meeting with everyone and discuss the point. It might be worth sharing information about the practice beforehand to make the meeting more efficient. You can end the vote with a <a href="http://www.plays-in-business.com/thumb-voting/">thumb vote</a> (up : yes, down : no, side : whatever)</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/thumb-vote.jpg" alt="Thumbs voting positions" /><div class="image-credits">Photo from <a href="http://www.plays-in-business.com/thumb-voting/">Plays in Business</a></div></p>

<p>Don&rsquo;t wait for unanimity to start the practice, majority is enough ! Make sure that people who voted the other way will follow the team practice in the end though. Remember that whatever the answer, discussing team practices is good.</p>

<p>Once all the team agreed on using (or not) <code>TODO</code> comments, mention the practice in your team&rsquo;s coding conventions or working agreements (which I strongly recommend to have written somewhere). If you don&rsquo;t have any yet, create some !</p>

<h3>Toolswise</h3>

<p>Most tools will handle <code>TODO</code> out of the box.</p>

<ul>
<li>Rails comes with a <code>rake notes</code> task to list <code>TODO</code> comments.</li>
<li>CodeClimate and SonarQube both lists <code>TODOs</code> as issues in their default config</li>
<li>Most IDEs have a &lsquo;TODO&rsquo; tab which will display the <code>TODO</code> comments in the project</li>
<li>Otherwise, good old grep will very happily find <code>TODO</code> comments in your code</li>
</ul>


<p>Some tools might require small tweaks to improve the experience :</p>

<ul>
<li>In IntelliJ, in the commit window, uncheck the &lsquo;Check TODO&rsquo; checkbox to avoid getting a warning at every commit</li>
</ul>


<p><img src="../imgs/2017-04-12-a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/intellij-commit.jpg" alt="IntelliJ's commit window, with its 'Check TODO' check box" /></p>

<ul>
<li>SonarQube uses the same fixed remediation cost for every TODO comment. It&rsquo;s up to you to adapt this remediation cost to your context.</li>
</ul>


<h2>What&rsquo;s next ?</h2>

<p><code>TODO</code> comments are a good starting point to track technical debt. Once you start using them, there are a few things you can do :</p>

<p>First, remember to fix some regularly. Very old <code>TODO</code> comments are technical debt of their own ! Using code quality dashboards like SonarQube or CodeClimate help to continuously improve your code.</p>

<p>If your tools allow it, you might consider setting up a simpler <code>//SMELL ...</code> instead of <code>//TODO SMELL ...</code> or whatever other special comment that might be useful in your context.</p>

<p>Finally, there is a lean continuous improvement practice which consists of logging problems as they occur. Doing this could help your team to decide which technical debt hotspots are the most important to fix. When appropriate, link the problems with the <code>TODO</code> comments. After a few weeks of this, walking through all the problems during a retrospective should shed light on what parts of the code are causing the most troubles.</p>

<h2>Edit 2017-04-19</h2>

<p>Thanks a lot for your comments ! People have suggested a ton of great improvements over my basic setup :</p>

<ul>
<li>plugins to other tools that also support <code>TODO</code> comments</li>
<li>activating automatic sync between issues in CodeClimate and your issue tracking system</li>
<li>using custom comments markers</li>
<li>adding an &lsquo;X&rsquo; to your comment every time you are bothered by the technical debt, tools can configured to assign a higher severity to issues with a lot of &lsquo;X&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Almost 15 years of using Design By Contract]]></title>
    <link href="http://philippe.bourgau.net/almost-15-years-of-using-design-by-contract/"/>
    <updated>2017-03-14T18:57:00+01:00</updated>
    <id>http://philippe.bourgau.net/almost-15-years-of-using-design-by-contract</id>
    <content type="html"><![CDATA[<p>I first read about Design By Contract in 2002, in <a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_2?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1490073815&amp;sr=8-2&amp;keywords=object+oriented+software+construction+meyer">Object Oriented Software Construction 2</a>. As soon as I read it, I was convinced, today, I still believe it&rsquo;s a great and fundamental technique. That&rsquo;s why, I almost never write a contract ! Let me explain.</p>

<h2>Phase 1 : DbC ignorance</h2>

<p>I started to code professionally in 2001. This was a time where design and quality software meant <a href="https://en.wikipedia.org/wiki/IBM_Rational_Rose_XDE">Rational Rose</a> (a UML design and code generation tool) while I, at the contrary, was just <a href="https://en.wikipedia.org/wiki/Cowboy_coding">Cow Boy Coding</a> my way out of any problem I was given.</p>

<p>I wasn&rsquo;t really doing Object Oriented programming, but rather imperative programming, using objects as structs, getters, setters, and classes as a way to organize the code &hellip; In this context, my design skills were improving slowly, and I was at the risk of falling in love with a local-optimum practice that would prevent me from growing further.</p>

<p>That&rsquo;s why I started to read books such as the <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1490074343&amp;sr=1-1&amp;keywords=design+patterns">Gang Of Four Design Patterns</a>, or <a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_2?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1490073815&amp;sr=8-2&amp;keywords=object+oriented+software+construction+meyer">OOSC2</a>.</p>

<h2>Phase 2 : DbC enlightenment</h2>

<p><a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_2?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1490073815&amp;sr=8-2&amp;keywords=object+oriented+software+construction+meyer"><img src="../imgs/2017-03-14-almost-15-years-of-using-design-by-contract/OOSC2.jpg" alt="The cover of the Object Oriented Software Construction 2" /></a></p>

<p>Reading this book was a profound experience to me. My programming changed fundamentally before and after reading it. The chapter about contracts, taught me what objects are.</p>

<p>One the one hand, Pre and Post conditions can be used in any kind of programming and are just a kind of C <code>assert</code> macro on steroids. Class invariant, on the other hand, is a completely different kind of beast. The invariant of a class is a predicate about an instance of this class that should always be true. For example : field X should never be null, or the value of field N should always be greater than 0.</p>

<p>In some way, grasping the concept of invariant is close to understanding what a class is.</p>

<h2>Phase 3 : DbC everywhere</h2>

<p>That&rsquo;s when I started to write contracts everywhere. I was writing C++ code at the time, and my code must have looked something like that :</p>

<p>```c++
class MonkeyWrench
{</p>

<pre><code>bool _isStarted;
std::vector&lt;Part&gt;* _movingParts;
</code></pre>

<p>protected:</p>

<pre><code>virtual void invariant() const
{
    assert(_isStarted == (_movingParts != NULL));
}
</code></pre>

<p>public:</p>

<pre><code>MonkeyWrench()
{
    this-&gt;_isStarted = false;
    this-&gt;_movingParts = NULL;

    invariant();
}

bool isStarted() const
{
    return this-&gt;isStarted();
}

void start()
{
    assert(!this-&gt;isStarted());
    invariant();

    this-&gt;_movingParts = ...

    invariant();
    assert(this-&gt;isStarted());
}

const std::vector&lt;Part&gt;&amp; movingParts() const
{
    assert(this-&gt;isStarted());
    invariant();

    return *this-&gt;_movingParts;
}
...
</code></pre>

<p>};
```</p>

<p>I definitely over-abused contracts, it made the code unreadable. Plus sometimes, I was using excessively long and intricate assertions which made the problem even worse.</p>

<p>Hopefully, overusing contracts also taught me a lot in a short time. Here are some of the lessons I learned :</p>

<ul>
<li>DbC is not very well supported, it&rsquo;s never something built in the language, and edge cases like inheriting an invariant or conditions can become messy pretty fast.</li>
<li>Checking for intricate contracts at every method call can be pretty slow.</li>
<li>Checking everything beforehand is not always the simplest thing to do, at times, throwing an exception on failure just does a better job.</li>
<li>It happened that removing the contract made the code do just what I wanted. It&rsquo;s easy to write unnecessary strict contracts.</li>
<li><a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">Command Query Separation Principle</a> is great ! Having &lsquo;const&rsquo; or &lsquo;pure&rsquo; queries that don&rsquo;t change anything make writing contracts a lot simpler.</li>
<li>Preconditions on queries are painful. When possible, returning a sensible &lsquo;null value&rsquo; works better, nothing is worse than getting an error when trying to call a const query from the interactive debugger.</li>
<li>Finally, the more immutable a class is, the simpler the invariant. With a lot of mutable fields, you might resort to have the invariant check that fields are synchronized as expected. If fields are immutable, this simply vanishes.</li>
</ul>


<h2>Phase 4 : DbC hangover</h2>

<p>At the same time I discovered all these small subtleties about contracts, I fell upon Martin Fowler&rsquo;s book <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1490074424&amp;sr=1-1&amp;keywords=refactoring+improving+the+design+of+existing+code">Refactoring, improving the design of existing code</a> and started to use Unit Tests extensively. This lead me to the following conclusions :</p>

<ul>
<li>Tests are more efficient at producing quality software</li>
<li>Contracts can be an hindrance when trying to do baby steps refactorings as described in Martin Fowler&rsquo;s book</li>
</ul>


<p>On top of that, as DbC is not natively supported by languages, no documentation is generated, meaning that most of the time, the callers still have to look into the code. As a result, I was using contracts less and less often.</p>

<h2>Phase 5 : DbC Zen</h2>

<p>Looking back, I might not be writing a lot of <code>asserts</code> in my code, but I am still thinking in terms of contracts all the time. In fact, there are a ton of ways to use DbC without writing assertions :</p>

<ul>
<li>Use as much immutability as possible. An immutable class does not need to check its invariant all the time, just throwing from the constructor if arguments are not valid is enough.</li>
<li>Use conventions as much as possible, for example, constructor arguments should be set for all the life of the object (cf <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1490074450&amp;sr=1-1&amp;keywords=growing+object+oriented+software+guided+by+tests">Growing Object Oriented Software Guided by Tests</a> which describes the different ways to inject something in an object)</li>
<li>Looking back at my DbC assertions, most relate to null values. Again conventions work better ! At work, we simply forbid passing null values around. If something can be null, it means it&rsquo;s optional, Java has an <code>Optional&lt;T&gt;</code> class for just that (I&rsquo;m pretty sure it is possible to do something even better with C++ templates). In this case, if the contract is broken, NullReferenceException will eventually be our assertion.</li>
<li>Replace as many pre &amp; post conditions with invariants on the callee, the arguments or the return objects as possible. It makes sense as it&rsquo;s just making sure we are using &lsquo;valid&rsquo; objects everywhere. Again, if these objects are immutable, it makes the whole thing even simpler !</li>
<li>To take further benefit of the invariant of immutable objects, introduce new types. For example, instead of changing an object&rsquo;s state through a command with associated involved contracts, split the class in 2 and make the method a query returning an immutable object, potentially making the initial class immutable as well. Remember, immutable classes mean almost no assertions !</li>
<li>Use your language. Ex, instead of asserting that 2 lists remain of the same length, refactor to a list of pairs ! (I know that&rsquo;s an obvious example, but you get the point)</li>
<li>If you are using a statically typed language, use types ! For example, I remember at one project I worked on, we had an bug involving a duration : somewhere in the code milliseconds got mistaken for seconds &hellip; We fixed that by replacing the <code>integer</code> by <code>TimeSpan</code> all over the place. Again, that&rsquo;s so obvious !</li>
<li>Eventually, when all else fails, or when it&rsquo;s just too much overhead, use the simple asserts provided by your language or common libraries.</li>
</ul>


<p>To come back at the previous code section, this how it could be written without assertions :</p>

<p>```c++
class MovingMonkeyWrench
{</p>

<pre><code>const std::vector&lt;Part&gt; _parts;
</code></pre>

<p>public:</p>

<pre><code>MovingMonkeyWrench() : _parts(...) {}

const std::vector&lt;Part&gt;&amp; parts() const
{
    return this-&gt;_parts;
}
...
</code></pre>

<p>};</p>

<p>class MonkeyWrench
{ <br/>
public:</p>

<pre><code>MovingMonkeyWrench start() const
{
    return MovingMonkeyWrench();
}
...
</code></pre>

<p>};
```</p>

<p>Details are omitted, but it&rsquo;s easy to see how shorter the code is.</p>

<h2>Conclusion</h2>

<p>When applying all the techniques above, you&rsquo;ll see that cases for explicit assertions are rare. Less assertions also workarounds the issues coming from the poor support for DbC : no documentation and intricate cases.</p>

<p>In the end, assertions made my code more &lsquo;functional&rsquo;. I&rsquo;m not alone to have done the same journey, and if you are interested you should read Eric Evans' <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1490082811&amp;sr=1-1&amp;keywords=domain+driven+design">DDD</a> book where he presents things like immutable value objects and specification objects.</p>
]]></content>
  </entry>
  
</feed>
