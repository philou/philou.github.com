<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2015-08-15T14:39:47+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Actors and Green Threads in Java Demystified]]></title>
    <link href="http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified/"/>
    <updated>2015-08-15T13:17:00+00:00</updated>
    <id>http://philippe.bourgau.net/actors-and-green-threads-in-java-demystified</id>
    <content type="html"><![CDATA[<p>After finishing my <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>, one of the things that most surprised me, is how simple it was to prototype the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model</a> in Java using <a href="https://en.wikipedia.org/wiki/Green_threads">Green Threads</a>.</p>

<h2>The Code</h2>

<p>First, here is the base class for all actors.</p>

<p>```java
public class Actor implements Runnable {</p>

<pre><code>private final ExecutorService threadPool;
private final ConcurrentLinkedQueue&lt;Runnable&gt; mailbox = new ConcurrentLinkedQueue&lt;&gt;();
private boolean stoped;

public Actor(ExecutorService threadPool) {
    this.threadPool = threadPool;
}

public void run() {
    if (stoped) {
        return;
    }

    Runnable nextMessage = mailbox.poll();
    if (nextMessage != null) {
        nextMessage.run();
    }
    submitContinuation();
}

public void start() {
    submitContinuation();
}

protected void stop() {
    stoped = true;
}

protected void send(Runnable runnable) {
    mailbox.add(runnable);
}

private void submitContinuation() {
    threadPool.submit(this);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>As you can see, I simply used Runnable as the type of the messages.</p>

<p>The Actor itself is Runnable, meaning that it can be submitted to the thread pool. When executed :</p>

<ol>
<li>it tries to handle a message from the mailbox if there is one.</li>
<li>It then re-submits the actor itself</li>
</ol>


<p>This ensures that only one thread is executing messages on an actor at a given time, and it also avoids spawning new thread for every new actor.</p>

<p>As an example, here is how I used this to make an actor of an existing InProcessChatRoom class.</p>

<p>```java
public interface ChatRoom {</p>

<pre><code>void broadcast(Output client, String message);
...
</code></pre>

<p>}
```</p>

<p>```java
public class InProcessChatRoom implements ChatRoom {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>```java
public class ChatRoomActor extends Actor implements ChatRoom {</p>

<pre><code>private final ChatRoom realChatroom;

public ChatRoomActor(ChatRoom realChatroom, ExecutorService threadPool) {
    super(threadPool);
    this.realChatroom = realChatroom;
    start();
}

@Override
public void broadcast(final Output client, final String message) {
    send(new Runnable() {
        @Override
        public void run() {
            realChatroom.broadcast(client, message);
        }
    });
}
...
</code></pre>

<p>}
```
ChatRoomActor is in fact some kind of proxy to use from other actors to send messages to the chat room.</p>

<p>As with any implementation of the Actors Model, the neet thing is the separation of threading and logic. That makes it so much simpler ! (You can get more detail about the complexity I am talking about by taking a look at the <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a>)</p>

<h2>Performances</h2>

<p>Here is a performance summary of this implementation compared to others on a &ldquo;throughput vs clients&rdquo; benchmark of the style &ldquo;Enter while others are talking&rdquo;</p>

<p><a href="https://github.com/philou/concurrency-kata">{% img center https://raw.githubusercontent.com/philou/concurrency-kata/master/enter-while-others-are-talking.png Result graphs of benchmark enter while others are talking %}</a></p>

<p>Results can be disappointing compared to other implementations but the example itself is a bit misleading. The chatroom does exclusively message passing, there is not much computation to parallelize, in a different setting, the results would have been completely different.</p>

<h2>Limitations</h2>

<p>As you can see, this implementation is just a quick prototype, nothing production ready. Here are the main limitations I can think of right now :</p>

<ul>
<li>It uses <a href="https://en.wikipedia.org/wiki/Busy_waiting">Busy Waiting</a> for the next message, meaning that it consumes unnecessary resources, and that more important messages to other Actors might be delayed</li>
<li>Usually, actor messages are selected on their type rather than on their order of arrival, this is not the case here</li>
<li>The usage of the Runnable interface as base message type, though handy, opens the door to inter-thread calls that might violate the model altogether</li>
<li>There is absolutely no support of out of process actors until the messages are Serializable</li>
</ul>


<h2>Going Further</h2>

<p>I started this <a href="https://github.com/philou/concurrency-kata">concurrency-kata</a> as a training material about concurrency for colleagues at <a href="http://www.murex.com">work</a>. In the spirit of the coding kata, it&rsquo;s a git repo you can walk, explore and experiment with.</p>

<p>So if you want to learn more about different models of concurrency, you are welcome to have a look at the How-To section in the <a href="https://github.com/philou/concurrency-kata">README</a> file.</p>

<p>On my part, although it was a lot more work than I would have guessed at the beginning, I barely scratch the surface of the subject ! I could now :</p>

<ul>
<li>extract the <a href="https://fr.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> or Actor implementation and make them more robust</li>
<li>practice and present the whole kata as a 2 hours live coding session</li>
<li>prepare a hands-on training about concurrency</li>
</ul>


<p>So, if you are willing to do any of the above you are welcome to contribute !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Programmers Have Todo Lists]]></title>
    <link href="http://philippe.bourgau.net/real-programmers-have-todo-lists/"/>
    <updated>2015-04-20T05:42:00+00:00</updated>
    <id>http://philippe.bourgau.net/real-programmers-have-todo-lists</id>
    <content type="html"><![CDATA[<p>Productive programmers maintain a todo list. No Exception.</p>

<p>{% img center /imgs/2015-04-20-real-programmers-have-todo-lists/programmer.jpg A programmer concentrating on his code %}</p>

<h2>Why is it so important</h2>

<p>As programmers, here is the typical internal discussion we have all day long :</p>

<blockquote><p>- Why the hell am I doing this again ?<br>
&hellip; hard thinking &hellip;<br>
- Yes ! I remember now :<br>
- Encapsulate this field<br>
- In order to move it to another class<br>
- In order to move this other function there too<br>
- In order to be able to remove that other static variable<br>
- In order to refactor the login module<br>
- In order to remove the dependency between the custom search query generator and the login module<br>
- In order to refactor the query generator<br>
- In order to be able to optimize it<br>
- In order to speed up the whole website !</p></blockquote>

<p>Phew, now that&rsquo;s a list ! A 9 frame stack, all in our heads, and that&rsquo;s only a simple example. Knowing that us humans usually have around 7 &lsquo;registers&rsquo; in our brains, this makes a lot of clutter to remember.</p>

<p>Maintaining all this in a todo list frees us some brainpower !</p>

<h2>What happens when you use a todo list</h2>

<p>Quite a lot in fact :</p>

<p>{% img center /imgs/2015-04-20-real-programmers-have-todo-lists/check.gif A tick in a check box %}</p>

<ul>
<li>It&rsquo;s satisfying to check something as done !</li>
<li>Our programming gets better, because we can fully concentrate on it</li>
<li>We have a clear idea about what&rsquo;s done, what&rsquo;s still to be done, and why we are doing it</li>
<li>We avoid getting lost in things that don&rsquo;t really need to be done</li>
<li>We can make better choices about what to do, what to postpone, and what not to do</li>
<li>We can make more accurate estimates about the time it will take to finish the job</li>
</ul>


<p>In the end, all this makes you feel less stressed and more productive !</p>

<h2>How to do it</h2>

<p>There are many ways to maintain a todo list. Which to choose is not as important as having one. Here are my 2 design principles for a todo list system :</p>

<ul>
<li>It goes in finer details than a typical bug tracking software</li>
<li>It should help you to concentrate on the few items you can do in the coming hours</li>
</ul>


<p>For example, I am now using a simple TODAY &hellip; TOMORROW &hellip; LATER &hellip; scheme. I tend to avoid deep hierarchies as it gets in the way of my second principle. I like to keep DONE items visible to keep track of what I did for up to 1 day.</p>

<p>{% img center /imgs/2015-04-20-real-programmers-have-todo-lists/org-mode.jpg A screen shot of my org-mode todo list %}</p>

<p>Here is a list of tools you can use to set up a todo list :</p>

<ul>
<li>Any text editor using a simple format convention will do</li>
<li><a href="http://www.dropbox.com">Dropbox</a> or any other synchronization tool can be helpful to access it from different places</li>
<li><a href="http://orgmode.org/">Org Mode</a> of <a href="https://www.gnu.org/software/emacs/">Emacs</a> has built-in support for todo lists. It&rsquo;s a simple text file, but with color highlighting and shortcuts</li>
<li><a href="https://keep.google.com/">Google Keep</a> might do just fine for you</li>
<li><a href="https://docs.google.com">Google Docs</a> can also be useful, especially if you need to share your todo list with others (when pair programming for example)</li>
<li><a href="https://trello.com">Trello</a> is also a good one, it can even be used as a personal kanban board</li>
<li>Any other todo list tool that suits you !</li>
</ul>


<p>If you are not already using a todo list, start now and become more productive ! No excuse !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding as a living can be dangerous to your health]]></title>
    <link href="http://philippe.bourgau.net/coding-as-a-living-can-be-dangerous-to-your-health/"/>
    <updated>2014-05-05T06:49:00+00:00</updated>
    <id>http://philippe.bourgau.net/coding-as-a-living-can-be-dangerous-to-your-health</id>
    <content type="html"><![CDATA[<p><a href="https://groups.google.com/forum/#!topic/comp.lang.c++/rYCO5yn4lXw">In 1991, John F. Woods wrote</a> :</p>

<blockquote><p>Always code as if the guy who ends up maintaining your code will be a
violent psychopath who knows where you live.  Code for readability.</p></blockquote>

<p>Here is how it might go :</p>

<p>{% img center /imgs/2014-05-05-coding-as-a-living-can-be-dangerous-to-your-health/psychopath-coworker.JPG Simple drawing of the psychopath coworker begging his teammate for a speak &hellip; with an axe ! %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harley Davidson programming]]></title>
    <link href="http://philippe.bourgau.net/harley-davidson-programming/"/>
    <updated>2014-03-05T06:41:00+00:00</updated>
    <id>http://philippe.bourgau.net/harley-davidson-programming</id>
    <content type="html"><![CDATA[<p>{% img center /imgs/2014-03-05-harley-davidson-programming/programmer.jpg Drawing of a software programmer sitting at the bottom of his chair lower than his computer %}</p>

<p>Maybe we should add motors to these desk chairs ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming as an exponential problem]]></title>
    <link href="http://philippe.bourgau.net/programming-as-an-exponential-problem/"/>
    <updated>2014-02-21T06:30:00+00:00</updated>
    <id>http://philippe.bourgau.net/programming-as-an-exponential-problem</id>
    <content type="html"><![CDATA[<p>As said Tom Cargill</p>

<blockquote><p>The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.</p></blockquote>

<p>By extrapolation, this would mean that every time we increase the requirements by 10%, we need to double the total development time ! That would mean that solution complexity is an exponential function of the complexity of the problem.</p>

<p>That could explain why techniques that work well for small problems don&rsquo;t work well at all for large problems, and vice et versa. For example</p>

<table>
<thead>
<tr>
<th align="center"> In the small (think one page script) </th>
<th align="center"> In the large (think multi millions lines system)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> Dynamic typing                       </td>
<td align="center"> Static typing</td>
</tr>
<tr>
<td align="center"> Mutable globals                      </td>
<td align="center"> Immutability</td>
</tr>
<tr>
<td align="center"> Imperative style                     </td>
<td align="center"> Declarative style</td>
</tr>
<tr>
<td align="center"> Manual memory management             </td>
<td align="center"> Garbage collection</td>
</tr>
<tr>
<td align="center"> Shared memory                        </td>
<td align="center"> Message passing</td>
</tr>
</tbody>
</table>


<br/>


<p>Just for fun, let&rsquo;s suppose that we could deduce a unique constant C for every language such that</p>

<p>{% img center /imgs/2014-02-21-programming-as-an-exponential-problem/formula.png Secret formula linking problem and solution complexities %}</p>

<p>Here is a plot of this formula with different values of C (0.5, 1 and 2)</p>

<p>{% img center /imgs/2014-02-21-programming-as-an-exponential-problem/close-plot.png Plot of the formula for different C constant values %}</p>

<p>We can see that small values of C are best for small problems, whereas greater values are evolve better with larger problems. For a given problem, there is quite a difference in the solution complexity, if the formula was true, and that we knew in which zone of complexity our problem will always be, we could choose the appropriate technology ! Experienced engineers already have the gut knowledge about how to chose the right tool for the job !</p>

<p>That&rsquo;s not all, let&rsquo;s have a bird&rsquo;s eye view of the same formulas</p>

<p>{% img center /imgs/2014-02-21-programming-as-an-exponential-problem/wide-plot.png Same plot at a larger scale %}</p>

<p>I increased the maximum problem complexity by a factor of 3, I had to multiply the solution complexity by 100 ! In the end, these exponential curves all seem frighteningly vertical. This could explain why the divide and conquer approach works so well in software : 2e<sup>x</sup> &lt; e<sup>2x</sup>. Abstract and powerful APIs might be our best weapon against complexity.</p>

<p>People behaviour does not match this exponential hypothesis though :</p>

<ul>
<li>At work, I&rsquo;ve seen quite a few projects started from scratch, and everybody expecting it to maintain it&rsquo;s initial speed during its whole lifetime</li>
<li>Some recent hiring or investing trend seem to rely on hackathons, startup week ends, or coding games, all &lsquo;in the small&rsquo; exercises</li>
<li>I&rsquo;ve observed in quick and dirty overtime work to meet a deadline &hellip; If productivity is proportional to the solution complexity, that crunch mode would be completely unproductive</li>
</ul>


<p>This leads to more interesting questions :</p>

<ul>
<li>Is my exponential model complete garbage ?</li>
<li>Or are humans particularly bad at forecasting an exponential behaviour ?</li>
<li>If so, what practices could we adopt to stop relying on this misleading gut feeling ?</li>
</ul>

]]></content>
  </entry>
  
</feed>
