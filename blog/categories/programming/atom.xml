<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2017-01-26T05:02:43+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Happens to Non-Enthusiast Programmers in the Long Run ?]]></title>
    <link href="http://philippe.bourgau.net/what-happens-to-non-enthusiast-programmers-in-the-long-run/"/>
    <updated>2017-01-10T05:57:00+00:00</updated>
    <id>http://philippe.bourgau.net/what-happens-to-non-enthusiast-programmers-in-the-long-run</id>
    <content type="html"><![CDATA[<p>A few months ago, after receiving good feedback from my regular readers, I posted my latest article <a href="/is-there-any-room-for-the-not-passionate-developer/">Is There Any Room for the Not-Passionate Developer ?</a> on <a href="https://news.ycombinator.com/">Hackernews</a> and <a href="https://www.reddit.com/r/programming/">Reddit</a>. I got a <a href="/how-to-use-hackernews-and-reddit-for-blogging/">huge number of visits</a>, a lot more than I typically get !</p>

<p>I also got a lot more comments, some nice, some tough, some agreeable and some challenging !</p>

<p>{% img center /imgs/2017-01-10-what-happens-to-non-enthusiast-programmers-in-the-long-run/professional.jpg A logo of a guy wearing a suit %}</p>

<h2>First, a summary</h2>

<p>In this previous article, I wanted to contrast the different views about work/life balance in the software industry.</p>

<p>Some, like agile gurus and companies like Basecamp, and <a href="http://lifehacker.com/working-over-40-hours-a-week-makes-you-less-productive-1725646811">studies</a>, strongly advocate for sane work hours. They explain that it results in greater productivity and healthy life.</p>

<p>On the other hand, the software field is always bubbling with novelty, and keeping up to date with technologies is by itself a challenge that takes time. For some companies, which might already be fighting for their survival against competition, it is almost impossible to grant some extra training time to their employees. The problem becomes particularly difficult when engineers get older, become parents and cannot afford to spend some extra time learning the latest JavaScript framework.</p>

<p>As a conclusion, I said that for most of us, it&rsquo;s really difficult to remain a developer in the long run without the grit that only passion for programming brings. I encourage you to <a href="/is-there-any-room-for-the-not-passionate-developer/">read it</a> for more details.</p>

<h2>What I learned from the comments</h2>

<p>First of all, thanks a lot for all these, they were very valuable, they forced me to think even more about the issue.</p>

<h3>People have been burnt !</h3>

<p>The word &lsquo;passion&rsquo; in particular, triggered engaged comments. As some pointed out, &lsquo;enthusiast&rsquo; or &lsquo;professional&rsquo; should be favored. It seems that some companies have asked their employees for unquestionable passion for their business (and not for engineering or programming) at the cost of the people&rsquo;s own lives. As a commenter said, a lot of shops do not integrate the absolute necessity for their programmers to learn continuously in their business model. It made me kind of sad to feel once more this state of our industry.</p>

<p>As a result, people are weary of any statement of &lsquo;passion&rsquo; in the workplace, and would prefer to be seen as very skilled professional, dedicated to keeping their skills up to date.</p>

<h3>The particular question of France</h3>

<p>{% img center /imgs/2017-01-10-what-happens-to-non-enthusiast-programmers-in-the-long-run/france.jpg A photo of the Eiffel tower %}</p>

<p>I received some comments from all over the world, but my observations came from where I work : in France. Here, all in all, we have at least 7 weeks of paid leaves per year. It&rsquo;s a lot more than in other parts of the world. I think it&rsquo;s around 2 weeks in the US (other <a href="https://www.bloomberg.com/news/articles/2016-10-18/americans-work-25-more-than-europeans-study-finds">sources</a> point the same fact). Imagine two companies, one from France, and one from the US. The one in the US can invest 5 weeks per year in exploratory learning (which can result in good things for both the business and the employee) while still producing as much as the french one.</p>

<p>Obviously, there are other parameters to take into account for overall productivity like hours per day, the effects of holidays or long hours on creativity, or funding &hellip; but here are some facts about software engineering in France :</p>

<ul>
<li>20% time policy, hackathons and other exploratory learning are extremely rare (I&rsquo;ve seen it once in 15 years)</li>
<li>It&rsquo;s slowly getting better, but if you remain a programmer in your thirties, you&rsquo;re seen as a loser</li>
<li>France has no software powerhouse like Microsoft, Google, Apple &hellip;</li>
</ul>


<p>This lead me to this open question : What&rsquo;s the effect of the 7 weeks of paid leaves on the french software industry ?</p>

<p>By no means will I try to give an answer, I just don&rsquo;t know. Plus, for those who might be wondering : I love my 7 weeks of holidays !</p>

<h2>The conclusion I came to</h2>

<p>Yet, I can try to draw a conclusion at the individual level. In France, if you&rsquo;re not really enthusiastic about programming, you won&rsquo;t put the extra effort off-the-job to learn the latest technologies. Within a few years, you&rsquo;ll be &lsquo;deprecated&rsquo;, which will leave you with mainly 2 options :</p>

<ul>
<li>become a manager</li>
<li>stick to your current codebase (and become completely dependent of your employer)</li>
</ul>


<p>To me, the sad truth is that if you want to make a career as a professional developer in France, you&rsquo;d better be ready to spend some of your free time practicing !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 More Great Talks From JavaOne 2016]]></title>
    <link href="http://philippe.bourgau.net/3-more-great-talks-from-javaone-2016/"/>
    <updated>2016-10-14T04:05:00+00:00</updated>
    <id>http://philippe.bourgau.net/3-more-great-talks-from-javaone-2016</id>
    <content type="html"><![CDATA[<p>After the top <a href="/top-5-talks-i-attented-at-java-one-2016-part-1/">5 talks I attended at JavaOne</a> here are more !</p>

<h2>Managing Open Source Contributions in Large Organizations</h2>

<p><a href="http://www.jamesward.com/presos">James Ward</a></p>

<p>This talk was very interesting for companies or organizations that want to use Open Source in some way without ignoring the risks.</p>

<p>After an introduction listing the benefits of contributing to open source, James explained the associated risks :</p>

<ul>
<li>Security (evil contributions or information leaks)</li>
<li>Quality (bad contributions, increased maintenance or showing a bad image)</li>
<li>Legal (responsibility in case of patent infringing contribution, ownership of a contribution, licenses)</li>
</ul>


<p>He then explained that there are 3 ways to deal with the issue :</p>

<table>
<thead>
<tr>
<th> Strategy </th>
<th> Description </th>
<th> Pros </th>
<th> Cons </th>
<th> Popularity </th>
<th> Examples </th>
</tr>
</thead>
<tbody>
<tr>
<td> Do nothing </td>
<td> Devs just contribute without saying it </td>
<td> Easy, Gets it done </td>
<td> Need to stay under the radar, Risks for all parties are ignores </td>
<td> +++++ </td>
<td> Most open source code on <a href="https://github.com">Github</a> is shared in this manner |</td>
</tr>
<tr>
<td> Join a foundation </td>
<td> Joining an existing open source foundation, with a framework </td>
<td> Everything out of the box (infra, governance), builds trust </td>
<td> Rules can be heavy, Ownership is given to the foundation </td>
<td> +++ </td>
<td> <a href="https://www.linkedin.com/">Linkedin</a> put <a href="https://kafka.apache.org/">Kafka</a> in the <a href="https://www.apache.org/">Apache Foundation</a> |</td>
</tr>
<tr>
<td> Build tools </td>
<td> Use your own tools to mitigate the main risks associated with the &lsquo;Do nothing&rsquo; strategy </td>
<td> Built on top of Github, Keep control, Keeps things easy </td>
<td> Need to develop, test and operate the tools </td>
<td> + </td>
<td> Demo of a tool plugged into Github to enforce a contributor license agreement for anyone pushing a pull request |</td>
</tr>
</tbody>
</table>


<p><a href="/imgs/2016-10-14-3-more-great-talks-from-javaone-2016/CLA.jpg">{% img center /imgs/2016-10-14-3-more-great-talks-from-javaone-2016/CLA-small.jpg Slide with a Github capture for Contributor License Agreement %}</a></p>

<p>The &lsquo;build tools&rsquo; strategy looks promising, even if it is not yet widely used !</p>

<p>Here are <a href="https://www.youtube.com/watch?v=X71HrW6vC_0">the talk</a> and <a href="http://presos.jamesward.com/managing_open_source_contributions_in_large_orgs/index.html#/">the slides</a> on the authors website.</p>

<h2>Java Performance Analysis in Linux with Flame Graphs</h2>

<p><a href="http://www.brendangregg.com/">Brendan Gregg</a></p>

<p>This is what a flame graph looks like :</p>

<p><a href="http://www.brendangregg.com/FlameGraphs/cpu-mixedmode-vertx.svg">{% img center /imgs/2016-10-14-3-more-great-talks-from-javaone-2016/flamegraph.png An example of a Java flame graph %}</a></p>

<p>Technically, it&rsquo;s just an SVG with some Javascript. It shows the performance big picture. It aggregates data from Linux and JVM profilers. Vertically, you can see the call stacks in your system. The larger a block, the more time is taken inside a function (or in a sub call). The top border is where the CPU time is actually taken. If you want to speed up your system, speed up the wider zones at the top of the graph.</p>

<p>At <a href="https://www.netflix.com">Netflix</a>, the speaker is a performance engineer, and his job is to build tools to help other teams discover performance issues. This is how they use Flame Graphs :</p>

<ul>
<li>Compare 2 flame graphs at different times to see what changed</li>
<li>Do a <a href="http://martinfowler.com/bliki/CanaryRelease.html">canary release</a> and compare the new flame graph before finishing the deployment</li>
<li>Taking continuous flame graphs on running services helps identify JVM behavior like JIT or GC</li>
<li>They use different color themes to highlight different things</li>
<li>They also use them to identify CPU cache misses</li>
</ul>


<p>By the way, I also thought this was a great example of using an innovative visualization to manage tons of data.</p>

<p>I could find neither the video nor the slides of the talk, but I managed to find a lot of <a href="https://www.google.fr/search?safe=active&amp;client=ubuntu&amp;espv=2&amp;biw=1600&amp;bih=810&amp;tbm=vid&amp;q=Flame+Graphs&amp;oq=Flame+Graphs&amp;gs_l=serp.3...1396.1396.0.1616.1.1.0.0.0.0.59.59.1.1.0....0...1c.1.64.serp..0.0.0.z-3ygDHx4-Q">others talks about Flame Graphs</a>, as well as extra material on <a href="http://www.brendangregg.com/flamegraphs.html">the speaker&rsquo;s homepage</a>.</p>

<h2>Increasing Code Quality with Gamification</h2>

<p><a href="https://twitter.com/alex90_ch">Alexander Chatzizacharias</a></p>

<p>You might be wondering why we should care about gamification ?</p>

<ul>
<li>Worldwide 11.2 billion hours are spent playing every week !</li>
<li>People love to play because it makes them feel awesome</li>
<li>Games are good teachers</li>
<li>At work we are the ones who need to make others successful</li>
<li>But only 32% of workers are engaged in their work !</li>
</ul>


<p>Games rely on 4 main dynamics :</p>

<ul>
<li>Competition (be very careful of closed economics which can be very bad for teams)</li>
<li>Peer pressure (Public stats push teams and individual to conform to the norm)</li>
<li>Progression (regular recognition of new skills is motivating)</li>
<li>Rewards (Badges, Level ups, Monkey Money, real money &hellip;)</li>
</ul>


<p>He went on to demonstrate two games that are based on Jenkins and Sonar that aim at better code quality :</p>

<ul>
<li>One mobile app developed during a 24h Hackathon at CGI which might be open sourced at some point</li>
<li>Another one called &lsquo;Dev Cube&rsquo; created at an university, where you get to decorate you virtual cubicle</li>
</ul>


<p><a href="https://www.youtube.com/watch?v=hfT2_HxOQdk">{% img center /imgs/2016-10-14-3-more-great-talks-from-javaone-2016/quincy-adams.jpg The speaker demoing his code quality game %}</a></p>

<p>At the end of the talk, he gave the following recommendations :</p>

<ul>
<li>Understand the needs of all to respond to everyone&rsquo;s personal goals</li>
<li>Don&rsquo;t assign things to do, that&rsquo;s not fun, give rewards instead</li>
<li>Keep managers out of the picture</li>
<li>To keep it going, you need regular improvements, special events and new rules</li>
<li>KISS !</li>
</ul>


<p>Playing at work might not be unproductive in the end !</p>

<p>The same <a href="https://www.youtube.com/watch?v=hfT2_HxOQdk">talk given at NLJug</a>, unfortunately, it&rsquo;s in Dutch. English slides are <a href="https://static.rainfocus.com/oracle/oow16/sess/14625567983370011wPS/ppt/increasing%20code%20quality%20with%20gamification.pdf">here</a> though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 5 talks I attended at JavaOne 2016 (Part 2)]]></title>
    <link href="http://philippe.bourgau.net/top-5-talks-i-attended-at-javaone-2016-part-2/"/>
    <updated>2016-09-28T20:02:00+00:00</updated>
    <id>http://philippe.bourgau.net/top-5-talks-i-attended-at-javaone-2016-part-2</id>
    <content type="html"><![CDATA[<p>This is my second post relating the talks I attended at JavaOne 2016. <a href="/top-5-talks-i-attented-at-java-one-2016-part-1/">Here</a> is the beginning of the story. Here we go.</p>

<h2>Euphoria Despite the Despair</h2>

<p><a href="https://twitter.com/holly_cummins">Holly Cummins</a></p>

<p>Our jobs aren&rsquo;t always fun &hellip; and that&rsquo;s in fact an issue ! Studies show that people who have fun at work are 31% more productive ! The talk was organized in 3 parts :</p>

<ol>
<li>What is fun ?</li>
<li>How to remove the parts that are not fun ?</li>
<li>How to add even more fun ?</li>
</ol>


<p>She defined what she called the funtinuum, which is that fun is a function of engagement and interaction. Basically, you won&rsquo;t have fun if you are doing nothing, or if no one cares about your work. That aligns well with <a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805/ref=sr_1_1?ie=UTF8&amp;qid=1475123675&amp;sr=8-1&amp;keywords=daniel+pink+drive">Daniel Pink&rsquo;s drivers of motivation</a> : Autonomy, Mastery and Purpose.</p>

<p>If something is not fun, it&rsquo;s because it does not require engagement or interaction. It&rsquo;s either boring or no one cares, or both. If that&rsquo;s the case, it&rsquo;s probably some kind of waste in some sense &hellip; Removing un-fun activities would mean removing waste. It&rsquo;s interesting to note how this sounds like <a href="https://en.wikipedia.org/wiki/Muda_(Japanese_term">lean Muda</a>) ! She gave examples such as :</p>

<ul>
<li>automate stuff</li>
<li>pair programming transforms criticism into collaboration (bonus: it gives excuse to skip meetings)</li>
<li>go <a href="https://twitter.com/search?q=%23NoEstimates">#NoEstimates</a> because estimating is painful and useless</li>
<li>YAGNI defers useless things until they really add value</li>
<li>Organize to skip meetings and other boring stuff</li>
<li>&hellip;</li>
</ul>


<p>Last step is to add fun to the workplace. She warned that adding fun before removing the un-fun stuff would feel fake and would make things worse &hellip;</p>

<iframe src="http://philippe.bourgau.net//www.slideshare.net/slideshow/embed_code/key/DMpHQcMebTVGsz?startSlide=148" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>To add fun, she suggested using things like :</p>

<ul>
<li>gamification (there was actually another great talk about gamification)</li>
<li>build a hacking contest instead of a security training</li>
<li>Install a <a href="https://sirenofshame.com/">Siren of Shame</a> for whoever breaks the build</li>
<li>&hellip;</li>
</ul>


<p>Here are <a href="http://www.slideshare.net/HollyCummins/software-developers-guide-to-fun-in-the-workplace-euphoria-despite-the-despair">the slides</a></p>

<h2>Java 9: The Quest for Very Large Heaps</h2>

<p>Bernard Traversat, Antoine Chambille</p>

<p><a href="/imgs/2016-09-28-top-5-talks-i-attended-at-javaone-2016-part-2/java-9-gc.jpg">{% img center /imgs/2016-09-28-top-5-talks-i-attended-at-javaone-2016-part-2/java-9-gc-small.jpg Slide of the memory regions in G1 %}</a></p>

<p>This talk might not be of interest for all, but it is for us <a href="http://murex.com">at work</a>. It went through the improvement to come to Java 9&rsquo;s G1 garbage collector. To summarize, to scale to very large heaps, it will split the memory into regions. Objects should be allocated on different regions depending on their specificities, which might help to build NUMA aware applications. Having the heap split up in smaller chunks enables the GC to run in parallel, which can speed up the old generation GC by up to 50 times !</p>

<p><a href="http://www.java9countdown.xyz/">Java 9 is scheduled for march 2017</a></p>

<h2>Agility and Robustness: Clojure + spec</h2>

<p><a href="https://twitter.com/stuarthalloway">Stuart Halloway</a></p>

<p>I haven&rsquo;t been touching Clojure for a while but I gave the language a try a few years ago. I had heard about Clojure spec but hadn&rsquo;t taken the time to look at it in details. As I understood it all, Spec is like some sort of <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design by Contract</a> on steroïds ! Clojure is not statically typed, but you can now assign spec metadata to values. A spec is roughly a predicate. By defining specs for the inputs and outputs of functions, it is possible to verify at runtime that the function is behaving correctly.</p>

<p>As did Bertrand Meyer in the classic <a href="https://www.amazon.com/Object-Oriented-Software-Construction-Book-CD-ROM/dp/0136291554/ref=sr_1_1?ie=UTF8&amp;qid=1475211259&amp;sr=8-1&amp;keywords=object+oriented+software+construction+meyer">OOSC2</a>, who advised to use contracts during development only, Stuart explained that we should care about developer vs production time instead of compile vs runtime. From this point of view, it is not of great importance whether the compiler or the continuously running test suite finds an issue.</p>

<p>But specs are a lot more than predicates ! They can be used to :</p>

<ul>
<li>enable assertions at runtime</li>
<li>generate documentation</li>
<li>generate test cases</li>
<li>generate precise call logs</li>
<li>get precise error messages</li>
<li>explore a function and see how it can be called</li>
</ul>


<p>He went on to compare the virtues of Clojure spec with static typing (à la Java) and example based testing :</p>

<p>{% img center /imgs/2016-09-28-top-5-talks-i-attended-at-javaone-2016-part-2/clojure-spec.jpg Slide comparing Clojure spec with example based testing and static typing %}</p>

<p>Although I don&rsquo;t believe that generative testing can ever replace example based testing altogether, it certainly can help.</p>

<p>All in all, the presentation was insanely great and engaging. It made me seriously think of going into Clojure programming again !</p>

<p>Here are <a href="https://t.co/0FBl2l473N">the slides</a> and the <a href="https://www.youtube.com/watch?v=VNTQ-M_uSo8">the same talk at Strangeloop</a></p>

<h2>Conclusion</h2>

<p>Overall, JavaOne was great ! If I had the opportunity, I&rsquo;d go back every year ! There was a lot of other great talks I did not write about in these 2 posts, for example :</p>

<ul>
<li>Development Horror Stories was a lot of fun, especially the winning story !</li>
<li>Hacking Hiring was full of good advises</li>
<li>Managing Open Source Contributions in Large Organizations was full of good ideas</li>
<li>Increasing Code Quality with Gamification was very inspiring</li>
</ul>


<h2>Edit 17 October 2016</h2>

<p>I summarized 3 others JavaOne talks <a href="/3-more-great-talks-from-javaone-2016/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 5 talks I attended at JavaOne 2016 (Part 1)]]></title>
    <link href="http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1/"/>
    <updated>2016-09-28T19:20:00+00:00</updated>
    <id>http://philippe.bourgau.net/top-5-talks-i-attented-at-java-one-2016-part-1</id>
    <content type="html"><![CDATA[<p>With a few other colleagues, I had the chance to be sent to San Francisco last week to attend the <a href="https://www.oracle.com/javaone/index.html">JavaOne 2016</a> conferences by my <a href="http://www.murex.com">company</a>.</p>

<p><a href="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/exhibition-hall.jpg">{% img center /imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/exhibition-hall-small.jpg Photo of the JavaOne exhibition hall %}</a></p>

<p>Here is super short list of the conferences I attended which I found really interesting</p>

<h2>Preventing errors before they happen</h2>

<p><a href="https://ece.uwaterloo.ca/~wdietl/">Werner Dietl</a> &amp; <a href="https://homes.cs.washington.edu/~mernst/">Michael Ernst</a></p>

<p>Since Java 6, it is possible to pass custom annotation processors to javac. Since Java 8, it is possible to add annotations to types. The guys behind the <a href="http://checkerframework.org">Checker Framework</a> used this to create custom pluggable type systems for your Java programs. These type systems enforce properties on your program, and will emit warnings or errors at compile time otherwise.</p>

<p>Here are a few example :</p>

<ul>
<li>declare <code>@Immutable MyObject myObject</code> to make sure that myObject won&rsquo;t be muted</li>
<li>declare <code>@NonNull MyObject myObject</code> to make sure that myObject is never null</li>
</ul>


<p><a href="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/type-systems.jpg">{% img center /imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/type-systems-small.jpg Architecture of the type checker %}</a></p>

<p>Under the hood, the compiler behaves as if <code>@Immutable MyObject</code> and <code>MyObject</code> where completely separate types, and it knows and tracks specific ways of converting between the two. The framework provides a simple API to define your own type systems. They did a live demo showing how to quickly define things like <code>@Regex String</code>, <code>@Encrypted String</code> or <code>@Untainted String</code> (which forbids user input strings to avoid SQL injections).</p>

<p>The talk was really interesting, the framework seems lightweight and to integrate well with the typical tool stack. I definitely will give it a try the next time I have a bit of slack time.</p>

<p>Here are <a href="http://types.cs.washington.edu/checker-framework/2016-javaone/2016-09-19%20CF%20@%20JavaOne.pdf">the slides</a> and a <a href="https://www.youtube.com/watch?v=kb6nz85jbuQ">previous session of the presentation</a></p>

<h2>Keeping Your CI/CD Pipeline as Fast as It Needs to Be</h2>

<p><a href="https://twitter.com/abrahammarin?lang=fr">Abraham Marin-Perez</a></p>

<p>Continuous Delivery and Microservices are what you need to do, aren&rsquo;t they ? Well, when actually trying to setup a CI / CD pipeline for all your code, things quickly get complicated pretty fast ! The speaker presented how to deal with this complexity by using metrics from your VCS and build servers to draw an annotated graph of your build pipeline.</p>

<p><a href="/imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/build-pipeline.jpg">{% img center /imgs/2016-09-28-top-5-talks-i-attented-at-javaone-2016-part-1/build-pipeline-small.jpg Graph of the build pipeline %}</a></p>

<ul>
<li>He used the build time to set the size of every node : the longer, the larger</li>
<li>The color for the change rate : the more often it was built the warmer the color</li>
</ul>


<p>It was then possible to determine other metrics such as :</p>

<ul>
<li>the impact time of every node : build time + build time of all the dependencies</li>
<li>the weighted impact time : impact time * change rate</li>
<li>the overall average impact time : sum of all the weighted impact times</li>
<li>the overall max impact time : max of all the impact times</li>
</ul>


<p>Using this and your SLAs it is possible to define policies for your build times such as &ldquo;the max build time should not be more than X&rdquo;. If you want to speed up your build, you can set a target build time and analyzing the graph should help you to understand what architecture changes you need to make to your system in order to meet this build time (this sounds a lot like <a href="http://www-personal.umich.edu/~mrother/The_Improvement_Kata.html">Toyota&rsquo;s Improvement Kata</a> &hellip;)</p>

<p>I loved this talk ! I found the speaker captivating, he presented novel ideas which is not always the case.</p>

<p>Here are <a href="http://www.slideshare.net/AbrahamMarinPerez/keeping-your-cicd-pipeline-as-fast-as-it-needs-to-be">the slides</a>, and <a href="https://www.youtube.com/watch?v=8JxoKJng_eQ">the same presentation at Devoxx UK</a>.</p>

<h2>To Be Continued</h2>

<p>I promised 5, and that&rsquo;s only 2 talks ! Stay tuned, I&rsquo;ll write about the 3 others in the coming weeks. <a href="/top-5-talks-i-attended-at-javaone-2016-part-2/">Here they are</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flavors of TDD]]></title>
    <link href="http://philippe.bourgau.net/flavours-of-tdd/"/>
    <updated>2016-09-20T20:54:00+00:00</updated>
    <id>http://philippe.bourgau.net/flavours-of-tdd</id>
    <content type="html"><![CDATA[<p>During the years doing some coding dojos with the same circle of people, I came up with my own style of practicing <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. Lately, I had the chance to do a pair programming session with someone I did not know. That made me realize that they are in fact even more ways to practice TDD than I thought.</p>

<h2>Mockist vs Classisist</h2>

<p>A lot has already been written (and discussed) about these two approaches. I myself have already <a href="/hitting-the-middle-ground-between-classicist-and-mockist-tdd/">blogged</a> about the subject, I even gave a <a href="/how-not-to-use-mocks-my-talk-at-paris-rb/">talk</a> about it. From my own point of view, I believe that the inconvenients of making mocking the default far outweights the benefits. I&rsquo;m not saying that mocks aren&rsquo;t useful from time to time, but rather that they should remain the exception.</p>

<h2>Top-Down vs Bottom-Up</h2>

<p>That&rsquo;s the reason why I wrote this post. This is the main difference I found between my style and my pair&rsquo;s. Let me explain.</p>

<p>{% img center /imgs/2016-09-20-flavours-of-tdd/topdown-vs-bottomup.jpg Top-Down vs Bottom-Up %}</p>

<h3>Top-Down</h3>

<p>Doing TDD top-down means starting with high level end to end tests, implementing the minimum to make it work, refactor and repeat. A bit like BDD, the point is to focus on the expected behavior, and avoid writing useless things. The bad point is that the refactoring part can get pretty difficult. On real life code, strictly following top-down would mean writing a feature test first, passing it with a quick and dirty implementation, to then spend hours trying to refactor all that mess &hellip; good luck !</p>

<p>Here is another example, from coding dojos this time. Having had success with the top-down approach during previous dojos, we once intentionally tried to code <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#">Conway&rsquo;s Game of Life</a> using a top-down approach. We did so by writing high level tests that were checking special patterns (gliders &hellip;). That was a nightmare ! It felt like trying to reverse engineer the rules of the game from real use cases. It did not bring us anywhere.</p>

<p>{% img center /imgs/2016-09-20-flavours-of-tdd/glider.gif Conway&rsquo;s game of life gliders %}</p>

<h3>Bottom-Up</h3>

<p>At the other side of the spectrum, you can do bottom-up TDD. This means unit testing and implementing all the small bricks you think you&rsquo;ll need to provide the expected overall feature. The idea is to avoid tunnels and to get fast feedback on what you are coding. The bad side is that you might be coding something that will end up being unnecessary. Be careful, if you find yourself spending a lot of time building up utility classes, you might be doing too much bottom-up implementation.</p>

<p>The <a href="http://codingdojo.org/cgi-bin/index.pl?KataRomanNumerals">Numerals to Romans Kata</a> is a good exercise to fail at bottom-up. Every time I did this exercise during a coding dojo, people new to it would start to come up with complicated ways to do it (often involving complex array manipulation). Compared to that, applying disciplined bottom-up TDD brings a <a href="https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/Algorithm-Roman-Numeral-Converter">brutally effective solution for Numerals to Romans</a>.</p>

<h2>Mixed approach</h2>

<p>Both approaches have their pros and cons. I really believe developers who are serious about TDD should master both, and learn when to apply each. In fact, as often, the best approach lies somewhere in the middle. Here&rsquo;s my recipe :</p>

<ol>
<li>Start with a high level feature test</li>
<li>try to make it pass &hellip;</li>
<li>&hellip; (usually) fail</li>
<li>rollback or shelve your test and draft implementation</li>
<li>build a brick</li>
<li>unshelve</li>
<li>try to make it pass &hellip;</li>
<li>&hellip; and so one until the high level test finally passes.</li>
</ol>


<p>In fact, it&rsquo;s a lot like the <a href="https://mikadomethod.wordpress.com/">Mikado Method</a> for building features instead of refactoring.</p>

<h2>Practice in dojos</h2>

<p>It&rsquo;s possible to intentionally practice this in coding dojos as well. Most kata should be OK, as long as the group agrees to fix it using this particular approach up front.</p>

<p>If during the dojo, you&rsquo;ve just written a test, suddenly realize that it won&rsquo;t be easy to get it passing, and that you&rsquo;ve got the elements spread out in your code, this is the time ! Comment the test, get the green bar, refactor, uncomment the test, try to make it pass, repeat &hellip; Eventually, you&rsquo;ll have all the bricks to make it easy to pass your test.</p>

<p>{% img center /imgs/2016-09-20-flavours-of-tdd/cargo-cult.jpg Cargo Cult : People thought that by building something that looks like a plane, they would be able to fly %}</p>

<p>Some might say this is not &lsquo;pure&rsquo; TDD, but that sounds like cargo cult to me ! As long as you make sure you are not building useless stuff, and that you keep the feedback loop as short as possible, you&rsquo;re on the right track.</p>
]]></content>
  </entry>
  
</feed>
