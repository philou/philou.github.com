<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2013-04-19T15:10:17+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to stub around a call to the original method with rspec ?]]></title>
    <link href="http://philippe.bourgau.net/how-to-stub-around-a-call-to-the-original-method-with-rspec/"/>
    <updated>2013-04-19T07:05:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-stub-around-a-call-to-the-original-method-with-rspec</id>
    <content type="html"><![CDATA[<p>Rspec mocks now features a 'and_call_original' method to create simple proxy mocks. But how could we build more complex proxies ?</p>

<p>For the sake of the subject, let's take an example that is not a testing best practice, but that everybody will understand. Suppose you want to simulate a faulty network in your tests. You'd like to stub Net::HTTP.get so that it raises errors from time to time. Here is what you could do</p>

<p><code>ruby
i = 0
original_get = Net::HTTP.method(:get)
Net::HTTP.stub(:get) do |*args, &amp;block|
  i = i+1
  raise RuntimeError.new("network down") if i%3 == 0
  original_get.call(*args, &amp;block)
end
</code></p>

<p>Note the block is taken into account, in this example, it does not matter so much, but forgetting it can bring up really strange issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The poor man's memory profiling]]></title>
    <link href="http://philippe.bourgau.net/the-poor-mans-memory-profiling/"/>
    <updated>2013-02-01T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/the-poor-mans-memory-profiling</id>
    <content type="html"><![CDATA[<p>While working on <a href="http://www.mes-courses.fr">www.mes-courses.fr</a>, a background scheduled task that was running fine on heroku started to fail with out of memory errors. After searching a bit, I discovered that the inputs had changed, and that the memory consumption of my task was linearly correlated to the size of the inputs.</p>


<p>So I tried to setup an automatic test to verify that the memory consumption of my task would remain small enough for it to run on <a href="http://www.heroku.com">heroku</a>. This is what I wanted to do :</p>


<ul>
<li>write a unit test for this</li>
<li>run the task once to warm up the memory</li>
<li>run the task once for some small sample input and note the peak memory usage</li>
<li>run the task once for some large sample input and note the peak memory usage</li>
<li>check that the memory usages are very close, whatever the size of the inputs</li>
</ul>


<p>Everything there is quite straightforward, appart from "note the peak memory usage". Here is what I came up with</p>


<ul>
<li>note the initial memory usage</li>
<li>start a thread that garbage collects and notes the memory usage every 10 ms</li>
<li>process the data</li>
<li>tell the thread to stop</li>
<li>memory usage is the difference between the maximum and initial memory usages</li>
</ul>


<p>Here is the code in ruby, but it can be easily translated to any language (I did it for C# once)</p>


<p>
<script src="https://gist.github.com/4696311.js"></script>
</p>


<p>Unfortunately in ruby, memory usage is not directly available without <a href="http://philippe.bourgau.net/how-to-install-a-patched-ruby-interpreter-wit">patching and rebuilding the interpreter</a>, but allocated objects count is available, and it's actually enough for our purpose.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TOO_MANY_REDIRECTS when changing ssl requirements]]></title>
    <link href="http://philippe.bourgau.net/toomanyredirects-when-changing-ssl-requiremen/"/>
    <updated>2013-01-28T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/toomanyredirects-when-changing-ssl-requiremen</id>
    <content type="html"><![CDATA[<p>While I was trying to enforce no ssl on a page of <a href="http://www.mes-courses.fr">www.mes-courses.fr</a> with Rack::SslEnforcer, I lost a few hours trying to fix a TOO_MANY_REDIRECTS error ... The server was redirecting from http to https in loop !<p /><div>It turned out it was my browser (chromium) that had cached a previous redirection.</div><p /><div>I fixed it by right-clicking the faulty redirection in the chrome network debugger and asking a cache clear.</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install a patched ruby interpreter with rbenv and ruby-build]]></title>
    <link href="http://philippe.bourgau.net/how-to-install-a-patched-ruby-interpreter-wit/"/>
    <updated>2013-01-09T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/how-to-install-a-patched-ruby-interpreter-wit</id>
    <content type="html"><![CDATA[<p>A background scheduled task I am trying to run on heroku is failing because it gets out of memory. I needed to use a ruby memory profiler to understand exactly what the issue was. <a href="https://github.com/rdp/ruby-prof">ruby-prof</a>&nbsp;seemed great, but it needs a patched ruby interpreter to collect memory information.</p>


<p>After a bit of searching and trying, the simplest thing I managed to do was to</p>


<ul>
<li>download the ruby sources</li>
<li>patch them</li>
<li>create a ruby-build package definition with them</li>
<li>install with rbenv</li>
</ul>


<p>Here is a script that does this for ruby 1.9.2-p125 and gcdata patch.</p>


<p>
<script src="https://gist.github.com/4492543.js"></script>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning an rbenv version]]></title>
    <link href="http://philippe.bourgau.net/cloning-an-rbenv-version/"/>
    <updated>2012-11-08T00:00:00+01:00</updated>
    <id>http://philippe.bourgau.net/cloning-an-rbenv-version</id>
    <content type="html"><![CDATA[<p>There is no doc about this, but it turns out to be very simple, just copy the version directory :</p>


<p><code>sh
cd ~/.rbenv/versionscp -R original-version new-version
</code></p>

<p>That's it !</p>

]]></content>
  </entry>
  
</feed>
