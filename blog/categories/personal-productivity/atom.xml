<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: personal-productivity | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/personal-productivity/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-06-08T06:06:00+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frequently asked questions about the 20 hours of Code Katas]]></title>
    <link href="http://philippe.bourgau.net/frequently-asked-questions-about-the-20-hours-of-code-katas/"/>
    <updated>2018-04-12T19:20:00+02:00</updated>
    <id>http://philippe.bourgau.net/frequently-asked-questions-about-the-20-hours-of-code-katas</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/categories/20-hours-code-kata-series/">previous posts</a>, I explained how to use the 20 hours of Code Katas technique to learn new languages. If you did not read these yet, start by <a href="/how-to-learn-a-programming-language-in-just-20-hours/">the beginning</a>.</p>

<p><img src="../imgs/2018-03-26-frequently-asked-questions-about-the-20-hours-of-code-katas/faq-bulb.jpg" alt="A drawing of FAQ in a lightbulb" /></p>

<p>To close <a href="/blog/categories/20-hours-code-kata-series/">this series</a>, here are a few tips and suggestions presented as questions and answers.</p>

<h2>What if you don&rsquo;t know TDD yet ?</h2>

<p>The few <a href="http://codingdojo.org/dojo/ParisDojo/">Parisian guys</a> who invented the Coding Dojo wanted to teach and spread TDD ! You should have no problem to use it to learn TDD yourself !</p>

<blockquote><p>ðŸ’¡ The coding dojo was invented to teach and spread TDD</p></blockquote>

<p>Pick your favorite language, and schedule a kata plan to practice TDD. Watch one or two <a href="https://www.google.fr/search?q=code+kata&amp;tbm=vid">videos</a> to see how gurus are doing it. At first, you&rsquo;ll have to be very careful to stick to baby steps and the red-green-refactor loop. If you need help, check <a href="https://www.meetup.com">meetup.com</a> for local coding dojos where you&rsquo;ll find help.</p>

<h2>Can I apply this technique to learn something else than a new language ?</h2>

<p>As you might have noticed, I used it to refresh my Javascript. I went on to learn different flavors of JS, but also different test libraries. I&rsquo;ve used in to learn more advanced parts of other languages in the past.</p>

<p>Katas also work well to learn programming techniques like <a href="https://en.wikipedia.org/wiki/Code_refactoring">refactoring</a> or <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a>. Some nice people shared <a href="http://kata-log.rocks/refactoring">refactoring katas</a> on the web. To practice DDD, we could repeat katas with the constraint of using <a href="https://en.wikipedia.org/wiki/Entity">Entities</a> and <a href="https://en.wikipedia.org/wiki/Value_object">Value Objects</a> only.</p>

<p>You can even use the technique to learn other things like frameworks or tools, but you&rsquo;ll need to tune it. As I explained before, you need an exercice for deliberate practice and a fast feedback loop. We typically use a Code Katas and TDD for that, but that&rsquo;s not the only options. Whenever you can find a way to deliberately practice with a fast feedback loop, you&rsquo;re ready to go ! These days, we should look for docker images with frameworks and tools pre-installed. Going through tutorials without looking at the solutions is deliberate practice. A small live environment can give us fast enough feedback.</p>

<blockquote><p>ðŸ’¡ Find Deliberate Practice exercices and a fast feedback loop for efficient learning</p></blockquote>

<h2>What if I don&rsquo;t find any kata ?</h2>

<p>Build one yourself ! I&rsquo;m not joking, building a kata, especially one where you start from scratch is not too difficult. Inspiration comes from anything you happen to do in your daily work. Trim down a programming challenge you had to work, and you might have a kata ! Went to a programming interview ? The question you had to answer might do a nice kata.</p>

<p><img src="../imgs/2018-03-26-frequently-asked-questions-about-the-20-hours-of-code-katas/make-things-happen.jpg" alt="&quot;Make things happen&quot; written on a blackboard" /></p>

<p>Once you&rsquo;ve created and tested your kata, share it ! There are online kata repositories where you could get a chance to publish it.</p>

<ul>
<li>Â Â <a href="http://codingdojo.org/">codingdojo.org</a></li>
<li>Â Â <a href="http://cyber-dojo.org/">cyber-dojo.org</a></li>
<li>Â Â <a href="http://kata-log.rocks">kata-log.rocks</a></li>
</ul>


<h2>One last thing</h2>

<p>I just remembered I did not finish <a href="/how-to-learn-a-programming-language-in-just-20-hours/">my story about my Javascript kata plan</a>. For those wondering, here is the end of story. In the end I did not join this team to do Javascript coaching. After thinking through it for a while, I decided to stop the katas there, and move to something else. I was only 6 hours in, and what was the point to study Javascript not to use it straight away ? The day I&rsquo;ll need it, I&rsquo;m likely to have forgotten 80% of it and some of it will be outdated. The knowledge is only another 20 hours away anyway !</p>

<p>That&rsquo;s what we could call &ldquo;Just In Time Learning&rdquo; ! We are drowning in knowledge nowadays. It&rsquo;s better to have a fast and effective way to learn anything than trying to know everything.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why 20 hours of code kata are so effective for learning new languages]]></title>
    <link href="http://philippe.bourgau.net/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/"/>
    <updated>2018-04-05T08:53:00+02:00</updated>
    <id>http://philippe.bourgau.net/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages</id>
    <content type="html"><![CDATA[<p>In my <a href="/how-to-learn-a-programming-language-in-just-20-hours/">previous post</a>, I described how I&rsquo;ve been using 20 hours of Code Katas to learn new languages. If you did not read it yet, have a look at it first. Let&rsquo;s now look at why it works so well.</p>

<p>In <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_2?ie=UTF8&amp;qid=1521785371&amp;sr=8-2&amp;keywords=the+first+20+hours">The First 20 Hours</a> Josh Kaufman explains how he learned <a href="https://www.ruby-lang.org/">Ruby</a> in 20 hours. He did not become a Ruby expert, but he was able to build and maintain a static website generator. For my part, I have succeeded to learn <a href="/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">a bit of machine learning</a> using the 20 hours technique.</p>

<p>The effectiveness of the 20 hours of Code Katas relies a few key points.</p>

<p><img src="../imgs/2018-03-26-why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/why.jpg" alt="Drawing of &quot;Why ?&quot; mixed up with the inside of a clock" /></p>

<h2>Time-boxing</h2>

<p>Time-boxing has 2 main benefits. First, it forces us to stick to what is the most important for us to learn. There is no time to waste slacking around in only 20 hours. Plus it&rsquo;s a lot easier to focus for 20 hours than over a very long period of time.</p>

<p>There&rsquo;s a second great thing about time-boxing. The further you go, the less remains to do, and the less likely you are to drop the effort ! We are a lot less likely to abandon when we know we only need a few hours to finish the goal we had set to ourselves.</p>

<blockquote><p>ðŸ’¡ Time-boxing creates focus</p></blockquote>

<h2>A plan</h2>

<p>Again, the plan helps us to focus. We&rsquo;ll need to choose what gets in a 20 hours plan. Building the plan itself forces us to get a grasp of the learning space. This will help to pick the good stuff to practice.</p>

<h2>Routine</h2>

<p>Routine is a magic trick to get things done. Once we have a routine in place, we don&rsquo;t have to think or do extra efforts to find time to learn. The time is already there, we just have to use it !</p>

<h2>Deliberate practice</h2>

<p>Some exemples from &ldquo;The first 20 hours&rdquo; highlight the benefits of deliberate practice. When learning the <a href="https://en.wikipedia.org/wiki/Colemak">Colemak keyboard</a>, the author went through typing exercices. When studying the game of Go, he did practices specific situation puzzles. In both cases, deliberate practice made him learn faster. Code katas are typical deliberate practice exercices for programmers.</p>

<p><img src="../imgs/2018-03-26-why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/golf-practice.jpg" alt="Picture of a golfer deliberately practicing" /></p>

<h2>Test Driven Development</h2>

<p><a href="http://codingdojo.org/">Coding Dojos</a> are the programmers' deliberate practice. Coding Dojos traditionally rely on <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. TDD sets up a fast feedback loop that is key to efficient learning. Think of all the time saved by not having to run and debug a full program every time ! Even dabbling around in the <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> cannot beat running 20 or so test cases every few seconds.</p>

<h2>We are already programmers</h2>

<p>One last and obvious little detail : we don&rsquo;t have to learn it all ! When the author learned Ruby in 20 hours, he was starting from scratch ! Unlike us, who already know how to program, but want to extend our knowledge to a few more topics. Most of the times, we don&rsquo;t need to relearn everything, but to transpose what we know in a new context.</p>

<p>For example, if we already know an object oriented language, learning a new one will be easier. It&rsquo;s a bit like with foreign languages, the more you know, and the easier it is to learn the next one. In fact, the more languages, frameworks, patterns and paradigms you know, the more the 20 hours code katas will work for you.</p>

<blockquote><p>ðŸ’¡ The more you know about software, the easier it will be to learn your next programming language.</p></blockquote>

<p>You might have a look at <a href="/how-to-keep-up-with-software-technologies/">this post</a> for advices about evergreen concepts to learn.</p>

<h2>Next part</h2>

<p>This was the second post on this <a href="/blog/categories/20-hours-code-kata-series/">series about the 20 hours of Code Katas technique</a>. The <a href="/frequently-asked-questions-about-the-20-hours-of-code-katas/">next, and last, post</a> will be compilation of answers to frequently asked questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to learn a programming language in just 20 hours]]></title>
    <link href="http://philippe.bourgau.net/how-to-learn-a-programming-language-in-just-20-hours/"/>
    <updated>2018-03-29T06:35:00+02:00</updated>
    <id>http://philippe.bourgau.net/how-to-learn-a-programming-language-in-just-20-hours</id>
    <content type="html"><![CDATA[<p>We should not panic when asked to work with a new language. We should be bold enough to answer to job openings requiring technologies we are not used to. In one word, we should not be afraid of new techs. Here is why : by scheduling 20 hours of Code Kata routine sessions, we can get a decent level of mastery on most topics.</p>

<p><img src="../imgs/2018-03-23-how-to-learn-a-programming-language-in-just-20-hours/timed-book.jpg" alt="A book with built-in clock" /></p>

<h2>How I learned some Haskell</h2>

<p>Quite a few years ago, we used to do weekly <a href="http://codingdojo.org/">Coding Dojos</a> at <a href="https://www.murex.com/">Murex</a>. <a href="https://twitter.com/dr_c0d3">Arnaud Bailly</a> was among us, and as he is an <a href="https://www.haskell.org/">Haskell</a> fan, we ended up doing quite a lot of katas with Haskell. To my astonishment, after a few sessions, I understood of the fundamentals of the language. Without ever studying it !</p>

<blockquote><p>ðŸ’¡ I learned a lot of Haskell by just going to Coding Dojos !</p></blockquote>

<p>Many times afterwards, I learned new languages quickly by practicing them in the Dojo.</p>

<h2>How I set out to refresh my javascript</h2>

<p>Fast forward to the end of last year. Someone asked me if I could work at coaching a team doing some Javascript. I&rsquo;ve done some Javascript in the past, but my skills definitely needed a serious update. I decided to use Code Katas to refresh my Javascript. To try to make this even more effective, I decided to mix in a bit of the <a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_2?ie=UTF8&amp;qid=1521785371&amp;sr=8-2&amp;keywords=the+first+20+hours">&ldquo;First 20 hours&rdquo;</a> technique.</p>

<p><a href="https://www.amazon.com/First-20-Hours-Learn-Anything/dp/1591846943/ref=sr_1_2?ie=UTF8&amp;qid=1521785371&amp;sr=8-2&amp;keywords=the+first+20+hours"><img src="../imgs/2018-03-23-how-to-learn-a-programming-language-in-just-20-hours/the-first-20-hours.jpg" alt="The cover of the book &quot;The first 20 hours&quot;" /></a></p>

<p>I started by defining a plan of 10 sessions of 2 hours long code katas :</p>

<ol>
<li><a href="http://codingdojo.org/kata/RomanNumerals/">Roman Numeral</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li><a href="http://codingdojo.org/kata/GameOfLife/">Game of Life</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li><a href="http://kata-log.rocks/mars-rover-kata">Mars Rover</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li><a href="http://codingdojo.org/kata/Bowling/">Bowling Score</a> &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; JS 5</li>
<li>Median of a list of lists &ndash; <a href="https://mochajs.org/">Mocha</a> &ndash; <a href="http://es6-features.org/">ES 6</a></li>
<li><a href="http://codingdojo.org/kata/NumberToLCD/">LCD Numbers</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://es6-features.org/">ES 6</a></li>
<li><a href="http://codingdojo.org/kata/Potter/">Kata Potter</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://es6-features.org/">ES 6</a></li>
<li>T9 &ndash; Jasmine &ndash; <a href="http://www.typescriptlang.org/">Typescript</a></li>
<li><a href="http://codingdojo.org/kata/PokerHands/">Poker hand</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://www.typescriptlang.org/">Typescript</a></li>
<li>Egg cooker with <a href="https://reactjs.org/">React</a> &ndash; <a href="https://jasmine.github.io/">Jasmine</a> &ndash; <a href="http://www.typescriptlang.org/">Typescript</a></li>
</ol>


<p>The plan felt pretty ambitious at the beginning. The first session was a bit hectic as I struggled to find a quick setup I could use to code my kata in. After only 3 sessions though, I could feel I&rsquo;d already made a lot of progress. I had become confident I would get most of the plan done in 20 hours.</p>

<h2>How to start ?</h2>

<p>A good thing about the 20 hours technique is that it&rsquo;s pretty easy to start with ! There&rsquo;s a catch though ! At the start, it&rsquo;s puzzling to be on your own with no clear track on how to tackle the topic. Here is the fix : start anyway, stick through, and you&rsquo;ll work it out 99% of the time.</p>

<p>Here is, in more details, how to use code kata with the 20 hours technique :</p>

<ol>
<li>Start by setting up a routine. It could be 2 hours at lunch time, 1 hour in the morning or 3 hours at night. Do whatever is best for you. It should be enough to finish in a few days or weeks.</li>
<li>Use the first hours of your 20 hours to setup a code kata plan. It might be very fast if you already have an idea of your learning space. It will take longer if you are a complete newbie. Skim through the literature for the main concepts until you have a plan. Try to keep this phase under 6 hours, otherwise you won&rsquo;t have any time left for actual learning.</li>
<li><a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> plays a key role in fast learning ! Next step is to setup a development environment with TDD to use in your Code Kata sessions.</li>
<li>Finally, do you code kata sessions. Time-box them for something less than 2 hours and run a mini-retrospective at the end of every session. Don&rsquo;t hesitate to adapt your plan if it makes sense.</li>
<li>When you reach 20 hours of learning, stop your sessions. It will be time to think a bit about what you accomplished.</li>
</ol>


<blockquote><p>ðŸ’¡ TDD plays a key role in fast learning.</p></blockquote>

<p>If all went well, you should have learned quite a lot in only 20 hours. At that point, it&rsquo;s up to you to decide what to do next. You can either decide to dig deeper. In this case, setup a new run of 20 hours of code katas ! It could also be a good time to read a bit of theory about what you just learned. Casting a different light on the topic will make it stick and deepen your understanding. Otherwise, you could stop there and start whatever is on your mind. I don&rsquo;t recommend continuing on the same topic without rethinking a new plan though. That would kill your focus and be a less efficient use of your time.</p>

<h2>To be continued</h2>

<p>This was the first post in <a href="/blog/categories/20-hours-code-kata-series/">a series about applying the 20 hours technique and Code Katas to learn new programming languages</a>. Here is the what to expect in the coming posts.</p>

<ol>
<li><a href="/how-to-learn-a-programming-language-in-just-20-hours/">How to learn a programming languages in just 20 hours</a></li>
<li><a href="/why-20-hours-of-code-kata-are-so-effective-for-learning-new-languages/">Why 20 hours of code kata are so effective for learning new languages</a></li>
<li><a href="/frequently-asked-questions-about-the-20-hours-of-code-katas/">Frequently asked questions about the 20 hours of Code Katas</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[13 Tricks for Successful Side Projects]]></title>
    <link href="http://philippe.bourgau.net/13-tricks-for-successful-side-projects/"/>
    <updated>2017-06-19T18:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/13-tricks-for-successful-side-projects</id>
    <content type="html"><![CDATA[<p>As <a href="/side-projects-matter/">I said last week</a>, I released the v0.1 of <a href="https://philous-planning-poker.herokuapp.com/">Philou&rsquo;s Planning Poker</a>, my latest side project. Although I have a day job, a wife, a family and a mortgage to pay, I still manage to finish my side projects. In the past 7 years, I published 5 of these as open source projects, website, or wannabe businesses.</p>

<p>Side projects rely on 2 things : time and motivation. If motivation goes down, you&rsquo;ll Â stop working on it, and it will die. If you don&rsquo;t manage to find enough time for it, it will also die.</p>

<p>Over the years, I accumulated best practices that increase the chances of success. Here is a shortlist of 13 of these.</p>

<p><a href="http://www.commitstrip.com/en/2014/11/25/west-side-project-story/"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/Strip-Side-project.jpg" alt="A comic strip about side projects" /></a></p>

<h2>1. Know your goal</h2>

<p>As I said before, side projects are time constrained. If you try to follow many goals at once, you&rsquo;ll spread too thin and won&rsquo;t deliver anything. That will kill your motivation.</p>

<p>To avoid this, you need to decide on a unique goal for your project. It can be anything : learning a new tech, building a tool, sell a simple product, maintain a blog.</p>

<p>Depending on the nature of your goal, your side project can take different forms. <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20 hours experiments</a> are great for learning new techs. As a side note, <a href="https://en.wiktionary.org/wiki/MOOC">MOOCs</a> can also be very effective for this. If you want to start a business, start a <a href="http://www.allencheng.com/concierge-mvp/">lean startup concierge MVP</a>. Finally, if you already know users who need a tool, build a minimalistic version for them.</p>

<h2>2. Time box your work</h2>

<p>Time boxing will force you to make the choices that will keep you going forward. The risk is to take on too many topics : more refactoring, more UI polish, more options, more bells and whistles. All these can be very interesting and valuable, but are usually not the main priority.</p>

<p>20 hours programs are time boxes, that&rsquo;s one of the reasons they work. For other kinds of side projects, I do a quarterly prioritization. &ldquo;This is what I&rsquo;d like to have in 3 months&rdquo;. I often slip a bit, but that&rsquo;s not a problem as long as I stay focused on my goal.</p>

<h2>3. Setup a routine</h2>

<p>You&rsquo;ll need to dedicate time to your side project. Think of what you could do if you worked one hour per day to it. 365 hours per year, or 90 hours per quarter ! That&rsquo;s 2 full weeks of work !</p>

<p>In the long run, having a routine is more effective than anything else. After a few weeks of sticking to a routine, it will become part of your daily life, and won&rsquo;t be an effort anymore. It will also help to forecast what you&rsquo;ll be able to do in the coming month or so.</p>

<p>To setup a routine, block a slot in your day to work on your project, and stick to it. My own routine is waking up early to have some focused time. I have entrepreneur friends who did the same. <a href="http://grasshopper.com/">GrassHopper</a> founder says the same in this <a href="https://www.indiehackers.com/podcast/003-david-hauser-of-grasshopper">Indiehacker podcast</a>.</p>

<h2>4. Keep delivering to sustain motivation</h2>

<p>Nothing kills motivation as not delivering. At work, I can go on without user feedback for a while (<a href="/how-long-can-your-inner-drive-last/">not too long though</a>). Unfortunately, that does not work on a time constrained side project. We have only one life and we don&rsquo;t want to spend our time on things that don&rsquo;t matter. Things that don&rsquo;t deliver don&rsquo;t matter &hellip;</p>

<p>To get the technical aspect of delivery out of the picture once and for all, I use <a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1498106027&amp;sr=8-1&amp;keywords=continuous+delivery">Continuous Delivery</a>. Continuous Delivery is pretty easy to start with on a new project :</p>

<ul>
<li>automate all your tests</li>
<li>setup a CI server</li>
<li>deploy when the CI passes</li>
</ul>


<p>Once this is up and running, as long as I split my work in baby steps, I&rsquo;ll be delivering.</p>

<p><a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1498106027&amp;sr=8-1&amp;keywords=continuous+delivery"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/continuous-delivery.jpg" alt="The cover of the continuous delivery book" /></a></p>

<h2>5. Use SasS tools</h2>

<p>Setting up a CI and a deployment server can take some time. In 2017 though, online platforms make this very easy. Use as many as you can.</p>

<p>For <a href="https://philous-planning-poker.herokuapp.com/">Philou&rsquo;s Planning Poker</a>, I save my code on <a href="https://github.com/philou/planning-poker">Github</a>, test through <a href="https://travis-ci.org/philou/planning-poker">Travis CI</a> and deploy to <a href="https://dashboard.heroku.com">Heroku</a>. I also use <a href="https://codeclimate.com/github/philou/planning-poker">Code Climate</a> for static code analysis.</p>

<p>Most of these tools have some free plans for small or open source projects. That alone is a great advantage of making your project open source !</p>

<h2>6. Pay for good tools</h2>

<p>If you don&rsquo;t want to make your project open source, consider paying for these services. How much you value your time will tell you whether to buy or not.</p>

<p>There are other things you should pay for as well. I definitely recommend paying for a good laptop and IDE.</p>

<p>Remember, anything that helps you to deliver also helps you to keep your motivation high. You have a day job that earns you money, so use it !</p>

<h2>7. Pick a productive languageÂ </h2>

<p>Depending on your project, you&rsquo;ll have a choice in which programming language to use.</p>

<p>Paul Graham advices to <a href="http://www.paulgraham.com/power.html">use dynamic languages</a>. I tend to do the same, especially after watching <a href="https://www.infoq.com/presentations/dynamic-static-typing">&ldquo;The Unreasonable Effectiveness of Dynamic Typing for Practical Programs&rdquo;</a>.</p>

<p><a href="https://www.infoq.com/presentations/dynamic-static-typing"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/dynamic-typing-pres.jpg" alt="A presentation about dynamic typing" /></a></p>

<p>In the end, I guess it&rsquo;s a matter of personal preference. Pick the language you&rsquo;ll be the most productive with.</p>

<h2>8. Use a popular platform</h2>

<p>Use a popular open source platform to build your side project on. Useless to say, if your goal is to learn X, use X, even if it is not popular !</p>

<p>There are many advantages to using a popular platform :</p>

<ul>
<li>you&rsquo;ll have something that has already been production proofed</li>
<li>you&rsquo;ll suffer less bugs (remember Linus&rsquo;s Law <a href="https://en.wikipedia.org/wiki/Linus%27s_Law">&ldquo;Given enough eyeballs, all bugs are shallow&rdquo;</a>)</li>
<li>you&rsquo;ll get help from the community</li>
<li>you&rsquo;ll find compatible libraries to solve some of your problems</li>
</ul>


<p>The end goal is always the same : sustain your motivation by delivering fast enough !</p>

<h2>9. Walk the edge</h2>

<p>We don&rsquo;t start side project to spend time updating dependencies. The saying goes <a href="https://martinfowler.com/bliki/FrequencyReducesDifficulty.html">&ldquo;If it hurts, do it more often&rdquo;</a>. To save your productivity and motivation, always keep your dependencies up to date.</p>

<p>This is easy with automated test and continuous integration in place. I use no version constraint, but update all dependencies at least every week. I Â commit if all tests pass. Sometimes I fall into small 5 to 10 minutes fixes, but that&rsquo;s all it takes.</p>

<h2>10. Take technical debt</h2>

<p>When starting a new side project, you have no ideas how long it will last. Could be one week, for example if you started a 20h experiment at the beginning of holidays. Could also be 20 years, if you managed to transform this side project into a full fledged business.</p>

<p>Starting with all the practices that make large software systems manageable will fail. You won&rsquo;t deliver fast enough. By now, you know the story, if you don&rsquo;t deliver, you&rsquo;ll lose your motivation.</p>

<p>I used <a href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"><code>TODO</code> comments</a> in my latest side project to keep track of the shortcut I took. I found it had 2 main advantages in my situation :</p>

<ul>
<li>I had a quick view of how much total technical debt I took</li>
<li>if things get more serious, it will be easy to find improvement points</li>
</ul>


<p>I know that <code>TODO</code> comments are <a href="https://techbeacon.com/useless-comments-can-ruin-code-review-heres-how-erase-them">controversial in the software community</a>. In the context of new side projects though, they make a lot of sense.</p>

<p>My advice is to take technical debt !</p>

<h2>11. Use your day job</h2>

<p>I&rsquo;m not saying to use time from your day job to work on your side project. That would be like stealing. Your day job can help your side project in many other ways.</p>

<p>One I already mentioned is using your income to buy better tools.</p>

<p>If you have <a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack Time</a> at your day job, you could use it to start a side project that benefits your company. You&rsquo;ll need to make sure that this kind of arrangement does not pose any IP issues. It can result in a win-win situation.</p>

<p>Another way is to find subjects at work which will grow some skills that are also useful for your side project.</p>

<h2>12. Talk about it</h2>

<p>Talking about your side project serves many purposes :</p>

<ul>
<li>it&rsquo;s an unofficial engagement to work on it</li>
<li>it provides feedback</li>
<li>it could attract early users</li>
</ul>


<p>To summarize, the more you&rsquo;ll talk about it the more it will become &lsquo;real&rsquo;. You can share your side project anywhere : blog, Meetups, work, with friends or family. Depending on your topic, some places will work better than others.</p>

<p>Don&rsquo;t be afraid that one might steal your idea. A side project is small, not yet rocket science. It&rsquo;s usually too small to be on the radar of serious businesses, and too big for individuals.</p>

<p>Let me explain that. Very few people have the grit to turn their ideas into something real. If you encounter someone who has the grit and the interest, ask her to join forces !</p>

<h2>13. Find real users</h2>

<p>Deploying your software is nice, but it&rsquo;s useless until you have users. Find some ! It&rsquo;s never too early to find testers. If your first demo does not embarrass you, it was too late ! At the beginning, it can be as basic as walking through an unfinished feature to get feedback.</p>

<p>Real user feedback always results in both high motivation and value. There are many places to get beta users : at work, through friends &hellip; have the courage to ask !</p>

<p>That&rsquo;s again a case for building your system in baby steps. The faster you get to something you can show, the faster you can have beta users.</p>

<h2>Do it !</h2>

<p>If I needed a 14th best practice it would be to start today ! As with most things, just do it !</p>

<p><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/just-do-it.jpg" alt="Just Do It !" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ultimate Jira Personal Kanban]]></title>
    <link href="http://philippe.bourgau.net/my-ultimate-jira-personal-kanban/"/>
    <updated>2017-03-03T06:46:00+01:00</updated>
    <id>http://philippe.bourgau.net/my-ultimate-jira-personal-kanban</id>
    <content type="html"><![CDATA[<p>A few years ago, I <a href="/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">wrote</a> about how I started to use <a href="https://www.atlassian.com/software/jira">Jira</a> as my <a href="http://www.personalkanban.com/pk/">personal Kanban</a> board <a href="https://twitter.com/work_at_murex">at work</a>. A lot of things have changed since then, which brought me to update my board and make it even more productive !</p>

<h2>The context</h2>

<p>During the almost 18 months since I wrote this first post, a lot of things have changed in my daily work (hopefully : I&rsquo;m not doing the same thing again and again !). Essentially, I got involved in more projects, some of which involve people from all around the company and some of which don&rsquo;t require any code to be written. For example, I&rsquo;m now engaged in our Agile Community of Practice, where I sometimes contribute content.</p>

<p>Here are the consequences on my work :</p>

<ul>
<li>I have more tasks to deal with, not necessarily more work, but still more tasks</li>
<li>I have more sources of tasks : tasks can come from any of the projects I am involved in</li>
<li>I have more tasks depending on other people, and that are in a <code>WAITING</code> state meanwhile</li>
</ul>


<p>I had to adapt my personal Kanban to this new workload.</p>

<h2>The changes</h2>

<p>As I explained in <a href="/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">the previous description of my Jira Personal Kanban</a>, I am using a custom project and Kanban board to aggregate all my tasks from various projects, in order to see everything in a single unique place. Here are the changes I&rsquo;ve made since, so if you haven&rsquo;t yet, it might be a good idea to read <a href="/bye-bye-programmers-todo-list-hello-personnal-kanban-on-jira/">that previous version</a> first.</p>

<h3>Quick filters</h3>

<p>In his post <a href="http://paulgraham.com/makersschedule.html">Maker&rsquo;s Schedule, Manager&rsquo;s Schedule</a> Paul Graham explained the challenge of having a lot of non-programming work to do everyday for programmers. He then advises to use slots for different activities during the day, in order to keep uninterrupted chunks of time to do creative work. To apply this technique, I reserved &lsquo;Unbookable except for X&rsquo; slots in my calendar everyday.</p>

<p>I had previously been using Swim-lanes to track work from different projects. This turned out not to scale very well to more projects : it made the board messy, and I kept being distracted by all these other tasks. I ditched all the Swim-lanes (not exactly, I kept one for urgent issues only). Instead of Swim-lanes for tracking projects, I now use Quick Filters. I created such filters as <code>With Project X</code> and <code>Without Project X</code>. During the day, when I want to focus on Project X, I use quick filters to only show tasks related to it.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/quick-filters.jpg" alt="Quick filters screen capture" /></p>

<h3>Day markers</h3>

<p>I have a daily routine of checking what&rsquo;s on my plate and deciding what I&rsquo;d like to achieve during the day (picking the right time to do this is an art in itself). In order to keep track of this, I use special day marker tasks : as <code>^^^ TODAY ^^^</code>, <code>^^^ TOMORROW ^^^</code> and <code>^^^ THIS WEEK ^^^</code>. This tasks are always in my <code>TODO</code> column, and will never be completed. I move them around to mark what I expect to finish at different time horizon. Ex : everything above <code>^^^ TODAY ^^^</code> should be finished before the end of the day.</p>

<p>Again, this helps me to focus on today&rsquo;s activities, and to do just enough prioritization.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/day-markers.jpg" alt="Day marker tasks screen capture" /></p>

<p>One last thing here, you&rsquo;ll have noticed the Epic for these special tasks. It&rsquo;s a way to identify them in JQL queries.</p>

<h3>WAITING flag</h3>

<p>Quite often, you have tasks waiting for someone else. That&rsquo;s surely not the most efficient situation, but once you leave the comfort of your focused dev team, handoffs are often the norm (at least until the lean principles spread in every part of the business). Status of waiting tasks is worth checking regularly, but very certainly not many times per day !</p>

<p>Again, leaving them in my board created useless distraction. I have now taken the habit of renaming the tasks I&rsquo;m waiting for with a <code>[WAITING] ...</code> prefix. On top of that, I created 2 quick filters <code>WAITING</code> and <code>Without WAITING</code> to quickly check and then forget about waiting tasks.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/waiting-tasks.jpg" alt="Waiting tasks screen capture" /></p>

<h3>Watching tasks I&rsquo;m not the assignee of</h3>

<p>On some occasions, we might be two of us working on the same task, or I might want to keep an eye on a task to know if something is needed from me. As there is only a single possible assignee in Jira, I changed my global filters to also include tasks with a custom label <code>pbourgau-watch</code>. Any time I want to add a task in my board, I just add this label to it.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/pbourgau-watch.jpg" alt="Screen capture of a task description I'm not the assignee of" /></p>

<h3>Getting the Lean reports back</h3>

<p>In order not to have too many old tasks in my board, I used to filter out old items in the global filter. This did the job, but at the cost of invalidating the lean reports (cumulative flow and control charts). In order to get these back, I removed this constraint from the global filter, and created yet another quick filter <code>Without Old</code> which I almost always keep on.</p>

<p><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/control-chart.jpg" alt="Control chart screen capture" /></p>

<h2>Scripts</h2>

<h4>Global Filter</h4>

<p>```sql
project in (POP, POPABTODO, &ldquo;Development Engineering Program&rdquo;, COPA)
AND type != Epic
AND (Assignee = pbourgau OR</p>

<pre><code>Co-Assignees in (pbourgau) OR 
mentors in (pbourgau) OR
labels in (pbourgau-watch))
</code></pre>

<p>ORDER BY Rank ASC
```</p>

<h4>Quick Filters</h4>

<p>```sql
&mdash; With &ldquo;Project X&rdquo; + Day marker tasks (Epic link &hellip;) + tasks containing &ldquo;BRANDING&rdquo;
project = &ldquo;Project X&rdquo; or &ldquo;Epic Link&rdquo; = POPABTODO-410 or summary ~ &ldquo;BRANDING&rdquo;</p>

<p>&mdash; Without &ldquo;Project X&rdquo;
project != &ldquo;Project X&rdquo; and summary  !~ &ldquo;BRANDING&rdquo;</p>

<p>&mdash; Without Old
status not in (DONE,CLOSED) OR updated >= -14d</p>

<p>&mdash; WAITING
summary ~ &lsquo;WAITING&rsquo;</p>

<p>&mdash; Without WAITING
summary !~ &lsquo;WAITING&rsquo;
```</p>

<h4>Things that did not change</h4>

<p>I still use a WIP limit on the In Progress column, display the Epic in on the cards and special use custom color coding for tasks :</p>

<p>```sql
&mdash; Tasks with an imminent due date become red
duedate &lt;= 1d or priority = &ldquo;1-Very High&rdquo;</p>

<p>&mdash; Tasks with a due date are orange
duedate is not EMPTY
```</p>

<h2>The result</h2>

<p>Overall, this is how my board looks like :</p>

<p><a href="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/full-board.jpg"><img src="../imgs/2017-03-03-my-ultimate-jira-personal-kanban/full-board-small.jpg" alt="Full board screen capture" /></a></p>

<p>I guess I&rsquo;m a kind of personal productivity geek &hellip; but I believe it&rsquo;s a skill of utter importance for developers, especially when they get a bit of experience and are not fed ready made tasks to do.</p>
]]></content>
  </entry>
  
</feed>
