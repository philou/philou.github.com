<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-08-09T04:24:27+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[When the Boy Scout Rule Fails]]></title>
    <link href="http://philippe.bourgau.net/when-the-boy-scout-rule-fails/"/>
    <updated>2016-08-02T05:38:00+00:00</updated>
    <id>http://philippe.bourgau.net/when-the-boy-scout-rule-fails</id>
    <content type="html"><![CDATA[<p>{% img center /imgs/2016-08-02-when-the-boy-scout-rule-fails/boy-scout-rule.jpg An illustration of the boy scout rule %}</p>

<p>Here goes the <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">boy scout rule</a> :</p>

<blockquote><p>Always check a module in cleaner than when you checked it out.</p></blockquote>

<p>Unfortunately, this alone does not guarantee to keep the technical debt under control. What can we do then ?</p>

<h2>Why the boy scout rule is not enough</h2>

<p>I can easily think of a few issues that are not covered by the boy scout rule.</p>

<h3>It only deals with local problems</h3>

<p>In it&rsquo;s statement, the boy scout rule is local and does not address large scale design or architecture issues. Applying the boy scout rule keeps files well written, using with clear and understandable code. From a larger perspective though, it does very little or slow improvement to the overall design.</p>

<p>These large scale refactorings are very difficult to deal with using the boy scout rule alone. It could be done but would require to share the refactoring goal with all the team, and then track its progress, while at the same time dealing with all the other subjects of the project. That&rsquo;s starting to sound like multitasking to me.</p>

<h3>It&rsquo;s skill dependent</h3>

<p>Another point about the boy scout rule (and to be fair, about any refactoring technique) is that programmers will be able to clean the code only as much as their skills allow them to !</p>

<p>Imagine what would happen when a new master developer arrives in a team of juniors, he&rsquo;d spot a lot of technical debt and would suggest improvements and ways to clean the code. Code that was thought of as very clean would suddenly be downgraded to junk !</p>

<p>The point here is that the boy scout rule cannot guarantee that you have no technical debt, because you don&rsquo;t know how much you have !</p>

<p>That&rsquo;s where the debt metaphor reaches its limits and flips to some productivity investment. By investing time to perform some newly discovered refactoring, you could get a productivity boost !</p>

<p><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1470200818&amp;sr=8-1&amp;keywords=domain+driven+design">{% img center /imgs/2016-08-02-when-the-boy-scout-rule-fails/ddd.jpg The cover of &ldquo;Domain Driven Design&rdquo; %}</a></p>

<p><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1470200818&amp;sr=8-1&amp;keywords=domain+driven+design">Domain-Driven Design: Tackling Complexity in the Heart of Software</a>, Eric Evans calls this knowledge distillation. He means that little by little, the team gains better understanding of the domain, sometimes going through what he calls a &lsquo;breakthrough&rsquo;. These breakthroughs often promote existing code to technical debt &hellip;</p>

<h3>It&rsquo;s context dependent</h3>

<p>Developers alone are not the only one responsible for creating technical debt. Changes to the environment also do.</p>

<p>For example, if the market conditions change, and that new expectations for the product are slowly becoming the norm, your old perfectly working system becomes legacy and technical debt. As an example, let&rsquo;s examine what happened to the capital markets software industry in response to the 2008 crisis.</p>

<ul>
<li>The sector became a lot more regulated</li>
<li>Risk control is moving from nightly batches to real time</li>
<li>The demand for complex (and risky) contracts decreased</li>
<li>As a consequence, trading on simpler contracts exploded</li>
</ul>


<p>All these elements combined invalidated existing architectures !</p>

<p>New technologies also create technical debt. Think the switch from mainframe to the web.</p>

<h2>What do we need then ?</h2>

<p>Should we stop using the boy scout rule ? Surely not, it would be a total non-sense. Submitting clean and readable code is a must.</p>

<p>But it is not enough. If you have spotted some large scale refactoring that could bring some improvement, we should do what a fund manager would do :</p>

<ol>
<li>Estimate the return on investment</li>
<li>If it is good enough, do it now</li>
</ol>


<p>Obviously, large refactorings should also be split into smaller <del>value adding</del> cost reducing items. But then what ?</p>

<p><a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?ie=UTF8&amp;qid=1470290668&amp;sr=8-1&amp;keywords=the+nature+of+software+development">{% img center /imgs/2016-08-02-when-the-boy-scout-rule-fails/nature-of-software.jpg The cover of &ldquo;The Nature of Software Development&rdquo; %}</a></p>

<p>In <a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable/dp/1941222374/ref=sr_1_1?ie=UTF8&amp;qid=1470290668&amp;sr=8-1&amp;keywords=the+nature+of+software+development">The Nature of Software Development</a> Ron Jefferies says that we need a unique value-based prioritization strategy for everything, including technical improvements. Once you&rsquo;ve got that, there&rsquo;s no sense in splitting and embedding your refactoring in other tasks, this will just increase your work in progress, reducing your throughput and cycle time.</p>

<p>Frankly, I think that&rsquo;s easier said than done. I can <em>think</em> of two ways :</p>

<ul>
<li>As Ron Jefferies tends to say, have a jelled-cross-functional team discuss and prioritize collectively</li>
<li>As <a href="http://reinertsenassociates.com/technical-debt-adding-math-metaphor/">Don Reintersen</a> advocates, use an <a href="/a-plan-for-technical-debt-lean-software-development-part-7/">economical framework</a> to estimate the return on investment</li>
</ul>


<p>At least that&rsquo;s a starting point !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is There Any Room For The Not-Passionate Developer ?]]></title>
    <link href="http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer/"/>
    <updated>2016-07-26T06:53:00+00:00</updated>
    <id>http://philippe.bourgau.net/is-there-any-room-for-the-not-passionate-developer</id>
    <content type="html"><![CDATA[<p><a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/ref=sr_1_1?ie=UTF8&amp;qid=1470025727&amp;sr=8-1&amp;keywords=the+passionate+programmer">{% img center /imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/passionate-programmer.jpg The cover of The Passionate Programmer book %}</a></p>

<p>In <a href="https://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&amp;qid=1469597091&amp;sr=8-1&amp;keywords=rework">Rework</a>, <a href="https://basecamp.com/">Basecamp</a> guys David Heinemeier Hansson and Jason Fried advise to <a href="https://signalvnoise.com/posts/902-fire-the-workaholics">&ldquo;Fire the workaholics&rdquo;</a>, while in <a href="https://www.amazon.com/Zero-One-Notes-Startups-Future/dp/0804139296/ref=sr_1_1?ie=UTF8&amp;qid=1469801854&amp;sr=8-1&amp;keywords=zero+to+one">Zero to One</a> Peter Thiel argues that great working conditions (as described within Google for example) result from 10x technological advantages, not the other way round.</p>

<p>Back in 1983, Bill Gates said :</p>

<blockquote><p>You have to think it’s a fun industry. You’ve got to go home at night and open your
mail and find computer magazines or else you’re not going to be on the same
wavelength as the people [at Microsoft].</p></blockquote>

<p>Where do we stand now ? Do you need to live and breath programming to remain a good developer ?</p>

<h2>What about the 40h per week rule ?</h2>

<p>{% img center /imgs/2016-07-26-is-there-any-room-for-the-not-passionate-developer/productivity.jpg A graph of the productivity when working overtime %}</p>

<p>Studies have repeatedly demonstrated that 40h per week is the most productive work load, but in <a href="https://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017930">Outliers, the Story of Success</a> Malcolm Gladwell explains that getting fast to the 10000 hours of practice is a required road to success. As my Aïkido professor says, the more you practice, the better you get &hellip;</p>

<p>In <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1469801992&amp;sr=1-1&amp;keywords=soft+skills+the+software+developer%27s+life+manual">Soft Skills: The software developer&rsquo;s life manual</a> John Somnez also makes the point for hard work, that while he long believed that smart work would be enough, it&rsquo;s only when he put more in that he managed to drastically change his career.</p>

<p>During an <a href="http://calacanis.com/2008/03/07/how-to-save-money-running-a-startup-17-really-good-tips/">argument</a>, DHH argued in favor of work life balance whereas Jason Calacanis said that working in a startup had to be an all-in activity. In the end, they agreed that what matters is passion.</p>

<p>From my own experience, whenever I work on something I am passionate about :</p>

<ul>
<li>I am more productive</li>
<li>I feel energized rather than dulled by the work</li>
</ul>


<p>When I look around me, all the great developers I know are passionate and putting in more than 40 hours per week in programming. I also noticed that passion and efforts have always been pretty good indicators of future skills.</p>

<p>But then, how do passionate people manage to remain productive when working more than 40 hours per week ?</p>

<h2>What about the under the shower idea ?</h2>

<p>In <a href="https://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050">Pragmatic Thinking and Learning: Refactor Your Wetware (Pragmatic Programmers)</a> (which is a great book BTW), Andy Hunt explains that our R-mode works in the background, and needs time away from the task at hand to come up with &ldquo;out of the box&rdquo; creative solutions.</p>

<p>XP argues for a <a href="http://www.sustainablepace.net/what-is-sustainable-pace">sustainable pace</a>, but at the same time, Uncle Bob says that we should put in 80 hours of work per week to remain &lsquo;professional&rsquo; (I guess that&rsquo;s from <a href="https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_2?ie=UTF8&amp;qid=1470026034&amp;sr=8-2&amp;keywords=the+clean+code">The Clean Coder</a> if I remember correctly).</p>

<p>On my side, 6 to 8 solid hours of pair-programming on the same subject is the most I can do before becoming a <a href="http://c2.com/cgi/wiki?NetNegativeProducingProgrammer">Net Negative Producing Programmer</a>. But I can do more programming per day if I work on a side project at the same time though !</p>

<p>I guess that&rsquo;s how passionate people do it, they have different topics outside of their main work :</p>

<ul>
<li>they read books about programming</li>
<li>they have their own <a href="http://www.sideprojectbook.com/">side projects</a></li>
<li>they read articles about programming</li>
<li>they might maintain a programming blog</li>
<li>they might attend, organize or speak at meetup</li>
</ul>


<p>Most of the time, this does not make for more work, but rather for more learning. If I&rsquo;ve noticed that all the great programmers around me are passionate and strive to improve at their craft, I&rsquo;ve also noticed that overworked workaholics usually aren&rsquo;t very productive.</p>

<h2>Special challenges for mums and dads</h2>

<p>I think that Bill Gates 1983 statement still holds. If you are not passionate about programming, you&rsquo;ll have a hard time remaining and succeeding as a programmer in the long run.</p>

<p>The great thing about all this passion is that we can experience an energized work environment, always bubbling with change and novelty. On the flip side, keeping up with all is not always easy.</p>

<p>As we developers gain more experience, we tend to loose patience with everything that just feels as a pain in the ass, and will want :</p>

<ul>
<li>Powerful languages and technologies</li>
<li>An efficient working environment</li>
<li>Smart colleagues</li>
</ul>


<p>Unfortunately, that might also be the moment in your life when you become a parent, and you&rsquo;ll want  a stable income to sustain your family and some time to spend with your kids.</p>

<p>That is when things get tricky. Neither can you jump ship for the next cool and risky startup where you&rsquo;ll do great things, nor can you find enough time moonlighting to improve your skills &hellip; To add pain to injury, even with 10 years of experience in various languages and technologies, most companies won&rsquo;t look at your resume unless it contains good keywords &hellip; It looks like the developer&rsquo;s version of  <a href="https://www.amazon.com/Innovators-Dilemma-Revolutionary-Change-Business/dp/0062060244/ref=sr_1_sc_1?ie=UTF8&amp;qid=1470024448&amp;sr=8-1-spell&amp;keywords=the+innovator%27s+dilemns">The Innovator&rsquo;s Dilemna</a> !</p>

<p>Lack of passion and parenthood might partially explain why people stop being developers after a while. I can quickly think of 2 bad consequences of this :</p>

<ul>
<li>We tend to reinvent the wheel quite a lot (I&rsquo;m looking at you, .js frameworks &hellip;)</li>
<li>We might be meta ignoring (ignoring that we ignore) people skills that could make us all more efficient</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Years of Blogging About Software]]></title>
    <link href="http://philippe.bourgau.net/5-years-of-blogging-about-software/"/>
    <updated>2016-06-27T04:04:00+00:00</updated>
    <id>http://philippe.bourgau.net/5-years-of-blogging-about-software</id>
    <content type="html"><![CDATA[<p>5 years ago, I started blogging. I started really casually, my posts were personal reminders and notes rather than real well thought of articles. Nevertheless, it did me great good :</p>

<ul>
<li>I&rsquo;ve been invited to talk at meetups</li>
<li>I&rsquo;ve had the joy of seeing some articles being tweeted many times</li>
<li>I received interesting job offers from all over the world</li>
</ul>


<p>6 months ago, after reading <a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?ie=UTF8&amp;qid=1467000033&amp;sr=8-1&amp;keywords=soft+skills">Soft Skills: The software developer&rsquo;s life manual</a>, I set up the practice of writing at least one article per week, and here is my (very encouraging) graph of sessions since then:</p>

<p>{% img center /imgs/2016-06-27-5-years-of-blogging-about-software/analytics.jpg The steadily increase curve of the sessions on my blog per month %}</p>

<h1>Excuses Why Not To Blog</h1>

<p>Here is a collection of the (bad) excuses you&rsquo;ll often hear people say for not blogging :</p>

<blockquote><p>I don&rsquo;t know how to write &hellip;</p></blockquote>

<p>Blogging regularly is actually a pretty good way to improve your writing skills. As usual, the key is to fake it until you make it.</p>

<blockquote><p>I&rsquo;m not into this social media stuff &hellip;</p></blockquote>

<p>You don&rsquo;t need to share anything personal on your software blog. In the end, your blog is a professional tool.</p>

<blockquote><p>I don&rsquo;t have anything interesting to say &hellip;</p></blockquote>

<p>They are others in the same situation as you who would like to see more posts about the kind of uninteresting things you just discovered. Wouldn’t you have liked someone to have written the newby article about « how to do XXX » you just spent 3 days to crack ?</p>

<blockquote><p>I don&rsquo;t have the time &hellip;</p></blockquote>

<p>Make it ! Time is never found, it is made. In the end, it’s just a matter of prioritization.</p>

<p>Obviously, there are other totally valid reasons why not to blog, but I&rsquo;ll assume you&rsquo;re able to recognize those.</p>

<h1>Why Would You Blog ?</h1>

<p>On the other side, if you jump into blogging, you can expect a lot of returns :</p>

<ul>
<li>First thing is that you&rsquo;ll obviously gain more visibility. I&rsquo;ve got readers from all over the world, and my articles are sometimes re-tweeted many times.</li>
<li>You&rsquo;ll improve your writing skills. Writing skills turn out to be unexpectedly important for <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">software writers</a> !</li>
<li>In order to lay down your ideas about something, you&rsquo;ll need to dig a bit more into. It is said to be the last step to learning.</li>
<li>It can act as a personal documentation. I used to write mine as a how-to notepad on which I could refer later on.</li>
<li>If you have a day job, you can re-post your articles there. You should gain extra visibility and expose the company to new ideas.</li>
</ul>


<h1>How to start</h1>

<p>Once you&rsquo;ve decided that you want to blog, starting should not be an issue.</p>

<h2>Pick a platform</h2>

<p>There are a lot of blogging platforms out there. For programmers, I would recommend a few though :</p>

<p>{% img center /imgs/2016-06-27-5-years-of-blogging-about-software/platforms.jpg Logos of my recommended blogging platforms %}</p>

<table>
<thead>
<tr>
<th>Platform </th>
<th> Pros </th>
<th> Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://octopress.org/">Octopress</a> </td>
<td> Free, Open Source, Github hosting, static HTML generation, markdown &amp; Git based, made for programmers </td>
<td> Theming can be rocky</td>
</tr>
<tr>
<td><a href="https://medium.com/">Medium</a>    </td>
<td> Free, no setup, good looking, simple to use </td>
<td> It&rsquo;s a private company, so it could close some day ! It happened to <a href="http://www.posterous.com">postero.us</a> (I remember, I was there …)</td>
</tr>
<tr>
<td><a href="https://posthaven.com/">Posthaven</a> </td>
<td> Created by the founders of postero.us, sustainable, guarantees to keep it live for ever, can post by email ! </td>
<td> Nothing special for programmers, 5$ / month</td>
</tr>
<tr>
<td><a href="https://logdown.com/">Logdown</a>   </td>
<td> Looks like a hosted version of Octopress, without the hassle ! </td>
<td> 50$/year</td>
</tr>
</tbody>
</table>


<p>Then, it&rsquo;s up to you !</p>

<h2>Start with how-to articles</h2>

<p>When I started my blog, it was mostly has a personal how-to reference. It allowed me to come back to it and find out how I did something last time. I thought that if it was important to me, it must be important to others as-well !</p>

<h2>Blog regularly</h2>

<p>Blogging every week made a huge difference to me. My traffic went from erratic to steadily increasing. I am currently observing a 11% traffic increase per month. This means that it nearly quadruples every year : I&rsquo;m not going to stop now !</p>

<h2>Integrate with the web</h2>

<p>This boils down to social networks and analytics. Obviously, you&rsquo;ll want to use Google Analytics to see how people are reading your content. I&rsquo;m using the venerable <a href="https://feedburner.google.com">Feedburner</a> to automatically post my new articles on <a href="https://twitter.com">twitter</a>. There&rsquo;s an option to use your post categories as hashtags, be sure to make it works, it brings a lot of traffic.</p>

<p>It&rsquo;s all up to you now !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software is like writing and revising a giant book]]></title>
    <link href="http://philippe.bourgau.net/software-is-like-writing-and-revising-a-giant-book/"/>
    <updated>2016-05-23T03:52:00+00:00</updated>
    <id>http://philippe.bourgau.net/software-is-like-writing-and-revising-a-giant-book</id>
    <content type="html"><![CDATA[<p>With time, I discovered a way of explaining the subtleties of my developer job to my uninformed relatives and friends.</p>

<p>Sharing what your developer job is about with others can be very frustrating. Some people think you are &ldquo;Just playing around with computers&rdquo; as if it was not serious work. Others think that it is an extremely Cartesian and solitary activity with no place for communication or creativity. Trying to explain the diversity and richness of a developer&rsquo;s work is often a disappointing experience.</p>

<h2>The book metaphor</h2>

<p>{% img center /imgs/2016-05-23-software-is-like-writing-and-revising-a-giant-book/book.jpg An old book %}</p>

<p>I explain to people that writing software is not unlike writing a huge book. A book long many millions of lines. I explain that the challenge is to maintain the whole story of the book coherent. I stress how difficult this is given that no one can take the time to read the full book, that the authors come and go, and that the book is under constant heavy revision.</p>

<h2>Details of our work</h2>

<p>The metaphor is quite valid and even holds about more subtle aspects of our work. Here is a summary of the last discussion I had about the book metaphor :</p>

<blockquote><ul>
<li>(Him) Do you have some &lsquo;gatekeepers&rsquo; for different sections of the story to make sure that these parts remain coherent ?</li>
<li>(Me) That&rsquo;s what we would call strong code ownership, this was the norm 20 years ago, but that the industry is moving to more collective code ownership, in order to decrease the bus factor.</li>
<li>(Him) What is the bus factor ?</li>
<li>(Me) The number of person who need to be hit by a bus to block your development progress</li>
<li>(Him) I see, that&rsquo;s kind of funny. But then, does that mean that any developer can change any part of the code ? Isn&rsquo;t that dangerous ?</li>
<li>(Me) Sure that would be difficult, that&rsquo;s not really how we do it. We make a lot of efforts to split the big story in many smaller independent ones as much as possible. This way, teams specialize on different &lsquo;chapters&rsquo; and work collectively within it.</li>
<li>(Him) I see</li>
<li>(Me) And if you need to change something in another &lsquo;chapter&rsquo; you should ask the guys who know it better to help you.</li>
<li>(Him) That makes sense. And what happens if two developers want to modify the same part of the story at the same time</li>
<li>(Me) That can happen. People might even want to modify the story in conflicting ways ! We&rsquo;ve got tools, processes and best practices to minimize this. If nothing is done, we&rsquo;ll get what we call a &lsquo;merge conflict&rsquo;.</li>
<li>(Him) Ho &hellip; I wouldn&rsquo;t have guessed, but it seems collaboration is really important in your work, isn&rsquo;t it ?</li>
<li>(Me) Sure it is !</li>
</ul>
</blockquote>

<h2>We are software writers</h2>

<p>All this reminds me of DHH&rsquo;s talk about writing software :</p>

<iframe class="center" width="560" height="315" src="https://www.youtube.com/embed/9LfmrkyP81M" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I fixed the unknown language Pygments error in Octopress]]></title>
    <link href="http://philippe.bourgau.net/how-i-fixed-the-unknown-language-pygments-error-in-octopress/"/>
    <updated>2016-05-13T03:54:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-i-fixed-the-unknown-language-pygments-error-in-octopress</id>
    <content type="html"><![CDATA[<p>Last time I tried to insert a code snippet in my <a href="http://octopress.org/">Octopress</a> blog, I was hurt by the following error :</p>

<p>```
vagrant@ae4a04cebb73:/vagrant$ bundle exec rake generate</p>

<h2>Generating Site with Jekyll</h2>

<p>unchanged sass/screen.scss
Configuration from /vagrant/_config.yml
Building site: source &ndash;> public
/vagrant/plugins/pygments_code.rb:27:in `rescue in pygments': Pygments can&rsquo;t parse unknown language: ruby. (RuntimeError)</p>

<pre><code>from /vagrant/plugins/pygments_code.rb:24:in `pygments'
from /vagrant/plugins/pygments_code.rb:14:in `highlight'
from /vagrant/plugins/backtick_code_block.rb:37:in `block in render_code_block'
from /vagrant/plugins/backtick_code_block.rb:13:in `gsub'
from /vagrant/plugins/backtick_code_block.rb:13:in `render_code_block'
from /vagrant/plugins/octopress_filters.rb:12:in `pre_filter'
from /vagrant/plugins/octopress_filters.rb:28:in `pre_render'
from /vagrant/plugins/post_filters.rb:112:in `block in pre_render'
from /vagrant/plugins/post_filters.rb:111:in `each'
from /vagrant/plugins/post_filters.rb:111:in `pre_render'
from /vagrant/plugins/post_filters.rb:166:in `do_layout'
from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/post.rb:195:in `render'
from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:200:in `block in render'
from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:199:in `each'
from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:199:in `render'
from /vagrant/vendor/bundle/gems/jekyll-0.12.1/lib/jekyll/site.rb:41:in `process'
from /vagrant/vendor/bundle/gems/jekyll-0.12.1/bin/jekyll:264:in `&lt;top (required)&gt;'
from /vagrant/vendor/bundle/bin/jekyll:22:in `load'
from /vagrant/vendor/bundle/bin/jekyll:22:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>I had been switching to <a href="https://www.docker.com/">Docker</a> in <a href="https://www.vagrantup.com/">Vagrant</a> to host my Octopress installation, but that did not seem related &hellip;</p>

<h2>Plan A : Upgrade Octopress</h2>

<p>It turned out it was related to my migration to Vagrant and Docker.xs This kind of nasty error often comes from obsolete environment. <a href="https://github.com/imathis/octopress/issues/1173">Internet confirmed</a> confirmed it :</p>

<ul>
<li>Ubuntu now uses Python3 instead of Python2</li>
<li>Octopress2 uses an old version of Pygments</li>
<li>That version of Pygments requires Python2</li>
</ul>


<p>I thought that I did not want to play <a href="/ruby-thirdparties-best-practices/">this game</a> against open source libs, so I set out to update. Octopress 3 has been released. It&rsquo;s not yet documented yet, and there is no official upgrade guide, but some guys have done it :</p>

<ul>
<li><a href="http://samwize.com/2015/09/30/migrating-octopress-2-to-octopress-3/">http://samwize.com/2015/09/30/migrating-octopress-2-to-octopress-3/</a></li>
<li><a href="http://dgmstuart.github.io/blog/2016/01/22/migrating-from-octopress-2-to-3/">http://dgmstuart.github.io/blog/2016/01/22/migrating-from-octopress-2-to-3/</a></li>
<li><a href="https://www.justinrummel.com/migrating-from-octopress-2-to-octopress-3/">https://www.justinrummel.com/migrating-from-octopress-2-to-octopress-3/</a></li>
</ul>


<p>I tried it &hellip; but I stopped before the end. It&rsquo;s kind of working, but fundamental features like category archives required too much Jekylling for me at the time. And themes are still an issue &hellip; I mean, stock theme uses a clean and simple gem based update workflow, but most other themes rely on a tricky git clone-merge update workflow.</p>

<h2>Plan B : Find a hosted blog engine for hackers</h2>

<p>I found quite a few options :</p>

<ul>
<li><a href="http://medium.com">Medium</a> Looks cool, but there is no simple migration tool, and I&rsquo;ve been burned by postero.us shutting down, I want to keep control on my content</li>
<li><a href="https://posthaven.com/">Posthaven</a> Having loved postero.us, this one seems cool, It&rsquo;s just I&rsquo;m not sure the guys are keeping the motivation to increase their feature list with their current business model</li>
<li><a href="http://ghost.org">Ghost</a> Looked great, but too expensive for me (19$ per month)</li>
<li><a href="http://codrspace.com">Codrspace</a> This is a special blogging platform for coders, but it seems it has not been updated for a long time</li>
<li><a href="https://logdown.com/">LogDown</a> This also is a special blogging platform for hackers. It seemed great and had everything I was looking for &hellip; I was ready to spend the 50$ per year for it as it could save me a lot of hassle. Unfortunately, I could not find a way to forward the categories of a post as <a href="https://twitter.com/pbourgau">Twitter</a> hashtags as I&rsquo;ve been doing with Octopress and <a href="https://feedburner.google.com">Feedburner</a></li>
</ul>


<p>In the end, I was rather disappointed by the alternatives, even though I was ready to pay for them.</p>

<h2>Plan C : Fix the error in Octopress 2</h2>

<p>Eventually, the fix was rather easy. People had fixed it by patching mentos.py file in the pygments.rb gem to run Python 2 instead of the stock Python. That&rsquo;s not great because it means that I&rsquo;d have to redo the patch every time I updated my gems, or rebuilt my workspace. Here is what I added to my Vagrantfile instead :</p>

<p><code>
sudo apt-get -y install python2.7
sudo ln -sf /usr/bin/python2.7 /usr/bin/python
</code>
<a href="https://github.com/philou/philou.github.com/commit/ae14c511b682295ed7fdcb3b1a818926f803dd3a">Here</a> is the commit on my Github repo.</p>

<h2>Conclusion</h2>

<p>I&rsquo;m sticking with Octopress2 for the moment. Maybe I&rsquo;ll re-try to migrate to Octopress3 later on, when an official migration tool or <a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">guide</a> is available. Meanwhile, I&rsquo;m still dreaming of my perfect blogging platform :</p>

<ul>
<li>Open source</li>
<li>Static HTML generation</li>
<li>Self or SAAS hosted</li>
<li>Great integration with social media and the web</li>
<li>Easy to maintain</li>
<li>Plugable themes</li>
</ul>


<p>I&rsquo;m looking for my next side project at the moment, that could be a useful one ! Anyone interested ?</p>
]]></content>
  </entry>
  
</feed>
