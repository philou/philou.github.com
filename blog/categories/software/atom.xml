<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2016-04-30T06:51:17+00:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Books About Data Driven Lean Software Development]]></title>
    <link href="http://philippe.bourgau.net/5-books-about-data-driven-lean-software-development/"/>
    <updated>2016-04-29T05:25:00+00:00</updated>
    <id>http://philippe.bourgau.net/5-books-about-data-driven-lean-software-development</id>
    <content type="html"><![CDATA[<p>In french, we say &ldquo;Le cordonnier est toujours le plus mal chaussé&rdquo; which I found an English equivalent in &ldquo;the shoemaker’s son always goes barefoot&rdquo;. I believe this is nowhere more true than in the software industry !</p>

<p>&ldquo;Software is eating the world&rdquo; they say. Software is now able to do things that only humans used to be. So why the hell are we driving our projects as if we were a horde of amateur hitch hikers ?</p>

<h2>What does it mean to be data driven ?</h2>

<p>Being data driven would allow us to answer questions such as :</p>

<ul>
<li>How much is the feature we delivered last week contributing to the bottom line ?</li>
<li>How much is the feature we are currently developing expected to contribute to the bottom line ?</li>
<li>What are the estimated cost <em>and value</em> of increasing our test coverage of 1% ?</li>
<li>What are the estimated interests and nominal amounts of our current technical debt ?</li>
<li>Which is the most valuable : improving our build system or building this new feature ?</li>
</ul>


<p>Most projects I&rsquo;ve worked in have absolutely no clue about the answers to these questions. The decision is left to experts, to the one with most influence, or simply to the developer, who can do how he thinks is best &hellip;</p>

<h2>The books</h2>

<p>Hopefully, some people are thinking differently, they believe it is possible to quantify all this, they even explain how !</p>

<h3><a href="http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172/ref=sr_1_1?ie=UTF8&amp;qid=1461906957&amp;sr=8-1&amp;keywords=running+lean">Running Lean: Iterate from Plan A to a Plan That Works</a> by <a href="https://ashmaurya.com/">Ash Maurya</a></h3>

<p><a href="http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172/ref=sr_1_1?ie=UTF8&amp;qid=1461906957&amp;sr=8-1&amp;keywords=running+lean"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/running_lean.jpg" title="The cover of the Running Lean book" ></a></p>

<p>Details a very practical guide about the lean startup process, which is a very good starting point to any kind of lean software development.</p>

<h3><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1461906998&amp;sr=8-1&amp;keywords=kanban+anderson">Kanban: Successful Evolutionary Change for Your Technology Business</a> by <a href="http://www.djaa.com/">David J. Anderson</a></h3>

<p><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1461906998&amp;sr=8-1&amp;keywords=kanban+anderson"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/kanban.jpg" title="The cover of the Kanban book" ></a></p>

<p>This book explains with real world examples how to use Kanban board to control your work queues and improve your flow of work, a real basic for any lean product development.</p>

<h3><a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?ie=UTF8&amp;qid=1461907905&amp;sr=8-1&amp;keywords=principles+of+product+development+flow">The Principles of Product Development Flow: Second Generation Lean Product Development</a> by <a href="http://reinertsenassociates.com/">Donald G. Reinertsen</a></h3>

<p><a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_1?ie=UTF8&amp;qid=1461907905&amp;sr=8-1&amp;keywords=principles+of+product+development+flow"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/flow.jpg" title="The cover of the Flow book" ></a></p>

<p>This book is rather theoretical, but it links all subjects together : lean startup, risk management, Kanban, and economics. I guess it&rsquo;s a must read on the subject.</p>

<h3><a href="http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273/ref=sr_1_1?ie=UTF8&amp;qid=1461908177&amp;sr=8-1&amp;keywords=how+to+measure+anything">How to Measure Anything: Finding the Value of Intangibles in Business</a> by <a href="http://www.hubbardresearch.com/">Douglas W. Hubbard</a></h3>

<p><a href="http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273/ref=sr_1_1?ie=UTF8&amp;qid=1461908177&amp;sr=8-1&amp;keywords=how+to+measure+anything"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/how_to_measure_anything.jpg" title="The cover of How to measure anything" ></a></p>

<p>If the flow book gives a big picture view of what you want, this one explains how you can actually measure all the aspects of your product development in $ value.</p>

<h3><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_sc_1?ie=UTF8&amp;qid=1461908398&amp;sr=8-1-spell&amp;keywords=walzting+with+bears">Waltzing With Bears: Managing Risk on Software Projects</a> by <a href="http://www.systemsguild.com/">Tom DeMarco and Timothy Lister</a></h3>

<p><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_sc_1?ie=UTF8&amp;qid=1461908398&amp;sr=8-1-spell&amp;keywords=walzting+with+bears"><img class="center" src="/imgs/2016-04-29-5-books-about-data-driven-lean-software-development/waltzing_with_bears.jpg" title="The cover of Waltzing with bears" ></a></p>

<p>Although this book is getting old, and is a bit outdated when compared to agile development practices, it provides real world examples of how scientific measurement can be applied to software product development.</p>

<h2>An opportunity</h2>

<p>Reading these books was a real eye opener for me. The software development world is plagued with cargo cult and supposed best practices. We follow advises, but most often without verifying if they actually work ! I believe that by applying the techniques in these books, we could create standard ways to measure the values of productivity, technical debt, quality, testing &hellip;</p>

<p>I see real opportunities to avoid a lot of useless argument between proponents of A and B, but also to communicate better with all stakeholders and finally, to reduce stress for all of us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Long Can Your Inner Drive Last ?]]></title>
    <link href="http://philippe.bourgau.net/how-long-can-your-inner-drive-last/"/>
    <updated>2016-02-25T06:41:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-long-can-your-inner-drive-last</id>
    <content type="html"><![CDATA[<p>Any software project (job, startup or side project) will require some time before one can get real feedback from real users.</p>

<p><img class="center" src="/imgs/2016-02-25-how-long-can-your-inner-drive-last/exhausted-runner.jpg" title="An exhausted runner" ></p>

<h2>The hard truth</h2>

<p>Your inner drive will only last up to some point. Without feedback, your motivation will die, and this will kill your project.</p>

<h2>How to deal with it ?</h2>

<h3>Know it before you start</h3>

<p>From my own past experiences, I could find that my inner drive has usually disappeared after 2 years (I don&rsquo;t want a word about the time I actually wasted to discover this &hellip;). You too can try to estimate how long you can keep on without much feedback, go through your previous experiences to get an idea.</p>

<p>Once you have an idea of how long you can keep on without much feedback, you&rsquo;re in a much better place to decide to embark on a new project.</p>

<h3>Don&rsquo;t drown in the code</h3>

<p>I once started a <a href="http://philippe.bourgau.net/rip-mes-courses-dot-fr/">side project</a> partly because I was fed up with the poor technologies I was asked to use at work. My project was some kind of salvation. The drawback of this situation is that I tended to dive into code way too early ! Building a real product takes time, and that&rsquo;s a sure way to get late feedback.</p>

<h3>Use Lean Startup techniques</h3>

<p><a href="http://www.amazon.com/UX-Lean-Startups-Experience-Research/dp/1449334911"><img class="center" src="/imgs/2016-02-25-how-long-can-your-inner-drive-last/ux-for-lean-startups.jpg" title="The cover of the book &lsquo;UX For Lean Startups&rsquo;" ></a></p>

<p><a href="http://theleanstartup.com/">Lean Startup</a> is all about getting constant user feedback, even before having any user. I especially liked the book <a href="http://www.amazon.com/UX-Lean-Startups-Experience-Research/dp/1449334911">UX for Lean Startups</a> that explains all the ways to get feedback from the cheapest (interviews) to the most expensive (HTML mockups) without actually coding anything</p>

<h3>Watch out for the Duke Nukem Forever syndrome</h3>

<p>Be very careful of endeavors that promise an Eldorado after long hard work that should last months or years. Products need to ship early with as fewest features, not late with many features. If you embark on such project, you&rsquo;re pretty likely to :</p>

<ul>
<li>burn out before the end</li>
<li>deliver something that is already outdated the day it goes live</li>
<li>never deliver anything</li>
</ul>


<p>If you&rsquo;re already on such a project, I strongly suggest quitting.</p>

<h2>End word</h2>

<p>Maybe getting real feedback from real users takes time, but getting very early feedback from future users is almost always possible.</p>

<p>Keep going, get some feedback !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Developers Are Free]]></title>
    <link href="http://philippe.bourgau.net/great-developers-are-free/"/>
    <updated>2015-12-31T12:24:00+00:00</updated>
    <id>http://philippe.bourgau.net/great-developers-are-free</id>
    <content type="html"><![CDATA[<p>For many reasons. But mostly because they are key to efficiently growing a software organization.</p>

<p><img class="center" src="/imgs/2015-12-31-great-developers-are-free/cat-codes-for-food.jpg" title="A funny picture sleeping on a keyboard, with the mention &lsquo;Will code for food&rsquo;" ></p>

<h2>A tale of 2 teams</h2>

<p>Let&rsquo;s have a look at 2 software teams in the world of corporate finance.</p>

<h3>The junior in-house team</h3>

<p><a href="http://www.lefigaro.fr/emploi/2013/12/07/09005-20131207ARTFIG00309-bruit-temperature-air8230-les-salaries-reserves-sur-l-open-space.php"><img class="center" src="/imgs/2015-12-31-great-developers-are-free/open-space.jpg" title="A big corporate open space" ></a></p>

<p>One is an in-house software development team in a large bank. The project already has a bad reputation among developers.The bank has difficulties to hire so the team is constituted of 10 rather junior developers. Unfortunately, without guidance and long term vision, the quality of the code suffers. It looks like an ad-hoc composition of various technolgies, glue code, and reinvented frameworks. The overall result is a barely good enough product that costs a small fortune in maintainance and support. The user experience is awful, which make it difficult to the the team leaders and the users to collaborate effectively. As a result of all this, the project is suffering from high turnover. Managing this project is really challenging &hellip; and kind of depressing.</p>

<h3>The experienced software team</h3>

<p><a href="http://www.personalized-software.ie/aboutus"><img class="center" src="/imgs/2015-12-31-great-developers-are-free/experienced-team.jpg" title="An experienced software team" ></a></p>

<p>Now let&rsquo;s imagine the same product developed at a software house. It&rsquo;s been on the market for a while now, but new features are regularly added to it at a good pace. The product is solid and the users are happy using it. The structure of the team is completely different : 5 developers, mainly experienced, coming from various backgrounds. As a result, the team builds on all their different expertises to build real competitive advantages. They tend to get into healthy debates about a lot of things, such as :</p>

<ul>
<li>Should we re-use or re-write ?</li>
<li>Is this gold plating or plain technical debt ?</li>
<li>Which technology should we use to build this ?</li>
</ul>


<p>In the end, that makes the product even better. The humane side of the team is also completely different. These experienced developers have all been exposed to the big picture during their careers, and they know things like :</p>

<ul>
<li>&lsquo;Business talk&rsquo; and so they can discuss product topics with the product managers</li>
<li>The best way to go through chores at work is to do them right now</li>
<li>Enough management, testing, ops to make the team self organized</li>
</ul>


<p>The single junior developer in the team tends to mimic this model, and has ease finding mentors, to teach him their trade and to give him career counsels.</p>

<p>As a result, the product and the team remain healthy, and keep providing benefits to all stakeholders.</p>

<h2>Benefits of experienced teams</h2>

<p>First, from a purely short term financial point of view, it&rsquo;s a no brainer ! Even if you pay experienced developers twice as much as juniors, the costs will still be on par. But the difference in created value is huge !</p>

<p>Let&rsquo;s then have a look at the longer term, organizational aspect of things. Obviously, managing such teams requires a lot less work ! Both because of their size and because experienced developers tends to manage themselves very well &hellip; Promoting self-organized &amp; cross-functionnal teams is a great opportunity to reduce the management cost and friction, making the organization more reactive and cost efficient in the long run.</p>

<h2>What is an experienced developer ?</h2>

<p>Obviously, I&rsquo;ve worked with people that were experienced on paper, but not in practice. I <a href="http://www.jrothman.com/htp/interview/2004/12/whats-a-year-of-experience/">read</a> that repeating 10 times the same year of work only amounts to 1 year of experience.</p>

<p>If I was asked to give a definition, I&rsquo;d say that experienced developers have worked on different kind of systems (embeded, web, client, server &hellip;) using different technologies (Java, Ruby, C, Spring, Rails, Javascript &hellip;). Their experiences need not be professional, I&rsquo;ve seen a physics teacher that hacked himself into a great hacker through side projects and open source. Speaking of the subject, good developers always spent a lot of time learning, reading, doing side projects and contributing to open source. Some can be found in local user groups and online programming communities.</p>

<h2>So How do you get them ?</h2>

<p>I can only think of 3 obvious ways :</p>

<ul>
<li>train them</li>
<li>keep them</li>
<li>hire them</li>
</ul>


<p>I&rsquo;m pretty sure training them will not be an issue if you already have enough of them. So that brings us to the 2 other points.</p>

<p><a href="https://www.prestashop.com/blog/en/guided-visit-prestashops-new-paris-headquarters/"><img class="center" src="/imgs/2015-12-31-great-developers-are-free/prestashop.jpg" title="The prestashop offices in Paris" ></a></p>

<p>Lot&rsquo;s of articles have been written about attracting and keeping the best developers. Some companies even made it <a href="http://www.joelonsoftware.com/articles/HighNotes.html">their differentiating point</a>. Here are a few links :</p>

<ul>
<li>In his post <a href="http://avc.com/2012/02/the-management-team-guest-post-from-joel-spolsky/">&ldquo;The Management Team&rdquo;</a> Joel Splosky details the inverted pyramid model</li>
<li>Joel Spolsky&rsquo;s (again) <a href="http://www.joelonsoftware.com/articles/DevelopmentAbstraction.html">Development Abstraction Layer</a> explains all the physical environment that makes programmers happy at work</li>
<li><a href="http://qz.com/169147/applications-have-doubled-to-the-company-that-discloses-its-salaries/">After disclosing employee salaries, Buffer was inundated with resumes</a> when <a href="http::/www.buffer.com">buffer.com</a> publicly disclosed <a href="https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/">their salary formula</a>, the number of applications the company received doubled</li>
<li>Spotify organizes <a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/">Hack Weeks</a> where  the company stops for a while to invent new things</li>
<li>Google summarizes it &ldquo;Do Cool Things That Matters&rdquo; in their long advertises <a href="http://www.google.com/about/careers/lifeatgoogle/">Life At Google</a></li>
</ul>


<p>These are just a few examples and are by no way the only things that motivate developers. To summarize, provide the best working conditions (careful, that not money), and communicate a lot about it.</p>

<h2>Hiring is too important to be left to HR</h2>

<p><a href="https://management30.com/product/workouts/">Jurgen Appelo</a> said</p>

<blockquote><p>Management is too important to be left to managers.</p></blockquote>

<p>I guess the same thing can be said about hiring.</p>

<p>Engineers are absolutely required to take the main role when hiring other engineers. Companies that seriously want to have the best developers on board are spending substantial engineering time on hiring. Here are some well known examples :</p>

<ul>
<li><a href="http://www.google.com/about/careers/lifeatgoogle/hiringprocess/">Google</a> is known to conduct around 9 interviews before hiring someone</li>
<li>In its <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf">Handbook for New Employee</a> Valve explicitly states that hiring is your most important role</li>
</ul>


<h2>Endword</h2>

<p>As <a href="https://en.wikiquote.org/wiki/Tom_DeMarco">Tom DeMarco</a> said about quality, in <a href="http://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/ref=sr_1_1?ie=UTF8&amp;qid=1451733851&amp;sr=8-1&amp;keywords=peopleware">Peopleware</a> :</p>

<blockquote><p>Great developers are free, but only for those who are willing to pay for them</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Dream Lean Software Development Tool (Lean Software Development part 9)]]></title>
    <link href="http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9/"/>
    <updated>2015-12-14T20:49:00+00:00</updated>
    <id>http://philippe.bourgau.net/my-dream-lean-software-development-tool-lean-software-development-part-9</id>
    <content type="html"><![CDATA[<p>Current software project tracking tools suck !</p>

<p><img class="center" src="/imgs/2015-12-14-my-dream-lean-software-development-tool-lean-software-development-part-9/it-sucks.jpg" title="A stamp that writes &ldquo;SUCKS&rdquo;" ></p>

<p>By writing <a href="/the-flow-book-summary-lean-software-development_part_1/">this series of posts</a>, I realized that they should help us to prioritize rather than just serving as a nice GUIs on top of a ticket database.</p>

<p>Let&rsquo;s take the story of developer Joe as an example. Joe is working for Megacorp, where he makes a good living, but feels like a small cog in the machine. He has lost the thrill of programming &hellip; He&rsquo;s still staying informed about latest trends in software world, but his job involves aging technologies. He knows that if he wants to remain in the course, he has to change gears. One day, he decides to do something <em>now</em>, and starts a side project in the hope of someday making a living out of it.</p>

<p>He does not have a large amount of money to invest in his project, so he decides to bootstrap his product using <a href="http://theleanstartup.com/">Lean Startup</a>. He reads and understands that there is a lot of different kind of activities to do if he wants to realize his dream : experiments, marketing, sales, design, coding &hellip;</p>

<p>Unfortunately, he&rsquo;s so tired of programming boring stuff that he contracted the developer bias : he starves to code cool things again ! He knows the rest is important, he tries to do some of it, but he just doesn&rsquo;t realize how <em>much</em> needs to be done. So, without realising it, he wastes a lot of time coding something that people eventually don&rsquo;t buy. After 1 or 2 years of hard work, a working product but no users, he eventually quits, quite depressed &hellip;</p>

<p>I guess you don&rsquo;t want to be Joe ! I know you&rsquo;ll think it won&rsquo;t happen to you &hellip; believe me, it can, <a href="rip-mes-courses-dot-fr/">I learned it the hard way</a> !</p>

<p>Now suppose you had a tool that estimates the expected values of all different tasks :</p>

<ul>
<li>By applying <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulations</a> to probabilistic value and size ranges, it could compute which features we should work on first. As a side effect, this could give us some release date estimates for a feature, depending on its position in the backlog.</li>
<li>By having explicit experiment tasks with target value or size ranges, it could compute the value of information and prioritize experiments versus other tasks.</li>
<li>Crossing informations from IDEs, VCS, Quality Trackers and CIs, it could detect technical debt items (aka. productivity opportunities), compute their values in the long run, and prioritize them with other tasks.</li>
<li>If we found a way to integrate marketing, sales and design tasks, any kind of activity could be stored in the backlog, valued and prioritized.</li>
</ul>


<p>Here is what the backlog could look like :</p>

<p><img class="center" src="/imgs/2015-12-14-my-dream-lean-software-development-tool-lean-software-development-part-9/mockup.jpg" title="A mockup of the backlog view of such a product" ></p>

<p>All different kind of activities (developments, marketing, experiments, refactorings) would fit in the backlog. The system would estimate the value of every task for Joe, advising him what to work on first. It would make it obvious just how much market experiments are important when starting ! With such a tool, he is a lot more likely to build his new life.</p>

<p>The good thing with such a tool is that it could be built by feeding itself. <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">Eating its own dog&rsquo;s food</a> has always been the nice thing about writing software tools.</p>

<p>I&rsquo;d like to know, what do you think of the idea ? Would you use such a tool ? Is it worth me spending my nights building it ?</p>

<p>This was 9th and last part of my <a href="/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 8 was <a href="/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/">How I&rsquo;ll Measure the Lean Startup Value of Information in My Next Side Project</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I'll measure the lean startup value of information in my next side project (Lean Software Development Part 8)]]></title>
    <link href="http://philippe.bourgau.net/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/"/>
    <updated>2015-12-07T21:19:00+00:00</updated>
    <id>http://philippe.bourgau.net/how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8</id>
    <content type="html"><![CDATA[<p>There must be a way to know the real money value of <a href="http://theleanstartup.com/">Lean Startup</a> &lsquo;knowledge&rsquo;.</p>

<p><img class="center" src="/imgs/2015-12-07-how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/knowledge-money.jpg" title="A brain or some money ?" ></p>

<p>Lean Startup is about gathering &lsquo;knowledge&rsquo; through experiments instead of building things. <a href="http://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009/ref=sr_1_3?ie=UTF8&amp;qid=1450068976&amp;sr=8-3&amp;keywords=lean+product+development">Flow book</a> suggests that the value of an information is its expected impact on the bottom line. So by combining both, there should be a way to compute a quantitative value for the knowledge.</p>

<p>The overall plan would be :</p>

<ol>
<li>Start with a rough business plan, but assume that all that&rsquo;s in it has got 1 chance out of 10 of being right</li>
<li>Design experiments to precise the likelyhood of what&rsquo;s in the business plan</li>
<li>Compute the value of each experiment as the difference of the expected bottom line after and before running it (This should be possible if relying on the business plan for other parameters)</li>
<li>Work on the task with the highest expected value, be it an experiment, a development, a sales task, or whatever</li>
<li>Adapt you business plan with any new information</li>
<li>Repeat</li>
<li>If it becomes obvious that the expected final earnings are too low, pivot</li>
</ol>


<p>Flow explains that all the principles are pretty robust to bad inputs and errors. In short, the final estimations of earnings are still a lot better than without using any specific method. In the case of Lean Startup, it means that a false business plan is a good enough starting point.</p>

<h2>How to assess the likelyhood of a figure ?</h2>

<p>By default let&rsquo;s assume the value of a feature is somewhere between 0 and your highest estimate. As we&rsquo;ll go through experiments we&rsquo;ll be able to narrow this value range and have a more accurate estimate for the real value.</p>

<p>To keep things simple we could assume that the probability of value is uniformaly distributed within this range. From what I read in <a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_1?ie=UTF8&amp;qid=1449901015&amp;sr=8-1&amp;keywords=waltzing+with+bears">Waltzing With Bears</a>, here would be a more realistic probability distribution.</p>

<p><img class="center" src="/imgs/2015-12-07-how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/Demarco-probability.png" title="The curve of the probability of value according to DeMarco" ></p>

<h2>How to estimate the value of an experiment ?</h2>

<p>I&rsquo;m not going to go into the details here, because the logic is exactly the same as with technical experiments (which <a href="/measure-the-business-value-of-your-spikes-and-take-high-payoff-risks-lean-software-development-part-4/">I already wrote about</a>)</p>

<p>Since then though, I read <a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_1?ie=UTF8&amp;qid=1449901015&amp;sr=8-1&amp;keywords=waltzing+with+bears">Waltzing With Bears</a> which presents a way of doing Monte Carlo simulations in order to estimate risks on your project. I guess the same thing could be used for value, which would save us from a lot of complex math.</p>

<p><a href="http://www.amazon.com/Waltzing-Bears-Managing-Software-Projects/dp/0932633609/ref=sr_1_1?ie=UTF8&amp;qid=1449901015&amp;sr=8-1&amp;keywords=waltzing+with+bears"><img class="center" src="/imgs/2015-12-07-how-ill-measure-the-lean-startup-value-of-information-in-my-next-side-project-lean-software-development-part-8/waltzing-with-bears.jpg" title="Cover of &lsquo;Waltzing With Bears&rsquo;" ></a></p>

<h2>When to stop doing experiments ?</h2>

<p>Isn&rsquo;t all this overkill ? One could argue that the point of Lean Startup should be to build just enough knowledge ! In fact, this value of information concept naturaly helps to find out when running the experiment is not worth it compared to actually doing the real thing.</p>

<p>BTW, a tool doing all this for your automaticaly would be great, wouldn&rsquo;t it ?</p>

<h2>What I&rsquo;ll do for my next bootstrap side project</h2>

<ol>
<li>Start with a target hourly earning rate.</li>
<li>Collect a list of projects I&rsquo;d be interested in.</li>
<li>Pick a project and write a business goal for it.</li>
<li>Assign likelyhoods and ranges on every figure in the business plan.</li>
<li>Design experiments to improve the figures.</li>
<li>Create tasks to actually build and sell the product.</li>
<li>Compute values for each of these tasks.</li>
<li>Work the most valueable first.</li>
<li>If the figures prove that I will not make my target wage with this project, I&rsquo;ll pivot, and restart from 2.</li>
<li>Otherwise, I&rsquo;ll repeat from 4.</li>
</ol>


<p>This was part 8 of my <a href="/the-flow-book-summary-lean-software-development_part_1/">suite of article about Lean Software Development</a>, Part 7 was <a href="/a-plan-for-technical-debt-lean-software-development-part-7/">A Plan for Technical Debt</a>, Part 9 will be <a href="/my-dream-lean-software-development-tool-lean-software-development-part-9/">My Dream Lean Software Development Tool</a>.</p>
]]></content>
  </entry>
  
</feed>
