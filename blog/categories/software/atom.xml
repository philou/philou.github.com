<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | Philippe Bourgau's blog]]></title>
  <link href="http://philippe.bourgau.net/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://philippe.bourgau.net/"/>
  <updated>2018-05-10T09:09:12+02:00</updated>
  <id>http://philippe.bourgau.net/</id>
  <author>
    <name><![CDATA[Philippe Bourgau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Forget unit tests, only fast tests matter]]></title>
    <link href="http://philippe.bourgau.net/forget-unit-tests/"/>
    <updated>2017-08-08T06:24:00+02:00</updated>
    <id>http://philippe.bourgau.net/forget-unit-tests</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t worry if your unit tests go to the DB, that might not be so bad.</p>

<p>When I started writing unit tests, I did not know what these were. I read <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=126923">the definition</a>, and strived to follow the recommandations :</p>

<ul>
<li>they should be independent from each other</li>
<li>they should not access the DB</li>
<li>they should not use the network</li>
<li>they should only cover a small scope of your code</li>
</ul>


<p>I started to write unit tests on my own and became <a href="http://wiki.c2.com/?TestInfected">test infected</a> pretty fast. Once I got convinced of the benefits of unit testing, I tried to spread the practice around me. I used to explain to people that it is very important to write real unit tests by the book. Otherwise, <em>Bad Things</em> would happen &hellip;</p>

<h2>How I changed my mind</h2>

<p>A few years ago, I spent a few years working on a <a href="http://rubyonrails.org/">Rails</a> side project called <a href="https://github.com/philou/mes-courses">mes-courses.fr</a>. I was using a small test gem to enforce that no unit tests were accessing the db. I had to write a lot of mocks around the code. I ended up hating mocks : they are too painful to maintain and provide a false sense of security. I&rsquo;m not alone in this camp, check <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">DHH&rsquo;s keynote at RailsConf 2014</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/9LfmrkyP81M" frameborder="0" allowfullscreen></iframe>


<p>At some point, the mock pain got so bad that I stopped all developments until I found another way. I found a pretty simple workaround : use in-memory SQLite. I got rid of all the DB access mocks. Not only were the tests easier to write and maintain, but they were as fast as before, and they covered more code.</p>

<p>That changed something fundamental in my understanding of testing</p>

<h2>It&rsquo;s all about speed baby</h2>

<p>The only thing that makes unit tests so important is that they run fast.</p>

<p>Unit tests as described in the literature run fast. Let&rsquo;s see what happens when you remove one of the recommandations for unit tests.</p>

<ul>
<li>If tests depend on each other, their outcome will change with the execution order. This wastes our time in analyzing the results. On top of that, independent unit tests are easy to run in parallel, providing an extra speedup. We lose this potential when our tests are dependent.</li>
<li>Tests that rely on an out-of-process DB run slower. Tests need to start the DB before anything else. Data needs to be setup and cleaned at every test. Accessing the DB implies using the network, which takes time as well. There&rsquo;s also a risk of making the tests dependent by sharing the same DB. A last issue is troubleshooting the DB process when things don&rsquo;t work.</li>
<li>Tests that use the network are slow too ! First, Network is slower than memory. Second, data serialization between processes is slow as well. Finally, these tests are likely to use some form of sleep or polling, which is slow, fragile, or both !</li>
<li>Finally, there is always a scope past which a test will be too slow.</li>
</ul>


<p>This means that not only unit tests are fast, but also that fast tests usually show the features of unit tests.</p>

<p>My guess is that &lsquo;unit tests&rsquo; were explicitly defined as a recipe for fast tests ! If you stick to the definition of unit tests, you&rsquo;ll get fast tests and all their benefits.</p>

<p><img src="../imgs/2017-08-08-forget-unit-tests/speedometer.jpg" alt="A speedometer" /></p>

<h2>Fast tests</h2>

<p>That also means that we should focus first on having fast tests rather than unit tests. Here is my real check to know if tests are fast enough :</p>

<ul>
<li>Is the build (and the tests and everything) less than 10 minutes ?</li>
<li>Can I continuously run my tests while coding and stay in the flow ?</li>
</ul>


<p>If both answers are yes, then I won&rsquo;t question myself too much whether my tests are unit, integration or end to end.</p>

<h2>So what ?</h2>

<p>I&rsquo;ve been experimenting with these heuristics for some time. Side projects are great for experimenting since you don&rsquo;t have a team to convince ! Here are my main takeaways :</p>

<ul>
<li>Stick to end to end tests at the beginning of your project. They are easy to refactor to finer grained tests later on.</li>
<li>In-memory DBs are great to speed tests up without wasting your time with mocking.  We can use a unique DB for every test to keep them independent.</li>
<li>Large scope tests are not an issue provided 2 things.

<ol>
<li>The code contains very few side effects.</li>
<li>It provides good exceptions and assertions messages</li>
</ol>
</li>
</ul>


<p>On the other side, there are things that I still recommend :</p>

<ul>
<li>Independent tests are easy to write from the beginning, difficult to fix later on. As they save a lot of headaches in diagnostic, I stick to them from the start.</li>
<li>Avoid network, it makes the tests slow, fragile and tricky to diagnostic. But please, read <a href="http://philippe.bourgau.net/how-not-to-use-mocks-my-talk-at-paris-rb/">this</a> before jumping to mocks.</li>
</ul>


<p>These rules have served me well, particularly in my side projects, where I don&rsquo;t have a lot of time. What about you ? Do you have your own testing rules ?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't stick to TDD's Red-Green-Refactor loop to the letter]]></title>
    <link href="http://philippe.bourgau.net/dont-stick-to-tdds-red-green-refactor-loop-to-the-letter/"/>
    <updated>2017-06-28T15:52:00+02:00</updated>
    <id>http://philippe.bourgau.net/dont-stick-to-tdds-red-green-refactor-loop-to-the-letter</id>
    <content type="html"><![CDATA[<p>As long as you are writing your tests before your code and doing regular refactoring, you are doing <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> !</p>

<p>The Red &ndash; Green &ndash; Refactor loop is useful to introduce TDD to new developers. Different loops can be more effective in real world situation.</p>

<p>The Red &ndash; Green &ndash; Refactor loop is not a dogma !</p>

<p><a href="http://www.natpryce.com/"><img src="../imgs/2017-06-28-dont-stick-to-tdds-red-green-refactor-loop-to-the-letter/red-green-refactor.jpg" alt="The famous red, green, refactor TDD loop" /></a></p>

<h2>Refactor &ndash; Red &ndash; Green</h2>

<p>When I work on a story, I very often keep a TODO list next to my desk. I use it to keep track of the next steps, the edge cases to test, the code smells and refactorings to do.</p>

<p>When I get to the end of the story, all that remains of this list is a few refactorings. Very often, I don&rsquo;t do them !</p>

<p>With the feature working, doing these refactorings feels like violation of <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a>. Next time we&rsquo;ll have to work on this part of the code, we&rsquo;ll have a story to serve as guide to which refactorings to do.</p>

<p>The same thing is effective at the unit test scale. It&rsquo;s easier to refactor when you know the test you want to add. Refactor to make this test easy to write !</p>

<p>Here is an example with <a href="https://en.wikipedia.org/wiki/Fizz_buzz">Fizz Buzz</a></p>

<p>```java
static int fizzBuzz(int number) {
   return number;
}</p>

<p>@Test public void
it_is_1_for_1() {
   assertThat(fizzBuzz(1)).isEqualTo(1);
}</p>

<p>@Test public void
it_is_2_for_2() {
   assertThat(fizzBuzz(2)).isEqualTo(2);
}
```</p>

<p>Here is the test I&rsquo;d like to add. </p>

<p><code>java
@Test public void
it_is_Fizz_for_3() {
   assertThat(fizzBuzz(3)).isEqualTo("Fizz");
}
</code></p>

<p>Unfortunately, fizzBuzz needs to return a String instead of an integer for it to compile. That&rsquo;s when I would refactor before adding the new test.</p>

<p>```java
static String fizzBuzz(int number) {
   return Integer.toString(number);
}</p>

<p>@Test public void
it_is_1_for_1() {
   assertThat(fizzBuzz(1)).isEqualTo(&ldquo;1&rdquo;);
}</p>

<p>@Test public void
it_is_2_for_2() {
   assertThat(fizzBuzz(2)).isEqualTo(&ldquo;2&rdquo;);
}
```</p>

<p>In the end, this loop is very like the classic TDD loop :</p>

<p><code>
red-green-refactor-red-green-refactor-red-green-refactor.............
..........refactor-red-green-refactor-red-green-refactor-red-green...
</code></p>

<p>A bit more YAGNI, that&rsquo;s all.</p>

<h2>Red &ndash; Better Red &ndash; Green &ndash; Refactor</h2>

<p>A few weeks ago, <a href="/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/">I wrote about error messages in unit tests</a>. To summarize, extra work on error messages reduces the testing feedback loop.</p>

<p>We can translate this focus on error messages into an extra TDD step. Whatever the TDD loop you are using, you can add this step after the Red step.</p>

<h2><del>Red</del> &ndash; Green &ndash; Refactor &ndash; Red &ndash; Green</h2>

<p>Sometimes, it makes sense to refactor before fixing the test. The idea is to rely on the existing tests to prepare the code to fix the new test in one line.</p>

<p>Let&rsquo;s take our Fizz Buzz example again. Imagine we finished the kata, when we decide to tweak the rules and try Fizz Buzz Bang. We should now print Bang on multiples of 7.</p>

<p>Here is our starting point :</p>

<p>```java
static String fizzBuzz(int number) {
   if (multipleOf(number, 3)) {
      return &ldquo;Fizz&rdquo;;
   }
   if (multipleOf(number, 5)) {
      return &ldquo;Buzz&rdquo;;
   }
   if (multipleOf(number, 3*5)) {
      return &ldquo;FizzBuzz&rdquo;;
   }   
   return Integer.toString(number);
}</p>

<p>&hellip;</p>

<p>@Test public void
it_is_Bang_for_7() {
   assertThat(fizzBuzz(7)).isEqualTo(&ldquo;Bang&rdquo;);
}
```</p>

<p>I could go through all the hoops, 7, 14, then 3<em>7, 5</em>7 and finally 3<em>5</em>7 &hellip; By now, I should know the music though !</p>

<p>What I would do in this case is :</p>

<ul>
<li>first to comment the new failing test to get back to green</li>
<li>refactor the code to prepare for the new code</li>
<li>uncomment the failing test</li>
<li>fix it</li>
</ul>


<p>In our example, here is the refactoring I would do</p>

<p>```java
static String fizzBuzz(int number) {
   String result = &ldquo;&rdquo;;
   result += multipleWord(number, 3, &ldquo;Fizz&rdquo;);
   result += multipleWord(number, 5, &ldquo;Buzz&rdquo;);
   if (result.isEmpty()) {
      result = Integer.toString(number);
   }
   return result;
}</p>

<p>private static String multipleWord(int number, int multiple, String word) {
   if (multipleOf(number, multiple)) {
      return word;
   }
   return &ldquo;&rdquo;;
}</p>

<p>&hellip;</p>

<p>//@Test public void
//it_is_Bang_for_7() {
//   assertThat(fizzBuzz(7)).isEqualTo(&ldquo;Bang&rdquo;);
//}
```</p>

<p>From there, fixing the test is dead simple.</p>

<p>In practice I find this loop very useful. At local scale as we saw but it&rsquo;s also a great way to refactor your architecture at larger scale.</p>

<p>One downsize is that if you are not careful, it might lead to over-engineering. Be warned, keep an eye on that !</p>

<p>Last caveat : not all TDD interviewers like this technique &hellip;</p>

<h2>Don&rsquo;t obsess</h2>

<p>It&rsquo;s not because you are not following the Red Green Refactor loop to the letter that you are not doing TDD.</p>

<p>An interesting point is that these variations to the TDD loop are combinable ! Experienced TDD practitioners can jump from one to the other without even noticing.</p>

<p><a href="https://blog.acolyer.org/2017/06/13/a-dissection-of-the-test-driven-development-process-does-it-really-matter-to-test-first-or-test-last/">This paper</a> argues that as long as you write the tests along (before or after) the code, you get the same benefit. That&rsquo;s not going to make me stop writing my tests first, but it is interesting. That would mean that even a Code &ndash; Test &ndash; Refactor loop would be ok if it is fast enough !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[13 Tricks for Successful Side Projects]]></title>
    <link href="http://philippe.bourgau.net/13-tricks-for-successful-side-projects/"/>
    <updated>2017-06-19T18:48:00+02:00</updated>
    <id>http://philippe.bourgau.net/13-tricks-for-successful-side-projects</id>
    <content type="html"><![CDATA[<p>As <a href="/side-projects-matter/">I said last week</a>, I released the v0.1 of <a href="https://philous-planning-poker.herokuapp.com/">Philou&rsquo;s Planning Poker</a>, my latest side project. Although I have a day job, a wife, a family and a mortgage to pay, I still manage to finish my side projects. In the past 7 years, I published 5 of these as open source projects, website, or wannabe businesses.</p>

<p>Side projects rely on 2 things : time and motivation. If motivation goes down, you&rsquo;ll  stop working on it, and it will die. If you don&rsquo;t manage to find enough time for it, it will also die.</p>

<p>Over the years, I accumulated best practices that increase the chances of success. Here is a shortlist of 13 of these.</p>

<p><a href="http://www.commitstrip.com/en/2014/11/25/west-side-project-story/"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/Strip-Side-project.jpg" alt="A comic strip about side projects" /></a></p>

<h2>1. Know your goal</h2>

<p>As I said before, side projects are time constrained. If you try to follow many goals at once, you&rsquo;ll spread too thin and won&rsquo;t deliver anything. That will kill your motivation.</p>

<p>To avoid this, you need to decide on a unique goal for your project. It can be anything : learning a new tech, building a tool, sell a simple product, maintain a blog.</p>

<p>Depending on the nature of your goal, your side project can take different forms. <a href="http://philippe.bourgau.net/how-i-got-my-feet-wet-with-machine-learning-with-the-first-20-hours/">20 hours experiments</a> are great for learning new techs. As a side note, <a href="https://en.wiktionary.org/wiki/MOOC">MOOCs</a> can also be very effective for this. If you want to start a business, start a <a href="http://www.allencheng.com/concierge-mvp/">lean startup concierge MVP</a>. Finally, if you already know users who need a tool, build a minimalistic version for them.</p>

<h2>2. Time box your work</h2>

<p>Time boxing will force you to make the choices that will keep you going forward. The risk is to take on too many topics : more refactoring, more UI polish, more options, more bells and whistles. All these can be very interesting and valuable, but are usually not the main priority.</p>

<p>20 hours programs are time boxes, that&rsquo;s one of the reasons they work. For other kinds of side projects, I do a quarterly prioritization. &ldquo;This is what I&rsquo;d like to have in 3 months&rdquo;. I often slip a bit, but that&rsquo;s not a problem as long as I stay focused on my goal.</p>

<h2>3. Setup a routine</h2>

<p>You&rsquo;ll need to dedicate time to your side project. Think of what you could do if you worked one hour per day to it. 365 hours per year, or 90 hours per quarter ! That&rsquo;s 2 full weeks of work !</p>

<p>In the long run, having a routine is more effective than anything else. After a few weeks of sticking to a routine, it will become part of your daily life, and won&rsquo;t be an effort anymore. It will also help to forecast what you&rsquo;ll be able to do in the coming month or so.</p>

<p>To setup a routine, block a slot in your day to work on your project, and stick to it. My own routine is waking up early to have some focused time. I have entrepreneur friends who did the same. <a href="http://grasshopper.com/">GrassHopper</a> founder says the same in this <a href="https://www.indiehackers.com/podcast/003-david-hauser-of-grasshopper">Indiehacker podcast</a>.</p>

<h2>4. Keep delivering to sustain motivation</h2>

<p>Nothing kills motivation as not delivering. At work, I can go on without user feedback for a while (<a href="/how-long-can-your-inner-drive-last/">not too long though</a>). Unfortunately, that does not work on a time constrained side project. We have only one life and we don&rsquo;t want to spend our time on things that don&rsquo;t matter. Things that don&rsquo;t deliver don&rsquo;t matter &hellip;</p>

<p>To get the technical aspect of delivery out of the picture once and for all, I use <a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1498106027&amp;sr=8-1&amp;keywords=continuous+delivery">Continuous Delivery</a>. Continuous Delivery is pretty easy to start with on a new project :</p>

<ul>
<li>automate all your tests</li>
<li>setup a CI server</li>
<li>deploy when the CI passes</li>
</ul>


<p>Once this is up and running, as long as I split my work in baby steps, I&rsquo;ll be delivering.</p>

<p><a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?tag=pbourgau-20&amp;amp;ie=UTF8&amp;qid=1498106027&amp;sr=8-1&amp;keywords=continuous+delivery"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/continuous-delivery.jpg" alt="The cover of the continuous delivery book" /></a></p>

<h2>5. Use SasS tools</h2>

<p>Setting up a CI and a deployment server can take some time. In 2017 though, online platforms make this very easy. Use as many as you can.</p>

<p>For <a href="https://philous-planning-poker.herokuapp.com/">Philou&rsquo;s Planning Poker</a>, I save my code on <a href="https://github.com/philou/planning-poker">Github</a>, test through <a href="https://travis-ci.org/philou/planning-poker">Travis CI</a> and deploy to <a href="https://dashboard.heroku.com">Heroku</a>. I also use <a href="https://codeclimate.com/github/philou/planning-poker">Code Climate</a> for static code analysis.</p>

<p>Most of these tools have some free plans for small or open source projects. That alone is a great advantage of making your project open source !</p>

<h2>6. Pay for good tools</h2>

<p>If you don&rsquo;t want to make your project open source, consider paying for these services. How much you value your time will tell you whether to buy or not.</p>

<p>There are other things you should pay for as well. I definitely recommend paying for a good laptop and IDE.</p>

<p>Remember, anything that helps you to deliver also helps you to keep your motivation high. You have a day job that earns you money, so use it !</p>

<h2>7. Pick a productive language </h2>

<p>Depending on your project, you&rsquo;ll have a choice in which programming language to use.</p>

<p>Paul Graham advices to <a href="http://www.paulgraham.com/power.html">use dynamic languages</a>. I tend to do the same, especially after watching <a href="https://www.infoq.com/presentations/dynamic-static-typing">&ldquo;The Unreasonable Effectiveness of Dynamic Typing for Practical Programs&rdquo;</a>.</p>

<p><a href="https://www.infoq.com/presentations/dynamic-static-typing"><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/dynamic-typing-pres.jpg" alt="A presentation about dynamic typing" /></a></p>

<p>In the end, I guess it&rsquo;s a matter of personal preference. Pick the language you&rsquo;ll be the most productive with.</p>

<h2>8. Use a popular platform</h2>

<p>Use a popular open source platform to build your side project on. Useless to say, if your goal is to learn X, use X, even if it is not popular !</p>

<p>There are many advantages to using a popular platform :</p>

<ul>
<li>you&rsquo;ll have something that has already been production proofed</li>
<li>you&rsquo;ll suffer less bugs (remember Linus&rsquo;s Law <a href="https://en.wikipedia.org/wiki/Linus%27s_Law">&ldquo;Given enough eyeballs, all bugs are shallow&rdquo;</a>)</li>
<li>you&rsquo;ll get help from the community</li>
<li>you&rsquo;ll find compatible libraries to solve some of your problems</li>
</ul>


<p>The end goal is always the same : sustain your motivation by delivering fast enough !</p>

<h2>9. Walk the edge</h2>

<p>We don&rsquo;t start side project to spend time updating dependencies. The saying goes <a href="https://martinfowler.com/bliki/FrequencyReducesDifficulty.html">&ldquo;If it hurts, do it more often&rdquo;</a>. To save your productivity and motivation, always keep your dependencies up to date.</p>

<p>This is easy with automated test and continuous integration in place. I use no version constraint, but update all dependencies at least every week. I  commit if all tests pass. Sometimes I fall into small 5 to 10 minutes fixes, but that&rsquo;s all it takes.</p>

<h2>10. Take technical debt</h2>

<p>When starting a new side project, you have no ideas how long it will last. Could be one week, for example if you started a 20h experiment at the beginning of holidays. Could also be 20 years, if you managed to transform this side project into a full fledged business.</p>

<p>Starting with all the practices that make large software systems manageable will fail. You won&rsquo;t deliver fast enough. By now, you know the story, if you don&rsquo;t deliver, you&rsquo;ll lose your motivation.</p>

<p>I used <a href="http://philippe.bourgau.net/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"><code>TODO</code> comments</a> in my latest side project to keep track of the shortcut I took. I found it had 2 main advantages in my situation :</p>

<ul>
<li>I had a quick view of how much total technical debt I took</li>
<li>if things get more serious, it will be easy to find improvement points</li>
</ul>


<p>I know that <code>TODO</code> comments are <a href="https://techbeacon.com/useless-comments-can-ruin-code-review-heres-how-erase-them">controversial in the software community</a>. In the context of new side projects though, they make a lot of sense.</p>

<p>My advice is to take technical debt !</p>

<h2>11. Use your day job</h2>

<p>I&rsquo;m not saying to use time from your day job to work on your side project. That would be like stealing. Your day job can help your side project in many other ways.</p>

<p>One I already mentioned is using your income to buy better tools.</p>

<p>If you have <a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack Time</a> at your day job, you could use it to start a side project that benefits your company. You&rsquo;ll need to make sure that this kind of arrangement does not pose any IP issues. It can result in a win-win situation.</p>

<p>Another way is to find subjects at work which will grow some skills that are also useful for your side project.</p>

<h2>12. Talk about it</h2>

<p>Talking about your side project serves many purposes :</p>

<ul>
<li>it&rsquo;s an unofficial engagement to work on it</li>
<li>it provides feedback</li>
<li>it could attract early users</li>
</ul>


<p>To summarize, the more you&rsquo;ll talk about it the more it will become &lsquo;real&rsquo;. You can share your side project anywhere : blog, Meetups, work, with friends or family. Depending on your topic, some places will work better than others.</p>

<p>Don&rsquo;t be afraid that one might steal your idea. A side project is small, not yet rocket science. It&rsquo;s usually too small to be on the radar of serious businesses, and too big for individuals.</p>

<p>Let me explain that. Very few people have the grit to turn their ideas into something real. If you encounter someone who has the grit and the interest, ask her to join forces !</p>

<h2>13. Find real users</h2>

<p>Deploying your software is nice, but it&rsquo;s useless until you have users. Find some ! It&rsquo;s never too early to find testers. If your first demo does not embarrass you, it was too late ! At the beginning, it can be as basic as walking through an unfinished feature to get feedback.</p>

<p>Real user feedback always results in both high motivation and value. There are many places to get beta users : at work, through friends &hellip; have the courage to ask !</p>

<p>That&rsquo;s again a case for building your system in baby steps. The faster you get to something you can show, the faster you can have beta users.</p>

<h2>Do it !</h2>

<p>If I needed a 14th best practice it would be to start today ! As with most things, just do it !</p>

<p><img src="../imgs/2017-06-19-13-tricks-for-successful-side-projects/just-do-it.jpg" alt="Just Do It !" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side Projects Matter]]></title>
    <link href="http://philippe.bourgau.net/side-projects-matter/"/>
    <updated>2017-06-13T09:13:00+02:00</updated>
    <id>http://philippe.bourgau.net/side-projects-matter</id>
    <content type="html"><![CDATA[<p>As a manager, you could benefit a lot from helping your developers with their side projects.</p>

<p>I finished my <a href="https://philous-planning-poker.herokuapp.com/">latest side project</a>. That&rsquo;s the fifth serious one I bring to an end :</p>

<ol>
<li>2010-2014 <a href="/rip-mes-courses-dot-fr/">www.mes-courses.fr</a>, an improved UI for online groceries. This was both a technical project and a wannabe business</li>
<li>Since 2011, <a href="/">this blog</a></li>
<li>2015 <a href="/agileavatars-dot-com-magnets-for-real/">www.agileavatars.com</a>, a custom magnet shop for agile team boards. This was a lean startup style business project</li>
<li>2016 <a href="/verify-the-big-o-complexity-of-ruby-code-in-rspec/">complexity-asserts</a> a unit test matcher to enforce algorithm complexity. This was a technical project time boxed to 20h.</li>
<li>2016-2017 <a href="/planning-poker/">Philou&rsquo;s Planning Poker</a>, a technical product, that I built to solve my own problem.</li>
</ol>


<p>The more I do side projects, the more I am certain of their value to my employer.</p>

<p><img src="../imgs/2017-06-13-side-projects-matter/side-project.jpg" alt="Hand drawing with stating 'creative business idea'" /><div class="image-credits"><a href='http://fr.freepik.com/vecteurs-libre/dessines-a-la-main-business-icons_769576.htm'>Designed by Freepik</a></div></p>

<h2>Reasons companies discourage side projects</h2>

<p>Unfortunately, most companies discourage their employees to have side projects. It boils down to fundamental fears :</p>

<ul>
<li>they might get less done</li>
<li>they might leave</li>
</ul>


<p>While these are legitimate, most of the time, they are also unlikely or short sighted.</p>

<h3>Why don&rsquo;t they work extra hours ?</h3>

<p>Said another way : if developers want to code, why don&rsquo;t they add new features to the company&rsquo;s products ?</p>

<p>From my own experience, having a side project has always been an <a href="/is-there-any-room-for-the-not-passionate-developer/">energy booster</a>. Side projects have made me more effective at work !</p>

<p>For a compulsive hacker, a side project is a hobby ! As painting, piano or soccer is to others. Working on smaller software, being in full control, renews the joy of programming.</p>

<h3>They&rsquo;ll quit once they&rsquo;ve learned new skills !</h3>

<p>Simply said, if a company&rsquo;s retention strategy is to deprecate its developers &hellip; It&rsquo;s got problems a lot worse than a few people doing side projects at night !</p>

<h3>They won&rsquo;t be as productive !</h3>

<p>You could think that developers will be less focused on the company&rsquo;s issues while at work. Indeed, passionate side-project hackers always have it on top of their heads.</p>

<p>Most of the time though, the extra energy provided by the side project out-weights this focus loss.</p>

<p>In the end, we should trust people to be professional. Let&rsquo;s deal with the problem later, when someone actually starts to underdeliver.</p>

<h3>They&rsquo;ll leave if it turns into a successful product !</h3>

<p>Building a product company is pretty damn hard. A time starved side project is pretty unlikely to turn into a successful business. Not much to worry about here ! If it happens, the company is lucky to have had such a productive employee.</p>

<h3>They might steal our intellectual property !</h3>

<p>This one is true. Only a very small minority of people might do that, but the risk remains.</p>

<p>You might conclude that it&rsquo;s easier to play it safe and prohibit side projects &hellip; at the same time, it&rsquo;s always sad to punish the majority for a minority&rsquo;s bad behavior.</p>

<p>It boils down to a tradeoff between risks and rewards. How sensible the company is to IP theft vs the benefits of having a side-project friendly policy.</p>

<p>If you are wondering what these benefits are, read on !</p>

<h2>Side projects made me a more valuable employee</h2>

<p>As developers, side project teach us a lot. What is less obvious, is how these new skills benefit our employers !</p>

<h3>Keep up with technology</h3>

<p>A side project is an occasion to work on any subject, with any technology we want. That&rsquo;s the perfect time to try that latest <a href="https://colorlib.com/wp/javascript-frameworks/">JS</a> framework we cannot use at work.</p>

<p>This will help us and our companies to transition to these new technologies in the future.</p>

<p>Experimenting different platforms also widens our horizons. It teaches us new ways of addressing problems in our daily stack. For examples, learning <a href="https://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special">LISP macros</a> pushed me to use lambdas to create new control structures in Java, C++ or C#.</p>

<p>The conclusion is that side projects make people more productive and adaptive. Which in turn makes companies more productive and resilient</p>

<h3>Understand what technical debt is</h3>

<p><img src="../imgs/2017-06-13-side-projects-matter/iceberg-technical-debt.jpg" alt="A technical debt iceberg" /><div class="image-credits"><a href='https://www.vectorcast.com/testing-solutions/technical-debt-legacy-code'>Image from Vector Software</a></div></p>

<p>The bottleneck in a side project is always time. In this context, to deliver fast enough to keep my motivation high, I tend to take technical debt. Particularly because I ignore how long I&rsquo;ll be maintaining this code.</p>

<p>Even so, if I later decide to stick to this side project, this technical debt will be an issue.</p>

<p>That&rsquo;s what technical debt is : a conscious choice to cut a corner and fix it later. Without keeping track of the cut corners, it&rsquo;s not debt anymore, but crappy code ! That&rsquo;s why I ended up using <a href="/a-seamless-way-to-keep-track-of-technical-debt-in-your-source-code/"><code>#TODO</code> comments</a> in my side projects.</p>

<p>Later down the road, at any moment, I can decide to invest in refactoring some technical debt out. We can apply the exact same principles at our day jobs.</p>

<h3>Understanding what a business is</h3>

<p>Trying to make money from your side project taught me other kind of lessons. To sell my product or service, I had to learn a ton of other skills than the typical developer has. Nothing will sell without marketing or sales. I also had to dip my toes in design, web content creation and project management.</p>

<p>Once I went through this, I was able to better understand a big picture at work. It became easier to discuss with product, project and sales people. I&rsquo;m able to make better tradeoffs between engineering, product and technical debt. Non technical colleagues appreciate that. As developers, it increases our value and trustworthiness.</p>

<h3>Discover new ways of doing things</h3>

<p>While progressing towards my own side project goals, I had to search the internet for help on some tasks. I ended up using SaaS tools, and discovered alternate practices to the ones I was using in my daily job.</p>

<p>That&rsquo;s great for employers ! Developers will gain perspective about which company processes work well and which don&rsquo;t. If you have some form of continuous improvement in place at work, they&rsquo;ll suggest great ideas ! If you don&rsquo;t, then you should <a href="/how-we-introduced-efficient-agile-retrospectives/">start doing retrospectives</a> now !</p>

<h2>Companies should sponsor side projects</h2>

<p>I hope I convinced you that side projects are at least as efficient as a formal training. The topics are unknown at the beginning, but that&rsquo;s the trick : they deal with the <a href="https://en.wikipedia.org/wiki/There_are_known_knowns">unknown unknowns</a> !</p>

<p>There are many ways a company can help its employees with their side projects :</p>

<ul>
<li><a href="http://www.jamesshore.com/Agile-Book/slack.html">Slack time</a> is a great way to spark the interest in a topic. Developers might start something in their slack time, and continue as a side project. Provided the topic as value for the company, they could continue using their Slack time on it.</li>
<li>Hosting a <a href="https://startupweekend.org/">Startup Weekend</a> or a <a href="https://en.wikipedia.org/wiki/Hackathon">Hackathon</a>. Most company offices are empty on Saturdays and Sundays. You could ask your company to lend its premises for such an event. It&rsquo;s very likely that some employees will take part.</li>
<li>Even better, some companies, like <a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/">Spotify</a>, organize regular Hackathons <em>on office hours</em> ! That&rsquo;s Slack time, on steroids !</li>
<li>Sponsoring internal communities can enable employees with side-projects to help each other. Sponsorship could be free lunch, premises or a regular small slice of time on work hours.</li>
<li>Providing a clear legal framework around side projects reduces the risks for everyone. Questions like the ownership of intellectual property are better dealt with upfront.</li>
</ul>


<p><a href="https://labs.spotify.com/2013/02/15/organizing-a-hack-week/"><img src="../imgs/2017-06-13-side-projects-matter/spotify-hackathon.jpg" alt="A photo of Spotify's open space during a Hackathon" /></a></p>

<p>If you are a developer looking for a side project idea, suggest slack time in retrospective ! You could also ask for sponsorship and organize a startup week-end or a lunch time community.</p>

<p>Finally, if your company is side-project friendly, communicate about it ! It&rsquo;s a great selling point and it will attract great programmers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed up the TDD feedback loop with better assertion messages]]></title>
    <link href="http://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages/"/>
    <updated>2017-05-29T06:37:00+02:00</updated>
    <id>http://philippe.bourgau.net/speed-up-the-tdd-feedback-loop-with-better-assertion-messages</id>
    <content type="html"><![CDATA[<p>There is a rather widespread <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> practice to have a <a href="https://softwareengineering.stackexchange.com/questions/7823/is-it-ok-to-have-multiple-asserts-in-a-single-unit-test">single assertion per test</a>. The goal is to have faster feedback loop while coding. When a test fails, it can be for a single reason, making the diagnostic faster.</p>

<p>The same goes with the test names. When a test fails, a readable test name in the report simplifies the diagnostic. Some testing frameworks allow the use of plain strings as test names. In others, people use <a href="https://en.wikipedia.org/wiki/Naming_convention_(programming">underscores</a>#Multiple-word_identifiers) instead of <a href="https://en.wikipedia.org/wiki/Camel_case">CamelCase</a> in test names.</p>

<p><img src="../imgs/2017-05-29-speed-up-the-tdd-feedback-loop-with-better-assertion-messages/rubymine.jpg" alt="RubyMine test report" /></p>

<h2>A 4th step in TDD: Fail, <em>Fail better</em>, Pass, Refactor</h2>

<h3>First, make it fail</h3>

<p>Everyone knows that Test Driven Development starts by making the test fail. Let me illustrate why.</p>

<p>A few years ago, I was working on a <a href="https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29">C#</a> project. We were using TDD and <a href="https://github.com/nunit/nunit">NUnit</a>. At some point, while working on a story, I forgot to make my latest test fail. I wrote some code to pass this test, I ran the tests, and they were green. When I was almost done, I tried to plug all the parts together, but nothing was working. I had to start the debugger to understand what was going wrong. At first, I could not understand why the exact thing I had unit tested earlier was now broken. After more investigation I discovered that I had forgotten to make my test public. NUnit only runs public tests &hellip;</p>

<p>If I had made sure my test was failing, I would have spotted straightaway that it was not ran.</p>

<h3>Then make it fail &hellip; better !</h3>

<p>I lived the same kind of story with wrong failures many times. The test fails, but for a bad reason. I move on to implement the code to fix it &hellip; but it still does not pass ! Only then do I check the error message and discover the real thing to fix. Again, it&rsquo;s a transgression to baby steps and to the <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a> principle. If the tests is small, that might not be too much of an issue. But it can be if the test is big, or if the real fix deprecates all the premature work.</p>

<h3>Strive for explicit error message</h3>

<p>The idea is to make sure to have good enough error messages before moving on to the &ldquo;pass&rdquo; step.</p>

<p><a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests"><img src="../imgs/2017-05-29-speed-up-the-tdd-feedback-loop-with-better-assertion-messages/growing.jpg" alt="Cover of GOOSGT" /></a></p>

<p>There&rsquo;s nothing groundbreaking about this practice. It&rsquo;s not a step as explicit as the other 3 steps of TDD. The first place I read about this idea was in <a href="https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?tag=pbourgau-20&amp;amp;s=books&amp;ie=UTF8&amp;qid=1495080583&amp;sr=1-1&amp;keywords=growing+object-oriented+software+guided+by+tests">Growing Object Oriented Software Guided By Tests</a>.</p>

<h2>How to improve your messages</h2>

<h3>Readable code</h3>

<p>Some test frameworks print out the failed assertion code to the test failure report. Others, especially in dynamic languages, use the assertion code itself to deduce an error message. If your test code is readable enough, your error messages might be as well !</p>

<p>For example, with <a href="https://www.ruby-lang.org">Ruby</a> <a href="http://rspec.info/">RSpec</a> testing framework :</p>

<p><code>ruby
it "must have an ending" do
  expect(Vote.new(team: @daltons)).to be_valid
end
</code></p>

<p>Yield the following error :</p>

<p>```
expected #<Vote ...> to be valid, but got errors: Ending can&rsquo;t be blank</p>

<p>```</p>

<h3>Pass in a message argument</h3>

<p>Sometimes, readable code is not enough to provide good messages. All testing frameworks I know provide some way to pass in a custom error message. That&rsquo;s often a cheap and straightforward way to clarify your test reports.</p>

<p>```ruby
  it &ldquo;should not render anything&rdquo; do</p>

<pre><code>post_create
expect(response.code).to eq(HTTP::Status::OK.to_s),
                         "expected the post to succeed, but got http status #{response.code}"
</code></pre>

<p>  end
```</p>

<p>Yields</p>

<p><code>
expected the post to succeed, but got http status 204
</code></p>

<h3>Define your own matchers</h3>

<p>The drawback with explicit error message is that they harm code readability. If this becomes too much of an issue, one last solution is the use of <a href="https://objectpartners.com/2013/09/18/the-benefits-of-using-assertthat-over-other-assert-methods-in-unit-tests/">test matchers</a>. A test matcher is a class encapsulating assertion code. The test framework provides a fluent api to bind a matcher with the actual and expected values. Almost all test framework support some flavor of these. If not, or if you want more, there are libraries that do :</p>

<ul>
<li><a href="http://joel-costigliola.github.io/assertj/index.html">AssertJ</a> is a fluent assertion library for Java. You can easily extend it with your own assertions (ie. matchers)</li>
<li><a href="http://n-fluent.net/">NFluent</a> is the same thing for .Net.</li>
</ul>


<p>As an example, in a past side project, I defined an <a href="https://github.com/philou/mes-courses/blob/master/spec/support/include_all_matcher.rb">include_all</a> rspec matcher that verifies that many elements are present in a collection. It can be used that way :</p>

<p><code>ruby
expect(items).to include_all(["Tomatoes", "Bananas", "Potatoes"])
</code></p>

<p>It yields error messages like</p>

<p><code>
["Bananas", "Potatoes"] are missing
</code></p>

<p>A custom matcher is more work, but it provides both readable code and clean error messages.</p>

<h2>Other good points of matchers</h2>

<p>Like any of these 3 tactics, matchers provide better error messages. Explicit error messages, in turn, speed up the diagnostic on regression. In the end, faster diagnostic means easier maintenance.</p>

<p>But there&rsquo;s more awesomness in custom test matchers !</p>

<h3>Adaptive error messages</h3>

<p>In a custom matcher, you have to write code to generate the error message. This means we can add logic there ! It&rsquo;s an opportunity to build more detailed error messages.</p>

<p>This can be particularly useful when testing recursive (tree-like) structures. A few years ago, I wrote an rspec matcher library called <a href="https://github.com/philou/xpath-specs">xpath-specs</a>. It checks html views for the presence of recursive XPath. Instead of printing</p>

<p><code>
Could not find //table[@id="grades"]//span[text()='Joe'] in ...
</code></p>

<p>It will print</p>

<p><code>
Could find //table[@id="grades"] but not //table[@id="grades"]//span[text()='Joe'] in ...
</code></p>

<p>(BTW, I&rsquo;m still wondering if testing views this way is a good idea &hellip;)</p>

<h3>Test code reuse</h3>

<p>One of the purpose of custom test matchers is to be reusable. That&rsquo;s a good place to factorize assertion code. It is both more readable and more organized than extracting an assertion method.</p>

<h3>Better coverage</h3>

<p>I noticed that custom matcher have a psychological effect on test coverage ! A matcher is a place to share assertion code. Adding thorough assertions seems legitimate, contrary to repeating them inline.</p>

<h3>Avoids mocking</h3>

<p>We often resort to mocks instead of side effect tests because it&rsquo;s a lot shorter. A custom matcher encapsulates the assertion code. It makes it OK to use a few assertions to test for side effects, which is usually preferable to mocking.</p>

<p>For example, here is a matcher that checks that our remote service API received the correct calls, without doing any mocking.</p>

<p>```ruby
RSpec::Matchers.define :have_received_order do |cart, credentials|
  match do |api|</p>

<pre><code>not api.nil? and
api.login == credentials.email and
api.password == credentials.password and
cart.lines.all? do |cart_line|
  cart.content.include?(cart_line.item.remote_id)
end
</code></pre>

<p>  end</p>

<p>  failure_message do |api|</p>

<pre><code>"expected #{api.inspect} to have received order #{cart.inspect} from #{credentials}"
</code></pre>

<p>  end
end
```</p>

<h2>Care about error messages</h2>

<p>Providing good error messages is a small effort compared to unit testing in general. At the same time, it speeds up the feedback loop, both while coding and during later maintenance. Imagine how easier it would be to analyze and fix regressions if they all had clear error messages !</p>

<p>Spread the word ! Leave comments in code reviews, demo the practice to your pair buddy. Prepare a team coding dojo about custom assertion matchers. Discuss the issue in a retro !</p>

<p><img src="../imgs/2017-05-29-speed-up-the-tdd-feedback-loop-with-better-assertion-messages/just-do-it.jpg" alt="'Just Do It' written on a board" /></p>
]]></content>
  </entry>
  
</feed>
